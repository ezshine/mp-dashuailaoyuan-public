{"_id":{"$oid":"61aa383d291c0100017ee116"},"exerciseKey":"00146aa9-9e0e-4217-a99e-9404476520a1","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\n// 🎉✨ This is my 100th question! ✨🎉\n\nconst output = `${[] && 'Im'}possible!\nYou should${'' && `n't`} see a therapist after so much JavaScript lol`\n```","options":"{\"options\":[\"possible! You should see a therapist after so much JavaScript lol\",\"Impossible! You should see a therapist after so much JavaScript lol\",\"possible! You shouldn't see a therapist after so much JavaScript lol\",\"Impossible! You shouldn't see a therapist after so much JavaScript lol\"],\"isMulti\":false,\"answer\":[1]}","explanation":"`[]`是一个真值。 使用`&&`运算符，如果左侧值是真值，则返回右侧值。 在这种情况下，左侧值`[]`是一个真值，所以返回`Im`。\n`\"\"`是一个假值。 如果左侧值是假的，则不返回任何内容。 `n't`不会被退回。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa383e54ebf60001a1a31a"},"exerciseKey":"03d5dfc7-9bb9-4129-9145-b4da4d4fa11f","category":"QA","renderType":"md","title":"说说webpack proxy工作原理？为什么能解决跨域?","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/5b871600-ace5-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n`webpack proxy`，即`webpack`提供的代理服务\n\n基本行为就是接收客户端发送的请求后转发给其他服务器\n\n其目的是为了便于开发者在开发模式下解决跨域问题（浏览器安全策略限制）\n\n想要实现代理首先需要一个中间服务器，`webpack`中提供服务器的工具为`webpack-dev-server`\n\n#### webpack-dev-server\n\n`webpack-dev-server`是 `webpack` 官方推出的一款开发工具，将自动编译和自动刷新浏览器等一系列对开发友好的功能全部集成在了一起\n\n目的是为了提高开发者日常的开发效率，**只适用在开发阶段**\n\n关于配置方面，在`webpack`配置对象属性中通过`devServer`属性提供，如下：\n\n```js\n// ./webpack.config.js\nconst path = require('path')\n\nmodule.exports = {\n    // ...\n    devServer: {\n        contentBase: path.join(__dirname, 'dist'),\n        compress: true,\n        port: 9000,\n        proxy: {\n            '/api': {\n                target: 'https://api.github.com'\n            }\n        }\n        // ...\n    }\n}\n```\n\n`devServetr`里面`proxy`则是关于代理的配置，该属性为对象的形式，对象中每一个属性就是一个代理的规则匹配\n\n属性的名称是需要被代理的请求路径前缀，一般为了辨别都会设置前缀为` /api`，值为对应的代理匹配规则，对应如下：\n\n- target：表示的是代理到的目标地址\n- pathRewrite：默认情况下，我们的 /api-hy 也会被写入到URL中，如果希望删除，可以使用pathRewrite\n- secure：默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false\n- changeOrigin：它表示是否更新代理后请求的 headers 中host地址\n\n\n\n\n\n## 二、工作原理\n\n `proxy`工作原理实质上是利用`http-proxy-middleware` 这个`http`代理中间件，实现请求转发给其他服务器\n\n举个例子：\n\n在开发阶段，本地地址为`http://localhost:3000`，该浏览器发送一个前缀带有`/api`标识的请求到服务端获取数据，但响应这个请求的服务器只是将请求转发到另一台服务器中\n\n```js\nconst express = require('express');\nconst proxy = require('http-proxy-middleware');\n\nconst app = express();\n\napp.use('/api', proxy({target: 'http://www.example.org', changeOrigin: true}));\napp.listen(3000);\n\n// http://localhost:3000/api/foo/bar -> http://www.example.org/api/foo/bar\n```\n\n\n\n## 三、跨域\n\n在开发阶段， `webpack-dev-server` 会启动一个本地开发服务器，所以我们的应用在开发阶段是独立运行在 `localhost `的一个端口上，而后端服务又是运行在另外一个地址上\n\n所以在开发阶段中，由于浏览器同源策略的原因，当本地访问后端就会出现跨域请求的问题\n\n通过设置`webpack proxy`实现代理请求后，相当于浏览器与服务端中添加一个代理者\n\n当本地发送请求的时候，代理服务器响应该请求，并将请求转发到目标服务器，目标服务器响应数据后再将数据返回给代理服务器，最终再由代理服务器将数据响应给本地\n\n ![](https://static.vue-js.com/65b5e5c0-ace5-11eb-85f6-6fac77c0c9b3.png)\n\n在代理服务器传递数据给本地浏览器的过程中，两者同源，并不存在跨域行为，这时候浏览器就能正常接收数据\n\n注意：**服务器与服务器之间请求数据并不会存在跨域行为，跨域行为是浏览器安全策略限制**\n\n","level":3,"tagId":28}
{"_id":{"$oid":"61aa38400d111e00010371ac"},"exerciseKey":"0735b620-52b9-441a-9298-7dc2b54d2ef0","category":"QA","renderType":"md","title":"Javascript中如何实现函数缓存？函数缓存有哪些应用场景？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/2ae9dda0-85fa-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、是什么\n\n函数缓存，就是将函数运算过的结果进行缓存\n\n本质上就是用空间（缓存存储）换时间（计算过程）\n\n常用于缓存数据计算结果和缓存对象\n\n```js\nconst add = (a,b) => a+b;\nconst calc = memoize(add); // 函数缓存\ncalc(10,20);// 30\ncalc(10,20);// 30 缓存\n```\n\n缓存只是一个临时的数据存储，它保存数据，以便将来对该数据的请求能够更快地得到处理\n\n\n\n## 二、如何实现\n\n实现函数缓存主要依靠闭包、柯里化、高阶函数，这里再简单复习下：\n\n### 闭包\n\n闭包可以理解成，函数 + 函数体内可访问的变量总和\n\n```js\n(function() {\n    var a = 1;\n    function add() {\n        const b = 2\n        let sum = b + a\n        console.log(sum); // 3\n    }\n    add()\n})()\n```\n\n`add `函数本身，以及其内部可访问的变量，即 `a = 1 `，这两个组合在⼀起就形成了闭包\n\n\n\n### 柯里化\n\n把接受多个参数的函数转换成接受一个单一参数的函数\n\n```js\n// 非函数柯里化\nvar add = function (x,y) {\n    return x+y;\n}\nadd(3,4) //7\n\n// 函数柯里化\nvar add2 = function (x) {\n    //**返回函数**\n    return function (y) {\n        return x+y;\n    }\n}\nadd2(3)(4) //7\n```\n\n将一个二元函数拆分成两个一元函数\n\n\n\n### 高阶函数\n\n通过接收其他函数作为参数或返回其他函数的函数\n\n```js\nfunction foo(){\n  var a = 2;\n\n  function bar() {\n    console.log(a);\n  }\n  return bar;\n}\nvar baz = foo();\nbaz();//2\n```\n\n函数 `foo` 如何返回另一个函数 `bar`，`baz` 现在持有对 `foo` 中定义的`bar` 函数的引用。由于闭包特性，`a`的值能够得到\n\n\n\n下面再看看如何实现函数缓存，实现原理也很简单，把参数和对应的结果数据存在一个对象中，调用时判断参数对应的数据是否存在，存在就返回对应的结果数据，否则就返回计算结果\n\n如下所示\n\n```js\nconst memoize = function (func, content) {\n  let cache = Object.create(null)\n  content = content || this\n  return (...key) => {\n    if (!cache[key]) {\n      cache[key] = func.apply(content, key)\n    }\n    return cache[key]\n  }\n}\n```\n\n调用方式也很简单\n\n```js\nconst calc = memoize(add);\nconst num1 = calc(100,200)\nconst num2 = calc(100,200) // 缓存得到的结果\n```\n\n过程分析：\n\n- 在当前函数作用域定义了一个空对象，用于缓存运行结果\n- 运用柯里化返回一个函数，返回的函数由于闭包特性，可以访问到`cache`\n- 然后判断输入参数是不是在`cache`的中。如果已经存在，直接返回`cache`的内容，如果没有存在，使用函数`func`对输入参数求值，然后把结果存储在`cache`中\n\n\n\n## 三、应用场景\n\n虽然使用缓存效率是非常高的，但并不是所有场景都适用，因此千万不要极端的将所有函数都添加缓存\n\n以下几种情况下，适合使用缓存：\n\n- 对于昂贵的函数调用，执行复杂计算的函数\n- 对于具有有限且高度重复输入范围的函数\n- 对于具有重复输入值的递归函数\n- 对于纯函数，即每次使用特定输入调用时返回相同输出的函数\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa3842ff0573000165b1f7"},"exerciseKey":"0e5e7b73-c27f-4e4f-a8ff-c39927175a55","category":"QA","renderType":"md","title":"合并K个升序链表","desc":"给你一个链表数组，每个链表都已经按升序排列。\n\n请你将所有链表合并到一个升序链表中，返回合并后的链表。\n\n示例 1：\n```\n输入：lists = [[1,4,5],[1,3,4],[2,6]]\n输出：[1,1,2,3,4,4,5,6]\n解释：链表数组如下：\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n将它们合并到一个有序链表中得到。\n1->1->2->3->4->4->5->6\n```\n\n示例 2：\n\n```\n输入：lists = []\n输出：[]\n```\n\n示例 3：\n\n```\n输入：lists = [[]]\n输出：[]\n```\n\n提示：\n\n* k == lists.length\n* 0 <= k <= 10^4\n* 0 <= lists[i].length <= 500\n* -10^4 <= lists[i][j] <= 10^4\n* lists[i] 按 升序 排列\n* lists[i].length 的总和不超过 10^4\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n\n};\n```","options":null,"explanation":"```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    if (lists.length === 0) return null;\n    return mergeArr(lists);\n};\nfunction mergeArr(lists) {\n    if (lists.length <= 1) return lists[0];\n    let index = Math.floor(lists.length / 2);\n    const left = mergeArr(lists.slice(0, index))\n    const right = mergeArr(lists.slice(index));\n    return merge(left, right);\n}\nfunction merge(l1, l2) {\n    if (l1 == null && l2 == null) return null;\n    if (l1 != null && l2 == null) return l1;\n    if (l1 == null && l2 != null) return l2;\n    let newHead = null, head = null;\n    while (l1 != null && l2 != null) {\n        if (l1.val < l2.val) {\n            if (!head) {\n                newHead = l1;\n                head = l1;\n            } else {\n                newHead.next = l1;\n                newHead = newHead.next;\n            }\n            l1 = l1.next;\n        } else {\n            if (!head) {\n                newHead = l2;\n                head = l2;\n            } else {\n                newHead.next = l2;\n                newHead = newHead.next;\n            }\n            l2 = l2.next;\n        }\n    }\n    newHead.next = l1 ? l1 : l2;\n    return head;\n}\n```\n","level":4,"tagId":31}
{"_id":{"$oid":"61aa38438e97d90001808663"},"exerciseKey":"125134e6-1cc2-460b-9770-60d464365e89","category":"QA","renderType":"md","title":"手写一个 jsonp","desc":null,"options":null,"explanation":"```js\nfunction jsonp(url, params, callback) {\n  // 判断是否含有参数\n  let queryString = url.indexOf(\"?\") === \"-1\" ? \"?\" : \"&\";\n\n  // 添加参数\n  for (var k in params) {\n    if (params.hasOwnProperty(k)) {\n      queryString += k + \"=\" + params[k] + \"&\";\n    }\n  }\n\n  // 处理回调函数名\n  let random = Math.random()\n      .toString()\n      .replace(\".\", \"\"),\n    callbackName = \"myJsonp\" + random;\n\n  // 添加回调函数\n  queryString += \"callback=\" + callbackName;\n\n  // 构建请求\n  let scriptNode = document.createElement(\"script\");\n  scriptNode.src = url + queryString;\n\n  window[callbackName] = function() {\n    // 调用回调函数\n    callback(...arguments);\n\n    // 删除这个引入的脚本\n    document.getElementsByTagName(\"head\")[0].removeChild(scriptNode);\n  };\n\n  // 发起请求\n  document.getElementsByTagName(\"head\")[0].appendChild(scriptNode);\n}\n```","level":3,"tagId":26}
{"_id":{"$oid":"61aa384391a75000018d2c31"},"exerciseKey":"12d1bf82-0196-45ec-bfa4-7e71fdeeb632","category":"QA","renderType":"md","title":"Typescript中never 和 void 的区别？","desc":null,"options":null,"explanation":"* void 表示没有任何类型（可以被赋值为 null 和 undefined）。\n* never 表示一个不包含值的类型，即表示永远不存在的值。\n* 拥有 void 返回值类型的函数能正常运行。拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常。","level":1.5,"tagId":19}
{"_id":{"$oid":"61aa384554ebf60001a1a346"},"exerciseKey":"180f752e-370b-447e-b755-6d004f8f0db0","category":"QA","renderType":"md","title":"CSS优化、提高性能的方法有哪些？","desc":null,"options":null,"explanation":"* 避免过度约束\n* 避免后代选择符\n* 避免链式选择符\n* 使用紧凑的语法\n* 避免不必要的命名空间\n* 避免不必要的重复\n* 最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么\n* 避免！important，可以选择其他选择器\n* 尽可能的精简规则，你可以合并不同类里的重复规则","level":2,"tagId":20}
{"_id":{"$oid":"61aa38460d111e00010371da"},"exerciseKey":"1b2049cf-9800-420d-b4f3-09238226d162","category":"QA","renderType":"md","title":"npm 是什么？","desc":null,"options":null,"explanation":"npm是Node.js的包管理工具，它的诞生也极大的促进了前端的发展，在现代前端开发中都离不开npm的身影。\n\n常见的使用场景有以下几种：\n\n* 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n* 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n* 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n","level":1,"tagId":18}
{"_id":{"$oid":"61aa3846d00c060001bf1185"},"exerciseKey":"1d87535d-c1c8-4c6e-b6f5-583c80193217","category":"QA","renderType":"md","title":"instanceof能否判断基本数据类型？","desc":null,"options":null,"explanation":"能。比如下面这种方式:\n\n```js\nclass PrimitiveNumber {\n    static [Symbol.hasInstance](x) {\n        return typeof x === 'number'\n    }\n}\nconsole.log(111 instanceof PrimitiveNumber) // true\n\n```\n\n其实就是自定义instanceof行为的一种方式，这里将原有的instanceof方法重定义，换成了typeof，因此能够判断基本数据类型。\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa384791a75000018d2c4f"},"exerciseKey":"1e01a341-f1c4-490b-966d-32433edd42bf","category":"QA","renderType":"md","title":"React中为什么要给组件设置 key？","desc":null,"options":null,"explanation":"在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。\n\n在 React Diff 算法中React 会借助元素的 Key 值来判断该元素是新创建的还是被移动而来的元素，从而减少不必要的元素重新渲染。\n\n此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系。\n","level":1,"tagId":13}
{"_id":{"$oid":"61aa3849cd02c30001dd21af"},"exerciseKey":"286f67d3-4e8d-48f5-962a-ed9cccc46335","category":"QA","renderType":"md","title":"CSS中的 “flex:1;” 是什么意思？","desc":null,"options":null,"explanation":"flex 是 flex-grow, flex-shrink 和 flex-basis的简写。\n\n除了auto (1 1 auto) 和 none (0 0 auto)这两个快捷值外，还有以下设置方式：\n\n* 当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，如下是等同的：\n\n```css\n.item {flex: 1;}\n.item {\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: 0%;\n}\n```\n\n* 当 flex 取值为 0 时，对应的三个值分别为 0 1 0%\n\n```css\n.item {flex: 0;}\n.item {\n    flex-grow: 0;\n    flex-shrink: 1;\n    flex-basis: 0%;\n}\n```\n\n* 当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）\n\n```css\n.item-1 {flex: 0%;}\n.item-1 {\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: 0%;\n}\n\n.item-2 {flex: 24px;}\n.item-2 {\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: 24px;\n}\n```\n\n* 当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的：\n\n```css\n.item {flex: 2 3;}\n.item {\n    flex-grow: 2;\n    flex-shrink: 3;\n    flex-basis: 0%;\n}\n```\n\n* 当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1，如下是等同的：\n\n```\n.item {flex: 11 32px;}\n.item {\n    flex-grow: 11;\n    flex-shrink: 1;\n    flex-basis: 32px;\n}\n```\n","level":1,"tagId":11}
{"_id":{"$oid":"61aa384aff0573000165b230"},"exerciseKey":"2b415f44-7a22-4e74-bef4-1b7c09e170d4","category":"QA","renderType":"md","title":"说说对Nodejs中的事件循环机制理解?","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/e0faf3c0-c90e-11eb-ab90-d9ae814b240d.png)\n\n\n## 一、是什么\n\n在[浏览器事件循环](https://github.com/febobo/web-interview/issues/73)中，我们了解到`javascript`在浏览器中的事件循环机制，其是根据`HTML5`定义的规范来实现\n\n而在`NodeJS`中，事件循环是基于`libuv`实现，`libuv`是一个多平台的专注于异步IO的库，如下图最右侧所示：\n\n ![](https://static.vue-js.com/ea690b90-c90e-11eb-85f6-6fac77c0c9b3.png)\n\n上图`EVENT_QUEUE` 给人看起来只有一个队列，但`EventLoop`存在6个阶段，每个阶段都有对应的一个先进先出的回调队列\n\n\n## 二、流程\n\n上节讲到事件循环分成了六个阶段，对应如下：\n\n ![](https://static.vue-js.com/f2e34d80-c90e-11eb-ab90-d9ae814b240d.png)\n\n- timers阶段：这个阶段执行timer（setTimeout、setInterval）的回调\n- 定时器检测阶段(timers)：本阶段执行 timer 的回调，即 setTimeout、setInterval 里面的回调函数\n- I/O事件回调阶段(I/O callbacks)：执行延迟到下一个循环迭代的 I/O 回调，即上一轮循环中未被执行的一些I/O回调\n- 闲置阶段(idle, prepare)：仅系统内部使用\n- 轮询阶段(poll)：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞\n- 检查阶段(check)：setImmediate() 回调函数在这里执行\n- 关闭事件回调阶段(close callback)：一些关闭的回调函数，如：socket.on('close', ...)\n\n每个阶段对应一个队列，当事件循环进入某个阶段时, 将会在该阶段内执行回调，直到队列耗尽或者回调的最大数量已执行, 那么将进入下一个处理阶段\n\n除了上述6个阶段，还存在`process.nextTick`，其不属于事件循环的任何一个阶段，它属于该阶段与下阶段之间的过渡, 即本阶段执行结束, 进入下一个阶段前, 所要执行的回调，类似插队\n\n流程图如下所示：\n\n ![](https://static.vue-js.com/fbe731d0-c90e-11eb-ab90-d9ae814b240d.png)\n\n在`Node`中，同样存在宏任务和微任务，与浏览器中的事件循环相似\n\n微任务对应有：\n\n- next tick queue：process.nextTick\n- other queue：Promise的then回调、queueMicrotask\n\n宏任务对应有：\n\n- timer queue：setTimeout、setInterval\n- poll queue：IO事件\n- check queue：setImmediate\n- close queue：close事件\n\n其执行顺序为：\n\n- next tick microtask queue\n- other microtask queue\n- timer queue\n- poll queue\n- check queue\n- close queue\n\n\n\n## 三、题目\n\n通过上面的学习，下面开始看看题目\n\n```js\nasync function async1() {\n    console.log('async1 start')\n    await async2()\n    console.log('async1 end')\n}\n\nasync function async2() {\n    console.log('async2')\n}\n\nconsole.log('script start')\n\nsetTimeout(function () {\n    console.log('setTimeout0')\n}, 0)\n\nsetTimeout(function () {\n    console.log('setTimeout2')\n}, 300)\n\nsetImmediate(() => console.log('setImmediate'));\n\nprocess.nextTick(() => console.log('nextTick1'));\n\nasync1();\n\nprocess.nextTick(() => console.log('nextTick2'));\n\nnew Promise(function (resolve) {\n    console.log('promise1')\n    resolve();\n    console.log('promise2')\n}).then(function () {\n    console.log('promise3')\n})\n\nconsole.log('script end')\n```\n\n分析过程：\n\n- 先找到同步任务，输出script start\n- 遇到第一个 setTimeout，将里面的回调函数放到 timer 队列中\n- 遇到第二个 setTimeout，300ms后将里面的回调函数放到 timer 队列中\n- 遇到第一个setImmediate，将里面的回调函数放到 check 队列中\n- 遇到第一个 nextTick，将其里面的回调函数放到本轮同步任务执行完毕后执行\n\n- 执行 async1函数，输出 async1 start\n- 执行 async2 函数，输出 async2，async2 后面的输出 async1 end进入微任务，等待下一轮的事件循环\n- 遇到第二个，将其里面的回调函数放到本轮同步任务执行完毕后执行\n- 遇到 new Promise，执行里面的立即执行函数，输出 promise1、promise2\n- then里面的回调函数进入微任务队列\n- 遇到同步任务，输出 script end\n- 执行下一轮回到函数，先依次输出 nextTick 的函数，分别是 nextTick1、nextTick2\n- 然后执行微任务队列，依次输出 async1 end、promise3\n- 执行timer 队列，依次输出 setTimeout0\n- 接着执行 check  队列，依次输出 setImmediate\n- 300ms后，timer 队列存在任务，执行输出 setTimeout2\n\n执行结果如下：\n\n```\nscript start\nasync1 start\nasync2\npromise1\npromise2\nscript end\nnextTick1\nnextTick2\nasync1 end\npromise3\nsetTimeout0\nsetImmediate\nsetTimeout2\n```\n\n最后有一道是关于`setTimeout`与`setImmediate`的输出顺序\n\n```js\nsetTimeout(() => {\n  console.log(\"setTimeout\");\n}, 0);\n\nsetImmediate(() => {\n  console.log(\"setImmediate\");\n});\n```\n\n输出情况如下：\n\n```js\n情况一：\nsetTimeout\nsetImmediate\n\n情况二：\nsetImmediate\nsetTimeout\n```\n\n分析下流程：\n\n- 外层同步代码一次性全部执行完，遇到异步API就塞到对应的阶段\n- 遇到`setTimeout`，虽然设置的是0毫秒触发，但实际上会被强制改成1ms，时间到了然后塞入`times`阶段\n- 遇到`setImmediate`塞入`check`阶段\n- 同步代码执行完毕，进入Event Loop\n- 先进入`times`阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足`setTimeout`条件，执行回调，如果没过1毫秒，跳过\n- 跳过空的阶段，进入check阶段，执行`setImmediate`回调\n\n这里的关键在于这1ms，如果同步代码执行时间较长，进入`Event Loop`的时候1毫秒已经过了，`setTimeout`先执行，如果1毫秒还没到，就先执行了`setImmediate`\n","level":3,"tagId":18}
{"_id":{"$oid":"61aa384b8e97d900018086ac"},"exerciseKey":"30de2c61-c961-4613-90a0-b31e5eabf637","category":"QA","renderType":"md","title":"Typescript中什么是类类型接口？","desc":null,"options":null,"explanation":"* 如果接口用于一个类的话，那么接口会表示“行为的抽象”\n* 对类的约束，让类去实现接口，类可以实现多个接口\n* 接口只能约束类的公有成员（实例属性/方法），无法约束私有成员、构造函数、静态属性/方法","level":2,"tagId":19}
{"_id":{"$oid":"61aa384c0f30890001ab807d"},"exerciseKey":"33363940-179b-4ae3-9cd3-7bf0a5619df9","category":"QA","renderType":"md","title":"箭头函数的 this 指向哪⾥？","desc":null,"options":null,"explanation":"箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。\n\n可以⽤Babel理解⼀下箭头函数:\n\n```js\n// ES6 \nconst obj = { \n  getArrow() { \n    return () => { \n      console.log(this === obj); \n    }; \n  } \n}\n```\n\n转化后：\n\n```js\n// ES5，由 Babel 转译\nvar obj = { \n   getArrow: function getArrow() { \n     var _this = this; \n     return function () { \n        console.log(_this === obj); \n     }; \n   } \n};\n```","level":3,"tagId":24}
{"_id":{"$oid":"61aa384cd00c060001bf11ba"},"exerciseKey":"33d77817-96e1-4531-840c-26426223102c","category":"QA","renderType":"md","title":"for...in和for...of有什么区别？","desc":null,"options":null,"explanation":"for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下：\n\n* for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；\n* for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；\n* 对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；\n\n总结： for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。","level":2,"tagId":10}
{"_id":{"$oid":"61aa384e3d5f3a0001af5550"},"exerciseKey":"38c7340e-cb35-43e0-8ea0-20e75b2780a5","category":"QA","renderType":"md","title":"Vue项目中如何解决跨域问题？","desc":null,"options":null,"explanation":"解决跨域的方法有很多，下面列举了三种：\n\n- JSONP\n- CORS\n- Proxy\n\n而在`vue`项目中，我们主要针对`CORS`或`Proxy`这两种方案进行展开\n\n### CORS\n\nCORS （Cross-Origin Resource Sharing，跨域资源共享）是一个系统，它由一系列传输的HTTP头组成，这些HTTP头决定浏览器是否阻止前端 JavaScript 代码获取跨域请求的响应\n\n`CORS` 实现起来非常方便，只需要增加一些 `HTTP` 头，让服务器能声明允许的访问来源\n\n只要后端实现了 `CORS`，就实现了跨域\n\n ![](https://static.vue-js.com/140deb80-4e32-11eb-ab90-d9ae814b240d.png)\n\n以` koa`框架举例\n\n添加中间件，直接设置`Access-Control-Allow-Origin`请求头\n\n```js\napp.use(async (ctx, next)=> {\n  ctx.set('Access-Control-Allow-Origin', '*');\n  ctx.set('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild');\n  ctx.set('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');\n  if (ctx.method == 'OPTIONS') {\n    ctx.body = 200; \n  } else {\n    await next();\n  }\n})\n```\n\nps: `Access-Control-Allow-Origin` 设置为*其实意义不大，可以说是形同虚设，实际应用中，上线前我们会将`Access-Control-Allow-Origin` 值设为我们目标`host`\n\n### Proxy\n代理（Proxy）也称网络代理，是一种特殊的网络服务，允许一个（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击\n\n\n**方案一**\n\n如果是通过`vue-cli`脚手架工具搭建项目，我们可以通过`webpack`为我们起一个本地服务器作为请求的代理对象\n\n通过该服务器转发请求至目标服务器，得到结果再转发给前端，但是最终发布上线时如果web应用和接口服务器不在一起仍会跨域\n\n在`vue.config.js`文件，新增以下代码\n\n```js\namodule.exports = {\n    devServer: {\n        host: '127.0.0.1',\n        port: 8084,\n        open: true,// vue项目启动时自动打开浏览器\n        proxy: {\n            '/api': { // '/api'是代理标识，用于告诉node，url前面是/api的就是使用代理的\n                target: \"http://xxx.xxx.xx.xx:8080\", //目标地址，一般是指后台服务器地址\n                changeOrigin: true, //是否跨域\n                pathRewrite: { // pathRewrite 的作用是把实际Request Url中的'/api'用\"\"代替\n                    '^/api': \"\" \n                }\n            }\n        }\n    }\n}\n```\n\n通过`axios`发送请求中，配置请求的根路径\n\n```js\naxios.defaults.baseURL = '/api'\n```\n\n\n\n**方案二**\n\n此外，还可通过服务端实现代理请求转发\n\n以`express`框架为例\n\n```js\nvar express = require('express');\nconst proxy = require('http-proxy-middleware')\nconst app = express()\napp.use(express.static(__dirname + '/'))\napp.use('/api', proxy({ target: 'http://localhost:4000', changeOrigin: false\n                      }));\nmodule.exports = app\n```\n\n\n\n**方案三**\n\n通过配置`nginx`实现代理\n\n```js\nserver {\n    listen    80;\n    # server_name www.josephxia.com;\n    location / {\n        root  /var/www/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html;\n    }\n    location /api {\n        proxy_pass  http://127.0.0.1:3000;\n        proxy_redirect   off;\n        proxy_set_header  Host       $host;\n        proxy_set_header  X-Real-IP     $remote_addr;\n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n}\n```","level":2,"tagId":14}
{"_id":{"$oid":"61aa384f79641200019173e3"},"exerciseKey":"393d4762-e0b3-4fe6-9c5e-25d26f3680a8","category":"QA","renderType":"md","title":"高楼逃生问题","desc":"如果你被困在一幢200米高的大楼的楼顶，手里有一根150米长的绳子和一把瑞士军刀。你所站的地方有一个铁钩子。往楼下看时，你发现大楼正中间，也就是100米高的位置上，有一个可以落脚的金属支架，上面还有另外一个钩子，问用现在的工具如何安全到达地面？","options":null,"explanation":"把绳子割成50米和100米两段。把50米绳子的一端拴在楼顶的钩子上，另一端打一个小环。让100米长的绳子穿过这个环，再把它的两头系在一起形成一个绳圈。沿着绳子爬到落脚点，把100米长的绳子抽出收回来，然后把其中一端拴在钩子上，沿着绳子爬到地面。","level":2,"tagId":17}
{"_id":{"$oid":"61aa3851291c0100017ee19f"},"exerciseKey":"402c1f77-c556-4a1b-984f-07004305fba2","category":"QA","renderType":"md","title":"webpack treeShaking机制的原理是什么？","desc":null,"options":null,"explanation":"> Tree shaking 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 Dead code elimination\n\n## tree shaking如何工作的呢?\n\n虽然 tree shaking 的概念在 1990 就提出了，但直到 ES6 的 ES6-style 模块出现后才真正被利用起来。\n\n在ES6以前，我们可以使用CommonJS引入模块：require()，这种引入是动态的，也意味着我们可以基于条件来导入需要的代码：\n\n```js\nlet dynamicModule;\n// 动态导入\nif (condition) {\n  myDynamicModule = require(\"foo\");\n} else {\n  myDynamicModule = require(\"bar\");\n}\n```\n\n但是CommonJS规范无法确定在实际运行前需要或者不需要某些模块，所以CommonJS不适合tree-shaking机制。在 ES6 中，引入了完全静态的导入语法：import。这也意味着下面的导入是不可行的：\n\n```js\n// 不可行，ES6 的import是完全静态的\nif (condition) {\n  myDynamicModule = require(\"foo\");\n} else {\n  myDynamicModule = require(\"bar\");\n}\n```\n\n我们只能通过导入所有的包后再进行条件获取。如下：\n\n```js\nimport foo from \"foo\";\nimport bar from \"bar\";\n\nif (condition) {\n  // foo.xxxx\n} else {\n  // bar.xxx\n}\n```\n\nES6的import语法可以完美使用tree shaking，因为可以在代码不运行的情况下就能分析出不需要的代码。\n\n看完上面的分析，你可能还是有点懵，这里我简单做下总结：因为tree shaking只能在静态modules下工作。ECMAScript 6 模块加载是静态的,因此整个依赖树可以被静态地推导出解析语法树。所以在 ES6 中使用 tree shaking 是非常容易的。\n\n## tree shaking的原理是什么?\n\n看完上面的分析，相信这里你可以很容易的得出题目的答案了：\n\n* ES6 Module引入进行静态分析，故而编译的时候正确判断到底加载了那些模块\n* 静态分析程序流，判断那些模块和变量未被使用或者引用，进而删除对应代码\n\n## common.js 和 es6 中模块引入的区别？\n\n从这道题目我们可以很容易的引申出来另外一道“明星”面试题：common.js 和 es6 中模块引入的区别？\n\nCommonJS 是一种模块规范，最初被应用于 Nodejs，成为 Nodejs 的模块规范。运行在浏览器端的 JavaScript 由于也缺少类似的规范，在 ES6 出来之前，前端也实现了一套相同的模块规范 (例如: AMD)，用来对前端模块进行管理。自 ES6 起，引入了一套新的 ES6 Module 规范，在语言标准的层面上实现了模块功能，而且实现得相当简单，有望成为浏览器和服务器通用的模块解决方案。但目前浏览器对 ES6 Module 兼容还不太好，我们平时在 Webpack 中使用的 export 和 import，会经过 Babel 转换为 CommonJS 规范。在使用上的差别主要有：\n\n1、CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\n\n2、CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\n\n3、CommonJs 是单个值导出，ES6 Module可以导出多个\n\n4、CommonJs 是动态语法可以写在判断里，ES6 Module 静态语法只能写在顶层\n\n5、CommonJs 的 this 是当前模块，ES6 Module的 this 是 undefined\n\n\n\n\n","level":3,"tagId":28}
{"_id":{"$oid":"61aa385454ebf60001a1a3af"},"exerciseKey":"4c33c24c-2e00-49a8-9f70-14c9ed80bf32","category":"QA","renderType":"md","title":"协商缓存中，有了 Last-Modified，为什么还会出现 ETag？","desc":null,"options":null,"explanation":"ETag的出现，主要是为了解决 Last-Modified 无法解决的一些问题：\n\n* 某些服务器不能精确得到文件的最后修改时间， 这样就无法通过最后修改时间来判断文件是否更新了。\n\n* 某些文件的修改非常频繁，在秒以下的时间内进行修改. Last-Modified只能精确到秒。\n\n* 一些文件的最后修改时间改变了，但是内容并未改变。 我们不希望客户端认为这个文件修改了。\n\n","level":2.5,"tagId":16}
{"_id":{"$oid":"61aa38583dd7f70001832f3a"},"exerciseKey":"59d6fb97-59bc-4f6c-ba90-cb16b96478ee","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nfunction checkAge(age) {\n  if (age < 18) {\n    const message = \"Sorry, you're too young.\"\n  } else {\n    const message = \"Yay! You're old enough!\"\n  }\n\n  return message\n}\n\nconsole.log(checkAge(21))\n```","options":"{\"options\":[\"\\\"Sorry, you're too young.\\\"\",\"\\\"Yay! You're old enough!\\\"\",\"ReferenceError\",\"undefined\"],\"isMulti\":false,\"answer\":[2]}","explanation":"`const`和`let`声明的变量是具有**块级作用域**的，块是大括号（`{}`）之间的任何东西, 即上述情况`if / else`语句的花括号。 由于块级作用域，我们无法在声明的块之外引用变量，因此抛出`ReferenceError`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38590f30890001ab80da"},"exerciseKey":"5bdf6ed5-2178-4bef-8690-c04dcdf46930","category":"QA","renderType":"md","title":"什么是JSX？","desc":null,"options":null,"explanation":"JSX即JavaScript XML。一种在React组件内部构建标签的类XML语法。JSX为react.js开发的一套语法糖，也是react.js的使用基础。React在不使用JSX的情况下一样可以工作，然而使用JSX可以提高组件的可读性，因此推荐使用JSX。\n\n```react.js\nclass MyComponent extends React.Component {\n  render() {\n    let props = this.props;  \n    return (\n      <div className=\"my-component\">\n      <a href={props.url}>{props.name}</a>\n      </div>\n    );\n  }\n}\n```\n\n**优点**：\n\n* 允许使用熟悉的语法来定义 HTML 元素树；\n* 提供更加语义化且移动的标签；\n* 程序结构更容易被直观化；\n* 抽象了 React Element 的创建过程；\n* 可以随时掌控 HTML 标签以及生成这些标签的代码；\n* 是原生的 JavaScript。","level":1.5,"tagId":13}
{"_id":{"$oid":"61aa385bcd02c30001dd223c"},"exerciseKey":"643af0aa-f567-45df-89ac-aaa8b4d8f927","category":"Choice","renderType":"md","title":"JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。","desc":"```javascript\nfor (let i = 1; i < 5; i++) {\n  if (i === 3) continue\n  console.log(i)\n}\n```","options":"{\"options\":[\"1 2\",\"1 2 3\",\"1 2 4\",\"1 3 4\"],\"isMulti\":false,\"answer\":[2]}","explanation":"如果某个条件返回 `true`，则 `continue` 语句跳过本次迭代。","level":1,"tagId":32}
{"_id":{"$oid":"61aa3861bdfab500012c849e"},"exerciseKey":"7904bc3e-62e0-44a1-ac3e-bdd737471b7e","category":"QA","renderType":"md","title":"CSS中的1像素问题是什么？有哪些解决方案？","desc":null,"options":null,"explanation":"## 1px 边框问题的由来\n\n苹果 iPhone4 首次提出了 Retina Display（视网膜屏幕）的概念，在 iPhone4 使用的视网膜屏幕中，把 2x2 个像素当 1 个物理像素使用，即使用 2x2 个像素显示原来 1 个物理像素显示的内容，从而让 UI 显示更精致清晰，这 2x2 个像素叫做逻辑像素。\n\n像这种像素比（像素比（即dpr）＝ 物理像素 / 逻辑像素）为 2 的视网膜屏幕也被称为二倍屏，目前市面上还有像素比更高的三倍屏、四倍屏。\n\n而 CSS 中 1px 指的是物理像素，因此，设置为 1px 的边框在 dpr = 2 的视网膜屏幕中实际占用了 2 个逻辑像素的宽度，这就导致了界面边框变粗的视觉体验。\n\n## 使用 transform 解决\n\n通过设置元素的 box-sizing 为 border-box，然后构建伪元素，再使用 CSS3 的 transform 缩放，这是目前市面上最受推崇的解决方法。这种方法可以满足所有的场景，而且修改灵活，唯一的缺陷是，对于已使用伪元素的元素要多嵌套一个无用元素。具体的实现如下：\n\n```css\n.one-pixel-border {\n  position: relative;\n  box-sizing: border-box;\n}\n\n.one-pixel-border::before {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 200%;\n  height: 200%;\n  border: 1px solid red;\n  transform: translate(-50%, -50%) scale(0.5, 0.5);\n}\n```\n\n这样就可以得到 0.5px 的边框。\n\n还可以结合媒体查询（@media）解决不同 dpr 值屏幕的边框问题，如下：\n\n```css\n@media screen and (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {\n  ...\n}\n\n@media screen and (-webkit-min-device-pixel-ratio: 3), (min-resolution: 3dppx) {\n  ...\n}\n```\n\n当然还有不少其他的解决方案：border-image、background-image、viewport + rem + js、box-shadow等，但都有各自的缺点，不进行推荐，此处也不做详细介绍。\n","level":3.5,"tagId":11}
{"_id":{"$oid":"61aa386281337a00011e05eb"},"exerciseKey":"7b581439-bd9d-486d-a045-ff33f1d32b99","category":"QA","renderType":"md","title":"绳子计时问题","desc":"有若干根相同的不均匀的绳子，烧完一根绳子的时间是1小时，问如何计时1小时15分钟？","options":null,"explanation":"把第一根绳子两头同时点燃，同时把第二根绳子点燃一头。\n\n当第一根绳子烧完时，时间为半个小时。\n\n这时把第二根绳子的另一头也点燃，开始计时，当第二根绳子烧完时，停止计时，那么这段时间就是15分钟。\n\n也就是说，只需要3根绳子就可以计时一个小时15分钟。","level":3,"tagId":17}
{"_id":{"$oid":"61aa38640d111e00010372ab"},"exerciseKey":"7ff627a9-0948-4352-9b70-69aad59fe2ec","category":"QA","renderType":"md","title":"怎么检测浏览器版本？","desc":null,"options":null,"explanation":"检测浏览器版本一共有两种方式：\n\n一种是检测 `window.navigator.userAgent` 的值，但这种方式很不可靠，因为 `userAgent` 可以被改写，并且早期的浏览器如 ie，会通过伪装自己的 userAgent 的值为 Mozilla 来躲过服务器的检测。\n\n第二种方式是功能检测，根据每个浏览器独有的特性来进行判断，如 ie 下独有的 `ActiveXObject`。","level":2,"tagId":10}
{"_id":{"$oid":"61aa386485c5f70001542fb6"},"exerciseKey":"825e3009-688d-43d4-ba62-0c4940d90ce9","category":"QA","renderType":"html","title":"中间人攻击","desc":null,"options":null,"explanation":"<p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">中间人攻击（Man-in-the-middle attack, MITM），指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者窃听、篡改甚至完全控制。没有进行严格的证书校验是中间人攻击着手点。目前大多数加密协议都提供了一些特殊认证方法以阻止中间人攻击。如 SSL （安全套接字层）协议可以验证参与通讯的用户的证书是否有权威、受信任的数字证书认证机构颁发，并且能执行双向身份认证。攻击场景如用户在一个未加密的 WiFi下访问网站。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。</span></span></span></span><br/><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><span style=\"font-size:14ptpx\">场景</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">i）在一个未加密的Wi-Fi 无线接入点的接受范围内的中间人攻击者，可以将自己作为一个中间人插入这个网络</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）Fiddler / Charles （花瓶）代理工具</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）12306 之前的自己证书</span></span></span></span></li></ul><p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">过程</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">i）客户端发送请求到服务端，请求被中间人截获</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）服务器向客户端发送公钥</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）中间人截获公钥，保留在自己手上。然后自己生成一个【伪造的】公钥，发给客户端</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iv）客户端收到伪造的公钥后，生成加密hash值发给服务器</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">v）中间人获得加密hash值，用自己的私钥解密获得真秘钥,同时生成假的加密hash值，发给服务器</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">vi）服务器用私钥解密获得假密钥,然后加密数据传输给客户端</span></span></span></span></li></ul><p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">使用抓包工具fiddle来进行举例说明</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">首先通过一些途径在客户端安装证书</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">然后客户端发送连接请求，fiddle在中间截取请求，并返回自己伪造的证书</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">客户端已经安装了攻击者的根证书，所以验证通过</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">客户端就会正常和fiddle进行通信，把fiddle当作正确的服务器</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">同时fiddle会跟原有的服务器进行通信，获取数据以及加密的密钥，去解密密钥</span></span></span></span></li></ul><p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">常见攻击方式</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">嗅探：嗅探是一种用来捕获流进和流出的网络数据包的技术，就好像是监听电话一样。比如：抓包工具</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">数据包注入：在这种，攻击者会将恶意数据包注入到常规数据中的，因为这些恶意数据包是在正常的数据包里面的，用户和系统都很难发现这个内容。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">会话劫持：当我们进行一个网站的登录的时候到退出登录这个时候，会产生一个会话，这个会话是攻击者用来攻击的首要目标，因为这个会话，包含了用户大量的数据和私密信息。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">SSL剥离：HTTPS是通过SSL/TLS进行加密过的，在SSL剥离攻击中，会使SSL/TLS连接断开，让受保护的HTTPS，变成不受</span></span></span></span></li></ul><p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">保护的HTTP（这对于网站非常致命）</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">DNS欺骗，攻击者往往通过入侵到DNS服务器，或者篡改用户本地hosts文件，然后去劫持用户发送的请求，然后转发到攻击者想要转发到的服务器</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ARP欺骗，ARP(address resolution protocol)地址解析协议，攻击者利用APR的漏洞，用当前局域网之间的一台服务器，来冒充客户端想要请求的服务端，向客户端发送自己的MAC地址，客户端无从得到真正的主机的MAC地址，所以，他会把这个地址当作真正</span></span></span></span></li></ul><p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">的主机来进行通信，将MAC存入ARP缓存表。</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">代理服务器</span></span></span></span></li></ul><p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">预防方案：</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">i）用可信的第三方CA厂商</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）不下载未知来源的证书，不要去下载一些不安全的文件</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）确认你访问的URL是HTTPS的，确保网站使用了SSL，确保禁用一些不安全的SSL，只开启：TLS1.1，TLS1.2</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iv）不要使用公用网络发送一些敏感的信息</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">v）不要去点击一些不安全的连接或者恶意链接或邮件信息</span></span></span></span></li></ul><p><br/></p>","level":2.5,"tagId":21}
{"_id":{"$oid":"61aa386491a75000018d2d14"},"exerciseKey":"827a8f47-1144-4ab1-9d6c-b7d3b3d6aebf","category":"QA","renderType":"md","title":"实现 Function.prototype.call","desc":null,"options":null,"explanation":"```js\nFunction.prototype.call = function(context = window, ...args) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Type Error');\n  }\n  const fn = Symbol('fn');\n  context[fn] = this;\n\n  const res = context[fn](...args);\n  delete context[fn];\n  return res;\n}\n\n```","level":2,"tagId":26}
{"_id":{"$oid":"61aa383dcd02c30001dd2151"},"exerciseKey":"01149afa-e389-4a9f-a534-204db829188b","category":"QA","renderType":"md","title":"['10', '10', '10', '10', '10'].map(parseInt)","desc":null,"options":null,"explanation":"## parseInt\n\n`parseInt()` 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。\n\n> const intValue = parseInt(string[, radix]);\n\n* `string` 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。\n\n* `radix` 一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。默认为10。\n\n* `返回值` 返回一个整数或NaN\n\n## map \n\n`map()` 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n\n```js\nvar new_array = arr.map(function callback(currentValue[,index[, array]]) {\n // Return element for new_array\n }[, thisArg])\n```\n\n可以看到callback回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。\n\n* currentValue 是callback 数组中正在处理的当前元素。\n* index可选, 是callback 数组中正在处理的当前元素的索引。\n* array可选, 是callback map 方法被调用的数组。\n* 另外还有thisArg可选, 执行 callback 函数时使用的this 值\n\n```js\nconst arr = [1, 2, 3];\narr.map((num) => num + 1); // [2, 3, 4]\n```\n\n## 题目分析\n\n回到真实的事例上：\n```js\n['1', '2', '3'].map(parseInt)\n```\n\n对于每个迭代map, parseInt()传递两个参数: 字符串和基数。\n\n所以实际执行的的代码是：\n\n```js\n['1', '2', '3'].map((item, index) => {\n    return parseInt(item, index)\n})\n```\n\n即返回的值分别为：\n\n```js\nparseInt('1', 0) // 1\nparseInt('2', 1) // NaN\nparseInt('3', 2) // NaN, 3 不是二进制\n```\n\n所以：\n\n```js\n['1', '2', '3'].map(parseInt)\n// 1, NaN, NaN\n```\n\n再回到我们的题目，很明显答案应该是：\n\n```js\n['10','10','10','10','10'].map(parseInt);\n// [10, NaN, 2, 3, 4]\n```\n\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa384991a75000018d2c5c"},"exerciseKey":"27da945d-848c-4af3-bc27-65e4833776b2","category":"QA","renderType":"md","title":"如果需要手动写动画，你认为最小时间间隔是多久，为什么？","desc":null,"options":null,"explanation":"多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms。","level":1,"tagId":11}
{"_id":{"$oid":"61aa384a54ebf60001a1a36b"},"exerciseKey":"2de0400f-2cea-41f0-8cb0-616c7124d1bb","category":"QA","renderType":"md","title":"TypeScript 的主要特点是什么？","desc":null,"options":null,"explanation":"* 跨平台：TypeScript 编译器可以安装在任何操作系统上，包括 Windows、macOS 和 Linux。\n* ES6 特性：TypeScript 包含计划中的 ECMAScript 2015 (ES6) 的大部分特性，例如箭头函数。\n* 面向对象的语言：TypeScript 提供所有标准的 OOP 功能，如类、接口和模块。\n* 静态类型检查：TypeScript 使用静态类型并帮助在编译时进行类型检查。因此，你可以在编写代码时发现编译时错误，而无需运行脚本。\n* 可选的静态类型：如果你习惯了 JavaScript 的动态类型，TypeScript 还允许可选的静态类型。\n* DOM 操作：您可以使用 TypeScript 来操作 DOM 以添加或删除客户端网页元素。","level":1.5,"tagId":19}
{"_id":{"$oid":"61aa384b291c0100017ee183"},"exerciseKey":"30a6a5e1-fc54-4f16-b102-5a174ae023dd","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\n(() => {\n  let x = (y = 10);\n})();\n\nconsole.log(typeof x);\nconsole.log(typeof y);\n```","options":"{\"options\":[\"\\\"undefined\\\", \\\"number\\\"\",\"\\\"number\\\", \\\"number\\\"\",\"\\\"object\\\", \\\"number\\\"\",\"\\\"number\\\", \\\"undefined\\\"\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`let x = y = 10;` 是下面这个表达式的缩写:\n```javascript\ny = 10;\nlet x = y;\n```\n我们设定`y`等于`10`时,我们实际上增加了一个属性`y`给全局对象(浏览器里的`window`, Nodejs里的`global`)。在浏览器中， `window.y`等于`10`.\n然后我们声明了变量`x`等于`y`,也是`10`.但变量是使用 `let`声明的，它只作用于 _块级作用域_, 仅在声明它的块中有效；就是案例中的立即调用表达式(IIFE)。使用`typeof`操作符时, 操作值 `x`没有被定义：因为我们在`x`声明块的外部，无法调用它。这就意味着`x`未定义。未分配或是未声明的变量类型为`\"undefined\"`. `console.log(typeof x)`返回`\"undefined\"`.\n而我们创建了全局变量`y`，并且设定`y`等于`10`.这个值在我们的代码各处都访问的到。 `y`已经被定义了，而且有一个`\"number\"`类型的值。 `console.log(typeof y)`返回`\"number\"`.","level":1.5,"tagId":32}
{"_id":{"$oid":"61aa384c3dd7f70001832ee4"},"exerciseKey":"32135204-0c1c-459c-977b-d12895bd5a70","category":"QA","renderType":"md","title":"React 中的 ref 有什么用？","desc":null,"options":null,"explanation":"使用 refs 获取。组件被调用时会新建一个改组件的实例。refs 会指向这个实例，可以是一个回调函数，回调函数会在组件被挂载后立即执行。\n\n如果把 refs 放到原生 DOM 组件的 input 中，我们就可以通过 refs 得到 DOM 节点；如果把 refs 放到 React 组件中，那么我们获得的就是组件的实例，因此就可以调用实例的方法（如果想访问该组件的真实 DOM，那么可以用 React.findDOMNode 来找到 DOM 节点，但是不推崇此方法）。\n\nrefs 无法用于无状态组件，无状态组件挂载时只是方法调用，没有新建实例。在 v16 之后，可以使用 useRef。","level":2,"tagId":13}
{"_id":{"$oid":"61aa384d79641200019173d1"},"exerciseKey":"36be973b-0351-4a18-b6b8-5e68023e7b96","category":"QA","renderType":"md","title":"setState 是同步，还是异步的？","desc":null,"options":null,"explanation":"在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state 。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。\n\n原因： 在React的setState函数实现中，会根据一个变量isBatchingUpdates判断是直接更新this.state还是放到队列中回头再说，而isBatchingUpdates默认是false，也就表示setState会同步更新this.state，但是，有一个函数batchedUpdates，这个函数会把isBatchingUpdates修改为true，而当React在调用事件处理函数之前就会调用这个batchedUpdates，造成的后果，就是由React控制的事件处理过程setState不会同步更新this.state。\n\n注意： setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。\n\n综上，setState 只在合成事件和 hook() 中是“异步”的，在 原生事件和 setTimeout 中都是同步的。\n\n","level":3,"tagId":13}
{"_id":{"$oid":"61aa384e3976eb00014e449c"},"exerciseKey":"37918a0a-0874-45e3-b510-4579e5941845","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst list = [1 + 2, 1 * 2, 1 / 2]\nconsole.log(list)\n```","options":"{\"options\":[\"[\\\"1 + 2\\\", \\\"1 * 2\\\", \\\"1 / 2\\\"]\",\"[\\\"12\\\", 2, 0.5]\",\"[3, 2, 0.5]\",\"[1, 1, 1]\"],\"isMulti\":false,\"answer\":[2]}","explanation":"数组元素可以包含任何值。 数字，字符串，布尔值，对象，数组，`null`，`undeifned`, 以及其他表达式，如日期，函数和计算。\n元素将等于返回的值。 `1 + 2`返回`3`，`1 * 2`返回'2`，'1 / 2`返回`0.5`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa3851cd02c30001dd21f5"},"exerciseKey":"43972778-bd1d-4ff4-a153-6c6df65242e3","category":"QA","renderType":"md","title":"观察者模式和发布订阅模式分别是什么？有什么区别？","desc":null,"options":null,"explanation":"观察者模式：一个对象（观察者）订阅另一个对象（主题），当主题被激活的时候，触发观察者里面的事件。\n\n![image.png](https://i.loli.net/2021/07/11/1nvhotixeCES5gG.png)\n\n发布订阅模式：订阅者把自己想要订阅的事件注册到调度中心，当发布者发布事件到调度中心（就是该事件被触发），再由调度中心统一调度订阅者注册到调度中心的处理代码。\n\n![image.png](https://i.loli.net/2021/07/11/VEgUNMXwA7dW5DF.png)\n\n对比一下：\n\n![image.png](https://i.loli.net/2021/07/11/eWj27TCEBUpznYb.png)\n\n可以发现两种模式下的角色数量不一样：\n\n* 观察者模式里，只有两个角色：观察者 和 被观察者\n* 发布订阅模式里，却不仅仅只有发布者和订阅者两个角色，还有一个调度中心\n\n从使用场景上：\n\n* 观察者模式比较适合在单个应用内部使用\n* 发布订阅模式则是比较适合跨应用的场景","level":3,"tagId":27}
{"_id":{"$oid":"61aa3853b804f8000122aa49"},"exerciseKey":"4a0df14c-048b-47cc-a18f-1c9b36f54e90","category":"QA","renderType":"md","title":"ES6中数组新增了哪些扩展?","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/a156b8d0-53c5-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、扩展运算符的应用\n\nES6通过扩展元素符`...`，好比 `rest` 参数的逆运算，将一个数组转为用逗号分隔的参数序列\n\n```js\nconsole.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\n\n[...document.querySelectorAll('div')]\n// [<div>, <div>, <div>]\n```\n\n主要用于函数调用的时候，将一个数组变为参数序列\n\n```js\nfunction push(array, ...items) {\n  array.push(...items);\n}\n\nfunction add(x, y) {\n  return x + y;\n}\n\nconst numbers = [4, 38];\nadd(...numbers) // 42\n```\n\n可以将某些数据结构转为数组\n\n```js\n[...document.querySelectorAll('div')]\n```\n\n能够更简单实现数组复制\n\n```js\nconst a1 = [1, 2];\nconst [...a2] = a1;\n// [1,2]\n```\n\n数组的合并也更为简洁了\n\n```js\nconst arr1 = ['a', 'b'];\nconst arr2 = ['c'];\nconst arr3 = ['d', 'e'];\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n\n注意：通过扩展运算符实现的是浅拷贝，修改了引用指向的值，会同步反映到新数组\n\n下面看个例子就清楚多了\n\n```js\nconst arr1 = ['a', 'b',[1,2]];\nconst arr2 = ['c'];\nconst arr3  = [...arr1,...arr2]\narr[1][0] = 9999 // 修改arr1里面数组成员值\nconsole.log(arr[3]) // 影响到arr3,['a','b',[9999,2],'c']\n```\n\n扩展运算符可以与解构赋值结合起来，用于生成数组\n\n```js\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n```\n\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错\n\n```js\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n\nconst [first, ...middle, last] = [1, 2, 3, 4, 5];\n// 报错\n```\n\n可以将字符串转为真正的数组\n\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n```\n\n定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组\n\n```js\nlet nodeList = document.querySelectorAll('div');\nlet array = [...nodeList];\n\nlet map = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nlet arr = [...map.keys()]; // [1, 2, 3]\n```\n\n如果对没有 Iterator 接口的对象，使用扩展运算符，将会报错\n\n```javascript\nconst obj = {a: 1, b: 2};\nlet arr = [...obj]; // TypeError: Cannot spread non-iterable object\n```\n\n\n\n## 二、构造函数新增的方法\n\n关于构造函数，数组新增的方法有如下：\n\n- Array.from()\n- Array.of()\n\n### Array.from()\n\n将两类对象转为真正的数组：类似数组的对象和可遍历`（iterable）`的对象（包括 `ES6` 新增的数据结构 `Set` 和 `Map`）\n\n```js\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n```\n\n还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组\n\n```js\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n```\n\n\n\n### Array.of()\n\n用于将一组值，转换为数组\n\n```js\nArray.of(3, 11, 8) // [3,11,8]\n```\n\n没有参数的时候，返回一个空数组\n\n当参数只有一个的时候，实际上是指定数组的长度\n\n参数个数不少于 2 个时，`Array()`才会返回由参数组成的新数组\n\n```js\nArray() // []\nArray(3) // [, , ,]\nArray(3, 11, 8) // [3, 11, 8]\n```\n\n\n\n### 三、实例对象新增的方法\n\n关于数组实例对象新增的方法有如下：\n\n- copyWithin()\n- find()、findIndex()\n- fill()\n- entries()，keys()，values()\n- includes()\n- flat()，flatMap()\n\n### copyWithin()\n\n将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组\n\n参数如下：\n\n- target（必需）：从该位置开始替换数据。如果为负值，表示倒数。\n- start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。\n- end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。\n\n```js\n[1, 2, 3, 4, 5].copyWithin(0, 3) // 将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2\n// [4, 5, 3, 4, 5] \n```\n\n\n\n### find()、findIndex()\n\n`find()`用于找出第一个符合条件的数组成员\n\n参数是一个回调函数，接受三个参数依次为当前的值、当前的位置和原数组\n\n```js\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n```\n\n`findIndex`返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回`-1`\n\n```javascript\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n```\n\n这两个方法都可以接受第二个参数，用来绑定回调函数的`this`对象。\n\n```js\nfunction f(v){\n  return v > this.age;\n}\nlet person = {name: 'John', age: 20};\n[10, 12, 26, 15].find(f, person);    // 26\n```\n\n\n\n### fill()\n\n使用给定值，填充一个数组\n\n```javascript\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\nnew Array(3).fill(7)\n// [7, 7, 7]\n```\n\n还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置\n\n```js\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n\n注意，如果填充的类型为对象，则是浅拷贝\n\n\n\n### entries()，keys()，values()\n\n`keys()`是对键名的遍历、`values()`是对键值的遍历，`entries()`是对键值对的遍历\n\n```js\nor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n```\n\n\n\n### includes()\n\n用于判断数组是否包含给定的值\n\n```js\n[1, 2, 3].includes(2)     // true\n[1, 2, 3].includes(4)     // false\n[1, 2, NaN].includes(NaN) // true\n```\n\n方法的第二个参数表示搜索的起始位置，默认为`0`\n\n参数为负数则表示倒数的位置\n\n```js\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n```\n\n\n\n### flat()，flatMap()\n\n将数组扁平化处理，返回一个新数组，对原数据没有影响\n\n```js\n[1, 2, [3, 4]].flat()\n// [1, 2, 3, 4]\n```\n\n`flat()`默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将`flat()`方法的参数写成一个整数，表示想要拉平的层数，默认为1\n\n```js\n[1, 2, [3, [4, 5]]].flat()\n// [1, 2, 3, [4, 5]]\n\n[1, 2, [3, [4, 5]]].flat(2)\n// [1, 2, 3, 4, 5]\n```\n\n`flatMap()`方法对原数组的每个成员执行一个函数相当于执行`Array.prototype.map()`，然后对返回值组成的数组执行`flat()`方法。该方法返回一个新数组，不改变原数组\n\n```js\n// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n[2, 3, 4].flatMap((x) => [x, x * 2])\n// [2, 4, 3, 6, 4, 8]\n```\n\n`flatMap()`方法还可以有第二个参数，用来绑定遍历函数里面的`this`\n\n\n\n### 四、数组的空位\n\n数组的空位指，数组的某一个位置没有任何值\n\nES6 则是明确将空位转为`undefined`，包括`Array.from`、扩展运算符、`copyWithin()`、`fill()`、`entries()`、`keys()`、`values()`、`find()`和`findIndex()`\n\n建议大家在日常书写中，避免出现空位\n\n\n\n\n\n### 五、排序稳定性\n\n将`sort()`默认设置为稳定的排序算法\n\n```js\nconst arr = [\n  'peach',\n  'straw',\n  'apple',\n  'spork'\n];\n\nconst stableSorting = (s1, s2) => {\n  if (s1[0] < s2[0]) return -1;\n  return 1;\n};\n\narr.sort(stableSorting)\n// [\"apple\", \"peach\", \"straw\", \"spork\"]\n```\n\n排序结果中，`straw`在`spork`的前面，跟原始顺序一致\n\n","level":1,"tagId":24}
{"_id":{"$oid":"61aa38550f30890001ab80ba"},"exerciseKey":"4e2b8fc1-1919-43f8-9cd4-9d3dacc8bb91","category":"QA","renderType":"md","title":"为什么React的 VM 可以提高性能？\n","desc":null,"options":null,"explanation":"因为 VM 并不是真实的操作 DOM，通过 diff 算法可以避免一些不变要的 DOM 操作，从而提高了性能。","level":2,"tagId":13}
{"_id":{"$oid":"61aa385685c5f70001542f4e"},"exerciseKey":"55027248-1c11-444d-8001-6be4362c360f","category":"QA","renderType":"md","title":"请手写“基数排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。\n\n## 算法描述\n\n具体算法描述如下：\n\n* 取得数组中的最大数，并取得位数；\n* arr为原始数组，从最低位开始取每个位组成radix数组；\n* 对radix进行计数排序（利用计数排序适用于小范围数的特点）；\n\n## 代码实现\n\n```javascript\n/**\n * 基数排序适用于：\n *  (1)数据范围较小，建议在小于1000\n *  (2)每个数值都要大于等于0\n * @author damonare\n * @param  arr 待排序数组\n * @param  maxDigit 最大位数\n */\n//LSD Radix Sort\n\nfunction radixSort(arr, maxDigit) {\n    var mod = 10;\n    var dev = 1;\n    var counter = [];\n    console.time('基数排序耗时');\n    for (var i = 0; i < maxDigit; i++, dev *= 10, mod *= 10) {\n        for(var j = 0; j < arr.length; j++) {\n            var bucket = parseInt((arr[j] % mod) / dev);\n            if(counter[bucket]== null) {\n                counter[bucket] = [];\n            }\n            counter[bucket].push(arr[j]);\n        }\n        var pos = 0;\n        for(var j = 0; j < counter.length; j++) {\n            var value = null;\n            if(counter[j]!=null) {\n                while ((value = counter[j].shift()) != null) {\n                      arr[pos++] = value;\n                }\n          }\n        }\n    }\n    console.timeEnd('基数排序耗时');\n    return arr;\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\nconsole.log(radixSort(arr,2)); //[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(n * k)\n* 最差情况：T(n) = O(n * k)\n* 平均情况：T(n) = O(n * k)\n","level":3,"tagId":26}
{"_id":{"$oid":"61aa385991a75000018d2cc4"},"exerciseKey":"5ce5c660-5265-4185-8b12-f69d7fd4a270","category":"QA","renderType":"md","title":"写一个 LRU 缓存函数","desc":null,"options":null,"explanation":"关于缓存，有个常见的例子是，当用户访问不同站点时，浏览器需要缓存在对应站点的一些信息，这样当下次访问同一个站点的时候，就可以使访问速度变快（因为一部分数据可以直接从缓存读取）。 但是想想内存空间是有限的，所以必须有一些规则来管理缓存的使用，而LRU（Least Recently Used） Cache就是其中之一，直接翻译就是“最不经常使用的数据，重要性是最低的，应该优先删除”。\n\n## 需求分析\n\n假设我们要实现一个简化版的这个功能，先整理下需求：\n\n* 需要提供put方法，用于写入不同的缓存数据，假设每条数据形式是{'域名','info'},例如{'https://segmentfault.com': '一些关键信息'}（如果是同一站点重复写入，就覆盖）;\n* 当缓存达到上限时， 调用put写入缓存之前, 要删除最近最少使用的数据；\n* 提供get方法，用于读取缓存数据，同时需要把被读取的数据，移动到最近使用数据 ；\n* 考虑到读取性能，希望get操作的复杂度是O(1)（简单理解就是，读取缓存时不能去遍历所有数据）\n\n## 数据选型\n\n首先题目里很明显的提到了，需要能够标记数据的插入或使用顺序， 所以肯定不能简单使用object实现，需要借助数组，或者es6的Map和Set实现(Map和Set数据遍历是有序的，遍历顺序即插入顺序)；\n\n其次需要实现O(1)复杂度，那就也无法用单纯使用数组来实现，所以可以考虑的只有Map和Set，那么最后再考虑下数据重复性的问题，会发现这道题不太需要考虑这个场景，所以我们可以先使用Map来实现。\n\n由于Map的特性是：新插入的数据排在后面，旧数据放在前面， 所以我们只要专注于维持这个逻辑就好了:\n\n* 如果遇到要删除数据，则优先从前面删除, 因为最前面的必定是最不常用数据；\n* 如果读取某条数据，则应该把数据放到末尾，保证该数据变为最近使用数据；\n\n## 算法实现\n\n接下来就可以一步步是实现代码了，首先是最基本的 构造函数:\n\n```js\n// 第一步代码\nclass LRUCache {\n    constructor(n){\n        this.size = n; // 初始化最大缓存数据条数n\n        this.data = new Map(); // 初始化缓存空间map\n    }\n}\n```\n\n接下来是put方法，put方法要处理3个逻辑：\n\n1、如果待写入的域名，已存在于内存之中，直接更新数据并移动到末尾；\n2、如果当前未达到缓存数量上限，直接写入新数据；\n3、如果当前已经达到缓存数量上限， 要先删除最不经常使用的数据，再写入数据；\n\n\n其他都可以直接操作，移动到末尾这个行为，可以拆成\"先删除该数据，再从末尾重新插入一条该数据\"，这样就简单多了。所以我们继续更新代码：\n```js\n// 第一步代码\nclass LRUCache {\n    constructor(n){\n        this.size = n; // 初始化最大缓存数据条数n\n        this.data = new Map(); // 初始化缓存空间map\n    }\n    // 第二步代码\n    put(domain, info){\n        if(this.data.has(domain)){\n            this.data.delete(domain); // 移除数据\n            this.data.set(domain, info)// 在末尾重新插入数据\n            return;\n        }\n        if(this.data.size >= this.size) {\n            // 删除最不常用数据\n            const firstKey= this.data.keys().next().value; // 不必当心data为空，因为this.size 一般不会取0，满足this.data.size >= this.size时，this.data自然也不为空。\n            this.data.delete(firstKey);\n        }\n        this.data.set(domain, info) // 写入数据\n    }\n}\n```\n\n接着就只剩下get方法了，get方法同样也要处理2种逻辑：\n\n1、根据给定的key，查找是否有对应的信息，若不存在则返回false；\n2、若第一步结果存在，则把被访问数据移动到末尾；\n\n```js\n// 第一步代码\nclass LRUCache {\n    constructor(n){\n        this.size = n; // 初始化最大缓存数据条数n\n        this.data = new Map(); // 初始化缓存空间map\n    }\n    \n    // 第二步代码\n    put(domain, info){\n        if(this.data.size >= this.size) {\n        // 删除最不常用数据\n        const firstKey= [...this.data.keys()][0];// 次数不必当心data为空，因为this.size 一般不会取0，满足this.data.size >= this.size时，this.data自然也不为空。\n        this.data.delete(firstKey);\n        }\n        this.data.set(domain, info) // 写入数据\n    }\n\n    // 第三步代码\n    get(domain) {\n        if(!this.data.has(domain)){\n            return false;\n        }\n        const info = this.data.get(domain); //获取结果\n        this.data.delete(domain); // 移除数据\n        this.data.set(domain, info); // 重新添加该数据\n        return info;\n    }\n}\n```\n\n这一步要稍微注意的是，我们是先移除数据后添加数据，严格遵循最大数量不超过n。\n\n\n","level":3,"tagId":26}
{"_id":{"$oid":"61aa385dcd02c30001dd224c"},"exerciseKey":"6b924c4e-203a-4034-aa34-025b36cbab12","category":"QA","renderType":"md","title":"数据Mock是什么？","desc":null,"options":null,"explanation":"Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。 \n\n通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞。\n\n前后端同时开发的时候，后端接口数据没有出来，前端可以mock假数据，模拟开发。\n\nMock.js 是常用的辅助生成模拟数据的三方库，借助他可以提升我们的 mock 数据能力。\n\n","level":1,"tagId":29}
{"_id":{"$oid":"61aa3862c2d0220001c964cd"},"exerciseKey":"7c614bf5-b7bf-424f-9e9e-539aafa5d273","category":"QA","renderType":"md","title":"说说Git常用的命令有哪些？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/f66b3290-f7af-11eb-bc6f-3f06e1491664.png)\n\n\n## 一、前言\n\n`git `的操作可以通过命令的形式如执行，日常使用就如下图6个命令即可\n\n ![](https://static.vue-js.com/fe150520-f7af-11eb-991d-334fd31f0201.png)\n\n实际上，如果想要熟练使用，超过60多个命令需要了解，下面则介绍下常见的的`git `命令\n\n\n\n## 二、有哪些\n\n\n\n\n\n## 配置\n\n`Git `自带一个 `git config` 的工具来帮助设置控制 `Git `外观和行为的配置变量，在我们安装完`git`之后，第一件事就是设置你的用户名和邮件地址\n\n后续每一个提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改\n\n设置提交代码时的用户信息命令如下：\n\n- git config [--global] user.name \"[name]\" \n- git config [--global] user.email \"[email address]\"\n\n\n\n\n\n### 启动\n\n一个`git`项目的初始有两个途径，分别是：\n\n- git init [project-name]：创建或在当前目录初始化一个git代码库\n- git clone url：下载一个项目和它的整个代码历史\n\n\n\n### 日常基本操作\n\n在日常工作中，代码常用的基本操作如下：\n\n- git init 初始化仓库，默认为 master 分支\n- git add . 提交全部文件修改到缓存区\n- git add <具体某个文件路径+全名> 提交某些文件到缓存区\n- git diff  查看当前代码 add后，会 add 哪些内容\n- git diff --staged查看现在 commit 提交后，会提交哪些内容\n- git status 查看当前分支状态\n- git pull <远程仓库名> <远程分支名> 拉取远程仓库的分支与本地当前分支合并\n- git pull <远程仓库名> <远程分支名>:<本地分支名> 拉取远程仓库的分支与本地某个分支合并\n- git commit -m \"<注释>\" 提交代码到本地仓库，并写提交注释\n- git commit -v 提交时显示所有diff信息\n- git commit --amend [file1] [file2] 重做上一次commit，并包括指定文件的新变化\n\n关于提交信息的格式，可以遵循以下的规则：\n\n- feat: 新特性，添加功能\n- fix: 修改 bug\n- refactor: 代码重构\n- docs: 文档修改\n- style: 代码格式修改, 注意不是 css 修改\n- test: 测试用例修改\n- chore: 其他修改, 比如构建流程, 依赖管理\n\n\n\n### 分支操作\n\n- git branch 查看本地所有分支\n- git branch -r 查看远程所有分支\n- git branch -a 查看本地和远程所有分支\n- git merge <分支名> 合并分支\n- git merge --abort 合并分支出现冲突时，取消合并，一切回到合并前的状态\n- git branch <新分支名> 基于当前分支，新建一个分支\n- git checkout --orphan <新分支名> 新建一个空分支（会保留之前分支的所有文件）\n- git branch -D <分支名> 删除本地某个分支\n- git push <远程库名> :<分支名> 删除远程某个分支\n- git branch <新分支名称> <提交ID> 从提交历史恢复某个删掉的某个分支\n- git branch -m <原分支名> <新分支名> 分支更名\n- git checkout <分支名> 切换到本地某个分支\n- git checkout <远程库名>/<分支名> 切换到线上某个分支\n- git checkout -b <新分支名> 把基于当前分支新建分支，并切换为这个分支\n\n\n\n\n\n### 远程同步\n\n远程操作常见的命令：\n\n- git fetch [remote] 下载远程仓库的所有变动\n- git remote -v 显示所有远程仓库\n- git pull [remote] [branch] 拉取远程仓库的分支与本地当前分支合并\n- git fetch 获取线上最新版信息记录，不合并\n- git push [remote] [branch] 上传本地指定分支到远程仓库\n- git push [remote] --force 强行推送当前分支到远程仓库，即使有冲突\n- git push [remote] --all 推送所有分支到远程仓库\n\n\n\n### 撤销\n\n- git checkout [file] 恢复暂存区的指定文件到工作区\n- git checkout [commit] [file]  恢复某个commit的指定文件到暂存区和工作区\n- git checkout . 恢复暂存区的所有文件到工作区\n- git reset [commit] 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n- git reset --hard 重置暂存区与工作区，与上一次commit保持一致\n- git reset [file] 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n- git revert [commit]  后者的所有变化都将被前者抵消，并且应用到当前分支\n\n> `reset`：真实硬性回滚，目标版本后面的提交记录全部丢失了\n>\n> `revert`：同样回滚，这个回滚操作相当于一个提价，目标版本后面的提交记录也全部都有\n\n\n\n### 存储操作\n\n你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作，但又不想提交这些杂乱的代码，这时候可以将代码进行存储\n\n- git stash 暂时将未提交的变化移除\n- git stash pop 取出储藏中最后存入的工作状态进行恢复，会删除储藏\n\n- git stash list 查看所有储藏中的工作\n- git stash apply <储藏的名称>  取出储藏中对应的工作状态进行恢复，不会删除储藏\n- git stash clear 清空所有储藏中的工作\n- git stash drop <储藏的名称>  删除对应的某个储藏\n\n\n\n## 三、总结\n\n`git`常用命令速查表如下所示：\n\n ![](https://static.vue-js.com/0a10f3c0-f7b0-11eb-991d-334fd31f0201.png)\n","level":2,"tagId":29}
{"_id":{"$oid":"61aa38647964120001917475"},"exerciseKey":"80d02415-01b5-428f-a5a5-3021d2ce9b75","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst name = \"Lydia\"\n\nconsole.log(name())\n```","options":"{\"options\":[\"SyntaxError\",\"ReferenceError\",\"TypeError\",\"undefined\"],\"isMulti\":false,\"answer\":[2]}","explanation":"变量`name`保存字符串的值，该字符串不是函数，因此无法调用。\n当值不是预期类型时，会抛出`TypeErrors`。 JavaScript期望`name`是一个函数，因为我们试图调用它。 但它是一个字符串，因此抛出`TypeError`：`name is not a function`\n当你编写了一些非有效的JavaScript时，会抛出语法错误，例如当你把`return`这个词写成`retrun`时。\n当JavaScript无法找到您尝试访问的值的引用时，抛出`ReferenceErrors`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa383dc2d0220001c963e6"},"exerciseKey":"00cd5cd3-49a5-4057-937b-4190d66c8198","category":"QA","renderType":"md","title":"offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？","desc":null,"options":null,"explanation":"clientWidth/clientHeight 返回的是元素的内部宽度，它的值只包含 content + padding，如果有滚动条，不包含滚动条。\n\nclientTop 返回的是上边框的宽度。\n\nclientLeft 返回的左边框的宽度。\n\noffsetWidth/offsetHeight 返回的是元素的布局宽度，它的值包含 content + padding + border 包含了滚动条。\n\noffsetTop 返回的是当前元素相对于其 offsetParent 元素的顶部的距离。\n\noffsetLeft 返回的是当前元素相对于其 offsetParent 元素的左部的距离。\n\nscrollWidth/scrollHeight 返回值包含 content + padding + 溢出内容的尺寸。\n\nscrollTop 属性返回的是一个元素的内容垂直滚动的像素数。\n\nscrollLeft 属性返回的是元素滚动条到元素左边的距离。","level":1,"tagId":10}
{"_id":{"$oid":"61aa383e85c5f70001542ea2"},"exerciseKey":"025473a3-19c3-4398-94ab-c3d72002dcce","category":"QA","renderType":"md","title":"说说对Redux中间件的理解？常用的中间件有哪些？实现原理？","desc":null,"options":null,"explanation":"## 一、是什么\n\n中间件（Middleware）是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的\n\n在上篇文章中，了解到了`Redux`整个工作流程，当`action`发出之后，`reducer`立即算出`state`，整个过程是一个同步的操作\n\n那么如果需要支持异步操作，或者支持错误处理、日志监控，这个过程就可以用上中间件\n\n`Redux`中，中间件就是放在就是在`dispatch`过程，在分发`action`进行拦截处理，如下图：\n\n ![](https://static.vue-js.com/57edf750-e699-11eb-ab90-d9ae814b240d.png)\n\n其本质上一个函数，对`store.dispatch`方法进行了改造，在发出 `Action `和执行 `Reducer `这两步之间，添加了其他功能\n\n\n## 二、常用的中间件\n\n有很多优秀的`redux`中间件，如：\n\n- redux-thunk：用于异步操作\n- redux-logger：用于日志记录\n\n上述的中间件都需要通过`applyMiddlewares`进行注册，作用是将所有的中间件组成一个数组，依次执行\n\n然后作为第二个参数传入到`createStore`中\n\n```js\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk, logger)\n);\n```\n\n### redux-thunk\n\n`redux-thunk`是官网推荐的异步处理中间件\n\n默认情况下的`dispatch(action)`，`action`需要是一个`JavaScript`的对象\n\n`redux-thunk`中间件会判断你当前传进来的数据类型，如果是一个函数，将会给函数传入参数值（dispatch，getState）\n\n- dispatch函数用于我们之后再次派发action\n- getState函数考虑到我们之后的一些操作需要依赖原来的状态，用于让我们可以获取之前的一些状态\n\n所以`dispatch`可以写成下述函数的形式：\n\n```js\nconst getHomeMultidataAction = () => {\n  return (dispatch) => {\n    axios.get(\"http://xxx.xx.xx.xx/test\").then(res => {\n      const data = res.data.data;\n      dispatch(changeBannersAction(data.banner.list));\n      dispatch(changeRecommendsAction(data.recommend.list));\n    })\n  }\n}\n```\n\n\n\n### redux-logger\n\n\n如果想要实现一个日志功能，则可以使用现成的`redux-logger`\n\n```js\nimport { applyMiddleware, createStore } from 'redux';\nimport createLogger from 'redux-logger';\nconst logger = createLogger();\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n);\n```\n\n这样我们就能简单通过中间件函数实现日志记录的信息\n\n\n\n## 三、实现原理\n\n首先看看`applyMiddlewares`的源码\n\n```js\nexport default function applyMiddleware(...middlewares) {\n  return (createStore) => (reducer, preloadedState, enhancer) => {\n    var store = createStore(reducer, preloadedState, enhancer);\n    var dispatch = store.dispatch;\n    var chain = [];\n\n    var middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    };\n    chain = middlewares.map(middleware => middleware(middlewareAPI));\n    dispatch = compose(...chain)(store.dispatch);\n\n    return {...store, dispatch}\n  }\n}\n```\n\n所有中间件被放进了一个数组`chain`，然后嵌套执行，最后执行`store.dispatch`。可以看到，中间件内部（`middlewareAPI`）可以拿到`getState`和`dispatch`这两个方法\n\n在上面的学习中，我们了解到了`redux-thunk`的基本使用\n\n内部会将`dispatch`进行一个判断，然后执行对应操作，原理如下：\n\n```js\nfunction patchThunk(store) {\n    let next = store.dispatch;\n\n    function dispatchAndThunk(action) {\n        if (typeof action === \"function\") {\n            action(store.dispatch, store.getState);\n        } else {\n            next(action);\n        }\n    }\n\n    store.dispatch = dispatchAndThunk;\n}\n```\n\n实现一个日志输出的原理也非常简单，如下：\n\n```js\nlet next = store.dispatch;\n\nfunction dispatchAndLog(action) {\n  console.log(\"dispatching:\", addAction(10));\n  next(addAction(5));\n  console.log(\"新的state:\", store.getState());\n}\n\nstore.dispatch = dispatchAndLog;\n```\n","level":3,"tagId":13}
{"_id":{"$oid":"61aa383e3dd7f70001832e83"},"exerciseKey":"02ba022f-9a63-4a9b-a668-1e2f01ab3493","category":"QA","renderType":"md","title":"什么是 git stash？","desc":null,"options":null,"explanation":"通常情况下，当你一直在处理项目的某一部分时，如果你想要在某个时候切换分支去处理其他事情，事情会处于混乱的状态。问题是，你不想把完成了一半的工作的提交，以便你以后就可以回到当前的工作。解决这个问题的答案是 git stash。\n\n再解释什么是git stash。\n\nstash 会将你的工作目录，即修改后的跟踪文件和暂存的更改保存在一堆未完成的更改中，你可以随时重新应用这些更改。\n\n","level":1,"tagId":29}
{"_id":{"$oid":"61aa383e3dd7f70001832e86"},"exerciseKey":"0356a1c0-f9a2-4fb1-98a5-fa409247fa8f","category":"QA","renderType":"md","title":"forEach中return有效果吗？如何中断forEach循环？","desc":null,"options":null,"explanation":"在forEach中用return不会返回，函数会继续执行。\n\n## 中断方法\n\n* 使用try监视代码块，在需要中断的地方抛出异常。\n* 官方推荐方法（替换方法）：用every和some替代forEach函数。\n\t* every在碰到return false的时候，中止循环。\n    * some在碰到return true的时候，中止循环。","level":2.5,"tagId":10}
{"_id":{"$oid":"61aa38423d5f3a0001af54f4"},"exerciseKey":"0f79ae77-1b2c-4602-a456-9444f54c71ff","category":"QA","renderType":"html","title":"HTTP协议的优点和缺点","desc":null,"options":null,"explanation":"<p style=\"text-align:left;text-indent:2em;\">HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。</p><p style=\"text-align:left;text-indent:2em;\">HTTP协议具有以下<strong>优点</strong>：</p><ul><li>支持客户端/服务器模式</li><li><strong>简单快速</strong>：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</li><li><strong>无连接</strong>：无连接的含义是限制每次链接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开链接，采用这种方式可以节省传输时间。</li><li><strong>无状态</strong>：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。</li><li><strong>灵活</strong>：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</li></ul><p style=\"text-align:left;text-indent:2em;\">HTTP协议具有以下<strong>缺点</strong>：</p><ul><li><strong>无状态：</strong> HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。</li><li><strong>明文传输：</strong> 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。</li><li><strong>不安全</strong></li></ul><p style=\"text-align:left;text-indent:2em;\">（1）通信使用明文（不加密），内容可能会被窃听 （2）不验证通信方的身份，因此有可能遭遇伪装 （3）无法证明报文的完整性，所以有可能已遭篡改</p><p></p>","level":1.5,"tagId":16}
{"_id":{"$oid":"61aa38437964120001917389"},"exerciseKey":"138cc142-490a-4ca9-8221-5f13429c807f","category":"QA","renderType":"md","title":"谈谈你知道的DOM常见的操作","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/a89c99a0-7fdc-11eb-ab90-d9ae814b240d.png)\n\n## 一、DOM\n\n文档对象模型 (DOM) 是 `HTML` 和 `XML` 文档的编程接口\n\n它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容\n\n任何 `HTML `或` XML `文档都可以用 `DOM `表示为一个由节点构成的层级结构\n\n节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系，如下所示：\n\n```html\n<html>\n    <head>\n        <title>Page</title>\n    </head>\n    <body>\n        <p>Hello World!</p >\n    </body>\n</html>\n```\n\n`DOM`像原子包含着亚原子微粒那样，也有很多类型的`DOM`节点包含着其他类型的节点。接下来我们先看看其中的三种：\n\n```html\n<div>\n    <p title=\"title\">\n        content\n    </p >\n</div>\n```\n\n上述结构中，`div`、`p`就是元素节点，`content`就是文本节点，`title`就是属性节点\n\n\n\n## 二、操作\n\n日常前端开发，我们都离不开`DOM`操作\n\n在以前，我们使用`Jquery`，`zepto`等库来操作`DOM`，之后在`vue`，`Angular`，`React`等框架出现后，我们通过操作数据来控制`DOM`（绝大多数时候），越来越少的去直接操作`DOM`\n\n但这并不代表原生操作不重要。相反，`DOM`操作才能有助于我们理解框架深层的内容\n\n下面就来分析`DOM`常见的操作，主要分为：\n\n- 创建节点\n- 查询节点\n- 更新节点\n- 添加节点\n- 删除节点\n\n\n\n### 创建节点\n\n#### createElement\n\n创建新元素，接受一个参数，即要创建元素的标签名\n\n```js\nconst divEl = document.createElement(\"div\");\n```\n\n\n\n#### createTextNode\n\n创建一个文本节点\n\n```js\nconst textEl = document.createTextNode(\"content\");\n```\n\n\n\n#### createDocumentFragment\n\n用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到`DOM`中\n\n```js\nconst fragment = document.createDocumentFragment();\n```\n\n当请求把一个`DocumentFragment` 节点插入文档树时，插入的不是 `DocumentFragment `自身，而是它的所有子孙节点\n\n\n\n#### createAttribute\n\n创建属性节点，可以是自定义属性\n\n```js\nconst dataAttribute = document.createAttribute('custom');\nconsle.log(dataAttribute);\n```\n\n\n\n### 获取节点\n\n#### querySelector\n\n传入任何有效的` css` 选择器，即可选中单个 `DOM `元素（首个）：\n\n```js\ndocument.querySelector('.element')\ndocument.querySelector('#element')\ndocument.querySelector('div')\ndocument.querySelector('[name=\"username\"]')\ndocument.querySelector('div + p > span')\n```\n\n如果页面上没有指定的元素时，返回 `null`\n\n\n\n#### querySelectorAll\n\n返回一个包含节点子树内所有与之相匹配的`Element`节点列表，如果没有相匹配的，则返回一个空节点列表\n\n```js\nconst notLive = document.querySelectorAll(\"p\");\n```\n\n需要注意的是，该方法返回的是一个 `NodeList `的静态实例，它是一个静态的“快照”，而非“实时”的查询\n\n\n\n\n\n关于获取`DOM`元素的方法还有如下，就不一一述说\n\n```js\ndocument.getElementById('id属性值');返回拥有指定id的对象的引用\ndocument.getElementsByClassName('class属性值');返回拥有指定class的对象集合\ndocument.getElementsByTagName('标签名');返回拥有指定标签名的对象集合\ndocument.getElementsByName('name属性值'); 返回拥有指定名称的对象结合\ndocument/element.querySelector('CSS选择器');  仅返回第一个匹配的元素\ndocument/element.querySelectorAll('CSS选择器');   返回所有匹配的元素\ndocument.documentElement;  获取页面中的HTML标签\ndocument.body; 获取页面中的BODY标签\ndocument.all[''];  获取页面中的所有元素节点的对象集合型\n```\n\n除此之外，每个`DOM`元素还有`parentNode`、`childNodes`、`firstChild`、`lastChild`、`nextSibling`、`previousSibling`属性，关系图如下图所示\n\n ![](https://static.vue-js.com/c100f450-7fdc-11eb-ab90-d9ae814b240d.png)\n\n\n\n### 更新节点\n\n#### innerHTML\n\n不但可以修改一个`DOM`节点的文本内容，还可以直接通过`HTML`片段修改`DOM`节点内部的子树\n\n```js\n// 获取<p id=\"p\">...</p >\nvar p = document.getElementById('p');\n// 设置文本为abc:\np.innerHTML = 'ABC'; // <p id=\"p\">ABC</p >\n// 设置HTML:\np.innerHTML = 'ABC <span style=\"color:red\">RED</span> XYZ';\n// <p>...</p >的内部结构已修改\n```\n\n\n\n#### innerText、textContent\n\n自动对字符串进行`HTML`编码，保证无法设置任何`HTML`标签\n\n```\n// 获取<p id=\"p-id\">...</p >\nvar p = document.getElementById('p-id');\n// 设置文本:\np.innerText = '<script>alert(\"Hi\")</script>';\n// HTML被自动编码，无法设置一个<script>节点:\n// <p id=\"p-id\">&lt;script&gt;alert(\"Hi\")&lt;/script&gt;</p >\n```\n\n两者的区别在于读取属性时，`innerText`不返回隐藏元素的文本，而`textContent`返回所有文本\n\n\n\n#### style\n\n`DOM`节点的`style`属性对应所有的`CSS`，可以直接获取或设置。遇到`-`需要转化为驼峰命名\n\n```js\n// 获取<p id=\"p-id\">...</p >\nconst p = document.getElementById('p-id');\n// 设置CSS:\np.style.color = '#ff0000';\np.style.fontSize = '20px'; // 驼峰命名\np.style.paddingTop = '2em';\n```\n\n\n\n\n\n### 添加节点\n\n#### innerHTML\n\n如果这个DOM节点是空的，例如，`<div></div>`，那么，直接使用`innerHTML = '<span>child</span>'`就可以修改`DOM`节点的内容，相当于添加了新的`DOM`节点\n\n如果这个DOM节点不是空的，那就不能这么做，因为`innerHTML`会直接替换掉原来的所有子节点\n\n\n\n#### appendChild\n\n把一个子节点添加到父节点的最后一个子节点\n\n举个例子\n\n```js\n<!-- HTML结构 -->\n<p id=\"js\">JavaScript</p >\n<div id=\"list\">\n    <p id=\"java\">Java</p >\n    <p id=\"python\">Python</p >\n    <p id=\"scheme\">Scheme</p >\n</div>\n```\n\n添加一个`p`元素\n\n```js\nconst js = document.getElementById('js')\njs.innerHTML = \"JavaScript\"\nconst list = document.getElementById('list');\nlist.appendChild(js);\n```\n\n现在`HTML`结构变成了下面\n\n```js\n<!-- HTML结构 -->\n<div id=\"list\">\n    <p id=\"java\">Java</p >\n    <p id=\"python\">Python</p >\n    <p id=\"scheme\">Scheme</p >\n    <p id=\"js\">JavaScript</p >  <!-- 添加元素 -->\n</div>\n```\n\n上述代码中，我们是获取`DOM`元素后再进行添加操作，这个`js`节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置\n\n如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置\n\n```js\nconst list = document.getElementById('list'),\nconst haskell = document.createElement('p');\nhaskell.id = 'haskell';\nhaskell.innerText = 'Haskell';\nlist.appendChild(haskell);\n```\n\n\n\n#### insertBefore\n\n把子节点插入到指定的位置，使用方法如下：\n\n```js\nparentElement.insertBefore(newElement, referenceElement)\n```\n\n子节点会插入到`referenceElement`之前\n\n\n\n#### setAttribute\n\n在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值\n\n```js\nconst div = document.getElementById('id')\ndiv.setAttribute('class', 'white');//第一个参数属性名，第二个参数属性值。\n```\n\n\n\n### 删除节点\n\n删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的`removeChild`把自己删掉\n\n```js\n// 拿到待删除节点:\nconst self = document.getElementById('to-be-removed');\n// 拿到父节点:\nconst parent = self.parentElement;\n// 删除:\nconst removed = parent.removeChild(self);\nremoved === self; // true\n```\n\n删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置\n","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa384339bf10000191c91c"},"exerciseKey":"13d7618b-87b1-41c1-9dbe-dbc9991d71c5","category":"QA","renderType":"md","title":"null 和 undefined 有什么区别？","desc":null,"options":null,"explanation":"首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\n\nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。\n\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n\n当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\n","level":1,"tagId":10}
{"_id":{"$oid":"61aa384534458700017f1bdd"},"exerciseKey":"17b59078-ccef-4190-9282-60805ddf6b3f","category":"QA","renderType":"md","title":"微信小程序bindtap  和  catchtap 区别？","desc":null,"options":null,"explanation":"* 相同点： 都是点击事件\n* 不同点： `bindtap` 不会阻止冒泡，`catchtap` 可以阻止冒泡。","level":0.5,"tagId":23}
{"_id":{"$oid":"61aa38458e97d90001808674"},"exerciseKey":"1892b9be-4b0d-4a4c-8522-182ed46e4df2","category":"QA","renderType":"md","title":"如何在React中应用样式？","desc":null,"options":null,"explanation":"将样式应用于React组件有三种方法。\n\n## 外部样式表\n\n在此方法中，你可以将外部样式表导入到组件使用类中。 但是你应该使用className而不是class来为React元素应用样式, 这里有一个例子。\n\n```react.js\nimport React from 'react';\nimport './App.css';\nimport { Header } from './header/header';\nimport { Footer } from './footer/footer';\nimport { Dashboard } from './dashboard/dashboard';\nimport { UserDisplay } from './userdisplay';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Dashboard />\n      <UserDisplay />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n## 内联样式\n\n在这个方法中，我们可以直接将 props 传递给HTML元素，属性为style。这里有一个例子。这里需要注意的重要一点是，我们将javascript对象传递给style，这就是为什么我们使用 `backgroundColor` 而不是CSS方法`backbackground-color`。\n\n```react.js\nimport React from 'react';\n\nexport const Header = () => {\n\n    const heading = 'TODO App'\n\n    return(\n        <div style={{backgroundColor:'orange'}}>\n            <h1>{heading}</h1>\n        </div>\n    )\n}\n```\n\n## 定义样式对象并使用它\n\n因为我们将javascript对象传递给style属性，所以我们可以在组件中定义一个style对象并使用它。下面是一个示例，你也可以将此对象作为 props 传递到组件树中。\n\n```react.js\nimport React from 'react';\n\nconst footerStyle = {\n    width: '100%',\n    backgroundColor: 'green',\n    padding: '50px',\n    font: '30px',\n    color: 'white',\n    fontWeight: 'bold'\n}\n\nexport const Footer = () => {\n    return(\n        <div style={footerStyle}>\n            All Rights Reserved 2019\n        </div>\n    )\n}\n```\n\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa384881337a00011e0535"},"exerciseKey":"24674728-b580-4985-8fb0-e7c304f5e406","category":"QA","renderType":"md","title":"说说 git 发生冲突的场景？如何解决？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/8aeccc40-fdb3-11eb-bc6f-3f06e1491664.png)\n\n## 一、是什么\n\n一般情况下，出现分支的场景有如下：\n\n- 多个分支代码合并到一个分支时\n- 多个分支向同一个远端分支推送\n\n具体情况就是，多个分支修改了同一个文件（任何地方）或者多个分支修改了同一个文件的名称\n\n如果两个分支中分别修改了不同文件中的部分，是不会产生冲突，直接合并即可\n\n应用在命令中，就是`push`、`pull`、`stash`、`rebase`等命令下都有可能产生冲突情况，从本质上来讲，都是`merge`和`patch`（应用补丁）时产生冲突\n\n\n\n## 二、分析\n\n在本地主分值`master`创建一个`a.txt`文件，文件起始位置写上`master commit`，如下：\n\n ![](https://static.vue-js.com/959ade20-fdb3-11eb-991d-334fd31f0201.png)\n\n然后提交到仓库：\n\n- git add a.txt\n- git commit -m 'master first commit'\n\n创建一个新的分支`featurel1`分支，并进行切换，如下：\n\n```cmd\ngit checkout -b featurel1\n```\n\n然后修改`a.txt`文件首行文字为 `featurel commit`，然后添加到暂存区，并开始进行提交到仓库：\n\n- git add a.txt\n- git commit -m 'featurel  first change'\n\n然后通过`git checkout master`切换到主分支，通过`git merge`进行合并，发现不会冲突\n\n此时`a.txt`文件的内容变成`featurel commit`，没有出现冲突情况，这是因为`git`在内部发生了快速合并\n\n> 如果当前分支的每一个提交(commit)都已经存在另一个分支里了，git 就会执行一个“快速向前”(fast forward)操作\n>\n> git 不创建任何新的提交(commit)，只是将当前分支指向合并进来的分支\n\n如果此时切换到`featurel`分支，将文件的内容修改成`featrue second commit`，然后提交到本地仓库\n\n然后切换到主分支，如果此时在`a.txt`文件再次修改，修改成`mastet second commit`，然后再次提交到本地仓库\n\n此时，`master`分支和`feature1`分支各自都分别有新的提交，变成了下图所示：\n\n ![](https://static.vue-js.com/a05488c0-fdb3-11eb-991d-334fd31f0201.png)\n\n这种情况下，无法执行快速合并，只能试图把各自的修改合并起来，但这种合并就可能会有冲突\n\n现在通过`git merge featurel`进行分支合并，如下所示：\n\n ![](https://static.vue-js.com/b0991d90-fdb3-11eb-bc6f-3f06e1491664.png)\n\n从冲突信息可以看到，`a.txt`发生冲突，必须手动解决冲突之后再提交\n\n而`git status`同样可以告知我们冲突的文件：\n\n ![](https://static.vue-js.com/c5823430-fdb3-11eb-991d-334fd31f0201.png)\n\n打开`a.txt`文件，可以看到如下内容：\n\n ![](https://static.vue-js.com/ce7a0a90-fdb3-11eb-bc6f-3f06e1491664.png)\n\n`git`用`<<<<<<<`，`=======`，`>>>>>>>`标记出不同分支的内容：\n\n- <<<<<<< 和 ======= 之间的区域就是当前更改的内容\n- ======= 和 >>>>>>> 之间的区域就是传入进来更改的内容\n\n现在要做的事情就是将冲突的内容进行更改，对每个文件使用 `git add` 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，`Git `就会将它们标记为冲突已解决然后再提交：\n\n- git add a.txt\n- git commit -m \"conflict fixed\"\n\n此时`master`分支和`feature1`分支变成了下图所示：\n\n ![](https://static.vue-js.com/d7421e60-fdb3-11eb-bc6f-3f06e1491664.png)\n\n使用`git log`命令可以看到合并的信息：\n\n ![](https://static.vue-js.com/e0dfd1b0-fdb3-11eb-991d-334fd31f0201.png)\n\n\n\n\n\n## 三、总结\n\n当`Git`无法自动合并分支时，就必须首先解决冲突，解决冲突后，再提交，合并完成\n\n解决冲突就是把`Git`合并失败的文件手动编辑为我们希望的内容，再提交\n","level":3,"tagId":29}
{"_id":{"$oid":"61aa384854ebf60001a1a35c"},"exerciseKey":"246fb719-7819-481e-943d-480a219e29b4","category":"QA","renderType":"md","title":"什么是尾调用优化和尾递归？","desc":null,"options":null,"explanation":"## 什么是尾调用？\n\n尾调用的概念非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。\n\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n\n上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。\n\n以下两种情况，都不属于尾调用。\n\n```javascript\n// 情况一\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 情况二\nfunction f(x){\n  return g(x) + 1;\n}\n```\n\n上面代码中，情况一是调用函数g之后，还有别的操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。\n\n尾调用不一定出现在函数尾部，只要是最后一步操作即可。\n\n```\nfunction f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n```\n\n上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。\n\n## 尾调用优化\n\n尾调用之所以与其他调用不同，就在于它的特殊的调用位置。\n\n我们知道，函数调用会在内存形成一个\"调用记录\"，又称\"调用帧\"（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用记录上方，还会形成一个B的调用记录。等到B运行结束，将结果返回到A，B的调用记录才会消失。如果函数B内部还调用函数C，那就还有一个C的调用记录栈，以此类推。所有的调用记录，就形成一个\"调用栈\"（call stack）。\n\n尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。\n\n```javascript\nfunction f() {\n  let m = 1;\n  let n = 2;\n  return g(m + n);\n}\nf();\n\n// 等同于\nfunction f() {\n  return g(3);\n}\nf();\n\n// 等同于\ng(3);\n```\n\n上面代码中，如果函数g不是尾调用，函数f就需要保存内部变量m和n的值、g的调用位置等信息。但由于调用g之后，函数f就结束了，所以执行到最后一步，完全可以删除 f() 的调用记录，只保留 g(3) 的调用记录。\n\n这就叫做\"尾调用优化\"（Tail call optimization），即只保留内层函数的调用记录。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用记录只有一项，这将大大节省内存。这就是\"尾调用优化\"的意义。\n\n## 尾递归\n\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生\"栈溢出\"错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\"栈溢出\"错误。\n\n```javascript\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n```\n\n上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。\n\n如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。\n\n```javascript\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1) // 120\n```\n\n\"尾调用优化\"对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6也是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署\"尾调用优化\"。这就是说，在 ES6 中，只要使用尾递归，就不会发生栈溢出，相对节省内存。\n","level":2,"tagId":15}
{"_id":{"$oid":"61aa3849d00c060001bf119a"},"exerciseKey":"289617b6-a28f-4528-be36-ac9e08e9d2c1","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst person = {\n\tfirstName: \"Lydia\",\n\tlastName: \"Hallie\",\n\tpet: {\n\t\tname: \"Mara\",\n\t\tbreed: \"Dutch Tulip Hound\"\n\t},\n\tgetFullName() {\n\t\treturn `${this.firstName} ${this.lastName}`;\n\t}\n};\n\nconsole.log(person.pet?.name);\nconsole.log(person.pet?.family?.name);\nconsole.log(person.getFullName?.());\nconsole.log(member.getLastName?.());\n```","options":"{\"options\":[\"undefined undefined undefined undefined\",\"Mara undefined Lydia Hallie undefined\",\"Mara null Lydia Hallie null\",\"null ReferenceError null ReferenceError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"通过 ES10 或 TS3.7+[可选链操作符 `?.`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE)，我们不再需要显式检测更深层的嵌套值是否有效。如果我们尝试获取 `undefined` 或 `null` 的值 (_nullish_)，表达将会短路并返回 `undefined`.\n`person.pet?.name`： `person` 有一个名为 `pet` 的属性： `person.pet` 不是 nullish。它有个名为 `name` 的属性，并返回字符串 `Mara`。\n`person.pet?.family?.name`： `person` 有一个名为 `pet` 的属性： `person.pet` 不是 nullish. `pet` _并没有_ 一个名为 `family` 的属性, `person.pet.family` 是 nullish。表达式返回 `undefined`。\n`person.getFullName?.()`： `person` 有一个名为 `getFullName` 的属性： `person.getFullName()` 不是 nullish 并可以被调用，返回字符串 `Lydia Hallie`。\n`member.getLastName?.()`: `member` is not defined: `member.getLastName()` is nullish. The expression returns `undefined`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa384bbdfab500012c840a"},"exerciseKey":"2e7f32d3-6c83-42f0-adbc-262e4dd53db1","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconsole.log(\"I want pizza\"[0])\n```","options":"{\"options\":[\"\\\"\\\"\\\"\",\"\\\"I\\\"\",\"SyntaxError\",\"undefined\"],\"isMulti\":false,\"answer\":[1]}","explanation":"可以使用方括号表示法获取字符串中特定索引的字符，字符串中的第一个字符具有索引0，依此类推。 在这种情况下，我们想要得到索引为0的元素，字符`'I'`被记录。\n请注意，IE7及更低版本不支持此方法。 在这种情况下，应该使用`.charAt（）`","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384b54ebf60001a1a371"},"exerciseKey":"2eb7d8d6-731e-444d-9f2f-c8bdea7f50eb","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nconst settings = {\n  username: \"lydiahallie\",\n  level: 19,\n  health: 90\n};\n\nconst data = JSON.stringify(settings, [\"level\", \"health\"]);\nconsole.log(data);\n```","options":"{\"options\":[\"\\\"{\\\"level\\\":19, \\\"health\\\":90}\\\"\",\"\\\"{\\\"username\\\": \\\"lydiahallie\\\"}\\\"\",\"\\\"[\\\"level\\\", \\\"health\\\"]\\\"\",\"\\\"{\\\"username\\\": \\\"lydiahallie\\\", \\\"level\\\":19, \\\"health\\\":90}\\\"\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`JSON.stringify`的第二个参数是 _替代者(replacer)_. 替代者(replacer)可以是个函数或数组，用以控制哪些值如何被转换为字符串。\n如果替代者(replacer)是个 _数组_ ，那么就只有包含在数组中的属性将会被转化为字符串。在本例中，只有名为`\"level\"` 和 `\"health\"` 的属性被包括进来， `\"username\"`则被排除在外。 `data` 就等于 `\"{\"level\":19, \"health\":90}\"`.\n而如果替代者(replacer)是个 _函数_，这个函数将被对象的每个属性都调用一遍。\n函数返回的值会成为这个属性的值，最终体现在转化后的JSON字符串中（译者注：Chrome下，经过实验，如果所有属性均返回同一个值的时候有异常，会直接将返回值作为结果输出而不会输出JSON字符串），而如果返回值为`undefined`，则该属性会被排除在外。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384cc2d0220001c9643c"},"exerciseKey":"31809048-eda0-40d6-847a-0d04d28b6432","category":"QA","renderType":"md","title":"请说说cookie与session有什么区别？","desc":null,"options":null,"explanation":"* 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session。\n\n典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。\n\n在服务端保存Session的方法很多，内存、数据库、文件都有。\n\n集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。\n\n* 思考一下服务端如何识别特定的客户？\n\n这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。\n\n有人问，如果客户端的浏览器禁用了 Cookie 怎么办？\n\n一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。\n\n* Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？\n\n这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。\n\n这也是Cookie名称的由来，给用户的一点甜头。\n\n所以，**总结一下**：\n\n* Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；\n* Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。","level":1,"tagId":30}
{"_id":{"$oid":"61aa384c54ebf60001a1a379"},"exerciseKey":"319f4c73-a33b-42bb-842c-a5a5e31c101e","category":"QA","renderType":"md","title":"64匹马，8个赛道，找出最快的4匹马，要比赛多少轮？","desc":null,"options":null,"explanation":"首先把64匹马分成8组，跑8次。每一组都会得到8匹的相对速度，也就是在同一组内的名次。\n\n![image.png](https://i.loli.net/2021/08/25/JtWjOQL2UDMrEVI.png)\n\n为了方便描述，我们用编号来表示。如A组里面的名次分别用来表示。\n\n![image.png](https://i.loli.net/2021/08/25/bB2svSrgLxEWwXz.png)\n\n因为我们只需要找出最快的4匹，那么肯定不属于最快的4匹，同理把每一组的后4名先排除。\n\n![image.png](https://i.loli.net/2021/08/25/9Vj3pSnhH5Q82mq.png)\n\n现在每一组内都有相对名次，但不同的组间是不知道的。如果把A组和B组放一起，下面的情况都可能存在。\n\n![image.png](https://i.loli.net/2021/08/25/ZGLuaMKvgjAe29S.png)\n\n因为是要找最快的，所以选择每组的第一名再出来跑一次，这样落后的第一名所在的整组都可以排除。为了描述方便，把最快到最慢的第一名所在的组依次重新命名为A，B...H组。\n\n![image.png](https://i.loli.net/2021/08/25/rgVQsYCO9yo8P3i.png)\n\n组间的第一名有了名次关系，可以发现一定不属于前4名，因为都在他们前面。同理可排除。同时是最快的，一定属于前4。那接下来只需在剩下的9匹中找出前3。\n\n![image.png](https://i.loli.net/2021/08/25/jIxaUTHmnlyfD3w.png)\n\n除去A3，其余8匹跑一次。如果A2在第3名或者更后，那说明已经选出了前3名，也不用再跑了，否则再取前3和A3一起跑一次，即可得结果。\n\n![image.png](https://i.loli.net/2021/08/25/r5uyWwgtc3CApms.png)\n\n最多11次一定可以选出最快的4匹。\n\n\n\n\n\n","level":3.5,"tagId":17}
{"_id":{"$oid":"61aa384d3d5f3a0001af5546"},"exerciseKey":"3707a3b3-2330-4833-9c9b-b427887f8ee9","category":"QA","renderType":"md","title":"Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？","desc":null,"options":null,"explanation":"\r\n\r\n ![](https://static.vue-js.com/8d6dd7b0-6048-11eb-85f6-6fac77c0c9b3.png)\r\n \r\n## 开始之前\r\n`Composition API` 可以说是`Vue3`的最大特点，那么为什么要推出`Composition Api`，解决了什么问题？\r\n\r\n通常使用`Vue2`开发的项目，普遍会存在以下问题：\r\n\r\n- 代码的可读性随着组件变大而变差\r\n- 每一种代码复用的方式，都存在缺点\r\n- TypeScript支持有限\r\n\r\n以上通过使用`Composition Api`都能迎刃而解\r\n\r\n## 正文\r\n### 一、Options Api\r\n\r\n`Options API`，即大家常说的选项API，即以`vue`为后缀的文件，通过定义`methods`，`computed`，`watch`，`data`等属性与方法，共同处理页面逻辑\r\n\r\n如下图：\r\n\r\n ![](https://static.vue-js.com/9bf6d9d0-6048-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n可以看到`Options`代码编写方式，如果是组件状态，则写在`data`属性上，如果是方法，则写在`methods`属性上...\r\n\r\n用组件的选项 (`data`、`computed`、`methods`、`watch`) 组织逻辑在大多数情况下都有效\r\n\r\n然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解\r\n\r\n\r\n### 二、Composition Api \r\n\r\n在 Vue3 Composition API 中，组件根据逻辑功能来组织的，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合）\r\n\r\n即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API\r\n\r\n\r\n ![](https://static.vue-js.com/acee9200-6048-11eb-ab90-d9ae814b240d.png)\r\n\r\n\r\n\r\n### 三、对比\r\n\r\n下面对`Composition Api `与`Options Api`进行两大方面的比较\r\n\r\n- 逻辑组织\r\n- 逻辑复用\r\n\r\n\r\n\r\n#### 逻辑组织\r\n\r\n##### Options API\r\n\r\n假设一个组件是一个大型组件，其内部有很多处理逻辑关注点（对应下图不用颜色）\r\n\r\n ![](https://static.vue-js.com/dc83d070-6048-11eb-ab90-d9ae814b240d.png)\r\n\r\n\r\n\r\n可以看到，这种碎片化使得理解和维护复杂组件变得困难\r\n\r\n选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块\r\n\r\n\r\n\r\n##### Compostion API\r\n\r\n而`Compositon API`正是解决上述问题，将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去\r\n\r\n下面举个简单例子，将处理`count`属性相关的代码放在同一个函数了\r\n\r\n```js\r\nfunction useCount() {\r\n    let count = ref(10);\r\n    let double = computed(() => {\r\n        return count.value * 2;\r\n    });\r\n\r\n    const handleConut = () => {\r\n        count.value = count.value * 2;\r\n    };\r\n\r\n    console.log(count);\r\n\r\n    return {\r\n        count,\r\n        double,\r\n        handleConut,\r\n    };\r\n}\r\n```\r\n\r\n组件上中使用`count`\r\n\r\n```js\r\nexport default defineComponent({\r\n    setup() {\r\n        const { count, double, handleConut } = useCount();\r\n        return {\r\n            count,\r\n            double,\r\n            handleConut\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n再来一张图进行对比，可以很直观地感受到 `Composition API `在逻辑组织方面的优势，以后修改一个属性功能的时候，只需要跳到控制该属性的方法中即可\r\n\r\n![](https://static.vue-js.com/e5804bc0-5c58-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n\r\n\r\n\r\n\r\n#### 逻辑复用\r\n\r\n在`Vue2`中，我们是用过`mixin`去复用相同的逻辑\r\n\r\n下面举个例子，我们会另起一个`mixin.js`文件\r\n\r\n```js\r\nexport const MoveMixin = {\r\n  data() {\r\n    return {\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    handleKeyup(e) {\r\n      console.log(e.code);\r\n      // 上下左右 x y\r\n      switch (e.code) {\r\n        case \"ArrowUp\":\r\n          this.y--;\r\n          break;\r\n        case \"ArrowDown\":\r\n          this.y++;\r\n          break;\r\n        case \"ArrowLeft\":\r\n          this.x--;\r\n          break;\r\n        case \"ArrowRight\":\r\n          this.x++;\r\n          break;\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    window.addEventListener(\"keyup\", this.handleKeyup);\r\n  },\r\n\r\n  unmounted() {\r\n    window.removeEventListener(\"keyup\", this.handleKeyup);\r\n  },\r\n};\r\n\r\n```\r\n\r\n然后在组件中使用\r\n\r\n```js\r\n<template>\r\n  <div>\r\n    Mouse position: x {{ x }} / y {{ y }}\r\n  </div>\r\n</template>\r\n<script>\r\nimport mousePositionMixin from './mouse'\r\nexport default {\r\n  mixins: [mousePositionMixin]\r\n}\r\n</script>\r\n```\r\n\r\n使用单个` mixin `似乎问题不大，但是当我们一个组件混入大量不同的 `mixins` 的时候\r\n\r\n```js\r\nmixins: [mousePositionMixin, fooMixin, barMixin, otherMixin]\r\n```\r\n\r\n会存在两个非常明显的问题：\r\n\r\n- 命名冲突\r\n- 数据来源不清晰\r\n\r\n\r\n现在通过`Compositon API`这种方式改写上面的代码\r\n\r\n```js\r\nimport { onMounted, onUnmounted, reactive } from \"vue\";\r\nexport function useMove() {\r\n  const position = reactive({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n\r\n  const handleKeyup = (e) => {\r\n    console.log(e.code);\r\n    // 上下左右 x y\r\n    switch (e.code) {\r\n      case \"ArrowUp\":\r\n        // y.value--;\r\n        position.y--;\r\n        break;\r\n      case \"ArrowDown\":\r\n        // y.value++;\r\n        position.y++;\r\n        break;\r\n      case \"ArrowLeft\":\r\n        // x.value--;\r\n        position.x--;\r\n        break;\r\n      case \"ArrowRight\":\r\n        // x.value++;\r\n        position.x++;\r\n        break;\r\n    }\r\n  };\r\n\r\n  onMounted(() => {\r\n    window.addEventListener(\"keyup\", handleKeyup);\r\n  });\r\n\r\n  onUnmounted(() => {\r\n    window.removeEventListener(\"keyup\", handleKeyup);\r\n  });\r\n\r\n  return { position };\r\n}\r\n```\r\n\r\n在组件中使用\r\n\r\n```js\r\n<template>\r\n  <div>\r\n    Mouse position: x {{ x }} / y {{ y }}\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { useMove } from \"./useMove\";\r\nimport { toRefs } from \"vue\";\r\nexport default {\r\n  setup() {\r\n    const { position } = useMove();\r\n    const { x, y } = toRefs(position);\r\n    return {\r\n      x,\r\n      y,\r\n    };\r\n\r\n  },\r\n};\r\n</script>\r\n```\r\n\r\n可以看到，整个数据来源清晰了，即使去编写更多的 hook 函数，也不会出现命名冲突的问题\r\n\r\n\r\n### 小结\r\n\r\n- 在逻辑组织和逻辑复用方面，`Composition API`是优于`Options  API`\r\n- 因为`Composition API`几乎是函数，会有更好的类型推断。\r\n- `Composition API `对 `tree-shaking` 友好，代码也更容易压缩\r\n- `Composition API`中见不到`this`的使用，减少了`this`指向不明的情况\r\n- 如果是小型组件，可以继续使用`Options API`，也是十分友好的","level":3,"tagId":14}
{"_id":{"$oid":"61aa384fff0573000165b257"},"exerciseKey":"3ae5a790-ccaf-468c-b829-e38dfd572582","category":"QA","renderType":"md","title":"无重复字符的最长子串","desc":"给定一个字符串 **s** ，请你找出其中不含有重复字符的 **最长子串** 的长度。\n\n* 示例 1:\n\n```\n输入: s = \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n* 示例 2:\n\n```\n输入: s = \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n* 示例 3:\n\n```\n输入: s = \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n* 示例 4:\n\n```\n输入: s = \"\"\n输出: 0\n```\n\n* 提示：\n\t* 0 <= s.length <= 5 * 104\n\t* s 由英文字母、数字、符号和空格组成\n\n\n","options":null,"explanation":"## 滑动窗口\n\n### 思路和算法\n\n我们先用一个例子考虑如何在较优的时间复杂度内通过本题。\n\n我们不妨以示例一中的字符串 abcabcbb 为例，找出从每一个字符开始的，不包含重复字符的最长子串，那么其中最长的那个字符串即为答案。对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：\n\n* 以 (a)bcabcbb 开始的最长字符串为 (abc)abcbb；\n* 以 a(b)cabcbb 开始的最长字符串为 a(bca)bcbb；\n* 以 ab(c)abcbb 开始的最长字符串为 ab(cab)cbb；\n* 以 abc(a)bcbb 开始的最长字符串为 abc(abc)bb；\n* 以 abca(b)cbb 开始的最长字符串为 abca(bc)bb；\n* 以 abcab(c)bb 开始的最长字符串为 abcab(cb)b；\n* 以 abcabc(b)b 开始的最长字符串为 abcabc(b)b；\n* 以 abcabcb(b) 开始的最长字符串为 abcabcb(b)。\n\n发现了什么？如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！这里的原因在于，假设我们选择字符串中的第 k 个字符作为起始位置，并且得到了不包含重复字符的最长子串的结束位置为 r(k) ，。那么当我们选择第 k+1 个字符作为起始位置时，首先从 k+1 到 r(k) 的字符显然是不重复的，并且由于少了原本的第 k 个字符，我们可以尝试继续增大 r(k)，直到右侧出现了重复字符为止。\n\n这样一来，我们就可以使用「滑动窗口」来解决这个问题了：\n\n我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着上文中「枚举子串的起始位置」，而右指针即为上文中的 r(k)；\n\n在每一步的操作中，我们会将左指针向右移动一格，表示 我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度；\n\n在枚举结束后，我们找到的最长的子串的长度即为答案。\n\n```js\nvar lengthOfLongestSubstring = function(s) {\n    // 哈希集合，记录每个字符是否出现过\n    const occ = new Set();\n    const n = s.length;\n    // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n    let rk = -1, ans = 0;\n    for (let i = 0; i < n; ++i) {\n        if (i != 0) {\n            // 左指针向右移动一格，移除一个字符\n            occ.delete(s.charAt(i - 1));\n        }\n        while (rk + 1 < n && !occ.has(s.charAt(rk + 1))) {\n            // 不断地移动右指针\n            occ.add(s.charAt(rk + 1));\n            ++rk;\n        }\n        // 第 i 到 rk 个字符是一个极长的无重复字符子串\n        ans = Math.max(ans, rk - i + 1);\n    }\n    return ans;\n};\n```\n\n### 复杂度分析\n\n时间复杂度：O(N)，其中 N 是字符串的长度。左指针和右指针分别会遍历整个字符串一次。\n\n空间复杂度：O(∣Σ∣)，其中 Σ 表示字符集（即字符串中可以出现的字符），∣Σ∣ 表示字符集的大小。在本题中没有明确说明字符集，因此可以默认为所有 ASCII 码在 [0,128) 内的字符，即 ∣Σ∣=128。我们需要用到哈希集合来存储出现过的字符，而字符最多有 ∣Σ∣ 个，因此空间复杂度为 O(∣Σ∣)。\n\n","level":3,"tagId":31}
{"_id":{"$oid":"61aa385034458700017f1c3a"},"exerciseKey":"3dc3b575-dc56-47b6-87b3-e83315630812","category":"QA","renderType":"md","title":"123['toString'].length + 123 的输出值是多少？","desc":null,"options":null,"explanation":"## function的length\n\n```js\nfunction fn1 (name) {}\n\nfunction fn2 (name = '林三心') {}\n\nfunction fn3 (name, age = 22) {}\n\nfunction fn4 (name, age = 22, gender) {}\n\nfunction fn5(name = '林三心', age, gender) { }\n\nconsole.log(fn1.length) // 1\nconsole.log(fn2.length) // 0\nconsole.log(fn3.length) // 1\nconsole.log(fn4.length) // 1\nconsole.log(fn5.length) // 0\n```\n\nfunction的length，就是第一个具有默认值之前的参数个数。\n\n在函数的形参中，还有剩余参数这个东西，那如果具有剩余参数，会是怎么算呢？\n\n```\nfunction fn1(name, ...args) {}\n\nconsole.log(fn1.length) // 1\n```\n\n可以看出，剩余参数是不算进length的计算之中的。\n\n所以，123['toString'].length + 123 = ?的答案是124\n\n## 总结\n\nlength 是函数对象的一个属性值，指该函数有多少个必须要传入的参数，即形参的个数。形参的数量不包括剩余参数个数，仅包括第一个具有默认值之前的参数个数\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa385034458700017f1c3b"},"exerciseKey":"3f8c30d2-789e-4108-80c2-30bc0f4ed50c","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nclass Person {\n  constructor() {\n    this.name = \"Lydia\"\n  }\n}\n\nPerson = class AnotherPerson {\n  constructor() {\n    this.name = \"Sarah\"\n  }\n}\n\nconst member = new Person()\nconsole.log(member.name)\n```","options":"{\"options\":[\"\\\"Lydia\\\"\",\"\\\"Sarah\\\"\",\"Error: cannot redeclare Person\",\"SyntaxError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"我们可以将类设置为等于其他类/函数构造函数。 在这种情况下，我们将`Person`设置为`AnotherPerson`。 这个构造函数的名字是`Sarah`，所以新的`Person`实例`member`上的name属性是`Sarah`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3852d00c060001bf11e3"},"exerciseKey":"43f99048-e5ee-4041-a7f4-65a4d5ef379f","category":"QA","renderType":"md","title":"说说 HTML、XML、XHTML 的区别","desc":null,"options":null,"explanation":"* HTML：超文本标记语言，是语法较为松散的、不严格的Web语言；\n* XML：可扩展的标记语言，主要用于存储数据和结构，可扩展；\n* XHTML：可扩展的超文本标记语言，基于XML，作用与HTML类似，但语法更严格。\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa385339bf10000191c990"},"exerciseKey":"4af06e53-d9ca-4a28-8067-d4ffc3691827","category":"QA","renderType":"md","title":"类数组转化为数组","desc":"类数组是具有length属性，但不具有数组原型上的方法。常见的类数组有arguments、DOM操作方法返回的结果。","options":null,"explanation":"* 方法一：Array.from\n```js\nArray.from(document.querySelectorAll('div'))\n```\n\n* 方法二：Array.prototype.slice.call()\n```js\nArray.prototype.slice.call(document.querySelectorAll('div'))\n```\n\n* 方法三：扩展运算符\n```js\n[...document.querySelectorAll('div')]\n```\n\n* 方法四：利用concat\n```js\nArray.prototype.concat.apply([], document.querySelectorAll('div'));\n```\n","level":1.5,"tagId":26}
{"_id":{"$oid":"61aa38540f30890001ab80b5"},"exerciseKey":"4c911fbf-c243-476a-ad8d-09a7868b304e","category":"QA","renderType":"md","title":"分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景","desc":null,"options":null,"explanation":"## 结构\n\ndisplay:none: 会让元素完全从渲染树中消失，渲染的时候不占据任何空间, 不能点击，\nvisibility: hidden:不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见，不能点击\nopacity: 0: 不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见，可以点击\n\n## 继承\ndisplay: none和opacity: 0：是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示。\nvisibility: hidden：是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式。\n\n## 性能\n\ndisplaynone : 修改元素会造成文档回流,读屏器不会读取display: none元素内容，性能消耗较大\nvisibility:hidden: 修改元素只会造成本元素的重绘,性能消耗较少读屏器读取visibility: hidden元素内容\nopacity: 0 ：修改元素会造成重绘，性能消耗较少","level":2,"tagId":11}
{"_id":{"$oid":"61aa3854cd02c30001dd220c"},"exerciseKey":"4caa6281-4592-4f6b-ac70-73effa2bcf0d","category":"QA","renderType":"md","title":"使用React Hooks有什么优势？","desc":null,"options":null,"explanation":"hooks 是react 16.8 引入的特性，他允许你在不写class的情况下操作state 和react的其他特性。\n\nReact Hooks 要解决的问题是状态共享，是继 render-props 和 higher-order components 之后的第三种状态共享方案，不会产生 JSX 嵌套地狱问题。\n\n这个状态指的是状态逻辑，所以称为状态逻辑复用会更恰当，因为只共享数据处理逻辑，不会共享数据本身。\n\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa3855ff0573000165b27a"},"exerciseKey":"50a3f8fb-9e65-4a24-b4e4-60c02bb26cdc","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nfunction sayHi(name) {\n  return `Hi there, ${name}`\n}\n\nconsole.log(sayHi())\n```","options":"{\"options\":[\"Hi there, \",\"Hi there, undefined\",\"Hi there, null\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"默认情况下，如果不给函数传参，参数的值将为`undefined`。 上述情况，我们没有给参数`name`传值。 `name`等于`undefined`，并被打印。\n在ES6中，我们可以使用默认参数覆盖此默认的`undefined`值。 例如：\n`function sayHi（name =“Lydia”）{...}`\n在这种情况下，如果我们没有传递值或者如果我们传递`undefined`，`name`总是等于字符串`Lydia`","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3857c2d0220001c9647d"},"exerciseKey":"56761806-2660-4eac-8e8a-ced03357c95d","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction getAge() {\n  'use strict'\n  age = 21\n  console.log(age)\n}\n\ngetAge()\n```","options":"{\"options\":[\"21\",\"undefined\",\"ReferenceError\",\"TypeError\"],\"isMulti\":false,\"answer\":[2]}","explanation":"使用 `\"use strict\"`，你可以确保不会意外地声明全局变量。我们从来没有声明变量 `age`，因为我们使用 `\"use strict\"`，它将抛出一个引用错误。如果我们不使用 `\"use strict\"`，它就会工作，因为属性 `age` 会被添加到全局对象中了。","level":1,"tagId":32}
{"_id":{"$oid":"61aa3859796412000191742a"},"exerciseKey":"5c174882-c1e7-4c08-a71a-f4c991be552f","category":"QA","renderType":"md","title":"什么是BFC？","desc":null,"options":null,"explanation":"BFC：block formatting context，块级格式化上下文。\n\nBFC是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。\n\n定位方案：\n\n* 内部的Box会在垂直方向上一个接一个放置。\n* Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠。\n* 每个元素的margin box 的左边，与包含块border box的左边相接触。\n* BFC的区域不会与float box重叠。\n* BFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n* 计算BFC的高度时，浮动元素也会参与计算。\n\n满足下列条件之一就可触发BFC:\n\n* 根元素，即html\n* float的值不为none（默认）\n* overflow的值不为visible（默认）\n* display的值为table-cell, table-caption, inline-block, flex, 或者 inline-flex 中的其中一个\n* position的值为absolute或fixed","level":3,"tagId":11}
{"_id":{"$oid":"61aa385c0f30890001ab80f1"},"exerciseKey":"6836d3b0-9007-4946-a113-cc77fe8d8ace","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst fruit = ['🍌', '🍊', '🍎']\n\nfruit.slice(0, 1)\nfruit.splice(0, 1)\nfruit.unshift('🍇')\n\nconsole.log(fruit)\n```","options":"{\"options\":[\"['🍌', '🍊', '🍎']\",\"['🍊', '🍎']\",\"['🍇', '🍊', '🍎']\",\"['🍇', '🍌', '🍊', '🍎']\"],\"isMulti\":false,\"answer\":[2]}","explanation":"首先，我们在fruit数组上调用 `slice` 方法。 slice方法不会修改原始数组，但是会返回从数组切片下来的值：香蕉emoji。\n其次，我们在fruit数组上调用 `splice` 方法。 splice方法会修改原始数组，也就意味着fruit数组此时为 `['🍊', '🍎']`。\n最后，我们在fruit数组上调用 `unshift` 方法，通过添加一个值的方式改变了原始数组，添加的是'🍇'，它成为了数组的第一个元素。现在fruit数组的组成为 `['🍇', '🍊', '🍎']`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa385db804f8000122aa81"},"exerciseKey":"6eec7f26-3bdc-4015-86fc-a75d495311a6","category":"QA","renderType":"md","title":"说说React Jsx转换成真实DOM过程？","desc":null,"options":null,"explanation":"## 一、是什么\n\n`react`通过将组件编写的`JSX`映射到屏幕，以及组件中的状态发生了变化之后 `React`会将这些「变化」更新到屏幕上\n\n在前面文章了解中，`JSX`通过`babel`最终转化成`React.createElement`这种形式，例如：\n\n```jsx\n<div>\n  <img src=\"avatar.png\" className=\"profile\" />\n  <Hello />\n</div>\n```\n\n会被`bebel`转化成如下：\n\n```jsx\nReact.createElement(\n  \"div\",\n  null,\n  React.createElement(\"img\", {\n    src: \"avatar.png\",\n    className: \"profile\"\n  }),\n  React.createElement(Hello, null)\n);\n```\n\n在转化过程中，`babel`在编译时会判断 JSX 中组件的首字母：\n\n- 当首字母为小写时，其被认定为原生 `DOM` 标签，`createElement` 的第一个变量被编译为字符串\n\n- 当首字母为大写时，其被认定为自定义组件，createElement 的第一个变量被编译为对象\n\n最终都会通过`RenderDOM.render(...)`方法进行挂载，如下：\n\n```jsx\nReactDOM.render(<App />,  document.getElementById(\"root\"));\n```\n\n\n\n## 二、过程\n\n在`react`中，节点大致可以分成四个类别：\n\n- 原生标签节点\n- 文本节点\n- 函数组件\n- 类组件\n\n如下所示：\n\n```jsx\nclass ClassComponent extends Component {\n  static defaultProps = {\n    color: \"pink\"\n  };\n  render() {\n    return (\n      <div className=\"border\">\n        <h3>ClassComponent</h3>\n        <p className={this.props.color}>{this.props.name}</p >\n      </div>\n    );\n  }\n}\n\nfunction FunctionComponent(props) {\n  return (\n    <div className=\"border\">\n      FunctionComponent\n      <p>{props.name}</p >\n    </div>\n  );\n}\n\nconst jsx = (\n  <div className=\"border\">\n    <p>xx</p >\n    < a href=\" \">xxx</ a>\n    <FunctionComponent name=\"函数组件\" />\n    <ClassComponent name=\"类组件\" color=\"red\" />\n  </div>\n);\n```\n\n这些类别最终都会被转化成`React.createElement`这种形式\n\n`React.createElement`其被调用时会传⼊标签类型`type`，标签属性`props`及若干子元素`children`，作用是生成一个虚拟`Dom`对象，如下所示：\n\n```js\nfunction createElement(type, config, ...children) {\n    if (config) {\n        delete config.__self;\n        delete config.__source;\n    }\n    // ! 源码中做了详细处理，⽐如过滤掉key、ref等\n    const props = {\n        ...config,\n        children: children.map(child =>\n   typeof child === \"object\" ? child : createTextNode(child)\n  )\n    };\n    return {\n        type,\n        props\n    };\n}\nfunction createTextNode(text) {\n    return {\n        type: TEXT,\n        props: {\n            children: [],\n            nodeValue: text\n        }\n    };\n}\nexport default {\n    createElement\n};\n```\n\n`createElement`会根据传入的节点信息进行一个判断：\n\n- 如果是原生标签节点， type 是字符串，如div、span\n- 如果是文本节点， type就没有，这里是 TEXT\n- 如果是函数组件，type 是函数名\n- 如果是类组件，type 是类名\n\n虚拟`DOM`会通过`ReactDOM.render`进行渲染成真实`DOM`，使用方法如下：\n\n```jsx\nReactDOM.render(element, container[, callback])\n```\n\n当首次调用时，容器节点里的所有 `DOM` 元素都会被替换，后续的调用则会使用 `React` 的 `diff`算法进行高效的更新\n\n如果提供了可选的回调函数`callback`，该回调将在组件被渲染或更新之后被执行\n\n`render`大致实现方法如下：\n\n```js\nfunction render(vnode, container) {\n    console.log(\"vnode\", vnode); // 虚拟DOM对象\n    // vnode _> node\n    const node = createNode(vnode, container);\n    container.appendChild(node);\n}\n\n// 创建真实DOM节点\nfunction createNode(vnode, parentNode) {\n    let node = null;\n    const {type, props} = vnode;\n    if (type === TEXT) {\n        node = document.createTextNode(\"\");\n    } else if (typeof type === \"string\") {\n        node = document.createElement(type);\n    } else if (typeof type === \"function\") {\n        node = type.isReactComponent\n            ? updateClassComponent(vnode, parentNode)\n        : updateFunctionComponent(vnode, parentNode);\n    } else {\n        node = document.createDocumentFragment();\n    }\n    reconcileChildren(props.children, node);\n    updateNode(node, props);\n    return node;\n}\n\n// 遍历下子vnode，然后把子vnode->真实DOM节点，再插入父node中\nfunction reconcileChildren(children, node) {\n    for (let i = 0; i < children.length; i++) {\n        let child = children[i];\n        if (Array.isArray(child)) {\n            for (let j = 0; j < child.length; j++) {\n                render(child[j], node);\n            }\n        } else {\n            render(child, node);\n        }\n    }\n}\nfunction updateNode(node, nextVal) {\n    Object.keys(nextVal)\n        .filter(k => k !== \"children\")\n        .forEach(k => {\n        if (k.slice(0, 2) === \"on\") {\n            let eventName = k.slice(2).toLocaleLowerCase();\n            node.addEventListener(eventName, nextVal[k]);\n        } else {\n            node[k] = nextVal[k];\n        }\n    });\n}\n\n// 返回真实dom节点\n// 执行函数\nfunction updateFunctionComponent(vnode, parentNode) {\n    const {type, props} = vnode;\n    let vvnode = type(props);\n    const node = createNode(vvnode, parentNode);\n    return node;\n}\n\n// 返回真实dom节点\n// 先实例化，再执行render函数\nfunction updateClassComponent(vnode, parentNode) {\n    const {type, props} = vnode;\n    let cmp = new type(props);\n    const vvnode = cmp.render();\n    const node = createNode(vvnode, parentNode);\n    return node;\n}\nexport default {\n    render\n};\n```\n\n\n\n\n\n## 三、总结\n\n在`react`源码中，虚拟`Dom`转化成真实`Dom`整体流程如下图所示：\n\n ![](https://static.vue-js.com/28824fa0-f00a-11eb-ab90-d9ae814b240d.png)\n\n其渲染流程如下所示：\n\n- 使用React.createElement或JSX编写React组件，实际上所有的 JSX 代码最后都会转换成React.createElement(...) ，Babel帮助我们完成了这个转换的过程。\n- createElement函数对key和ref等特殊的props进行处理，并获取defaultProps对默认props进行赋值，并且对传入的孩子节点进行处理，最终构造成一个虚拟DOM对象\n- ReactDOM.render将生成好的虚拟DOM渲染到指定容器上，其中采用了批处理、事务等机制并且对特定浏览器进行了性能优化，最终转换为真实DOM\n\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa38607964120001917461"},"exerciseKey":"74f0cb29-9b52-40e7-adba-571d398fa6ad","category":"QA","renderType":"md","title":"列举几个常见的 Hook?","desc":null,"options":null,"explanation":"* 状态钩子 (useState): 用于定义组件的 State，类似类定义中 this.state 的功能\n* 生命周期钩子 (useEffect): 类定义中有许多生命周期函数，而在 React Hooks 中也提供了一个相应的函数 (useEffect)，这里可以看做componentDidMount、componentDidUpdate和componentWillUnmount的结合。\n* useContext: 获取 context 对象\n* useCallback: 缓存回调函数，避免传入的回调每次都是新的函数实例而导致依赖组件重新渲染，具有性能优化的效果；\n* useMemo: 用于缓存传入的 props，避免依赖的组件每次都重新渲染；\n* useRef: 获取组件的真实节点；\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa38600d111e000103729c"},"exerciseKey":"7566c4ff-4ce9-4357-85db-ce5494d9cf90","category":"QA","renderType":"md","title":"大数相加","desc":"手写一个add方法，实现两个大数相加","options":null,"explanation":"## 方案一\n\n思路：判断两个字符串长度，通过补0的方式，让他们长度相同，由于我们在学生时代，这种加减法都是从右往左，所以，我们对数组进行反转，这样就可以让计算机按照我们的想法去实现，做的过程中，一定要考虑满10进1的情况，全部算完后，再反转回来，通过join合并成字符串进行返回。\n\n```javascript\n// a 和 b 都为字符串，调用add后，返回一个相加的字符串\n// a = '12345678'\n// b = '456789'\nfunction add(a,b){\n    // 获取各自长度\n    let i = a.length,j = b.length;\n    // 判断谁大一些\n    let len = i - j;\n    let sum,sumArr = [];\n    // 谁小，就在谁的前面补0，让两个长度相同\n    // a = '12345678' b = '00456789'\n    if(len > 0){\n        b = appendZero(b,len);\n    }else if(len<0){\n        // 这个地方要把len变成正数\n        a = appendZero(a,Math.abs(len));\n        // 当b的长度比a大时，就把b的长度给i\n        i = j;\n    }\n    // 由于日常运算都是从右往左，所以，我们反转数组\n    let aArr = a.split('').reverse(), bArr = b.split('').reverse();\n    for(let m = 0;m < i;m++){\n        // 数组长度相同，同一位置的两个元素相加\n        // 如果当前sumArr有值，说明可能是前面以为满10进了一个1\n        let c = parseInt(aArr[m])+parseInt(bArr[m]) + (sumArr[m] || 0);\n        if(c > 9){\n            // 进10后，取余数\n            sumArr[m] = c%10;\n            // 如果进10了，则会往数组后一个元素放一个1\n            sumArr[m+1] = parseInt(sumArr[m+1] || 0)+1;\n        }else{\n            sumArr[m] = c;\n        }\n    }\n    // 最后数组反转，再合并成一个字符串\n    sum = sumArr.reverse().join('');\n    return sum;\n}\n\nfunction appendZero(str,len){\n    for(let i=0;i<len;i++){\n        str='0'+str;\n    }\n    // 或者使用ES6的repeat\n    // str = '0'.repeat(len) + str;\n    return str;\n}\n\n```\n\n## 方案二\n\n```javascript\nfunction add(a,b){\n  // 获取各自长度\n  a = a.split(''), b = b.split('');\n  let sum=[],go=0;\n  while(a.length || b.length){\n    // 通过pop每次取一个\n    let num1 = parseInt(a.pop()) || 0;\n    let num2 = parseInt(b.pop()) || 0;\n    // 两值相加，如果有进位就 + go\n    let tmp = num1 + num2 + go;\n     if(tmp > 9){\n         go = 1;\n         // 取余数\n         tmp %= 10;\n     }else{\n         go = 0;\n     }\n     // array.unshift(item)表示在数组array的最前面插入\n     sum.unshift(tmp)\n  }\n  if(go) sum.unshift(1);\n  return sum.join('');\n}\n```\n\n通过while循环，其实也是对长度不够的进行补0，通过pop巧妙的从最后取一个元素，跟前面的数组反转如出一辙.\n","level":3,"tagId":26}
{"_id":{"$oid":"61aa38613dd7f70001832f76"},"exerciseKey":"75a70014-1972-40d8-8173-1f3a475a0570","category":"QA","renderType":"md","title":"TypeScript 中的类是什么？你如何定义它们？","desc":null,"options":null,"explanation":"类表示一组相关对象的共享行为和属性。\n\n例如，我们的类可能是Student，其所有对象都具有该attendClass方法。另一方面，John是一个单独的 type 实例，Student可能有额外的独特行为，比如attendExtracurricular.\n\n你使用关键字声明类class：\n```\nclass Student {    \n    studCode: number;    \n    studName: string;    \n    constructor(code: number, name: string) {    \n    \tthis.studName = name;    \n    \tthis.studCode = code; \n    }\n }\n```","level":2,"tagId":19}
{"_id":{"$oid":"61aa38613dd7f70001832f7b"},"exerciseKey":"79fe443f-0556-4359-8e05-804161ac48ef","category":"QA","renderType":"md","title":"什么是渐进增强和优雅降级？","desc":null,"options":null,"explanation":"渐进增强（progressive enhancement）：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果，交互等方面的改进和追加功能，以达到更好的用户体验。\n\n优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。\n\n##区别：\n\n* 优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；\n* 优雅降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa383e39bf10000191c8f0"},"exerciseKey":"0180cac7-51ae-4cc6-afe2-bfecf5448123","category":"Choice","renderType":"md","title":"下面代码的输出是什么？","desc":"```javascript\nfetch('https://www.website.com/api/user/1')\n  .then(res => res.json())\n  .then(res => console.log(res))\n```","options":"{\"options\":[\"fetch方法的结果\",\"第二次调用fetch方法的结果\",\"前一个.then()中回调方法返回的结果\",\"总是undefined\"],\"isMulti\":false,\"answer\":[2]}","explanation":"第二个`.then`中`res`的值等于前一个`.then`中的回调函数返回的值。 你可以像这样继续链接`.then`，将值传递给下一个处理程序。","level":1,"tagId":32}
{"_id":{"$oid":"61aa383f54ebf60001a1a31e"},"exerciseKey":"06af30a2-e542-4cf0-9793-999267a4007d","category":"QA","renderType":"md","title":"iframe是什么？有哪些优缺点？","desc":null,"options":null,"explanation":"iframe 可以在一个网站里面嵌入另一个网站的内容。\n\n## iframe的优点\n\n* iframe能够原封不动的把嵌入的网页展现出来。\n* 如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。\n* 网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。\n* 如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。\n\n## iframe的缺点\n\n* 会产生很多页面，不容易管理。\n* iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。 * 代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理iframe中的内容，所以使用iframe会不利于搜索引擎优化。\n* 很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差。\n* iframe 里面的样式、脚本资源，会增加请求次数，对于大型网站是不可取的。\n* iframe 会阻碍页面的 onload 事件，给用户页面加载很慢的感觉。\n\niframe 已经渐渐的退出了前端开发的舞台。\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa3841cd02c30001dd216c"},"exerciseKey":"0b048b9b-0531-4a93-b6e7-b0254393abaa","category":"QA","renderType":"md","title":"说说你对 typescript 的理解？与 javascript 的区别？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/58cd3580-0950-11ec-8e64-91fdec0f05a1.png)\n\n## 一、是什么\n\n`TypeScript` 是 `JavaScript` 的类型的超集，支持`ES6`语法，支持面向对象编程的概念，如类、接口、继承、泛型等\n\n> 超集，不得不说另外一个概念，子集，怎么理解这两个呢，举个例子，如果一个集合A里面的的所有元素集合B里面都存在，那么我们可以理解集合B是集合A的超集，集合A为集合B的子集\n\n ![](https://static.vue-js.com/61c2c1f0-0950-11ec-a752-75723a64e8f5.png)\n\n其是一种静态类型检查的语言，提供了类型注解，在代码编译阶段就可以检查出数据类型的错误\n\n同时扩展了` JavaScript` 的语法，所以任何现有的` JavaScript` 程序可以不加改变的在 `TypeScript` 下工作\n\n为了保证兼容性，`typescript`在编译阶段需要编译器编译成纯`Javascript`来运行，是为大型应用之开发而设计的语言，如下：\n\n`tsx`文件如下：\n\n```tsx\nconst hello : string = \"Hello World!\"\nconsole.log(hello)\n```\n\n编译文件后：\n\n```js\nconst hello = \"Hello World!\"\nconsole.log(hello)\n```\n\n## 二、特性\n\n`typescript`的特性主要有如下：\n\n- **类型批注和编译时类型检查** ：在编译时批注变量类型\n- **类型推断**：ts中没有批注变量类型会自动推断变量的类型\n- **类型擦除**：在编译过程中批注的内容和接口会在运行时利用工具擦除\n- **接口**：ts中用接口来定义对象类型\n- **枚举**：用于取值被限定在一定范围内的场景\n- **Mixin**：可以接受任意类型的值\n- **泛型编程**：写代码时使用一些以后才指定的类型\n- **名字空间**：名字只在该区域内有效，其他区域可重复使用该名字而不冲突\n- **元组**：元组合并了不同类型的对象，相当于一个可以装不同类型数据的数组\n- ...\n\n### 类型批注\n\n通过类型批注提供在编译时启动类型检查的静态类型，这是可选的，而且可以忽略而使用`JavaScript`常规的动态类型\n\n```tsx\nfunction Add(left: number, right: number): number {\n return left + right;\n}\n```\n\n\n对于基本类型的批注是`number`、`bool`和`string`，而弱或动态类型的结构则是`any`类型\n\n\n\n### 类型推断\n\n当类型没有给出时，TypeScript编译器利用类型推断来推断类型，如下：\n\n```ts\nlet str = 'string'\n```\n\n变量`str`被推断为字符串类型，这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时\n\n如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态`any`类型\n\n\n\n### 接口\n\n接口简单来说就是用来描述对象的类型 数据的类型有`number`、` null`、` string`等数据格式，对象的类型就是用接口来描述的\n\n```tsx\ninterface Person {\n    name: string;\n    age: number;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25\n};\n```\n\n\n\n## 三、区别\n\n- TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法\n- TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译\n- TypeScript 文件的后缀名 .ts （.ts，.tsx，.dts），JavaScript 文件是 .js\n- 在编写 TypeScript 的文件的时候就会自动编译成 js 文件\n\n更多的区别如下图所示：\n\n ![](https://static.vue-js.com/6b544040-0950-11ec-8e64-91fdec0f05a1.png)\n","level":2,"tagId":19}
{"_id":{"$oid":"61aa384285c5f70001542ebf"},"exerciseKey":"10cbc287-0f93-4fc0-8dde-a57ad1ec9208","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\n// index.js\nconsole.log('running index.js');\nimport { sum } from './sum.js';\nconsole.log(sum(1, 2));\n\n// sum.js\nconsole.log('running sum.js');\nexport const sum = (a, b) => a + b;\n```","options":"{\"options\":[\"running index.js, running sum.js, 3\",\"running sum.js, running index.js, 3\",\"running sum.js, 3, running index.js\",\"running index.js, undefined, running sum.js\"],\"isMulti\":false,\"answer\":[1]}","explanation":"`import`命令是编译阶段执行的，在代码运行之前。因此这意味着被导入的模块会先运行，而导入模块的文件会后执行。\n这是CommonJS中`require（）`和`import`之间的区别。使用`require()`，您可以在运行代码时根据需要加载依赖项。 如果我们使用`require`而不是`import`，`running index.js`，`running sum.js`，`3`会被依次打印。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384485c5f70001542ec8"},"exerciseKey":"14912aa6-d4d4-4af9-ad73-e7641f3a6212","category":"QA","renderType":"md","title":"style标签写在body后与body前有什么区别？","desc":null,"options":null,"explanation":"页面加载自上而下 当然是先加载样式。\n\n写在body标签后由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表（外联或写在style标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现FOUC现象（即样式失效导致的页面闪烁问题）\n\n","level":2,"tagId":12}
{"_id":{"$oid":"61aa38463d5f3a0001af550e"},"exerciseKey":"19bf40bd-7685-4eba-bd6e-9c7d00e0ec55","category":"Choice","renderType":"md","title":"输出的是什么?","desc":"```javascript\nfunction getInfo(member, year) {\n  member.name = \"Lydia\";\n  year = \"1998\";\n}\n\nconst person = { name: \"Sarah\" };\nconst birthYear = \"1997\";\n\ngetInfo(person, birthYear);\n\nconsole.log(person, birthYear);\n```","options":"{\"options\":[\"{ name: \\\"Lydia\\\" }, \\\"1997\\\"\",\"{ name: \\\"Sarah\\\" }, \\\"1998\\\"\",\"{ name: \\\"Lydia\\\" }, \\\"1998\\\"\",\"{ name: \\\"Sarah\\\" }, \\\"1997\\\"\"],\"isMulti\":false,\"answer\":[0]}","explanation":"普通参数都是 _值_ 传递的，而对象则不同，是 _引用_ 传递。所以说，`birthYear`是值传递，因为他是个字符串而不是对象。当我们对参数进行值传递时，会创建一份该值的 _复制_ 。（可以参考问题46）\n变量`birthYear`有一个对`\"1997\"`的引用，而传入的参数也有一个对`\"1997\"`的引用，但二者的引用并不相同。当我们通过给 `year`赋值`\"1998\"`来更新`year`的值的时候我们只是更新了`year`（的引用）。此时`birthYear`仍然是`\"1997\"`.\n而`person`是个对象。参数`member`引用与之 _相同的_ 对象。当我们修改`member`所引用对象的属性时,`person`的相应属性也被修改了,因为他们引用了相同的对象. `person`的 `name`属性也变成了 `\"Lydia\"`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa3847cd02c30001dd21a4"},"exerciseKey":"212673c7-7ea1-460a-b44f-2e3fe20f3397","category":"QA","renderType":"md","title":"简单介绍下React中的 diff 算法\n","desc":null,"options":null,"explanation":"diff 算法主要基于三个规律：\n\n* DOM 节点的跨层级移动的操作特别少，可以忽略不计\n* 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构\n* 对于同一层级的一组子节点，可以通过唯一的 id 进行区分\n\n## tree diff\n\n因为上面的三个策略中的第一点， DOM 节点的跨级操作比较少，那么 diff 算法只会对相同层级的 DOM 节点进行比较。如果发现节点不存在 那么会将该节点以及其子节点完全删除，不会再继续比较。如果出现了 DOM 节点的跨层级的移动操作，那么会删除改节点以及其所有的子节点，然后再移动后的位置重新创建。\n\n## component diff\n\n如果是同一类型的组件，那么会继续对比 VM 数\n\n如果不是同一类型的组件，那么会将其和其子节点完全替换，不会再进行比对\n\n同一类型的组件，有可能 VM 没有任何的变化，如果可以确定的知道这点，那么就可以节省大量的 diff 时间，所以用户可以设置 shouldComponentUpdate() 来判断是否需要进行 diff 算法。\n\n## element diff\n\n当节点处于同一层级的时候时，有三种操作：INSERT_MAKEUP插入、 MOVE_EXISTING 移动、 REMOVE_NODE 删除\n\n这里 React 有一个优化策略，对于同一层级的同组子节点，添加唯一的 key 进行区分。这样的话，就可以判断出来是否是移动节点。通过 key 发现新旧集合中的节点都是相同的节点，就只需要进行移动操作就可以。\n\n","level":3.5,"tagId":13}
{"_id":{"$oid":"61aa384a34458700017f1c06"},"exerciseKey":"2a420371-13f4-46fc-a5d8-d2338682d8d6","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nfunction compareMembers(person1, person2 = person) {\n  if (person1 !== person2) {\n    console.log(\"Not the same!\")\n  } else {\n    console.log(\"They are the same!\")\n  }\n}\n\nconst person = { name: \"Lydia\" }\n\ncompareMembers(person)\n```","options":"{\"options\":[\"Not the same!\",\"They are the same!\",\"ReferenceError\",\"SyntaxError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"对象通过引用传递。 当我们检查对象的严格相等性（===）时，我们正在比较它们的引用。\n我们将“person2”的默认值设置为“person”对象，并将“person”对象作为“person1”的值传递。\n这意味着两个值都引用内存中的同一位置，因此它们是相等的。\n运行“ else”语句中的代码块，并记录`They are the same!` 。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384a3976eb00014e4488"},"exerciseKey":"2dec0eee-6b2c-4d4a-920b-6acef97924b7","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction getAge(...args) {\n  console.log(typeof args)\n}\n\ngetAge(21)\n```","options":"{\"options\":[\"\\\"number\\\"\",\"\\\"array\\\"\",\"\\\"object\\\"\",\"\\\"NaN\\\"\"],\"isMulti\":false,\"answer\":[2]}","explanation":"扩展运算符（`...args`）会返回实参组成的数组。而数组是对象，因此 `typeof args` 返回 `\"object\"`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa384e79641200019173dc"},"exerciseKey":"37cce645-6114-44e4-a440-3b7f0c9f8887","category":"QA","renderType":"md","title":"React 中如果绑定事件使用匿名函数有什么影响？","desc":null,"options":null,"explanation":"```react.js\nclass Demo {\n  render() {\n    return <button onClick={(e) => {\n      alert('我点击了按钮')\n    }}>\n      按钮\n    </button>\n  }\n}\n\n```\n\n这样的写法，因为使用的是匿名函数，所以组件每次都会认为是一个新的 props，不会使用缓存优化，在性能上会有一定的损耗。","level":1,"tagId":13}
{"_id":{"$oid":"61aa384e3976eb00014e44a1"},"exerciseKey":"38358609-e797-42f9-983d-3e2709fb4fdd","category":"QA","renderType":"md","title":"怎么使用 CSS3 实现动画？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/d12e2380-9c0a-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\nCSS动画（CSS Animations）是为层叠样式表建议的允许可扩展标记语言（XML）元素使用CSS的动画的模块\n\n即指元素从一种样式逐渐过渡为另一种样式的过程\n\n常见的动画效果有很多，如平移、旋转、缩放等等，复杂动画则是多个简单动画的组合\n\n`css`实现动画的方式，有如下几种：\n\n- transition 实现渐变动画\n- transform 转变动画\n- animation 实现自定义动画\n\n\n## 二、实现方式\n\n### transition 实现渐变动画\n\n`transition`的属性如下：\n\n- property:填写需要变化的css属性\n- duration:完成过渡效果需要的时间单位(s或者ms)\n- timing-function:完成效果的速度曲线\n- delay: 动画效果的延迟触发时间\n\n其中`timing-function`的值有如下：\n\n| 值                            | 描述                                                         |\n| ----------------------------- | ------------------------------------------------------------ |\n| linear                        | 匀速（等于 cubic-bezier(0,0,1,1)）                           |\n| ease                          | 从慢到快再到慢（cubic-bezier(0.25,0.1,0.25,1)）              |\n| ease-in                       | 慢慢变快（等于 cubic-bezier(0.42,0,1,1)）                    |\n| ease-out                      | 慢慢变慢（等于 cubic-bezier(0,0,0.58,1)）                    |\n| ease-in-out                   | 先变快再到慢（等于 cubic-bezier(0.42,0,0.58,1)），渐显渐隐效果 |\n| cubic-bezier(*n*,*n*,*n*,*n*) | 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值 |\n\n注意：并不是所有的属性都能使用过渡的，如`display:none<->display:block`\n\n举个例子，实现鼠标移动上去发生变化动画效果\n\n```html\n<style>\n       .base {\n            width: 100px;\n            height: 100px;\n            display: inline-block;\n            background-color: #0EA9FF;\n            border-width: 5px;\n            border-style: solid;\n            border-color: #5daf34;\n            transition-property: width, height, background-color, border-width;\n            transition-duration: 2s;\n            transition-timing-function: ease-in;\n            transition-delay: 500ms;\n        }\n\n        /*简写*/\n        /*transition: all 2s ease-in 500ms;*/\n        .base:hover {\n            width: 200px;\n            height: 200px;\n            background-color: #5daf34;\n            border-width: 10px;\n            border-color: #3a8ee6;\n        }\n</style>\n<div class=\"base\"></div>\n```\n\n### transform 转变动画\n\n包含四个常用的功能：\n\n- translate：位移\n- scale：缩放\n- rotate：旋转\n- skew：倾斜\n\n一般配合`transition`过度使用\n\n注意的是，`transform`不支持`inline`元素，使用前把它变成`block`\n\n举个例子\n\n```html\n<style>\n    .base {\n        width: 100px;\n        height: 100px;\n        display: inline-block;\n        background-color: #0EA9FF;\n        border-width: 5px;\n        border-style: solid;\n        border-color: #5daf34;\n        transition-property: width, height, background-color, border-width;\n        transition-duration: 2s;\n        transition-timing-function: ease-in;\n        transition-delay: 500ms;\n    }\n    .base2 {\n        transform: none;\n        transition-property: transform;\n        transition-delay: 5ms;\n    }\n\n    .base2:hover {\n        transform: scale(0.8, 1.5) rotate(35deg) skew(5deg) translate(15px, 25px);\n    }\n</style>\n <div class=\"base base2\"></div>\n```\n\n可以看到盒子发生了旋转，倾斜，平移，放大\n\n\n\n### animation 实现自定义动画\n\n`animation`是由 8 个属性的简写，分别如下：\n\n| 属性                                   | 描述                                                         | 属性值                                        |\n| -------------------------------------- | ------------------------------------------------------------ | --------------------------------------------- |\n| animation-duration                     | 指定动画完成一个周期所需要时间，单位秒（s）或毫秒（ms），默认是 0 |                                               |\n| animation-timing-function              | 指定动画计时函数，即动画的速度曲线，默认是 \"ease\"            | linear、ease、ease-in、ease-out、ease-in-out  |\n| animation-delay                        | 指定动画延迟时间，即动画何时开始，默认是 0                   |                                               |\n| animation-iteration-count              | 指定动画播放的次数，默认是 1                                 |                                               |\n| animation-direction 指定动画播放的方向 | 默认是 normal                                                | normal、reverse、alternate、alternate-reverse |\n| animation-fill-mode                    | 指定动画填充模式。默认是 none                                | forwards、backwards、both                     |\n| animation-play-state                   | 指定动画播放状态，正在运行或暂停。默认是 running             | running、pauser                               |\n| animation-name                         | 指定 @keyframes 动画的名称                                   |                                               |\n\n`CSS` 动画只需要定义一些关键的帧，而其余的帧，浏览器会根据计时函数插值计算出来，\n\n通过 `@keyframes` 来定义关键帧\n\n因此，如果我们想要让元素旋转一圈，只需要定义开始和结束两帧即可：\n\n```css\n@keyframes rotate{\n    from{\n        transform: rotate(0deg);\n    }\n    to{\n        transform: rotate(360deg);\n    }\n}\n```\n\n`from` 表示最开始的那一帧，`to` 表示结束时的那一帧\n\n也可以使用百分比刻画生命周期\n\n```css\n@keyframes rotate{\n    0%{\n        transform: rotate(0deg);\n    }\n    50%{\n        transform: rotate(180deg);\n    }\n    100%{\n        transform: rotate(360deg);\n    }\n}\n```\n\n定义好了关键帧后，下来就可以直接用它了：\n\n```css\nanimation: rotate 2s;\n```\n\n\n\n\n\n## 三、总结\n\n| 属性               | 含义                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| transition（过度） | 用于设置元素的样式过度，和animation有着类似的效果，但细节上有很大的不同 |\n| transform（变形）  | 用于元素进行旋转、缩放、移动或倾斜，和设置样式的动画并没有什么关系，就相当于color一样用来设置元素的“外表” |\n| translate（移动）  | 只是transform的一个属性值，即移动                            |\n| animation（动画）  | 用于设置动画属性，他是一个简写的属性，包含6个属性            |\n","level":1.5,"tagId":11}
{"_id":{"$oid":"61aa3853ff0573000165b271"},"exerciseKey":"4b009a64-6d98-4469-89d4-9c254d682fa6","category":"QA","renderType":"md","title":"Javscript数组的常用方法有哪些？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/5842e560-67b6-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n\r\n\r\n## 一、操作方法\r\n\r\n数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会\r\n\r\n下面对数组常用的操作方法做一个归纳\r\n\r\n### 增 \r\n\r\n下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响\r\n\r\n- push()\r\n- unshift()\r\n- splice()\r\n- concat()\r\n\r\n\r\n#### push()\r\n\r\n`push()`方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度\r\n\r\n```js\r\nlet colors = []; // 创建一个数组\r\nlet count = colors.push(\"red\", \"green\"); // 推入两项\r\nconsole.log(count) // 2\r\n```\r\n\r\n\r\n\r\n#### unshift()\r\n\r\nunshift()在数组开头添加任意多个值，然后返回新的数组长度\r\n\r\n```js\r\nlet colors = new Array(); // 创建一个数组\r\nlet count = colors.unshift(\"red\", \"green\"); // 从数组开头推入两项\r\nalert(count); // 2\r\n```\r\n\r\n\r\n\r\n#### splice\r\n\r\n传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组\r\n\r\n```js\r\nlet colors = [\"red\", \"green\", \"blue\"];\r\nlet removed = colors.splice(1, 0, \"yellow\", \"orange\")\r\nconsole.log(colors) // red,yellow,orange,green,blue\r\nconsole.log(removed) // []\r\n```\r\n\r\n\r\n#### concat()\r\n\r\n首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组\r\n\r\n```js\r\nlet colors = [\"red\", \"green\", \"blue\"];\r\nlet colors2 = colors.concat(\"yellow\", [\"black\", \"brown\"]);\r\nconsole.log(colors); // [\"red\", \"green\",\"blue\"]\r\nconsole.log(colors2); // [\"red\", \"green\", \"blue\", \"yellow\", \"black\", \"brown\"]\r\n```\r\n\r\n\r\n\r\n### 删\r\n\r\n下面三种都会影响原数组，最后一项不影响原数组：\r\n\r\n- pop()\r\n- shift()\r\n- splice()\r\n- slice()\r\n\r\n\r\n\r\n#### pop()\r\n\r\n `pop()` 方法用于删除数组的最后一项，同时减少数组的` length` 值，返回被删除的项\r\n\r\n```js\r\nlet colors = [\"red\", \"green\"]\r\nlet item = colors.pop(); // 取得最后一项\r\nconsole.log(item) // green\r\nconsole.log(colors.length) // 1\r\n```\r\n\r\n\r\n\r\n#### shift()\r\n\r\n` shift() `方法用于删除数组的第一项，同时减少数组的` length` 值，返回被删除的项\r\n\r\n```js\r\nlet colors = [\"red\", \"green\"]\r\nlet item = colors.shift(); // 取得第一项\r\nconsole.log(item) // red\r\nconsole.log(colors.length) // 1\r\n```\r\n\r\n\r\n\r\n#### splice()\r\n\r\n传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组\r\n\r\n```js\r\nlet colors = [\"red\", \"green\", \"blue\"];\r\nlet removed = colors.splice(0,1); // 删除第一项\r\nconsole.log(colors); // green,blue\r\nconsole.log(removed); // red，只有一个元素的数组\r\n```\r\n\r\n\r\n\r\n### slice()\r\n\r\n slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组\r\n\r\n```js\r\nlet colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"];\r\nlet colors2 = colors.slice(1);\r\nlet colors3 = colors.slice(1, 4);\r\nconsole.log(colors)   // red,green,blue,yellow,purple\r\nconcole.log(colors2); // green,blue,yellow,purple\r\nconcole.log(colors3); // green,blue,yellow\r\n```\r\n\r\n\r\n\r\n#### 改\r\n\r\n即修改原来数组的内容，常用`splice`\r\n\r\n#### splice() \r\n\r\n传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响\r\n\r\n```js\r\nlet colors = [\"red\", \"green\", \"blue\"];\r\nlet removed = colors.splice(1, 1, \"red\", \"purple\"); // 插入两个值，删除一个元素\r\nconsole.log(colors); // red,red,purple,blue\r\nconsole.log(removed); // green，只有一个元素的数组\r\n```\r\n\r\n\r\n\r\n#### 查\r\n\r\n即查找元素，返回元素坐标或者元素值\r\n\r\n- indexOf()\r\n- includes()\r\n- find()\r\n\r\n#### indexOf()\r\n\r\n返回要查找的元素在数组中的位置，如果没找到则返回1\r\n\r\n```js\r\nlet numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];\r\nnumbers.indexOf(4) // 3\r\n```\r\n\r\n\r\n\r\n#### includes()\r\n\r\n返回要查找的元素在数组中的位置，找到返回`true`，否则`false`\r\n\r\n```js\r\nlet numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];\r\nnumbers.includes(4) // true\r\n```\r\n\r\n#### find()\r\n\r\n返回第一个匹配的元素\r\n\r\n```js\r\nconst people = [\r\n    {\r\n        name: \"Matt\",\r\n        age: 27\r\n    },\r\n    {\r\n        name: \"Nicholas\",\r\n        age: 29\r\n    }\r\n];\r\npeople.find((element, index, array) => element.age < 28) // // {name: \"Matt\", age: 27}\r\n```\r\n\r\n\r\n\r\n## 二、排序方法\r\n\r\n数组有两个方法可以用来对元素重新排序：\r\n\r\n- reverse() \r\n- sort()\r\n\r\n### reverse()\r\n\r\n顾名思义，将数组元素方向排列\r\n\r\n```js\r\nlet values = [1, 2, 3, 4, 5];\r\nvalues.reverse();\r\nalert(values); // 5,4,3,2,1\r\n```\r\n\r\n\r\n\r\n### sort()\r\n\r\nsort()方法接受一个比较函数，用于判断哪个值应该排在前面\r\n\r\n```js\r\nfunction compare(value1, value2) {\r\n    if (value1 < value2) {\r\n        return -1;\r\n    } else if (value1 > value2) {\r\n        return 1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\nlet values = [0, 1, 5, 10, 15];\r\nvalues.sort(compare);\r\nalert(values); // 0,1,5,10,15\r\n```\r\n\r\n\r\n\r\n## 三、转换方法\r\n\r\n常见的转换方法有：\r\n\r\n### join()\r\n\r\njoin() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串\r\n\r\n```js\r\nlet colors = [\"red\", \"green\", \"blue\"];\r\nalert(colors.join(\",\")); // red,green,blue\r\nalert(colors.join(\"||\")); // red||green||blue\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 四、迭代方法\r\n\r\n常用来迭代数组的方法（都不改变原数组）有如下：\r\n\r\n- some()\r\n- every()\r\n- forEach()\r\n- filter()\r\n- map()\r\n\r\n\r\n\r\n### some()\r\n\r\n对数组每一项都运行传入的函数，如果有一项函数返回 true ，则这个方法返回 true\r\n\r\n```js\r\nlet numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];\r\nlet someResult = numbers.every((item, index, array) => item > 2);\r\nconsole.log(someResult) // true\r\n```\r\n\r\n\r\n\r\n### every()\r\n\r\n对数组每一项都运行传入的函数，如果对每一项函数都返回 true ，则这个方法返回 true\r\n\r\n```js\r\nlet numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];\r\nlet everyResult = numbers.every((item, index, array) => item > 2);\r\nconsole.log(everyResult) // false\r\n```\r\n\r\n\r\n\r\n### forEach()\r\n\r\n对数组每一项都运行传入的函数，没有返回值\r\n\r\n```js\r\nlet numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];\r\nnumbers.forEach((item, index, array) => {\r\n    // 执行某些操作\r\n});\r\n```\r\n\r\n\r\n\r\n### filter()\r\n\r\n对数组每一项都运行传入的函数，函数返回 `true` 的项会组成数组之后返回\r\n\r\n```js\r\nlet numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];\r\nlet filterResult = numbers.filter((item, index, array) => item > 2);\r\nconsole.log(filterResult); // 3,4,5,4,3\r\n```\r\n\r\n\r\n\r\n### map()\r\n\r\n对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组\r\n\r\n```js\r\nlet numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];\r\nlet mapResult = numbers.map((item, index, array) => item * 2);\r\nconsole.log(mapResult) // 2,4,6,8,10,8,6,4,2\r\n```","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa3855291c0100017ee1c4"},"exerciseKey":"51699bda-02be-4433-b2bf-450c2655594f","category":"QA","renderType":"md","title":"Vue中组件和插件有什么区别？","desc":null,"options":null,"explanation":"\n ![image.png](https://static.vue-js.com/683475e0-3acc-11eb-ab90-d9ae814b240d.png)\n\n## 一、组件是什么\n\n回顾以前对组件的定义：\n\n组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在`Vue`中每一个`.vue`文件都可以视为一个组件\n\n组件的优势\n\n- 降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现\n\n- 调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单\n\n- 提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级\n\n## 二、插件是什么\n\n插件通常用来为 `Vue` 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：\n\n- 添加全局方法或者属性。如: `vue-custom-element`\n- 添加全局资源：指令/过滤器/过渡等。如 `vue-touch`\n- 通过全局混入来添加一些组件选项。如` vue-router`\n- 添加 `Vue` 实例方法，通过把它们添加到 `Vue.prototype` 上实现。\n- 一个库，提供自己的 `API`，同时提供上面提到的一个或多个功能。如` vue-router`\n\n## 三、两者的区别\n\n两者的区别主要表现在以下几个方面：\n\n- 编写形式\n- 注册形式\n- 使用场景\n\n\n### 编写形式\n\n#### 编写组件\n\n编写一个组件，可以有很多方式，我们最常见的就是`vue`单文件的这种格式，每一个`.vue`文件我们都可以看成是一个组件\n\n`vue`文件标准格式\n\n```vue\n<template>\n</template>\n<script>\nexport default{ \n    ...\n}\n</script>\n<style>\n</style>\n```\n\n我们还可以通过`template`属性来编写一个组件，如果组件内容多，我们可以在外部定义`template`组件内容，如果组件内容并不多，我们可直接写在`template`属性上\n\n```js\n<template id=\"testComponent\">     // 组件显示的内容\n    <div>component!</div>   \n</template>\n\nVue.component('componentA',{ \n    template: '#testComponent'  \n    template: `<div>component</div>`  // 组件内容少可以通过这种形式\n})\n```\n\n#### 编写插件\n`vue`插件的实现应该暴露一个 `install` 方法。这个方法的第一个参数是 `Vue` 构造器，第二个参数是一个可选的选项对象\n\n```js\nMyPlugin.install = function (Vue, options) {\n  // 1. 添加全局方法或 property\n  Vue.myGlobalMethod = function () {\n    // 逻辑...\n  }\n\n  // 2. 添加全局资源\n  Vue.directive('my-directive', {\n    bind (el, binding, vnode, oldVnode) {\n      // 逻辑...\n    }\n    ...\n  })\n\n  // 3. 注入组件选项\n  Vue.mixin({\n    created: function () {\n      // 逻辑...\n    }\n    ...\n  })\n\n  // 4. 添加实例方法\n  Vue.prototype.$myMethod = function (methodOptions) {\n    // 逻辑...\n  }\n}\n```\n\n\n### 注册形式\n\n#### 组件注册\n\n`vue`组件注册主要分为全局注册与局部注册\n\n全局注册通过`Vue.component`方法，第一个参数为组件的名称，第二个参数为传入的配置项\n\n```js\nVue.component('my-component-name', { /* ... */ })\n```\n\n局部注册只需在用到的地方通过`components`属性注册一个组件\n\n```\nconst component1 = {...} // 定义一个组件\n\nexport default {\n\tcomponents:{\n\t\tcomponent1   // 局部注册\n\t}\n}\n```\n\n\n#### 插件注册\n插件的注册通过`Vue.use()`的方式进行注册（安装），第一个参数为插件的名字，第二个参数是可选择的配置项\n\n```\nVue.use(插件名字,{ /* ... */} )\n```\n\n注意的是：\n\n注册插件的时候，需要在调用 `new Vue()` 启动应用之前完成\n\n`Vue.use`会自动阻止多次注册相同插件，只会注册一次\n\n\n\n### 使用场景\n\n具体的其实在插件是什么章节已经表述了，这里在总结一下\n\n组件 `(Component)` 是用来构成你的 `App` 的业务模块，它的目标是 `App.vue`\n\n插件 `(Plugin)` 是用来增强你的技术栈的功能模块，它的目标是 `Vue` 本身\n\n简单来说，插件就是指对`Vue`的功能的增强或补充\n","level":1,"tagId":14}
{"_id":{"$oid":"61aa38563976eb00014e44d5"},"exerciseKey":"549f8d07-a907-4c86-93c1-d3e8fef30613","category":"QA","renderType":"html","title":"说说常规的前端性能优化手段","desc":null,"options":null,"explanation":"<ul><li>content方面<br/></li><ul><li>减少HTTP请求：合并文件、CSS精灵、inline Image</li><li>减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询</li><li>避免重定向：多余的中间访问</li><li>使Ajax可缓存</li><li>非必须组件延迟加载</li><li>未来所需组件预加载</li><li>减少DOM元素数量</li><li>将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量</li><li>减少iframe数量</li><li>不要404</li></ul></ul><p></p><ul><li>Server方面<br/></li><ul><li>使用CDN</li><li>添加Expires或者Cache-Control响应头</li><li>对组件使用Gzip压缩</li><li>配置ETag</li><li>Flush Buffer Early</li><li>Ajax使用GET进行请求</li><li>避免空src的img标签</li></ul></ul><p></p><ul><li>Cookie方面<br/></li><ul><li>减小cookie大小</li><li>引入资源的域名不要包含cookie</li></ul></ul><p></p><ul><li>css方面<br/></li><ul><li>将样式表放到页面顶部</li><li>不使用CSS表达式</li><li>不使用IE的Filter</li></ul></ul><p></p><ul><li>Javascript方面<br/></li><ul><li>将脚本放到页面底部</li><li>将javascript和css从外部引入</li><li>压缩javascript和css</li><li>删除不需要的脚本</li><li>减少DOM访问</li><li>合理设计事件监听器</li></ul></ul><p></p><ul><li>图片方面<br/></li><ul><li>优化图片：根据实际颜色需要选择色深、压缩</li><li>优化css精灵</li><li>不要在HTML中拉伸图片</li><li>保证favicon.ico小并且可缓存</li></ul></ul><p></p><p></p>","level":3,"tagId":20}
{"_id":{"$oid":"61aa3857c2d0220001c9647f"},"exerciseKey":"58972e2f-584c-4073-af2a-f6b0c81f447d","category":"QA","renderType":"md","title":"Typescript中什么是装饰器，它们可以应用于什么？","desc":null,"options":null,"explanation":"装饰器是一种特殊的声明，它允许你通过使用@<name>注释标记来一次性修改类或类成员。每个装饰器都必须引用一个将在运行时评估的函数。\n\n例如，装饰器@sealed将对应于sealed函数。任何标有 的@sealed都将用于评估sealed函数。\n```\nfunction sealed(target) {\n  // do something with 'target' ...\n}\n```\n\n它们可以附加到：\n\n* 类声明\n* 方法\n* 配件\n* 特性\n* 参数\n\n注意：默认情况下不启用装饰器。要启用它们，你必须`experimentalDecorators从tsconfig.json`文件或命令行编辑编译器选项中的字段。","level":1,"tagId":19}
{"_id":{"$oid":"61aa38580f30890001ab80d7"},"exerciseKey":"5a76ab56-d02a-4d74-b8ed-946d1f59ce14","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nlet a = 3\nlet b = new Number(3)\nlet c = 3\n\nconsole.log(a == b)\nconsole.log(a === b)\nconsole.log(b === c)\n```","options":"{\"options\":[\"true false true\",\"false false true\",\"true false false\",\"false true true\"],\"isMulti\":false,\"answer\":[2]}","explanation":"`new Number()` 是一个内建的函数构造器。虽然它看着像是一个 number，但它实际上并不是一个真实的 number：它有一堆额外的功能并且它是一个对象。\n当我们使用 `==` 操作符时，它只会检查两者是否拥有相同的*值*。因为它们的值都是 `3`，因此返回 `true`。\n然后，当我们使用 `===` 操作符时，两者的值以及*类型*都应该是相同的。`new Number()` 是一个对象而不是 number，因此返回 `false`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa385854ebf60001a1a3cb"},"exerciseKey":"5a88ac52-80ca-4ecb-90ab-12674b8cd704","category":"QA","renderType":"md","title":"什么是负载均衡？","desc":null,"options":null,"explanation":"客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。将服务器接收到的请求按照规则分发的过程，称为负载均衡。\n\n负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种。\n\n* 硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动、中国联通这样的公司才会选择硬负载进行操作；\n* 更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。","level":3,"tagId":16}
{"_id":{"$oid":"61aa385b91a75000018d2cd3"},"exerciseKey":"63d73ae0-ea78-4b4c-8a85-6be7513a62a4","category":"QA","renderType":"md","title":"什么是HTML5，以及和HTML的区别是什么？","desc":null,"options":null,"explanation":"HTML5是HTML的新标准，其主要目标是无需任何额外的插件如Flash、Silverlight等，就可以传输所有内容。它囊括了动画、视频、丰富的图形用户界面等。\n\nHTML5是由万维网联盟（W3C）和Web Hypertext Application Technology Working Group 合作创建的HTML新版本。\n\n## 区别\n\n从文档声明类型上看：\n\nHTML是很长的一段代码，很难记住。如下代码：\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\nhttp://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n复制代码\nHTML5却只有简简单单的声明，方便记忆。如下：\n\n<!DOCTYPE html>\n复制代码从语义结构上看：\n\nHTML4.0：没有体现结构语义化的标签，通常都是这样来命名的<div id=\"header\"></div>，这样表示网站的头部。\nHTML5：在语义上却有很大的优势。提供了一些新的标签，比如：<header><article><footer>。\n\n## 拓展\n\n不输入<!DOCTYPE HTML>，浏览器将无法识别html文件，因此html将无法正常工作。","level":1,"tagId":12}
{"_id":{"$oid":"61aa385c0f30890001ab80fb"},"exerciseKey":"6a8b4695-3386-491a-8711-2dd53eba399e","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst handler = {\n\tset: () => console.log(\"Added a new property!\"),\n\tget: () => console.log(\"Accessed a property!\")\n};\n\nconst person = new Proxy({}, handler);\n\nperson.name = \"Lydia\";\nperson.name;\n```","options":"{\"options\":[\"Added a new property!\",\"Accessed a property!\",\"Added a new property! Accessed a property!\",\"没有任何输出\"],\"isMulti\":false,\"answer\":[2]}","explanation":"使用 Proxy 对象，我们可以给一个对象添加自定义行为。在这个 case，我们传递一个包含以下属性的对象 `handler` : `set` and `get`。每当我们 _设置_ 属性值时 `set` 被调用，每当我们 _获取_ 时 `get` 被调用。\n第一个参数是一个空对象 `{}`，作为 `person` 的值。对于这个对象，自定义行为被定义在对象 `handler`。如果我们向对象 `person` 添加属性，`set` 将被调用。如果我们获取 `person` 的属性, `get` 将被调用。\n首先，我们向 proxy 对象(`person.name = \"Lydia\"`)添加一个属性 `name`。`set` 被调用并输出 `\"Added a new property!\"`。\n然后，我们获取 proxy 对象的一个属性，对象 handler 的属性 `get` 被调用。输出 `\"Accessed a property!\"`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa385e0f30890001ab8106"},"exerciseKey":"6f693f1d-67f6-4b01-aae8-dfeb47a444b5","category":"QA","renderType":"md","title":"script 标签为什么建议放在 body 标签的底部（defer、async）","desc":null,"options":null,"explanation":"因为浏览器在渲染html的时候是从上到下执行的，当遇到js文件的时候就会停止当前页面的渲染，转而去下载js文件。\n\n如果将script标签放在头部，在文件很大的情况下将导致首屏加载时间延长，影响用户体验。\n\n## 解决办法\n\n* 将script标签放在body的底部\n* 通过defer、async属性将js文件转为异步加载\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa385e3dd7f70001832f63"},"exerciseKey":"6f841b28-be0d-413f-9b7a-70e740fa7621","category":"QA","renderType":"md","title":"如果使用CSS提高页面性能？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/c071c820-9fa3-11eb-ab90-d9ae814b240d.png)\n\n## 一、前言\n\n每一个网页都离不开`css`，但是很多人又认为，`css`主要是用来完成页面布局的，像一些细节或者优化，就不需要怎么考虑，实际上这种想法是不正确的\n\n作为页面渲染和内容展现的重要环节，`css`影响着用户对整个网站的第一体验\n\n因此，在整个产品研发过程中，`css`性能优化同样需要贯穿全程\n\n\n\n## 二、实现方式\n\n\n\n实现方式有很多种，主要有如下：\n\n- 内联首屏关键CSS\n- 异步加载CSS\n- 资源压缩\n- 合理使用选择器\n- 减少使用昂贵的属性\n- 不要使用@import\n\n### 内联首屏关键CSS\n\n在打开一个页面，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联`css`关键代码能够使浏览器在下载完`html`后就能立刻渲染\n\n而如果外部引用`css`代码，在解析`html`结构过程中遇到外部`css`文件，才会开始下载`css`代码，再渲染\n\n所以，`CSS`内联使用使渲染时间提前\n\n注意：但是较大的`css`代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式\n\n\n\n### 异步加载CSS\n\n在`CSS`文件请求、下载、解析完成之前，`CSS`会阻塞渲染，浏览器将不会渲染任何已处理的内容\n\n前面加载内联代码后，后面的外部引用`css`则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下：\n\n- 使用javascript将link标签插到head标签最后\n\n```js\n// 创建link标签\nconst myCSS = document.createElement( \"link\" );\nmyCSS.rel = \"stylesheet\";\nmyCSS.href = \"mystyles.css\";\n// 插入到header的最后位置\ndocument.head.insertBefore( myCSS, document.head.childNodes[ document.head.childNodes.length - 1 ].nextSibling );\n```\n\n- 设置link标签media属性为noexis，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将`media`的值设为`screen`或`all`，从而让浏览器开始解析CSS\n\n```html\n<link rel=\"stylesheet\" href=\"mystyles.css\" media=\"noexist\" onload=\"this.media='all'\">\n```\n\n- 通过rel属性将link元素标记为alternate可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将rel设回stylesheet\n\n```html\n<link rel=\"alternate stylesheet\" href=\"mystyles.css\" onload=\"this.rel='stylesheet'\">\n```\n\n\n\n### 资源压缩\n\n利用`webpack`、`gulp/grunt`、`rollup`等模块化工具，将`css`代码进行压缩，使文件变小，大大降低了浏览器的加载时间\n\n\n\n### 合理使用选择器\n\n`css`匹配的规则是从右往左开始匹配，例如`#markdown .content h3`匹配规则如下：\n\n- 先找到h3标签元素\n- 然后去除祖先不是.content的元素\n- 最后去除祖先不是#markdown的元素\n\n如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高\n\n所以我们在编写选择器的时候，可以遵循以下规则：\n\n- 不要嵌套使用过多复杂选择器，最好不要三层以上\n- 使用id选择器就没必要再进行嵌套\n- 通配符和属性选择器效率最低，避免使用\n\n\n\n### 减少使用昂贵的属性\n\n在页面发生重绘的时候，昂贵属性如`box-shadow`/`border-radius`/`filter`/透明度/`:nth-child`等，会降低浏览器的渲染性能\n\n\n\n### 不要使用@import\n\ncss样式文件有两种引入方式，一种是`link`元素，另一种是`@import`\n\n`@import`会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时\n\n而且多个`@import`可能会导致下载顺序紊乱\n\n比如一个css文件`index.css`包含了以下内容：`@import url(\"reset.css\")`\n\n那么浏览器就必须先把`index.css`下载、解析和执行后，才下载、解析和执行第二个文件`reset.css`\n\n\n\n### 其他\n\n- 减少重排操作，以及减少不必要的重绘\n- 了解哪些属性可以继承而来，避免对这些属性重复编写\n- cssSprite，合成所有icon图片，用宽高加上backgroud-position的背景图方式显现出我们要的icon图，减少了http请求\n- 把小的icon图片转成base64编码\n- CSS3动画或者过渡尽量使用transform和opacity来实现动画，不要使用left和top属性\n\n\n\n## 三、总结\n\n`css`实现性能的方式可以从选择器嵌套、属性特性、减少`http`这三面考虑，同时还要注意`css`代码的加载顺序\n\n","level":2,"tagId":20}
{"_id":{"$oid":"61aa38600d111e0001037298"},"exerciseKey":"74d6fe86-2acf-4b0c-a588-0738302ced01","category":"QA","renderType":"md","title":"数据类型检测的方式有哪些？","desc":null,"options":null,"explanation":"## （1）typeof\n\n```js\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object\n```\n\n其中数组、对象、null都会被判断为object，其他判断都正确。\n\n## （2）instanceof\n\ninstanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。\n\n```js\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false \n \nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true\n```\n\n可以看到，instanceof只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。\n\n## （3）constructor\n\n```js\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n```\n\nconstructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了：\n\n```js\nfunction Fn(){};\n \nFn.prototype = new Array();\n \nvar f = new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true\n```\n\n## （4）Object.prototype.toString.call()\n\nObject.prototype.toString.call() 使用 Object 对象的原型方法 toString 来判断数据类型：\n\n```js\nvar a = Object.prototype.toString;\n \nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function(){}));\nconsole.log(a.call({}));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n```\n\n同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n\n这是因为toString是Object的原型方法，而Array、function等类型作为Object的实例，都重写了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa386181337a00011e05e5"},"exerciseKey":"791b77aa-0432-440b-bedb-506a4f8eac36","category":"QA","renderType":"md","title":"说说你对Git的理解？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/213eba50-f79c-11eb-bc6f-3f06e1491664.png)\n\n## 一、是什么\n\ngit，是一个分布式版本控制软件，最初目的是为更好地管理`Linux`内核开发而设计\n\n分布式版本控制系统的客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复\n\n ![](https://static.vue-js.com/29240f40-f79c-11eb-991d-334fd31f0201.png)\n\n项目开始，只有一个原始版仓库，别的机器可以`clone`这个原始版本库，那么所有`clone`的机器，它们的版本库其实都是一样的，并没有主次之分\n\n所以在实现团队协作的时候，只要有一台电脑充当服务器的角色，其他每个人都从这个“服务器”仓库`clone`一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交\n\n`github`实际就可以充当这个服务器角色，其是一个开源协作社区，提供`Git`仓库托管服务，既可以让别人参与你的开源项目，也可以参与别人的开源项目\n\n\n\n## 二、工作原理\n\n当我们通过`git init`创建或者`git clone`一个项目的时候，项目目录会隐藏一个`.git`子目录，其作用是用来跟踪管理版本库的\n\n`Git` 中所有数据在存储前都计算校验和，然后以校验和来引用，所以在我们修改或者删除文件的时候，`git`能够知道\n\n`Git `用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）， 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来，如下：\n\n```text\n24b9da6552252987aa493b52f8696cd6d3b00373\n```\n\n当我们修改文件的时候，`git`就会修改文件的状态，可以通过`git status`进行查询，状态情况如下：\n\n- 已修改（modified）：表示修改了文件，但还没保存到数据库中。\n- 已暂存（staged）：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。\n- 已提交（committed）：表示数据已经安全的保存在本地数据库中。\n\n文件状态对应的，不同状态的文件在` Git `中处于不同的工作区域，主要分成了四部分：\n\n- 工作区：相当于本地写代码的区域，如 git clone 一个项目到本地，相当于本地克隆了远程仓库项目的一个副本\n- 暂存区：暂存区是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中\n- 本地仓库：提交更新，找到暂存区域的文件，将快照永久性存储到 Git 本地仓库\n- 远程仓库：远程的仓库，如 github\n\n ![](https://static.vue-js.com/3273c9a0-f79c-11eb-bc6f-3f06e1491664.png)\n\n\n\n## 三、命令\n\n从上图可以看到，`git`日常简单的使用就只有上图6个命令：\n\n- add\n- commit \n- push\n- pull\n- clone\n- checkout\n\n但实际上还有很多命令，如果想要熟练使用，还有60个多命令，通过这些命令的配合使用，能够提高个人工作效率和团队协助能力","level":1,"tagId":29}
{"_id":{"$oid":"61aa383f7964120001917371"},"exerciseKey":"041f15e1-e0a7-450b-846c-a3078bc791c1","category":"QA","renderType":"md","title":"TypeScript 和 JavaScript 的区别是什么？","desc":null,"options":null,"explanation":"Typescript 是 JavaScript 的超集，可以被编译成 JavaScript 代码。用 JavaScript 编写的代码，在 TypeScript 中依然有效。Typescript 是纯面向对象的编程语言，包含类和接口的概念。 程序员可以用它来编写面向对象的服务端或客户端程序，并将它们编译成 JavaScript 代码。","level":1,"tagId":19}
{"_id":{"$oid":"61aa3840cd02c30001dd2168"},"exerciseKey":"0958b45c-a5b9-4087-9431-e0ca02ff0597","category":"QA","renderType":"html","title":"XSS：跨站脚本攻击","desc":null,"options":null,"explanation":"<p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">就是攻击者想尽一切办法将可以执行的代码注入到网页中。</span></span></span></span><br/><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><span style=\"font-size:14ptpx\">存储型（server端）：</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">场景：见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">攻击步骤：i）攻击者将恶意代码提交到目标网站的数据库中</span></span></span></span><br/></li><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）用户打开目标网站时，服务端将恶意代码从数据库中取出来，拼接在HTML中返回给浏览器</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）用户浏览器在收到响应后解析执行，混在其中的恶意代码也同时被执行</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iv）恶意代码窃取用户数据，并发送到指定攻击者的网站，或者冒充用户行为，调用目标网站的接口，执行恶意操作</span></span></span></span></li></ul></ul><p></p><p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">反射型（Server端）</span></span></span></span><br/><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><span style=\"font-size:10.5ptpx\">与存储型的区别在于，存储型的恶意代码存储在数据库中，反射型的恶意代码在URL上</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">场景：通过 URL 传递参数的功能，如网站搜索、跳转等。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">攻击步骤：i）攻击者构造出特殊的 URL，其中包含恶意代码。</span></span></span></span><br/></li><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iv）恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</span></span></span></span></li></ul></ul><p></p><p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">Dom 型(浏览器端）</span></span></span></span><br/><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><span style=\"font-size:10.5ptpx\">DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">场景：通过 URL 传递参数的功能，如网站搜索、跳转等。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">攻击步骤：i）攻击者构造出特殊的 URL，其中包含恶意代码。</span></span></span></span><br/></li><ol><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）用户打开带有恶意代码的 URL。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iv）恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</span></span></span></span></li></ol></ul><p></p><p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">预防方案：（防止攻击者提交恶意代码，防止浏览器执行恶意代码）</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">i）对数据进行严格的输出编码：如HTML元素的编码，JS编码，CSS编码，URL编码等等避免拼接 HTML；Vue/React 技术栈，避免使用 v-html / dangerouslySetInnerHTML</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）CSP HTTP Header，即 Content-Security-Policy、X-XSS-Protection增加攻击难度，配置CSP(本质是建立白名单，由浏览器进行拦截)</span></span></span></span></li></ul><p><br/><br/></p><ul><li><br/>Content-Security-Policy: default-src &#x27;self&#x27;  <br/></li></ul><p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">-所有内容均来自站点的同一个源（不包括其子域名）</span></span></span></span><br/><br/><br/></p><ul><li><br/>Content-Security-Policy: default-src &#x27;self&#x27; *.trusted.com <br/></li></ul><p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">-允许内容来自信任的域名及其子域名 (域名不必须与CSP设置所在的域名相同)</span></span></span></span><br/><br/><br/><br/>Content-Security-Policy: default-src https://test.com <br/><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">-该服务器仅允许通过HTTPS方式并仅从test.com域名来访问文档</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）输入验证：比如一些常见的数字、URL、电话号码、邮箱地址等等做校验判断</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iv）开启浏览器XSS防御：Http Only cookie，禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">v）验证码</span></span></span></span></li></ul><p><br/></p>","level":2.5,"tagId":21}
{"_id":{"$oid":"61aa384254ebf60001a1a333"},"exerciseKey":"0e7888d9-d8a4-41f8-a052-f94350ee0c15","category":"QA","renderType":"md","title":"React有哪些性能优化的方法？","desc":null,"options":null,"explanation":"React 渲染性能优化的三个方向，其实也适用于其他软件开发领域，这三个方向分别是:\n\n* 减少计算的量。 -> 对应到 React 中就是减少渲染的节点 或者 降低组件渲染的复杂度\n* 利用缓存。-> 对应到 React 中就是如何避免重新渲染，利用函数式编程的 memo 方式来避免组件重新渲染\n* 精确重新计算的范围。 对应到 React 中就是绑定组件和状态关系, 精确判断更新的'时机'和'范围'. 只重新渲染'脏'的组件，或者说降低渲染范围\n\n## 减少渲染的节点/降低渲染计算量(复杂度)\n\n首先从计算的量上下功夫，减少节点渲染的数量或者降低渲染的计算量可以显著的提高组件渲染性能。\n\n### 不要在渲染函数都进行不必要的计算\n\n比如不要在渲染函数(render)中进行数组排序、数据转换、订阅事件、创建事件处理器等等. 渲染函数中不应该放置太多副作用\n\n### 减少不必要的嵌套\n\n有些团队是重度的 styled-components 用户，其实大部分情况下我们都不需要这个玩意，比如纯静态的样式规则，以及需要重度性能优化的场景。除了性能问题，另外一个困扰我们的是它带来的节点嵌套地狱(如上图)。\n\n所以我们需要理性地选择一些工具，比如使用原生的 CSS，减少 React 运行时的负担.\n\n一般不必要的节点嵌套都是滥用高阶组件/RenderProps 导致的。所以还是那句话‘只有在必要时才使用 xxx’。 有很多种方式来代替高阶组件/RenderProps，例如优先使用 props、React Hooks\n\n### 虚拟列表\n\n虚拟列表是常见的‘长列表'和'复杂组件树'优化方式，它优化的本质就是减少渲染的节点。\n\n虚拟列表只渲染当前视口可见元素。\n\n虚拟列表常用于以下组件场景:\n\n* 无限滚动列表，grid, 表格，下拉列表，spreadsheets\n* 无限切换的日历或轮播图\n* 大数据量或无限嵌套的树\n* 聊天窗，数据流(feed), 时间轴\n* 等等\n\n### 惰性渲染\n\n惰性渲染的初衷本质上和虚表一样，也就是说我们只在必要时才去渲染对应的节点。\n\n举个典型的例子，我们常用 Tab 组件，我们没有必要一开始就将所有 Tab 的 panel 都渲染出来，而是等到该 Tab 被激活时才去惰性渲染。\n\n还有很多场景会用到惰性渲染，例如树形选择器，模态弹窗，下拉列表，折叠组件等等。\n\n### 选择合适的样式方案\n\n在样式运行时性能方面大概可以总结为：CSS > 大部分CSS-in-js > inline style\n\n## 避免重新渲染\n\n减少不必要的重新渲染也是 React 组件性能优化的重要方向. 为了避免不必要的组件重新渲染需要在做到两点:\n\n* 保证组件纯粹性。即控制组件的副作用，如果组件有副作用则无法安全地缓存渲染结果\n* 通过shouldComponentUpdate生命周期函数来比对 state 和 props, 确定是否要重新渲染。对于函数组件可以使用React.memo包装\n\n另外这些措施也可以帮助你更容易地优化组件重新渲染:\n\n### 简化 props\n\n如果一个组件的 props 太复杂一般意味着这个组件已经违背了‘单一职责’，首先应该尝试对组件进行拆解. ② 另外复杂的 props 也会变得难以维护, 比如会影响shallowCompare效率, 还会让组件的变动变得难以预测和调试.\n\n简化的 props 更容易理解, 且可以提高组件缓存的命中率\n\n### 不变的事件处理器\n\n避免使用箭头函数形式的事件处理器, 例如:\n\n```javascript\n<ComplexComponent onClick={evt => onClick(evt.id)} otherProps={values} />\n```\n\n假设 ComplexComponent 是一个复杂的 PureComponent, 这里使用箭头函数，其实每次渲染时都会创建一个新的事件处理器，这会导致 ComplexComponent 始终会被重新渲染.\n\n更好的方式是使用实例方法:\n\n```javascript\nclass MyComponent extends Component {\n  render() {\n    <ComplexComponent onClick={this.handleClick} otherProps={values} />;\n  }\n  handleClick = () => {\n    /*...*/\n  };\n}\n```\n\n即使现在使用hooks，我依然会使用useCallback来包装事件处理器，尽量给下级组件暴露一个静态的函数:\n\n```javascript\nconst handleClick = useCallback(() => {\n  /*...*/\n}, []);\n\nreturn <ComplexComponent onClick={handleClick} otherProps={values} />;\n```\n\n但是如果useCallback依赖于很多状态，你的useCallback可能会变成这样:\n\n```javascript\nconst handleClick = useCallback(() => {\n  /*...*/\n  // 🤭\n}, [foo, bar, baz, bazz, bazzzz]);\n```\n\n这种写法实在让人难以接受，这时候谁还管什么函数式非函数式的。我是这样处理的:\n\n```javascript\nfunction useRefProps<T>(props: T) {\n  const ref = useRef < T > props;\n  // 每次渲染更新props\n  useEffect(() => {\n    ref.current = props;\n  });\n}\n\nfunction MyComp(props) {\n  const propsRef = useRefProps(props);\n\n  // 现在handleClick是始终不变的\n  const handleClick = useCallback(() => {\n    const { foo, bar, baz, bazz, bazzzz } = propsRef.current;\n    // do something\n  }, []);\n}\n```\n\n设计更方便处理的 Event Props. 有时候我们会被逼的不得不使用箭头函数来作为事件处理器：\n\n```javascript\n<List>\n  {list.map(i => (\n    <Item key={i.id} onClick={() => handleDelete(i.id)} value={i.value} />\n  ))}\n</List>\n```\n\n上面的 onClick 是一个糟糕的实现，它没有携带任何信息来标识事件来源，所以这里只能使用闭包形式，更好的设计可能是这样的:\n\n```javascript\n// onClick传递事件来源信息\nconst handleDelete = useCallback((id: string) => {\n  /*删除操作*/\n}, []);\n\nreturn (\n  <List>\n    {list.map(i => (\n      <Item key={i.id} id={i.id} onClick={handleDelete} value={i.value} />\n    ))}\n  </List>\n);\n```\n\n如果是第三方组件或者 DOM 组件呢? 实在不行，看能不能传递data-*属性:\n\n```javascript\nconst handleDelete = useCallback(event => {\n  const id = event.currentTarget.dataset.id;\n  /*删除操作*/\n}, []);\n\nreturn (\n  <ul>\n    {list.map(i => (\n      <li key={i.id} data-id={i.id} onClick={handleDelete} value={i.value} />\n    ))}\n  </ul>\n);\n```\n\n### 不可变数据\n\n不可变数据可以让状态变得可预测，也让 shouldComponentUpdate '浅比较'变得更可靠和高效。\n\n相关的工具有Immutable.js、Immer、immutability-helper 以及 seamless-immutable。\n\n### 简化 state\n\n不是所有状态都应该放在组件的 state 中. 例如缓存数据。按照我的原则是：如果需要组件响应它的变动, 或者需要渲染到视图中的数据才应该放到 state 中。这样可以避免不必要的数据变动导致组件重新渲染.\n\n### 使用 recompose 精细化比对\n\n尽管 hooks 出来后，recompose 宣称不再更新了，但还是不影响我们使用 recompose 来控制shouldComponentUpdate方法, 比如它提供了以下方法来精细控制应该比较哪些 props:\n\n```javascript\n /* 相当于React.memo */\n pure()\n /* 自定义比较 */\n shouldUpdate(test: (props: Object, nextProps: Object) => boolean): HigherOrderComponent\n /* 只比较指定key */\n onlyUpdateForKeys( propKeys: Array<string>): HigherOrderComponent\n```\n\n其实还可以再扩展一下，比如omitUpdateForKeys忽略比对某些 key.\n\n## 精细化渲染\n\n\n所谓精细化渲染指的是只有一个数据来源导致组件重新渲染, 比如说 A 只依赖于 a 数据，那么只有在 a 数据变动时才渲染 A, 其他状态变化不应该影响组件 A。\n\nVue 和 Mobx 宣称自己性能好的一部分原因是它们的'响应式系统', 它允许我们定义一些‘响应式数据’，当这些响应数据变动时，依赖这些响应式数据视图就会重新渲染。\n\n### 响应式数据的精细化渲染\n\n大部分情况下，响应式数据可以实现视图精细化的渲染, 但它还是不能避免开发者写出低效的程序. 本质上还是因为组件违背‘单一职责’.\n\n举个例子，现在有一个 MyComponent 组件，依赖于 A、B、C 三个数据源，来构建一个 vdom 树。现在的问题是什么呢？现在只要 A、B、C 任意一个变动，那么 MyComponent 整个就会重新渲染。\n\n更好的做法是让组件的职责更单一，精细化地依赖响应式数据，或者说对响应式数据进行‘隔离’. 如下图, A、B、C 都抽取各自的组件中了，现在 A 变动只会渲染 A 组件本身，而不会影响父组件和 B、C 组件。\n\n对于 Vue 或者 Mobx 来说，一个组件的渲染函数就是一个依赖收集的上下文。上面 List 组件渲染函数内'访问'了所有的列表项数据，那么 Vue 或 Mobx 就会认为你这个组件依赖于所有的列表项，这样就导致，只要任意一个列表项的属性值变动就会重新渲染整个 List 组件。\n\n解决办法也很简单，就是将数据隔离抽取到单一职责的组件中。对于 Vue 或 Mobx 来说，越细粒度的组件，可以收获更高的性能优化效果。\n\n### 不要滥用 Context\n\n其实 Context 的用法和响应式数据正好相反。笔者也看过不少滥用 Context API 的例子, 说到底还是没有处理好‘状态的作用域问题’.\n\n首先要理解 Context API 的更新特点，它是可以穿透React.memo或者shouldComponentUpdate的比对的，也就是说，一旦 Context 的 Value 变动，所有依赖该 Context 的组件会全部 forceUpdate.\n\n这个和 Mobx 和 Vue 的响应式系统不同，Context API 并不能细粒度地检测哪些组件依赖哪些状态，所以说上节提到的‘精细化渲染’组件模式，在 Context 这里就成为了‘反模式’.\n\n\n\n\n\n\n\n  \n\n\n","level":4,"tagId":13}
{"_id":{"$oid":"61aa384485c5f70001542ed0"},"exerciseKey":"1648c493-456c-426e-b57f-7a24ad14d40e","category":"QA","renderType":"md","title":"什么是类数组对象？","desc":null,"options":null,"explanation":"一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n（1）通过 call 调用数组的 slice 方法来实现转换\n\n```js\nArray.prototype.slice.call(arrayLike);\n```\n\n（2）通过 call 调用数组的 splice 方法来实现转换\n```js\nArray.prototype.splice.call(arrayLike, 0);\n```\n\n（3）通过 apply 调用数组的 concat 方法来实现转换\n```js\nArray.prototype.concat.apply([], arrayLike);\n```\n\n（4）通过 Array.from 方法来实现转换\n```js\nArray.from(arrayLike);\n```\n","level":0.5,"tagId":10}
{"_id":{"$oid":"61aa38453d5f3a0001af550d"},"exerciseKey":"19462061-029d-4111-a94e-a3b3ca87a1e1","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\n// counter.js\nlet counter = 10;\nexport default counter;\n```","options":"{\"options\":[\"10\",\"11\",\"Error\",\"NaN\"],\"isMulti\":false,\"answer\":[2]}","explanation":"引入的模块是 _只读_ 的: 你不能修改引入的模块。只有导出他们的模块才能修改其值。\n当我们给`myCounter`增加一个值的时候会抛出一个异常： `myCounter`是只读的，不能被修改。","level":1,"tagId":32}
{"_id":{"$oid":"61aa384834458700017f1bf3"},"exerciseKey":"22a4d7b2-40a6-44be-9910-86256ee1d557","category":"QA","renderType":"md","title":"前后端分离是什么？","desc":null,"options":null,"explanation":"前后端分离，顾名思义，就是前端与后端分开。分开什么？分开开发，分开部署。\n\n这里以java web开发作为例子：我们学web开发的时候会接触到spring mvc框架，spring mvc开发时前端一般都用jsp作为展示页面，后端用servlet处理请求。再到springboot框架，前端使用thymeleaf或者freemarker作为模板引擎展示，后端用controller处理请求。\n\n其中jsp和thymeleaf，freemarker都有一个共同点：页面都是可以内嵌java代码的。页面里面嵌入了java（后端程序设计语言）代码，就导致页面和后端服务的耦合度特别高——前后端开发的时候粘在一起了。\n\n而如果我们要部署spring mvc/springboot的项目的话，前后端代码也都是打包在一个war包/jar包里的，部署的时候也是一起部署的，就导致前端要修改/后端要修改的话项目都要重新打包部署——前后端部署也粘在一起了。\n\n怎样才算分开开发呢？那当然就是前端页面只用写html + js + css，后端不用写jsp，不用使用thymeleaf等模板引擎来做html的渲染了。\n\n怎样才算分开部署呢？将前端项目和后端项目分开成两部分分别部署到服务器里。\n\n所以，前端项目和后端项目分开开发，分开部署的都算是前后端分离。\n\n## 我们为什么要前后端分离\n\n* 项目变大后难以更新维护\n\n我们也都知道，一个项目开发出来之后，都会一直更新维护。\n\n那每次项目更新升级都会添加新功能，代码量也会增加，项目也会越来越大。如果采取前后端不分离的开发方式，前后端的更新迭代对于前端工程师和后端工程师或是全栈工程师而言也是巨大的压力：当一个页面需要前端工程师和后端工程师一起才能做好的时候，对他们而言，沟通可能是比代码更令人头疼的问题；当一个项目开发团队都是全栈工程师，如果项目变大，首先令人头疼的问题应该是：怎样才能招到合格的全栈工程师——毕竟全栈工程师对程序员的要求更高。而且当前端页面或后端接口出现问题时，我们不得不重新打包编译整个项目以进行项目的更新与维护，而项目越大，打包与编译所耗费的时间就越长。\n\n* 项目耦合太严重难以复用\n\n上文也有提到，如果使用模板引擎或是jsp这种特殊的页面，都会出现在页面上写java代码的情况。那么如果想要进行代码复用，难度肯定是特别高的：每次复用后端接口都需要重新修改前端页面，并在上面添加java代码。\n\n* 项目加载更加耗费资源和时间\n\n如果要加载一个使用了thymeleaf的页面，首先我们需要调用thymeleaf引擎来解析页面上的java代码，然后再对页面进行渲染，而一般的静态页面只需要直接渲染就可以。如果我们项目需要承载更多的并发的时候，我们也只能将前后端结合的部署包进行多包部署以扩充系统性能，但这样也浪费了一部分资源。\n\n## 前后端分离有什么好处\n\n* 提升前端与后端开发效率\n\n前端与后端可以分开干了，各干各的，各自都只需要负责各自擅长的东西：前端只需要管html，css和js，后端只需要管java。只要商量确定好接口文档，甚至连开发进度都可以不统一：前端用js来mock数据进行测试，后端用postman等接口测试工具来做接口测试。\n\n* 项目更新维护变简单\n\n当我们需要更新维护前端页面时，只需要对前端项目的bug进行修缮，然后对前端项目进行打包部署就行，后端也是一样。而当团队需要扩招的时候，擅长单一职责（前端/后端）的人也更好找。\n\n* 提高接口复用率\n\n如果我们需要开发一个相似的项目，或者复用之前项目的后端模块，只需要将模块拿出来后进行小改动就行。而不是像以前一样大费周折，还要将接口对应的旧页面上的相应java代码移植到新的页面上（甚至还会出现不兼容的情况）。\n\n* 让页面加载变得更快\n\n我们将前端页面打包成静态页面进行部署，用户只需要访问静态页面就行，比起需要多一步解析交互代码的thymeleaf等模板引擎，普通的html页面肯定会快上一些，而有的时候这就不只是快上那么一点了。甚至我们可以引入nodejs作为中间岛，将前端页面的渲染放在nodejs上进行处理，直接将结果呈现反馈给浏览器。\n\n* 提升服务器资源利用率\n\n如果我们需要扩充系统并发量，只需要把前端页面在不超过后端接口QPS的情况下进行分包部署，做好负载均衡就行。而不需要将整个项目分包部署，尤其是多部署后端服务——这特别占用服务器资源。而如果超过了后端接口的QPS，后端当然也要分包部署了。\n\n## 前后端分离带来的问题\n\n* 跨域问题（CORS）\n\n跨域问题应该是最常见的问题了。当我们用到Ajax进行数据请求的时候，跨域问题就会出现。这个问题的解决方法也是特别简单的，后端在返回的请求header中添加Access-Control-Allow-Origin就可以解决了。不同应用场景有不同设置方法，而这个问题百度来答案比什么都快。\n\n* 单点登录问题\n\n这个问题也是最近我在做项目对接的时候遇到的，具体是在对接cas的单点认证时，请求服务的单点登录接口是直接接入门户网站的，而这个接口对接的是后端而不是前端。当我们从门户访问接入应用的单点登录链接时，请求是直接发送到后端的。由于前端没接入nodejs，所以并没有办法将请求直接发送到前端进行登录验证。而整个认证流程都在后端进行的话，前端页面就无法正常获取登录后的jwt了。所以要在第一步请求的时候，将生成的token和jsessionid写入前端的认证处理页面来做页面跳转和登录认证的进一步进行。\n\n","level":3,"tagId":28}
{"_id":{"$oid":"61aa38488e97d90001808688"},"exerciseKey":"244485d8-3c96-4f52-88d7-7ac0c76b5e0b","category":"QA","renderType":"md","title":"JavaScript中的简单数据类型有哪些？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/2abd00a0-6692-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、概述\n\n`JS `中有六种简单数据类型：`undefined`、`null`、`boolean`、`string`、`number`、`symbol`\n\nPS: ES10中的新特性 BigInt (任意精度整数)，目前还处于stage-4阶段，不出意外即将成为js的第七种基本数据类型和第二个数字数据类型。\n\n但是我们在声明的时候只有一种数据类型，只有到运行期间才会确定当前类型\n\n```js\nlet x = y ? 1 : a;\n```\n\n上面代码中，`x`的值在编译阶段是无法获取的，只有等到程序运行时才能知道\n\n虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的，如果运算子的类型与预期不符合，就会触发类型转换机制\n\n常见的类型转换有：\n\n- 强制转换（显示转换）\n- 自动转换（隐式转换）\n\n\n\n## 二、显示转换\n\n显示转换，即我们很清楚可以看到这里发生了类型的转变，常见的方法有：\n\n- Number()\n- parseInt()\n- String()\n- Boolean()\n\n\n\n### Number()\n\n将任意类型的值转化为数值\n\n先给出类型转换规则：\n\n ![](https://static.vue-js.com/915b7300-6692-11eb-ab90-d9ae814b240d.png)\n\n实践一下：\n\n```js\nNumber(324) // 324\n\n// 字符串：如果可以被解析为数值，则转换为相应的数值\nNumber('324') // 324\n\n// 字符串：如果不可以被解析为数值，返回 NaN\nNumber('324abc') // NaN\n\n// 空字符串转为0\nNumber('') // 0\n\n// 布尔值：true 转成 1，false 转成 0\nNumber(true) // 1\nNumber(false) // 0\n\n// undefined：转成 NaN\nNumber(undefined) // NaN\n\n// null：转成0\nNumber(null) // 0\n\n// 对象：通常转换成NaN(除了只包含单个数值的数组)\nNumber({a: 1}) // NaN\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5\n```\n\n从上面可以看到，`Number`转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为`NaN`\n\n\n\n### parseInt()\n\n`parseInt`相比`Number`，就没那么严格了，`parseInt`函数逐个解析字符，遇到不能转换的字符就停下来\n\n```js\nparseInt('32a3') //32\n```\n\n\n\n### String()\n\n可以将任意类型的值转化成字符串\n\n给出转换规则图：\n\n   ![](https://static.vue-js.com/48dd8eb0-6692-11eb-85f6-6fac77c0c9b3.png)\n\n实践一下：\n\n```js\n// 数值：转为相应的字符串\nString(1) // \"1\"\n\n//字符串：转换后还是原来的值\nString(\"a\") // \"a\"\n\n//布尔值：true转为字符串\"true\"，false转为字符串\"false\"\nString(true) // \"true\"\n\n//undefined：转为字符串\"undefined\"\nString(undefined) // \"undefined\"\n\n//null：转为字符串\"null\"\nString(null) // \"null\"\n\n//对象\nString({a: 1}) // \"[object Object]\"\nString([1, 2, 3]) // \"1,2,3\"\n```\n\n\n\n### Boolean()\n\n可以将任意类型的值转为布尔值，转换规则如下：\n\n ![](https://static.vue-js.com/53bdad10-6692-11eb-ab90-d9ae814b240d.png)\n\n实践一下：\n\n```js\nBoolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(NaN) // false\nBoolean('') // false\nBoolean({}) // true\nBoolean([]) // true\nBoolean(new Boolean(false)) // true\n```\n\n\n\n## 三、隐式转换\n\n在隐式转换中，我们可能最大的疑惑是 ：何时发生隐式转换？\n\n我们这里可以归纳为两种情况发生隐式转换的场景：\n\n- 比较运算（`==`、`!=`、`>`、`<`）、`if`、`while`需要布尔值地方\n- 算术运算（`+`、`-`、`*`、`/`、`%`）\n\n除了上面的场景，还要求运算符两边的操作数不是同一类型\n\n\n\n### 自动转换为布尔值\n\n在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用`Boolean`函数\n\n可以得出个小结：\n\n- undefined \n- null \n- false \n- +0 \n- -0\n- NaN\n- \"\"\n\n除了上面几种会被转化成`false`，其他都换被转化成`true`\n\n\n\n### 自动转换成字符串\n\n遇到预期为字符串的地方，就会将非字符串的值自动转为字符串\n\n具体规则是：先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串\n\n常发生在`+`运算中，一旦存在字符串，则会进行字符串拼接操作\n\n```js\n'5' + 1 // '51'\n'5' + true // \"5true\"\n'5' + false // \"5false\"\n'5' + {} // \"5[object Object]\"\n'5' + [] // \"5\"\n'5' + function (){} // \"5function (){}\"\n'5' + undefined // \"5undefined\"\n'5' + null // \"5null\"\n```\n\n\n\n### 自动转换成数值\n\n除了`+`有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值\n\n```js\n'5' - '2' // 3\n'5' * '2' // 10\ntrue - 1  // 0\nfalse - 1 // -1\n'1' - 1   // 0\n'5' * []    // 0\nfalse / '5' // 0\n'abc' - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN\n```\n\n`null`转为数值时，值为`0` 。`undefined`转为数值时，值为`NaN`\n\n\n","level":0.5,"tagId":24}
{"_id":{"$oid":"61aa384a91a75000018d2c65"},"exerciseKey":"2ac9dc59-86fe-4c0c-9e5e-93a5d92b8513","category":"QA","renderType":"html","title":"HTTP状态码","desc":null,"options":null,"explanation":"<p style=\"text-align:left;text-indent:2em;\">状态码的类别：</p><p><strong>类别原因描述</strong>1xxInformational(信息性状态码)接受的请求正在处理2xxSuccess(成功状态码)请求正常处理完毕3xxRedirection(重定向状态码)需要进行附加操作一完成请求4xxClient Error (客户端错误状态码)服务器无法处理请求5xxServer Error(服务器错误状态码)服务器处理请求出错</p><p style=\"text-align:left;text-indent:2em;\"></p><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-32\">1. 2XX (Success 成功状态码)</h3><p style=\"text-align:left;text-indent:2em;\">状态码2XX表示请求被正常处理了。</p><p></p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-33\">（1）200 OK</h4><p style=\"text-align:left;text-indent:2em;\">200 OK表示客户端发来的请求被服务器端正常处理了。</p><p></p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-34\">（2）204 No Content</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。 一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。</p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-35\">（3）206 Partial Content</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-36\">2. 3XX (Redirection 重定向状态码)</h3><p style=\"text-align:left;text-indent:2em;\">3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-37\">（1）301 Moved Permanently</h4><p style=\"text-align:left;text-indent:2em;\"><strong>永久重定向。</strong> 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。 若用户已经把原来的URI保存为书签，此时会按照 Location 中新的URI重新保存该书签。 同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</p><p style=\"text-align:left;text-indent:2em;\"><strong>使用场景：</strong></p><ul><li>当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。</li><li>在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。</li></ul><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-38\">（2）302 Found</h4><p style=\"text-align:left;text-indent:2em;\"><strong>临时重定向。</strong> 该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。 和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。 若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。 同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。</p><p style=\"text-align:left;text-indent:2em;\"><strong>使用场景：</strong></p><ul><li>当我们在做活动时，登录到首页自动重定向，进入活动页面。</li><li>未登陆的用户访问用户中心重定向到登录页面。</li><li>访问404页面重新定向到首页。</li></ul><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-39\">（3）303 See Other</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。 303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。 303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。 注意：</p><blockquote style=\"text-align:left;text-indent:2em;\">当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成GET，并删除请求报文内的主体，之后请求会再次自动发送。 301、302 标准是禁止将 POST 方法变成 GET方法的，但实际大家都会这么做。</blockquote><p style=\"text-align:left;text-indent:2em;\"></p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-40\">（4）304 Not Modified</h4><p style=\"text-align:left;text-indent:2em;\"><strong>浏览器缓存相关。</strong> 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。</p><p style=\"text-align:left;text-indent:2em;\">带条件的请求（Http 条件请求）：使用 Get方法 请求，请求报文中包含（<code>if-match</code>、<code>if-none-match</code>、<code>if-modified-since</code>、<code>if-unmodified-since</code>、<code>if-range</code>）中任意首部。</p><p style=\"text-align:left;text-indent:2em;\">状态码304并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。</p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-41\">（5）307 Temporary Redirect</h4><p style=\"text-align:left;text-indent:2em;\"><strong>临时重定向。</strong> 该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。 307 会遵守浏览器标准，<strong>不会从 POST 变成 GET</strong>。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。规范要求浏览器继续向 Location 的地址 POST 内容。</p><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-42\">3. 4XX (Client Error 客户端错误状态码)</h3><p style=\"text-align:left;text-indent:2em;\">4XX 的响应结果表明客户端是发生错误的原因所在。</p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-43\">（1）400 Bad Request</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-44\">（2）401 Unauthorized</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表示发送的请求需要有通过 HTTP 认证(BASIC 认证、DIGEST 认证)的认证信息。若之前已进行过一次请求，则表示用户认证失败 返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询(challenge)用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。 以下情况会出现401：</p><ul><li>401.1 – 登录失败。</li><li>401.2 – 服务器配置导致登录失败。</li><li>401.3 – 由于 ACL 对资源的限制而未获得授权。</li><li>401.4 – 筛选器授权失败。</li><li>401.5 – ISAPI/CGI 应用程序授权失败。</li><li>401.7 – 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</li></ul><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-45\">（3）403 Forbidden</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。 IIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：</p><ul><li>403.1 – 执行访问被禁止。</li><li>403.2 – 读访问被禁止。</li><li>403.3 – 写访问被禁止。</li><li>403.4 – 要求 SSL。</li><li>403.5 – 要求 SSL 128。</li><li>403.6 – IP 地址被拒绝。</li><li>403.7 – 要求客户端证书。</li><li>403.8 – 站点访问被拒绝。</li><li>403.9 – 用户数过多。</li><li>403.10 – 配置无效。</li><li>403.11 – 密码更改。</li><li>403.12 – 拒绝访问映射表。</li><li>403.13 – 客户端证书被吊销。</li><li>403.14 – 拒绝目录列表。</li><li>403.15 – 超出客户端访问许可。</li><li>403.16 – 客户端证书不受信任或无效。</li><li>403.17 – 客户端证书已过期或尚未生效</li><li>403.18 – 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</li><li>403.19 – 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</li><li>403.20 – Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</li></ul><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-46\">（4）404 Not Found</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 以下情况会出现404：</p><ul><li>404.0 -（无） – 没有找到文件或目录。</li><li>404.1 – 无法在所请求的端口上访问 Web 站点。</li><li>404.2 – Web 服务扩展锁定策略阻止本请求。</li><li>404.3 – MIME 映射策略阻止本请求。</li></ul><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-47\">（5）405 Method Not Allowed</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。 GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。 客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法, 如下</p><pre class=\" language-javascript\"><code>Access<span style=\"color:#f8f8f2\">-</span>Control<span style=\"color:#f8f8f2\">-</span>Allow<span style=\"color:#f8f8f2\">-</span>Methods<span style=\"color:#f8f8f2\">:</span> <span style=\"color:#f92672\">GET</span><span style=\"color:#f8f8f2\">,</span><span style=\"color:#f92672\">HEAD</span><span style=\"color:#f8f8f2\">,</span><span style=\"color:#f92672\">PUT</span><span style=\"color:#f8f8f2\">,</span><span style=\"color:#f92672\">PATCH</span><span style=\"color:#f8f8f2\">,</span><span style=\"color:#f92672\">POST</span><span style=\"color:#f8f8f2\">,</span><span style=\"color:#f92672\">DELETE</span></code></pre><p style=\"text-align:left;text-indent:2em;\"></p><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-48\">4. 5XX (Server Error 服务器错误状态码)</h3><p style=\"text-align:left;text-indent:2em;\">5XX 的响应结果表明服务器本身发生错误.</p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-49\">（1）500 Internal Server Error</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</p><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-50\">（2）502 Bad Gateway</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的 注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复 以下情况会出现502：</p><ul><li>502.1 – CGI （通用网关接口）应用程序超时。</li><li>502.2 – CGI （通用网关接口）应用程序出错。</li></ul><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-51\">（3）503 Service Unavailable</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。 <strong>使用场景：</strong></p><ul><li>服务器停机维护时，主动用503响应请求；</li><li>nginx 设置限速，超过限速，会返回503。</li></ul><h4 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-52\">（4）504 Gateway Timeout</h4><p style=\"text-align:left;text-indent:2em;\">该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是HTTP 1.1中新加入的。 使用场景：代码执行时间超时，或者发生了死循环。</p>","level":1.5,"tagId":16}
{"_id":{"$oid":"61aa384fbdfab500012c842f"},"exerciseKey":"3a6b4cce-0829-42dc-9629-c97fa85312f0","category":"QA","renderType":"md","title":"CSS中，有哪些方式可以隐藏页面元素？有什么区别?","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/ccf96f50-929a-11eb-ab90-d9ae814b240d.png)\n\n## 一、前言\n\n在平常的样式排版中，我们经常遇到将某个模块隐藏的场景\n\n通过`css`隐藏元素的方法有很多种，它们看起来实现的效果是一致的\n\n但实际上每一种方法都有一丝轻微的不同，这些不同决定了在一些特定场合下使用哪一种方法\n\n## 二、实现方式\n\n通过`css`实现隐藏元素方法有如下：\n\n- display:none\n- visibility:hidden\n- opacity:0\n- 设置height、width模型属性为0\n- position:absolute\n- clip-path\n\n### display:none\n\n设置元素的`display`为`none`是最常用的隐藏元素的方法\n\n```css\n.hide {\n    display:none;\n}\n```\n\n将元素设置为`display:none`后，元素在页面上将彻底消失\n\n元素本身占有的空间就会被其他元素占有，也就是说它会导致浏览器的重排和重绘\n\n消失后，自身绑定的事件不会触发，也不会有过渡效果\n\n特点：元素不可见，不占据空间，无法响应点击事件\n\n### visibility:hidden\n\n设置元素的`visibility`为`hidden`也是一种常用的隐藏元素的方法\n\n从页面上仅仅是隐藏该元素，DOM结果均会存在，只是当时在一个不可见的状态，不会触发重排，但是会触发重绘\n\n```css\n.hidden{\n    visibility:hidden\n}\n```\n\n给人的效果是隐藏了，所以他自身的事件不会触发\n\n特点：元素不可见，占据页面空间，无法响应点击事件\n\n\n### opacity:0\n\n`opacity`属性表示元素的透明度，将元素的透明度设置为0后，在我们用户眼中，元素也是隐藏的\n\n不会引发重排，一般情况下也会引发重绘\n\n> 如果利用 animation 动画，对 opacity 做变化（animation会默认触发GPU加速），则只会触发 GPU 层面的 composite，不会触发重绘\n\n```css\n.transparent {\n    opacity:0;\n}\n```\n\n由于其仍然是存在于页面上的，所以他自身的的事件仍然是可以触发的，但被他遮挡的元素是不能触发其事件的\n\n需要注意的是：其子元素不能设置opacity来达到显示的效果\n\n特点：改变元素透明度，元素不可见，占据页面空间，可以响应点击事件\n\n\n\n### 设置height、width属性为0\n\n将元素的`margin`，`border`，`padding`，`height`和`width`等影响元素盒模型的属性设置成0，如果元素内有子元素或内容，还应该设置其`overflow:hidden`来隐藏其子元素\n\n```css\n.hiddenBox {\n    margin:0;     \n    border:0;\n    padding:0;\n    height:0;\n    width:0;\n    overflow:hidden;\n}\n```\n\n特点：元素不可见，不占据页面空间，无法响应点击事件\n\n\n\n### position:absolute\n\n将元素移出可视区域\n\n```css\n.hide {\n   position: absolute;\n   top: -9999px;\n   left: -9999px;\n}\n```\n\n特点：元素不可见，不影响页面布局\n\n\n### clip-path\n\n通过裁剪的形式\n\n```css\n.hide {\n  clip-path: polygon(0px 0px,0px 0px,0px 0px,0px 0px);\n}\n```\n\n特点：元素不可见，占据页面空间，无法响应点击事件\n\n\n### 小结\n\n最常用的还是`display:none`和`visibility:hidden`，其他的方式只能认为是奇招，它们的真正用途并不是用于隐藏元素，所以并不推荐使用它们\n\n\n## 三、区别\n\n关于`display: none`、`  visibility: hidden`、`opacity: 0`的区别，如下表所示：\n\n|                        | display: none | visibility: hidden | opacity: 0 |\n| :--------------------- | :------------ | :----------------- | ---------- |\n| 页面中                 | 不存在        | 存在               | 存在       |\n| 重排                   | 会            | 不会               | 不会       |\n| 重绘                   | 会            | 会                 | 不一定     |\n| 自身绑定事件           | 不触发        | 不触发             | 可触发     |\n| transition             | 不支持        | 支持               | 支持       |\n| 子元素可复原           | 不能          | 能                 | 不能       |\n| 被遮挡的元素可触发事件 | 能            | 能                 | 不能       |\n","level":0.5,"tagId":11}
{"_id":{"$oid":"61aa385191a75000018d2c93"},"exerciseKey":"430d4c5c-fe72-45c2-b34e-edaae7786685","category":"QA","renderType":"md","title":"砝码称重问题（二）","desc":"假设有280g食盐，有一架天平，有两个砝码，分别是14g、4g。\n\n请问能否在3次内将280g食盐分为100g和180g两堆，请详细描述你的解决方法。","options":null,"explanation":"## 解法一\n\n* 第一次：平分280g的食盐：140g、140g\n\n目前重物：食盐：140g、140g，砝码：4g、14g\n\n* 第二次：平分140g的食盐：70g、70g\n\n目前重物：食盐：70g、70g、140g，砝码：4g、14g\n\n我们再需要称出30g的食盐\n\n如何根据上面的重物利用天平称出30g的食盐\n\n称了两次两个砝码还都没有用，同时14-4=10，所有两个砝码分布放在天平的两侧\n\n* 第三次：天平左侧：4g砝码 + 40g食盐，天平右侧：14g砝码+ 30g食盐\n\n目前重物：食盐：30g、40g、70g、140g，砝码：4g、14g\n\n食盐重量可组合成100g、180g\n\n## 解法二\n\n* 第一次：4g砝码+280g食盐+天平，可以分成食盐：142g、138g\n\n目前重物：食盐：138g、142g，砝码：4g、14g\n\n* 第二次：14g砝码+142g食盐+天平，称出食盐14g\n\n目前重物：食盐：14g、128g、138g，砝码：4g、14g\n\n* 第三次：天平左侧：14g食盐+14g砝码 ，天平右侧：28g食盐\n\n目前重物：食盐：14g、28g、100g、138g，砝码：4g、14g\n\n食盐重量可组合成100g、180g\n\n## 解法三\n\n* 第一次：用14克砝码得出14克盐。\n\n目前重物：食盐：14g、266g\n\n* 第二次:用14克砝码和4克砝码把266克盐分为128克盐和138克盐。\n\n目前重物：食盐：14g、28g、138g、266g\n\n* 第三次:14克砝码和14克盐从128克盐中得到28克盐，剩下100克盐。\n\n得到180克和100克两堆食盐.\n\n","level":3,"tagId":17}
{"_id":{"$oid":"61aa38578e97d900018086f4"},"exerciseKey":"564a3475-d774-4956-9ea6-024e0e05062d","category":"QA","renderType":"md","title":"举例说明你对尾递归的理解，以及有哪些应用场景","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/74db8fe0-815d-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、递归\n\n递归（英语：Recursion）\n\n在数学与计算机科学中，是指在函数的定义中使用函数自身的方法\n\n在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数\n\n其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解\n\n一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回\n\n下面实现一个函数 `pow(x, n)`，它可以计算 `x` 的 `n` 次方\n\n使用迭代的方式，如下：\n\n```js\nfunction pow(x, n) {\n  let result = 1;\n\n  // 再循环中，用 x 乘以 result n 次\n  for (let i = 0; i < n; i++) {\n    result *= x;\n  }\n  return result;\n}\n```\n\n使用递归的方式，如下：\n\n```js\nfunction pow(x, n) {\n  if (n == 1) {\n    return x;\n  } else {\n    return x * pow(x, n - 1);\n  }\n}\n```\n\n`pow(x, n)` 被调用时，执行分为两个分支：\n\n```js\n             if n==1  = x\n             /\npow(x, n) =\n             \\\n              else     = x * pow(x, n - 1)\n```\n\n也就是说`pow` 递归地调用自身 直到 `n == 1`\n\n ![](https://static.vue-js.com/8002c960-815d-11eb-ab90-d9ae814b240d.png)\n\n为了计算 `pow(2, 4)`，递归变体经过了下面几个步骤：\n\n1. `pow(2, 4) = 2 * pow(2, 3)`\n2. `pow(2, 3) = 2 * pow(2, 2)`\n3. `pow(2, 2) = 2 * pow(2, 1)`\n4. `pow(2, 1) = 2`\n\n因此，递归将函数调用简化为一个更简单的函数调用，然后再将其简化为一个更简单的函数，以此类推，直到结果\n\n\n\n## 二、尾递归\n\n尾递归，即在函数尾位置调用自身（或是一个尾调用本身的其他函数等等）。尾递归也是递归的一种特殊情形。尾递归是一种特殊的尾调用，即在尾部直接调用自身的递归函数\n\n尾递归在普通尾调用的基础上，多出了2个特征：\n\n- 在尾部调用的是函数自身\n- 可通过优化，使得计算仅占用常量栈空间\n\n在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储，递归次数过多容易造成栈溢出\n\n这时候，我们就可以使用尾递归，即一个函数中所有递归形式的调用都出现在函数的末尾，对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\"栈溢出\"错误\n\n实现一下阶乘，如果用普通的递归，如下：\n\n```js\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n```\n\n如果`n`等于5，这个方法要执行5次，才返回最终的计算表达式，这样每次都要保存这个方法，就容易造成栈溢出，复杂度为`O(n)`\n\n如果我们使用尾递归，则如下：\n\n```js\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5) // 120\n```\n\n可以看到，每一次返回的就是一个新的函数，不带上一个函数的参数，也就不需要储存上一个函数了。尾递归只需要保存一个调用栈，复杂度 O(1)\n\n\n\n## 二、应用场景\n\n数组求和\n\n```js\nfunction sumArray(arr, total) {\n    if(arr.length === 1) {\n        return total\n    }\n    return sum(arr, total + arr.pop())\n}\n```\n\n使用尾递归优化求斐波那契数列\n\n```js\nfunction factorial2 (n, start = 1, total = 1) {\n    if(n <= 2){\n        return total\n    }\n    return factorial2 (n -1, total, total + start)\n}\n```\n\n数组扁平化\n\n```js\nlet a = [1,2,3, [1,2,3, [1,2,3]]]\n// 变成\nlet a = [1,2,3,1,2,3,1,2,3]\n// 具体实现\nfunction flat(arr = [], result = []) {\n    arr.forEach(v => {\n        if(Array.isArray(v)) {\n            result = result.concat(flat(v, []))\n        }else {\n            result.push(v)\n        }\n    })\n    return result\n}\n```\n\n数组对象格式化\n\n```js\nlet obj = {\n    a: '1',\n    b: {\n        c: '2',\n        D: {\n            E: '3'\n        }\n    }\n}\n// 转化为如下：\nlet obj = {\n    a: '1',\n    b: {\n        c: '2',\n        d: {\n            e: '3'\n        }\n    }\n}\n\n// 代码实现\nfunction keysLower(obj) {\n    let reg = new RegExp(\"([A-Z]+)\", \"g\");\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            let temp = obj[key];\n            if (reg.test(key.toString())) {\n                // 将修改后的属性名重新赋值给temp，并在对象obj内添加一个转换后的属性\n                temp = obj[key.replace(reg, function (result) {\n                    return result.toLowerCase()\n                })] = obj[key];\n                // 将之前大写的键属性删除\n                delete obj[key];\n            }\n            // 如果属性是对象或者数组，重新执行函数\n            if (typeof temp === 'object' || Object.prototype.toString.call(temp) === '[object Array]') {\n                keysLower(temp);\n            }\n        }\n    }\n    return obj;\n};\n```\n","level":2,"tagId":15}
{"_id":{"$oid":"61aa385a3d5f3a0001af55a8"},"exerciseKey":"605ec5f7-3768-4aa4-8cdc-3b5bd90bebc3","category":"QA","renderType":"md","title":"Axios的原理是什么？","desc":null,"options":null,"explanation":"\r\n\r\n ![](https://static.vue-js.com/1564f7d0-4662-11eb-ab90-d9ae814b240d.png)\r\n\r\n## 一、axios的使用\r\n\r\n关于`axios`的基本使用，上篇文章已经有所涉及，这里再稍微回顾下：\r\n\r\n**发送请求**\r\n\r\n```js\r\nimport axios from 'axios';\r\n\r\naxios(config) // 直接传入配置\r\naxios(url[, config]) // 传入url和配置\r\naxios[method](url[, option]) // 直接调用请求方式方法，传入url和配置\r\naxios[method](url[, data[, option]]) // 直接调用请求方式方法，传入data、url和配置\r\naxios.request(option) // 调用 request 方法\r\n\r\nconst axiosInstance = axios.create(config)\r\n// axiosInstance 也具有以上 axios 的能力\r\n\r\naxios.all([axiosInstance1, axiosInstance2]).then(axios.spread(response1, response2))\r\n// 调用 all 和传入 spread 回调\r\n\r\n```\r\n\r\n\r\n\r\n**请求拦截器**\r\n\r\n```js\r\naxios.interceptors.request.use(function (config) {\r\n    // 这里写发送请求前处理的代码\r\n    return config;\r\n}, function (error) {\r\n    // 这里写发送请求错误相关的代码\r\n    return Promise.reject(error);\r\n});\r\n```\r\n\r\n\r\n\r\n**响应拦截器**\r\n\r\n```js\r\naxios.interceptors.response.use(function (response) {\r\n    // 这里写得到响应数据后处理的代码\r\n    return response;\r\n}, function (error) {\r\n    // 这里写得到错误响应处理的代码\r\n    return Promise.reject(error);\r\n});\r\n```\r\n\r\n\r\n\r\n**取消请求**\r\n\r\n```js\r\n// 方式一\r\nconst CancelToken = axios.CancelToken;\r\nconst source = CancelToken.source();\r\n\r\naxios.get('xxxx', {\r\n  cancelToken: source.token\r\n})\r\n// 取消请求 (请求原因是可选的)\r\nsource.cancel('主动取消请求');\r\n\r\n// 方式二\r\nconst CancelToken = axios.CancelToken;\r\nlet cancel;\r\n\r\naxios.get('xxxx', {\r\n  cancelToken: new CancelToken(function executor(c) {\r\n    cancel = c;\r\n  })\r\n});\r\ncancel('主动取消请求');\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 二、实现一个简易版axios\r\n\r\n构建一个`Axios`构造函数，核心代码为`request`\r\n\r\n```js\r\nclass Axios {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    request(config) {\r\n        return new Promise(resolve => {\r\n            const {url = '', method = 'get', data = {}} = config;\r\n            // 发送ajax请求\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, true);\r\n            xhr.onload = function() {\r\n                console.log(xhr.responseText)\r\n                resolve(xhr.responseText);\r\n            }\r\n            xhr.send(data);\r\n        })\r\n    }\r\n}\r\n```\r\n\r\n导出`axios`实例\r\n\r\n```js\r\n// 最终导出axios的方法，即实例的request方法\r\nfunction CreateAxiosFn() {\r\n    let axios = new Axios();\r\n    let req = axios.request.bind(axios);\r\n    return req;\r\n}\r\n\r\n// 得到最后的全局变量axios\r\nlet axios = CreateAxiosFn();\r\n```\r\n\r\n上述就已经能够实现`axios({ })`这种方式的请求\r\n\r\n下面是来实现下`axios.method()`这种形式的请求\r\n\r\n```js\r\n// 定义get,post...方法，挂在到Axios原型上\r\nconst methodsArr = ['get', 'delete', 'head', 'options', 'put', 'patch', 'post'];\r\nmethodsArr.forEach(met => {\r\n    Axios.prototype[met] = function() {\r\n        console.log('执行'+met+'方法');\r\n        // 处理单个方法\r\n        if (['get', 'delete', 'head', 'options'].includes(met)) { // 2个参数(url[, config])\r\n            return this.request({\r\n                method: met,\r\n                url: arguments[0],\r\n                ...arguments[1] || {}\r\n            })\r\n        } else { // 3个参数(url[,data[,config]])\r\n            return this.request({\r\n                method: met,\r\n                url: arguments[0],\r\n                data: arguments[1] || {},\r\n                ...arguments[2] || {}\r\n            })\r\n        }\r\n\r\n    }\r\n})\r\n```\r\n\r\n将`Axios.prototype`上的方法搬运到`request`上\r\n\r\n首先实现个工具类，实现将`b`方法混入到`a`，并且修改`this`指向\r\n\r\n```js\r\nconst utils = {\r\n  extend(a,b, context) {\r\n    for(let key in b) {\r\n      if (b.hasOwnProperty(key)) {\r\n        if (typeof b[key] === 'function') {\r\n          a[key] = b[key].bind(context);\r\n        } else {\r\n          a[key] = b[key]\r\n        }\r\n      }\r\n      \r\n    }\r\n  }\r\n}\r\n```\r\n\r\n修改导出的方法\r\n\r\n```js\r\nfunction CreateAxiosFn() {\r\n  let axios = new Axios();\r\n  \r\n  let req = axios.request.bind(axios);\r\n  // 增加代码\r\n  utils.extend(req, Axios.prototype, axios)\r\n  \r\n  return req;\r\n}\r\n```\r\n\r\n\r\n\r\n构建拦截器的构造函数\r\n\r\n```js\r\nclass InterceptorsManage {\r\n  constructor() {\r\n    this.handlers = [];\r\n  }\r\n\r\n  use(fullfield, rejected) {\r\n    this.handlers.push({\r\n      fullfield,\r\n      rejected\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n实现`axios.interceptors.response.use`和`axios.interceptors.request.use`\r\n\r\n```js\r\nclass Axios {\r\n    constructor() {\r\n        // 新增代码\r\n        this.interceptors = {\r\n            request: new InterceptorsManage,\r\n            response: new InterceptorsManage\r\n        }\r\n    }\r\n\r\n    request(config) {\r\n \t\t...\r\n    }\r\n}\r\n```\r\n\r\n执行语句`axios.interceptors.response.use`和`axios.interceptors.request.use`的时候，实现获取`axios`实例上的`interceptors`对象，然后再获取`response`或`request`拦截器，再执行对应的拦截器的`use`方法\r\n\r\n把`Axios`上的方法和属性搬到`request`过去\r\n\r\n```js\r\nfunction CreateAxiosFn() {\r\n  let axios = new Axios();\r\n  \r\n  let req = axios.request.bind(axios);\r\n  // 混入方法， 处理axios的request方法，使之拥有get,post...方法\r\n  utils.extend(req, Axios.prototype, axios)\r\n  // 新增代码\r\n  utils.extend(req, axios)\r\n  return req;\r\n}\r\n```\r\n\r\n现在`request`也有了`interceptors`对象，在发送请求的时候，会先获取`request`拦截器的`handlers`的方法来执行\r\n\r\n首先将执行`ajax`的请求封装成一个方法\r\n\r\n```js\r\nrequest(config) {\r\n    this.sendAjax(config)\r\n}\r\nsendAjax(config){\r\n    return new Promise(resolve => {\r\n        const {url = '', method = 'get', data = {}} = config;\r\n        // 发送ajax请求\r\n        console.log(config);\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(method, url, true);\r\n        xhr.onload = function() {\r\n            console.log(xhr.responseText)\r\n            resolve(xhr.responseText);\r\n        };\r\n        xhr.send(data);\r\n    })\r\n}\r\n```\r\n\r\n获得`handlers`中的回调\r\n\r\n```js\r\nrequest(config) {\r\n    // 拦截器和请求组装队列\r\n    let chain = [this.sendAjax.bind(this), undefined] // 成对出现的，失败回调暂时不处理\r\n\r\n    // 请求拦截\r\n    this.interceptors.request.handlers.forEach(interceptor => {\r\n        chain.unshift(interceptor.fullfield, interceptor.rejected)\r\n    })\r\n\r\n    // 响应拦截\r\n    this.interceptors.response.handlers.forEach(interceptor => {\r\n        chain.push(interceptor.fullfield, interceptor.rejected)\r\n    })\r\n\r\n    // 执行队列，每次执行一对，并给promise赋最新的值\r\n    let promise = Promise.resolve(config);\r\n    while(chain.length > 0) {\r\n        promise = promise.then(chain.shift(), chain.shift())\r\n    }\r\n    return promise;\r\n}\r\n```\r\n\r\n`chains`大概是`['fulfilled1','reject1','fulfilled2','reject2','this.sendAjax','undefined','fulfilled2','reject2','fulfilled1','reject1']`这种形式\r\n\r\n这样就能够成功实现一个简易版`axios`\r\n\r\n\r\n\r\n## 三、源码分析\r\n\r\n首先看看目录结构\r\n\r\n ![](https://static.vue-js.com/9d90eaa0-48b6-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n\r\n\r\n`axios`发送请求有很多实现的方法，实现入口文件为`axios.js `\r\n\r\n```js\r\nfunction createInstance(defaultConfig) {\r\n  var context = new Axios(defaultConfig);\r\n\r\n  // instance指向了request方法，且上下文指向context，所以可以直接以 instance(option) 方式调用 \r\n  // Axios.prototype.request 内对第一个参数的数据类型判断，使我们能够以 instance(url, option) 方式调用\r\n  var instance = bind(Axios.prototype.request, context);\r\n\r\n  // 把Axios.prototype上的方法扩展到instance对象上，\r\n  // 并指定上下文为context，这样执行Axios原型链上的方法时，this会指向context\r\n  utils.extend(instance, Axios.prototype, context);\r\n\r\n  // Copy context to instance\r\n  // 把context对象上的自身属性和方法扩展到instance上\r\n  // 注：因为extend内部使用的forEach方法对对象做for in 遍历时，只遍历对象本身的属性，而不会遍历原型链上的属性\r\n  // 这样，instance 就有了  defaults、interceptors 属性。\r\n  utils.extend(instance, context);\r\n  return instance;\r\n}\r\n\r\n// Create the default instance to be exported 创建一个由默认配置生成的axios实例\r\nvar axios = createInstance(defaults);\r\n\r\n// Factory for creating new instances 扩展axios.create工厂函数，内部也是 createInstance\r\naxios.create = function create(instanceConfig) {\r\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\r\n};\r\n\r\n// Expose all/spread\r\naxios.all = function all(promises) {\r\n  return Promise.all(promises);\r\n};\r\n\r\naxios.spread = function spread(callback) {\r\n  return function wrap(arr) {\r\n    return callback.apply(null, arr);\r\n  };\r\n};\r\nmodule.exports = axios;\r\n```\r\n\r\n主要核心是 `Axios.prototype.request`，各种请求方式的调用实现都是在 `request` 内部实现的， 简单看下 `request` 的逻辑\r\n\r\n```js\r\nAxios.prototype.request = function request(config) {\r\n  // Allow for axios('example/url'[, config]) a la fetch API\r\n  // 判断 config 参数是否是 字符串，如果是则认为第一个参数是 URL，第二个参数是真正的config\r\n  if (typeof config === 'string') {\r\n    config = arguments[1] || {};\r\n    // 把 url 放置到 config 对象中，便于之后的 mergeConfig\r\n    config.url = arguments[0];\r\n  } else {\r\n    // 如果 config 参数是否是 字符串，则整体都当做config\r\n    config = config || {};\r\n  }\r\n  // 合并默认配置和传入的配置\r\n  config = mergeConfig(this.defaults, config);\r\n  // 设置请求方法\r\n  config.method = config.method ? config.method.toLowerCase() : 'get';\r\n  /*\r\n    something... 此部分会在后续拦截器单独讲述\r\n  */\r\n};\r\n\r\n// 在 Axios 原型上挂载 'delete', 'get', 'head', 'options' 且不传参的请求方法，实现内部也是 request\r\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\r\n  Axios.prototype[method] = function(url, config) {\r\n    return this.request(utils.merge(config || {}, {\r\n      method: method,\r\n      url: url\r\n    }));\r\n  };\r\n});\r\n\r\n// 在 Axios 原型上挂载 'post', 'put', 'patch' 且传参的请求方法，实现内部同样也是 request\r\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\r\n  Axios.prototype[method] = function(url, data, config) {\r\n    return this.request(utils.merge(config || {}, {\r\n      method: method,\r\n      url: url,\r\n      data: data\r\n    }));\r\n  };\r\n});\r\n```\r\n\r\n`request`入口参数为`config`，可以说`config`贯彻了`axios`的一生\r\n\r\n`axios` 中的 `config `主要分布在这几个地方：\r\n\r\n- 默认配置 `defaults.js`\r\n- `config.method`默认为 `get`\r\n- 调用 `createInstance` 方法创建 `axios `实例，传入的`config`\r\n- 直接或间接调用 `request` 方法，传入的 `config`\r\n\r\n```js\r\n// axios.js\r\n// 创建一个由默认配置生成的axios实例\r\nvar axios = createInstance(defaults);\r\n\r\n// 扩展axios.create工厂函数，内部也是 createInstance\r\naxios.create = function create(instanceConfig) {\r\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\r\n};\r\n\r\n// Axios.js\r\n// 合并默认配置和传入的配置\r\nconfig = mergeConfig(this.defaults, config);\r\n// 设置请求方法\r\nconfig.method = config.method ? config.method.toLowerCase() : 'get';\r\n\r\n```\r\n\r\n从源码中，可以看到优先级：默认配置对象`default` < `method:get` < `Axios`的实例属性`this.default` < `request`参数\r\n\r\n下面重点看看`request`方法\r\n\r\n```js\r\nAxios.prototype.request = function request(config) {\r\n  /*\r\n    先是 mergeConfig ... 等，不再阐述\r\n  */\r\n  // Hook up interceptors middleware 创建拦截器链. dispatchRequest 是重中之重，后续重点\r\n  var chain = [dispatchRequest, undefined];\r\n\r\n  // push各个拦截器方法 注意：interceptor.fulfilled 或 interceptor.rejected 是可能为undefined\r\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\r\n    // 请求拦截器逆序 注意此处的 forEach 是自定义的拦截器的forEach方法\r\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\r\n  });\r\n\r\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\r\n    // 响应拦截器顺序 注意此处的 forEach 是自定义的拦截器的forEach方法\r\n    chain.push(interceptor.fulfilled, interceptor.rejected);\r\n  });\r\n\r\n  // 初始化一个promise对象，状态为resolved，接收到的参数为已经处理合并过的config对象\r\n  var promise = Promise.resolve(config);\r\n\r\n  // 循环拦截器的链\r\n  while (chain.length) {\r\n    promise = promise.then(chain.shift(), chain.shift()); // 每一次向外弹出拦截器\r\n  }\r\n  // 返回 promise\r\n  return promise;\r\n};\r\n```\r\n\r\n拦截器`interceptors`是在构建`axios`实例化的属性\r\n\r\n```js\r\nfunction Axios(instanceConfig) {\r\n  this.defaults = instanceConfig;\r\n  this.interceptors = {\r\n    request: new InterceptorManager(), // 请求拦截\r\n    response: new InterceptorManager() // 响应拦截\r\n  };\r\n}\r\n```\r\n\r\n`InterceptorManager`构造函数\r\n\r\n```js\r\n// 拦截器的初始化 其实就是一组钩子函数\r\nfunction InterceptorManager() {\r\n  this.handlers = [];\r\n}\r\n\r\n// 调用拦截器实例的use时就是往钩子函数中push方法\r\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\r\n  this.handlers.push({\r\n    fulfilled: fulfilled,\r\n    rejected: rejected\r\n  });\r\n  return this.handlers.length - 1;\r\n};\r\n\r\n// 拦截器是可以取消的，根据use的时候返回的ID，把某一个拦截器方法置为null\r\n// 不能用 splice 或者 slice 的原因是 删除之后 id 就会变化，导致之后的顺序或者是操作不可控\r\nInterceptorManager.prototype.eject = function eject(id) {\r\n  if (this.handlers[id]) {\r\n    this.handlers[id] = null;\r\n  }\r\n};\r\n\r\n// 这就是在 Axios的request方法中 中循环拦截器的方法 forEach 循环执行钩子函数\r\nInterceptorManager.prototype.forEach = function forEach(fn) {\r\n  utils.forEach(this.handlers, function forEachHandler(h) {\r\n    if (h !== null) {\r\n      fn(h);\r\n    }\r\n  });\r\n}\r\n```\r\n\r\n请求拦截器方法是被 `unshift`到拦截器中，响应拦截器是被`push`到拦截器中的。最终它们会拼接上一个叫`dispatchRequest`的方法被后续的 `promise` 顺序执行\r\n\r\n```js\r\nvar utils = require('./../utils');\r\nvar transformData = require('./transformData');\r\nvar isCancel = require('../cancel/isCancel');\r\nvar defaults = require('../defaults');\r\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\r\nvar combineURLs = require('./../helpers/combineURLs');\r\n\r\n// 判断请求是否已被取消，如果已经被取消，抛出已取消\r\nfunction throwIfCancellationRequested(config) {\r\n  if (config.cancelToken) {\r\n    config.cancelToken.throwIfRequested();\r\n  }\r\n}\r\n\r\nmodule.exports = function dispatchRequest(config) {\r\n  throwIfCancellationRequested(config);\r\n\r\n  // 如果包含baseUrl, 并且不是config.url绝对路径，组合baseUrl以及config.url\r\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\r\n    // 组合baseURL与url形成完整的请求路径\r\n    config.url = combineURLs(config.baseURL, config.url);\r\n  }\r\n\r\n  config.headers = config.headers || {};\r\n\r\n  // 使用/lib/defaults.js中的transformRequest方法，对config.headers和config.data进行格式化\r\n  // 比如将headers中的Accept，Content-Type统一处理成大写\r\n  // 比如如果请求正文是一个Object会格式化为JSON字符串，并添加application/json;charset=utf-8的Content-Type\r\n  // 等一系列操作\r\n  config.data = transformData(\r\n    config.data,\r\n    config.headers,\r\n    config.transformRequest\r\n  );\r\n\r\n  // 合并不同配置的headers，config.headers的配置优先级更高\r\n  config.headers = utils.merge(\r\n    config.headers.common || {},\r\n    config.headers[config.method] || {},\r\n    config.headers || {}\r\n  );\r\n\r\n  // 删除headers中的method属性\r\n  utils.forEach(\r\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\r\n    function cleanHeaderConfig(method) {\r\n      delete config.headers[method];\r\n    }\r\n  );\r\n\r\n  // 如果config配置了adapter，使用config中配置adapter的替代默认的请求方法\r\n  var adapter = config.adapter || defaults.adapter;\r\n\r\n  // 使用adapter方法发起请求（adapter根据浏览器环境或者Node环境会有不同）\r\n  return adapter(config).then(\r\n    // 请求正确返回的回调\r\n    function onAdapterResolution(response) {\r\n      // 判断是否以及取消了请求，如果取消了请求抛出以取消\r\n      throwIfCancellationRequested(config);\r\n\r\n      // 使用/lib/defaults.js中的transformResponse方法，对服务器返回的数据进行格式化\r\n      // 例如，使用JSON.parse对响应正文进行解析\r\n      response.data = transformData(\r\n        response.data,\r\n        response.headers,\r\n        config.transformResponse\r\n      );\r\n\r\n      return response;\r\n    },\r\n    // 请求失败的回调\r\n    function onAdapterRejection(reason) {\r\n      if (!isCancel(reason)) {\r\n        throwIfCancellationRequested(config);\r\n\r\n        if (reason && reason.response) {\r\n          reason.response.data = transformData(\r\n            reason.response.data,\r\n            reason.response.headers,\r\n            config.transformResponse\r\n          );\r\n        }\r\n      }\r\n      return Promise.reject(reason);\r\n    }\r\n  );\r\n};\r\n```\r\n\r\n再来看看`axios`是如何实现取消请求的，实现文件在`CancelToken.js`\r\n\r\n```js\r\nfunction CancelToken(executor) {\r\n  if (typeof executor !== 'function') {\r\n    throw new TypeError('executor must be a function.');\r\n  }\r\n  // 在 CancelToken 上定义一个 pending 状态的 promise ，将 resolve 回调赋值给外部变量 resolvePromise\r\n  var resolvePromise;\r\n  this.promise = new Promise(function promiseExecutor(resolve) {\r\n    resolvePromise = resolve;\r\n  });\r\n\r\n  var token = this;\r\n  // 立即执行 传入的 executor函数，将真实的 cancel 方法通过参数传递出去。\r\n  // 一旦调用就执行 resolvePromise 即前面的 promise 的 resolve，就更改promise的状态为 resolve。\r\n  // 那么xhr中定义的 CancelToken.promise.then方法就会执行, 从而xhr内部会取消请求\r\n  executor(function cancel(message) {\r\n    // 判断请求是否已经取消过，避免多次执行\r\n    if (token.reason) {\r\n      return;\r\n    }\r\n    token.reason = new Cancel(message);\r\n    resolvePromise(token.reason);\r\n  });\r\n}\r\n\r\nCancelToken.source = function source() {\r\n  // source 方法就是返回了一个 CancelToken 实例，与直接使用 new CancelToken 是一样的操作\r\n  var cancel;\r\n  var token = new CancelToken(function executor(c) {\r\n    cancel = c;\r\n  });\r\n  // 返回创建的 CancelToken 实例以及取消方法\r\n  return {\r\n    token: token,\r\n    cancel: cancel\r\n  };\r\n};\r\n```\r\n\r\n实际上取消请求的操作是在 `xhr.js` 中也有响应的配合的\r\n\r\n```js\r\nif (config.cancelToken) {\r\n    config.cancelToken.promise.then(function onCanceled(cancel) {\r\n        if (!request) {\r\n            return;\r\n        }\r\n        // 取消请求\r\n        request.abort();\r\n        reject(cancel);\r\n    });\r\n}\r\n```\r\n\r\n巧妙的地方在 `CancelToken`中 `executor` 函数，通过`resolve`函数的传递与执行，控制`promise`的状态\r\n\r\n\r\n\r\n### 小结\r\n\r\n ![](https://static.vue-js.com/b1d2ebd0-48b6-11eb-ab90-d9ae814b240d.png)\r\n\r\n\r\n\r\n\r\n\r\n## 参考文献\r\n\r\n- https://juejin.cn/post/6856706569263677447#heading-4\r\n- https://juejin.cn/post/6844903907500490766\r\n- https://github.com/axios/axios","level":3,"tagId":16}
{"_id":{"$oid":"61aa385abdfab500012c8476"},"exerciseKey":"62bf96e4-7471-44d1-9c30-d22ccb98e1d3","category":"QA","renderType":"md","title":"什么是BigInt?","desc":null,"options":null,"explanation":"BigInt是一种新的数据类型，用于当整数值大于Number数据类型支持的范围时。这种数据类型允许我们安全地对 大整数 执行算术操作，表示高分辨率的时间戳，使用大整数id，等等，而不需要使用库。\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa385ec2d0220001c964b3"},"exerciseKey":"70b0b59f-d4d7-41c2-be2b-94ffcbedb717","category":"QA","renderType":"md","title":"TypeScript 中的模块是什么？","desc":null,"options":null,"explanation":"TypeScript 中的模块是相关变量、函数、类和接口的集合。\n你可以将模块视为包含执行任务所需的一切的容器。可以导入模块以轻松地在项目之间共享代码。\n```\nmodule module_name{\n  class xyz{\n    export sum(x, y){\n      return x+y;\n    }\n  }\n}\n```","level":1,"tagId":19}
{"_id":{"$oid":"61aa385f85c5f70001542f92"},"exerciseKey":"73413861-0e94-4d71-bff3-65e8515ddc17","category":"QA","renderType":"md","title":"说说你对SPA的理解","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/cf6aa320-3ac6-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n## 一、什么是SPA\r\n\r\nSPA（single-page application），翻译过来就是单页应用`SPA`是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（`HTML`、`JavaScript`和`CSS`）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面页面在任何时间点都不会重新加载，也不会将控制转移到其他页面举个例子来讲就是一个杯子，早上装的牛奶，中午装的是开水，晚上装的是茶，我们发现，变的始终是杯子里的内容，而杯子始终是那个杯子结构如下图\r\n\r\n ![](https://static.vue-js.com/df14a5a0-3ac6-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n我们熟知的JS框架如`react`,`vue`,`angular`,`ember`都属于`SPA`\r\n\r\n## 二、SPA和MPA的区别\r\n\r\n上面大家已经对单页面有所了解了，下面来讲讲多页应用MPA（MultiPage-page application），翻译过来就是多页应用在`MPA`中，每个页面都是一个主页面，都是独立的当我们在访问另一个页面的时候，都需要重新加载`html`、`css`、`js`文件，公共文件则根据需求按需加载如下图\r\n\r\n ![](https://static.vue-js.com/eeb13aa0-3ac6-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n#### 单页应用与多页应用的区别\r\n\r\n|   \r\n | 单页面应用（SPA） | 多页面应用（MPA） |\r\n| :-- | :-- | :-- |\r\n| 组成 | 一个主页面和多个页面片段 | 多个主页面 |\r\n| 刷新方式 | 局部刷新 | 整页刷新 |\r\n| url模式 | 哈希模式 | 历史模式 |\r\n| SEO搜索引擎优化 | 难实现，可使用SSR方式改善 | 容易实现 |\r\n| 数据传递 | 容易 | 通过url、cookie、localStorage等传递 |\r\n| 页面切换 | 速度快，用户体验良好 | 切换加载资源，速度慢，用户体验差 |\r\n| 维护成本 | 相对容易 | 相对复杂 |\r\n\r\n#### 单页应用优缺点\r\n\r\n优点：\r\n\r\n- 具有桌面应用的即时性、网站的可移植性和可访问性\r\n- 用户体验好、快，内容的改变不需要重新加载整个页面\r\n- 良好的前后端分离，分工更明确\r\n\r\n缺点：\r\n\r\n- 不利于搜索引擎的抓取\r\n- 首次渲染速度相对较慢\r\n- \r\n\r\n## 三、实现一个SPA\r\n\r\n#### 原理\r\n\r\n1.  监听地址栏中`hash`变化驱动界面变化\r\n2.  用`pushsate`记录浏览器的历史，驱动界面发送变化\r\n\r\n ![](https://static.vue-js.com/fc95bf60-3ac6-11eb-ab90-d9ae814b240d.png)\r\n\r\n#### 实现\r\n\r\n##### `hash` 模式\r\n\r\n核心通过监听`url`中的`hash`来进行路由跳转\r\n\r\n```js\r\n// 定义 Router  \r\nclass Router {  \r\n    constructor () {  \r\n        this.routes = {}; // 存放路由path及callback  \r\n        this.currentUrl = '';  \r\n          \r\n        // 监听路由change调用相对应的路由回调  \r\n        window.addEventListener('load', this.refresh, false);  \r\n        window.addEventListener('hashchange', this.refresh, false);  \r\n    }  \r\n      \r\n    route(path, callback){  \r\n        this.routes[path] = callback;  \r\n    }  \r\n      \r\n    push(path) {  \r\n        this.routes[path] && this.routes[path]()  \r\n    }  \r\n}  \r\n  \r\n// 使用 router  \r\nwindow.miniRouter = new Router();  \r\nminiRouter.route('/', () => console.log('page1'))  \r\nminiRouter.route('/page2', () => console.log('page2'))  \r\n  \r\nminiRouter.push('/') // page1  \r\nminiRouter.push('/page2') // page2  \r\n```\r\n\r\n##### history模式\r\n\r\n`history` 模式核心借用 `HTML5 history api`，`api` 提供了丰富的 `router` 相关属性先了解一个几个相关的api\r\n\r\n -    `history.pushState` 浏览器历史纪录添加记录\r\n -    `history.replaceState`修改浏览器历史纪录中当前纪录\r\n -    `history.popState` 当 `history` 发生变化时触发\r\n\r\n```js\r\n// 定义 Router  \r\nclass Router {  \r\n    constructor () {  \r\n        this.routes = {};  \r\n        this.listerPopState()  \r\n    }  \r\n      \r\n    init(path) {  \r\n        history.replaceState({path: path}, null, path);  \r\n        this.routes[path] && this.routes[path]();  \r\n    }  \r\n      \r\n    route(path, callback){  \r\n        this.routes[path] = callback;  \r\n    }  \r\n      \r\n    push(path) {  \r\n        history.pushState({path: path}, null, path);  \r\n        this.routes[path] && this.routes[path]();  \r\n    }  \r\n      \r\n    listerPopState () {  \r\n        window.addEventListener('popstate' , e => {  \r\n            const path = e.state && e.state.path;  \r\n            this.routers[path] && this.routers[path]()  \r\n        })  \r\n    }  \r\n}  \r\n  \r\n// 使用 Router  \r\n  \r\nwindow.miniRouter = new Router();  \r\nminiRouter.route('/', ()=> console.log('page1'))  \r\nminiRouter.route('/page2', ()=> console.log('page2'))  \r\n  \r\n// 跳转  \r\nminiRouter.push('/page2')  // page2  \r\n```\r\n\r\n### 四、题外话：如何给SPA做SEO\r\n\r\n下面给出基于`Vue`的`SPA`如何实现`SEO`的三种方式\r\n\r\n1.  **SSR服务端渲染**\r\n\r\n将组件或页面通过服务器生成html，再返回给浏览器，如`nuxt.js`\r\n\r\n2.  **静态化**\r\n\r\n目前主流的静态化主要有两种：（1）一种是通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中（2）另外一种是通过WEB服务器的 `URL Rewrite`的方式，它的原理是通过web服务器内部模块按一定规则将外部的URL请求转化为内部的文件地址，一句话来说就是把外部请求的静态地址转化为实际的动态页面地址，而静态页面实际是不存在的。这两种方法都达到了实现URL静态化的效果\r\n\r\n3.  **使用`Phantomjs`针对爬虫处理**\r\n\r\n原理是通过`Nginx`配置，判断访问来源是否为爬虫，如果是则搜索引擎的爬虫请求会转发到一个`node server`，再通过`PhantomJS`来解析完整的`HTML`，返回给爬虫。下面是大致流程图\r\n\r\n ![](https://static.vue-js.com/25be6630-3ac7-11eb-ab90-d9ae814b240d.png)\r\n\r\n### 参考文献\r\n\r\n- https://segmentfault.com/a/1190000019623624\r\n- https://juejin.cn/post/6844903512107663368\r\n- https://www.cnblogs.com/constantince/p/5586851.html\r\n\r\n ![](https://static.vue-js.com/821b87b0-3ac6-11eb-ab90-d9ae814b240d.png)","level":2.5,"tagId":10}
{"_id":{"$oid":"61aa386191a75000018d2d00"},"exerciseKey":"76a7ac01-6de6-4391-976d-b703da5b78ec","category":"QA","renderType":"md","title":"label标签有什么用？","desc":null,"options":null,"explanation":"label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。\n\n```html\n<label for=\"Name\">Number:</label>\n<input type='text' name=\"Name\" id=\"Name\"/>\n\n<label>Date:<input type=\"text\" name=\"B\"/></label>\n```\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa386134458700017f1cbe"},"exerciseKey":"78102227-0f8f-4f64-b2b2-17c35b6873e6","category":"Choice","renderType":"md","title":"cool_secret 可访问多长时间？","desc":"```javascript\nsessionStorage.setItem('cool_secret', 123)\n```","options":"{\"options\":[\"永远，数据不会丢失。\",\"当用户关掉标签页时。\",\"当用户关掉整个浏览器，而不只是关掉标签页。\",\"当用户关闭电脑时。\"],\"isMulti\":false,\"answer\":[1]}","explanation":"关闭 **tab 标签页** 后，`sessionStorage` 存储的数据才会删除。\n如果使用 `localStorage`，那么数据将永远在那里，除非调用了 `localStorage.clear()`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa386434458700017f1cd2"},"exerciseKey":"8200a6ae-94f7-4056-bdb8-6bd84b383500","category":"QA","renderType":"md","title":"isNaN 和 Number.isNaN 函数有什么区别？","desc":null,"options":null,"explanation":"## NaN\n\n全局属性 NaN 的值表示不是一个数字（Not-A-Number）。\n\n在 JavaScript 中，NaN 最特殊的地方就是，我们不能使用相等运算符（== (en-US) 和 === (en-US)）来判断一个值是否是 NaN，因为 NaN == NaN 和 NaN === NaN 都会返回 false。因此，必须要有一个判断值是否是 NaN 的方法。\n\n## 方法简介\n\n* 函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。\n* 函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。\n\n## 总结\n\n和全局函数 isNaN() 相比，Number.isNaN() 不会自行将参数转换成数字，只有在参数是值为 NaN 的数字时，才会返回 true。\n\nNumber.isNaN() 方法确定传递的值是否为NaN，并且检查其类型是否为Number。它是原来的全局isNaN() 的更稳妥的版本。","level":2,"tagId":10}
{"_id":{"$oid":"61aa383fd00c060001bf115c"},"exerciseKey":"0567a810-b795-4c41-84e2-cba8ae4b97ac","category":"QA","renderType":"md","title":"如何实现上拉加载，下拉刷新？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/89cd1850-8adc-11eb-ab90-d9ae814b240d.png)\n\n## 一、前言\n\n下拉刷新和上拉加载这两种交互方式通常出现在移动端中\n\n本质上等同于PC网页中的分页，只是交互形式不同\n\n开源社区也有很多优秀的解决方案，如`iscroll`、`better-scroll`、`pulltorefresh.js`库等等\n\n这些第三方库使用起来非常便捷\n\n我们通过原生的方式实现一次上拉加载，下拉刷新，有助于对第三方库有更好的理解与使用\n\n## 二、实现原理\n\n上拉加载及下拉刷新都依赖于用户交互\n\n最重要的是要理解在什么场景，什么时机下触发交互动作\n\n### 上拉加载\n\n首先可以看一张图\n\n ![](https://static.vue-js.com/df498a00-8ae3-11eb-ab90-d9ae814b240d.png)\n\n上拉加载的本质是页面触底，或者快要触底时的动作\n\n判断页面触底我们需要先了解一下下面几个属性\n\n- `scrollTop`：滚动视窗的高度距离`window`顶部的距离，它会随着往上滚动而不断增加，初始值是0，它是一个变化的值\n\n- `clientHeight`:它是一个定值，表示屏幕可视区域的高度；\n- `scrollHeight`：页面不能滚动时是不存在的，`body`长度超过`window`时才会出现，所表示`body`所有元素的长度\n\n综上我们得出一个触底公式：\n\n```js\nscrollTop + clientHeight >= scrollHeight\n```\n\n简单实现\n\n```js\nlet clientHeight  = document.documentElement.clientHeight; //浏览器高度\nlet scrollHeight = document.body.scrollHeight;\nlet scrollTop = document.documentElement.scrollTop;\n \nlet distance = 50;  //距离视窗还用50的时候，开始触发；\n\nif ((scrollTop + clientHeight) >= (scrollHeight - distance)) {\n    console.log(\"开始加载数据\");\n}\n```\n\n\n### 下拉刷新\n\n下拉刷新的本质是页面本身置于顶部时，用户下拉时需要触发的动作\n\n关于下拉刷新的原生实现，主要分成三步：\n\n- 监听原生`touchstart`事件，记录其初始位置的值，`e.touches[0].pageY`；\n- 监听原生`touchmove`事件，记录并计算当前滑动的位置值与初始位置值的差值，大于`0`表示向下拉动，并借助CSS3的`translateY`属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值；\n- 监听原生`touchend`事件，若此时元素滑动达到最大值，则触发`callback`，同时将`translateY`重设为`0`，元素回到初始位置\n\n举个例子：\n\n`Html`结构如下：\n\n```js\n<main>\n    <p class=\"refreshText\"></p >\n    <ul id=\"refreshContainer\">\n        <li>111</li>\n        <li>222</li>\n        <li>333</li>\n        <li>444</li>\n        <li>555</li>\n        ...\n    </ul>\n</main>\n```\n\n监听`touchstart`事件，记录初始的值\n\n```js\nvar _element = document.getElementById('refreshContainer'),\n    _refreshText = document.querySelector('.refreshText'),\n    _startPos = 0,  // 初始的值\n    _transitionHeight = 0; // 移动的距离\n\n_element.addEventListener('touchstart', function(e) {\n    _startPos = e.touches[0].pageY; // 记录初始位置\n    _element.style.position = 'relative';\n    _element.style.transition = 'transform 0s';\n}, false);\n```\n\n监听`touchmove`移动事件，记录滑动差值\n\n```js\n_element.addEventListener('touchmove', function(e) {\n    // e.touches[0].pageY 当前位置\n    _transitionHeight = e.touches[0].pageY - _startPos; // 记录差值\n\n    if (_transitionHeight > 0 && _transitionHeight < 60) { \n        _refreshText.innerText = '下拉刷新'; \n        _element.style.transform = 'translateY('+_transitionHeight+'px)';\n\n        if (_transitionHeight > 55) {\n            _refreshText.innerText = '释放更新';\n        }\n    }                \n}, false);\n```\n\n最后，就是监听`touchend`离开的事件\n\n```js\n_element.addEventListener('touchend', function(e) {\n    _element.style.transition = 'transform 0.5s ease 1s';\n    _element.style.transform = 'translateY(0px)';\n    _refreshText.innerText = '更新中...';\n    // todo...\n\n}, false);\n```\n\n从上面可以看到，在下拉到松手的过程中，经历了三个阶段：\n\n- 当前手势滑动位置与初始位置差值大于零时，提示正在进行下拉刷新操作\n- 下拉到一定值时，显示松手释放后的操作提示\n- 下拉到达设定最大值松手时，执行回调，提示正在进行更新操作\n\n\n\n## 三、案例\n\n在实际开发中，我们更多的是使用第三方库，下面以`better-scroll`进行举例：\n\nHTML结构\n\n```js\n<div id=\"position-wrapper\">\n    <div>\n        <p class=\"refresh\">下拉刷新</p >\n        <div class=\"position-list\">\n   <!--列表内容-->\n        </div>\n        <p class=\"more\">查看更多</p >\n    </div>\n</div>\n```\n\n实例化上拉下拉插件，通过`use`来注册插件\n\n```js\nimport BScroll from \"@better-scroll/core\";\nimport PullDown from \"@better-scroll/pull-down\";\nimport PullUp from '@better-scroll/pull-up';\nBScroll.use(PullDown);\nBScroll.use(PullUp);\n```\n\n实例化`BetterScroll`，并传入相关的参数\n\n```js\nlet pageNo = 1,pageSize = 10,dataList = [],isMore = true;  \nvar scroll= new BScroll(\"#position-wrapper\",{\n    scrollY:true,//垂直方向滚动\n    click:true,//默认会阻止浏览器的原生click事件，如果需要点击，这里要设为true\n    pullUpLoad:true,//上拉加载更多\n    pullDownRefresh:{\n        threshold:50,//触发pullingDown事件的位置\n        stop:0//下拉回弹后停留的位置\n    }\n});\n//监听下拉刷新\nscroll.on(\"pullingDown\",pullingDownHandler);\n//监测实时滚动\nscroll.on(\"scroll\",scrollHandler);\n//上拉加载更多\nscroll.on(\"pullingUp\",pullingUpHandler);\n\nasync function pullingDownHandler(){\n    dataList=[];\n    pageNo=1;\n    isMore=true;\n    $(\".more\").text(\"查看更多\");\n    await getlist();//请求数据\n    scroll.finishPullDown();//每次下拉结束后，需要执行这个操作\n    scroll.refresh();//当滚动区域的dom结构有变化时，需要执行这个操作\n}\nasync function pullingUpHandler(){\n    if(!isMore){\n        $(\".more\").text(\"没有更多数据了\");\n        scroll.finishPullUp();//每次上拉结束后，需要执行这个操作\n        return;\n    }\n    pageNo++;\n    await this.getlist();//请求数据\n    scroll.finishPullUp();//每次上拉结束后，需要执行这个操作\n    scroll.refresh();//当滚动区域的dom结构有变化时，需要执行这个操作    \n}\nfunction scrollHandler(){\n    if(this.y>50) $('.refresh').text(\"松手开始加载\");\n    else $('.refresh').text(\"下拉刷新\");\n}\nfunction getlist(){\n    //返回的数据\n    let result=....;\n    dataList=dataList.concat(result);\n    //判断是否已加载完\n    if(result.length<pageSize) isMore=false;\n    //将dataList渲染到html内容中\n}    \n```\n\n注意点：\n\n使用`better-scroll `实现下拉刷新、上拉加载时要注意以下几点：\n\n- `wrapper`里必须只有一个子元素\n- 子元素的高度要比`wrapper`要高\n- 使用的时候，要确定`DOM`元素是否已经生成，必须要等到`DOM`渲染完成后，再`new BScroll()`\n- 滚动区域的`DOM`元素结构有变化后，需要执行刷新 `refresh() `\n- 上拉或者下拉，结束后，需要执行`finishPullUp()`或者`finishPullDown()`，否则将不会执行下次操作\n- `better-scroll`，默认会阻止浏览器的原生`click`事件，如果滚动内容区要添加点击事件，需要在实例化属性里设置`click:true`\n\n### 小结\n\n下拉刷新、上拉加载原理本身都很简单，真正复杂的是封装过程中，要考虑的兼容性、易用性、性能等诸多细节\n","level":2,"tagId":26}
{"_id":{"$oid":"61aa3840cd02c30001dd2160"},"exerciseKey":"07cbacb7-1ff5-4840-8b10-0e59167ff407","category":"QA","renderType":"md","title":"最大的钻石","desc":"1 楼到 n 楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从 1 楼到 n 楼，每层楼电梯门都会打开一次，只能拿一次钻石，问怎样才能拿到「最大」的一颗？","options":null,"explanation":"题中包含一个隐藏条件：随机放置。所有的分析都是基于随机放置给出的。换句话说，如果放置钻石是人为干预大小，那么本题的所以分析则全部不成立。\n\n其实这个问题的原型叫做秘书问题，该类问题全部属于最佳停止问题。\n\n这类问题都有着统一的解法：\n\n![1.png](https://i.loli.net/2021/07/04/iW69XLDMfBoKyTN.png)\n\n所以到我们的题目里，我们也是可以直接给出答案：我们要选择先放弃前 37%（就是1/e）的钻石，此后选择比前 37% 都大的第一颗钻石。\n\n","level":3.5,"tagId":17}
{"_id":{"$oid":"61aa384334458700017f1bd6"},"exerciseKey":"1464793e-3ece-4943-92af-cb470fee46f3","category":"QA","renderType":"md","title":"微信小程序的优劣势？","desc":null,"options":null,"explanation":"优势：\n```\n1、无需下载，通过搜索和扫一扫就可以打开。\n\n2、良好的用户体验：打开速度快。\n\n3、开发成本要比App要低。\n\n4、安卓上可以添加到桌面，与原生App差不多。\n\n5、为用户提供良好的安全保障。小程序的发布，微信拥有一套严格的审查流程，不能通过审查的小程序是无法发布到线上的。\n\n```\n劣势:\n```\n1、限制较多。页面大小不能超过1M。不能打开超过5个层级的页面。\n\n2、样式单一。小程序的部分组件已经是成型的了，样式不可以修改。例如：幻灯片、导航。\n\n3、推广面窄，不能分享朋友圈，只能通过分享给朋友，附近小程序推广。其中附近小程序也受到微信的限制。\n\n4、依托于微信，无法开发后台管理功能。\n```\n","level":1,"tagId":23}
{"_id":{"$oid":"61aa384485c5f70001542eca"},"exerciseKey":"149adb7b-11b7-4cc2-be36-f36b38d36f81","category":"QA","renderType":"md","title":"TypeScript 的内置数据类型有哪些？","desc":null,"options":null,"explanation":"数字类型：用于表示数字类型的值。TypeScript 中的所有数字都存储为浮点值。\n```\nlet identifier: number = value;\n```\n布尔类型：一个逻辑二进制开关，包含true或false\n```\nlet identifier: string = \" \";\n```\nNull 类型： Null 表示值未定义的变量。\n```\nlet identifier: bool = Boolean value;\n```\n未定义类型：一个未定义的字面量，它是所有变量的起点。\n```\nlet num: number = null;\n```\nvoid 类型：分配给没有返回值的方法的类型。\n```\nlet unusable: void = undefined;\n```","level":1,"tagId":19}
{"_id":{"$oid":"61aa38443976eb00014e445f"},"exerciseKey":"14ad497b-56ee-461b-8c82-110f4d1c04b0","category":"QA","renderType":"md","title":"WebSocket 中的心跳是为了解决什么问题？","desc":null,"options":null,"explanation":"* 为了定时发送消息，使连接不超时自动断线，避免后端设了超时时间自动断线。所以需要定时发送消息给后端，让后端服务器知道连接还在通消息不能断。\n\n* 为了检测在正常连接的状态下，后端是否正常。如果我们发了一个定时检测给后端，后端按照约定要下发一个检测消息给前端，这样才是正常的。如果后端没有正常下发，就要根据设定的超时进行重连。\n\n\n\n","level":3,"tagId":16}
{"_id":{"$oid":"61aa3846cd02c30001dd218f"},"exerciseKey":"1ddb78cb-2581-4995-8c0e-a6ea22b564ca","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst add = x => x + x;\n\nfunction myFunc(num = 2, value = add(num)) {\n\tconsole.log(num, value);\n}\n\nmyFunc();\nmyFunc(3);\n```","options":"{\"options\":[\"2 4 and 3 6\",\"2 NaN and 3 NaN\",\"2 Error and 3 6\",\"2 4 and 3 Error\"],\"isMulti\":false,\"answer\":[0]}","explanation":"首先我们不传递任何参数调用 `myFunc()`。因为我们没有传递参数，`num` 和 `value` 获取它们各自的默认值：num 为 `2`, 而 `value` 为函数 `add` 的返回值。对于函数 `add`，我们传递值为2的 `num` 作为参数。函数 `add` 返回 `4` 作为 `value` 的值。\n然后，我们调用 `myFunc(3)` 并传递值 `3` 参数 `num` 的值。我们没有给 `value` 传递值。因为我们没有给参数 `value` 传递值，它获取默认值：函数 `add` 的返回值。对于函数 `add`，我们传递值为3的 `num`给它。函数 `add` 返回 `6` 作为 `value` 的值。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38470f30890001ab804e"},"exerciseKey":"1e8328ad-0ecd-428e-862c-a75c50e1a205","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nclass Calc {\n\tconstructor() {\n\t\tthis.count = 0 \n\t}\n\n\tincrease() {\n\t\tthis.count ++\n\t}\n}\n\nconst calc = new Calc()\nnew Calc().increase()\n\nconsole.log(calc.count)\n```","options":"{\"options\":[\"0\",\"1\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[0]}","explanation":"我们设置 `calc` 变量为 `Calc` 类的一个新实例。 然后，我们初始化一个 `Calc` 的新实例，而且调用了这个实例的 `increase` 方法。因为count属性是在 `Calc` class的constructor内部的，所以count属性不会在 `Calc` 的原型链上共享出去。这就意味着calc实例的count值不会被更新，count仍然是 `0`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384754ebf60001a1a352"},"exerciseKey":"21144fa1-41b7-4077-97cd-b0c6030b10e0","category":"QA","renderType":"md","title":"Javascript如何实现继承？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/5d9c4450-72a3-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n继承（inheritance）是面向对象软件技术当中的一个概念。\n\n如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”\n\n- 继承的优点 \n\n继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码\n\n在子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能\n\n虽然`JavaScript`并不是真正的面向对象语言，但它天生的灵活性，使应用场景更加丰富\n\n关于继承，我们举个形象的例子：\n\n定义一个类（Class）叫汽车，汽车的属性包括颜色、轮胎、品牌、速度、排气量等\n\n```js\nclass Car{\n    constructor(color,speed){\n        this.color = color\n        this.speed = speed\n        // ...\n    }\n}\n```\n\n由汽车这个类可以派生出“轿车”和“货车”两个类，在汽车的基础属性上，为轿车添加一个后备厢、给货车添加一个大货箱\n\n```js\n// 货车\nclass Truck extends Car{\n    constructor(color,speed){\n        super(color,speed)\n        this.Container = true // 货箱\n    }\n}\n```\n\n这样轿车和货车就是不一样的，但是二者都属于汽车这个类，汽车、轿车继承了汽车的属性，而不需要再次在“轿车”中定义汽车已经有的属性\n\n在“轿车”继承“汽车”的同时，也可以重新定义汽车的某些属性，并重写或覆盖某些属性和方法，使其获得与“汽车”这个父类不同的属性和方法\n\n```js\nclass Truck extends Car{\n    constructor(color,speed){\n        super(color,speed)\n        this.color = \"black\" //覆盖\n        this.Container = true // 货箱\n    }\n}\n```\n\n从这个例子中就能详细说明汽车、轿车以及卡车之间的继承关系\n\n\n\n## 二、实现方式\n\n下面给出`JavaScripy`常见的继承方式：\n\n- 原型链继承\n\n- 构造函数继承（借助 call）\n- 组合继承\n- 原型式继承\n- 寄生式继承\n- 寄生组合式继承\n\n\n\n### 原型链继承\n\n原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针\n\n举个例子\n\n```js\n function Parent() {\n    this.name = 'parent1';\n    this.play = [1, 2, 3]\n  }\n  function Child() {\n    this.type = 'child2';\n  }\n  Child1.prototype = new Parent();\n  console.log(new Child())\n```\n\n上面代码看似没问题，实际存在潜在问题\n\n```js\nvar s1 = new Child2();\nvar s2 = new Child2();\ns1.play.push(4);\nconsole.log(s1.play, s2.play); // [1,2,3,4]\n```\n\n改变`s1`的`play`属性，会发现`s2`也跟着发生变化了，这是因为两个实例使用的是同一个原型对象，内存空间是共享的\n\n\n\n### 构造函数继承\n\n借助 `call `调用`Parent`函数\n\n```js\nfunction Parent(){\n    this.name = 'parent1';\n}\n\nParent.prototype.getName = function () {\n    return this.name;\n}\n\nfunction Child(){\n    Parent1.call(this);\n    this.type = 'child'\n}\n\nlet child = new Child();\nconsole.log(child);  // 没问题\nconsole.log(child.getName());  // 会报错\n```\n\n可以看到，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法\n\n相比第一种原型链继承方式，父类的引用属性不会被共享，优化了第一种继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法\n\n\n\n### 组合继承\n\n前面我们讲到两种继承方式，各有优缺点。组合继承则将前两种方式继承起来\n\n```js\nfunction Parent3 () {\n    this.name = 'parent3';\n    this.play = [1, 2, 3];\n}\n\nParent3.prototype.getName = function () {\n    return this.name;\n}\nfunction Child3() {\n    // 第二次调用 Parent3()\n    Parent3.call(this);\n    this.type = 'child3';\n}\n\n// 第一次调用 Parent3()\nChild3.prototype = new Parent3();\n// 手动挂上构造器，指向自己的构造函数\nChild3.prototype.constructor = Child3;\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);  // 不互相影响\nconsole.log(s3.getName()); // 正常输出'parent3'\nconsole.log(s4.getName()); // 正常输出'parent3'\n```\n\n这种方式看起来就没什么问题，方式一和方式二的问题都解决了，但是从上面代码我们也可以看到` Parent3` 执行了两次，造成了多构造一次的性能开销\n\n\n\n### 原型式继承\n\n这里主要借助`Object.create`方法实现普通对象的继承\n\n同样举个例子\n\n```js\nlet parent4 = {\n    name: \"parent4\",\n    friends: [\"p1\", \"p2\", \"p3\"],\n    getName: function() {\n      return this.name;\n    }\n  };\n\n  let person4 = Object.create(parent4);\n  person4.name = \"tom\";\n  person4.friends.push(\"jerry\");\n\n  let person5 = Object.create(parent4);\n  person5.friends.push(\"lucy\");\n\n  console.log(person4.name); // tom\n  console.log(person4.name === person4.getName()); // true\n  console.log(person5.name); // parent4\n  console.log(person4.friends); // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]\n  console.log(person5.friends); // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]\n```\n\n这种继承方式的缺点也很明显，因为`Object.create `方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能\n\n\n\n### 寄生式继承\n\n寄生式继承在上面继承基础上进行优化，利用这个浅拷贝的能力再进行增强，添加一些方法\n\n```js\nlet parent5 = {\n    name: \"parent5\",\n    friends: [\"p1\", \"p2\", \"p3\"],\n    getName: function() {\n        return this.name;\n    }\n};\n\nfunction clone(original) {\n    let clone = Object.create(original);\n    clone.getFriends = function() {\n        return this.friends;\n    };\n    return clone;\n}\n\nlet person5 = clone(parent5);\n\nconsole.log(person5.getName()); // parent5\nconsole.log(person5.getFriends()); // [\"p1\", \"p2\", \"p3\"]\n```\n\n其优缺点也很明显，跟上面讲的原型式继承一样\n\n\n\n### 寄生组合式继承\n\n寄生组合式继承，借助解决普通对象的继承问题的` Object.create` 方法，在亲全面几种继承方式的优缺点基础上进行改造，这也是所有继承方式里面相对最优的继承方式\n\n```js\nfunction clone (parent, child) {\n    // 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程\n    child.prototype = Object.create(parent.prototype);\n    child.prototype.constructor = child;\n}\n\nfunction Parent6() {\n    this.name = 'parent6';\n    this.play = [1, 2, 3];\n}\nParent6.prototype.getName = function () {\n    return this.name;\n}\nfunction Child6() {\n    Parent6.call(this);\n    this.friends = 'child5';\n}\n\nclone(Parent6, Child6);\n\nChild6.prototype.getFriends = function () {\n    return this.friends;\n}\n\nlet person6 = new Child6(); \nconsole.log(person6); //{friends:\"child5\",name:\"child5\",play:[1,2,3],__proto__:Parent6}\nconsole.log(person6.getName()); // parent6\nconsole.log(person6.getFriends()); // child5\n```\n\n可以看到 person6 打印出来的结果，属性都得到了继承，方法也没问题\n\n\n\n文章一开头，我们是使用`ES6` 中的`extends `关键字直接实现 `JavaScript `的继承\n\n```js\nclass Person {\n  constructor(name) {\n    this.name = name\n  }\n  // 原型方法\n  // 即 Person.prototype.getName = function() { }\n  // 下面可以简写为 getName() {...}\n  getName = function () {\n    console.log('Person:', this.name)\n  }\n}\nclass Gamer extends Person {\n  constructor(name, age) {\n    // 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。\n    super(name)\n    this.age = age\n  }\n}\nconst asuna = new Gamer('Asuna', 20)\nasuna.getName() // 成功访问到父类的方法\n```\n\n利用`babel`工具进行转换，我们会发现`extends`实际采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式\n\n\n\n## 三、总结\n\n下面以一张图作为总结：\n\n ![](https://static.vue-js.com/0df74700-731c-11eb-ab90-d9ae814b240d.png)\n\n通过`Object.create` 来划分不同的继承方式，最后的寄生式组合继承方式是通过组合继承改造之后的最优继承方式，而 `extends` 的语法糖和寄生组合继承的方式基本类似\n","level":2.5,"tagId":10}
{"_id":{"$oid":"61aa384bd00c060001bf11ad"},"exerciseKey":"2f15c826-8011-46de-9c27-864728b75432","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction getPersonInfo(one, two, three) {\n  console.log(one)\n  console.log(two)\n  console.log(three)\n}\n\nconst person = 'Lydia'\nconst age = 21\n\ngetPersonInfo`${person} is ${age} years old`\n```","options":"{\"options\":[\"\\\"Lydia\\\" 21 [\\\"\\\", \\\" is \\\", \\\" years old\\\"]\",\"[\\\"\\\", \\\" is \\\", \\\" years old\\\"] \\\"Lydia\\\" 21\",\"\\\"Lydia\\\" [\\\"\\\", \\\" is \\\", \\\" years old\\\"] 21\"],\"isMulti\":false,\"answer\":[1]}","explanation":"如果使用标记模板字面量，第一个参数的值总是包含字符串的数组。其余的参数获取的是传递的表达式的值！","level":1,"tagId":32}
{"_id":{"$oid":"61aa384e79641200019173d9"},"exerciseKey":"37ab3a5b-b59d-433c-8db9-b6a7444337c3","category":"QA","renderType":"md","title":"React Hooks带来了什么便利？","desc":null,"options":null,"explanation":"在没有 hooks 之前，我们使用函数定义的组件中，不能使用 React 的 state、各种生命周期钩子类组件的特性。在 React 16.8 之后，推出了新功能： Hooks，通过 hooks 我们可以再函数定义的组件中使用类组件的特性。\n\n好处:\n\n* 跨组件复用: 其实 render props / HOC 也是为了复用，相比于它们，Hooks 作为官方的底层 API，最为轻量，而且改造成本小，不会影响原来的组件层次结构和传说中的嵌套地狱；\n* 相比而言，类组件的实现更为复杂\n\t* 不同的生命周期会使逻辑变得分散且混乱，不易维护和管理；\n\t* 时刻需要关注this的指向问题；\n\t* 代码复用代价高，高阶组件的使用经常会使整个组件树变得臃肿；\n* 状态与 UI 隔离: 正是由于 Hooks 的特性，状态逻辑会变成更小的粒度，并且极容易被抽象成一个自定义 Hooks，组件中的状态和 UI 变得更为清晰和隔离。\n\n**注意**:\n\n* 避免在 循环/条件判断/嵌套函数 中调用 hooks，保证调用顺序的稳定；\n* 不能在useEffect中使用useState，React 会报错提示；\n* 类组件不会被替换或废弃，不需要强制改造类组件，两种方式能并存\n\n","level":3,"tagId":13}
{"_id":{"$oid":"61aa385139bf10000191c97f"},"exerciseKey":"417ebda0-3f2d-48d3-95ec-ae1838bf39cb","category":"QA","renderType":"md","title":"怎么理解回流跟重绘？什么场景下会触发？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/1ed5d340-9cdc-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n在`HTML`中，每个元素都可以理解成一个盒子，在浏览器解析过程中，会涉及到回流与重绘：\n\n- 回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置\n\n- 重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制\n\n具体的浏览器解析渲染机制如下所示：\n\n ![](https://static.vue-js.com/2b56a950-9cdc-11eb-ab90-d9ae814b240d.png)\n\n- 解析HTML，生成DOM树，解析CSS，生成CSSOM树\n\n- 将DOM树和CSSOM树结合，生成渲染树(Render Tree)\n- Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）\n- Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素\n- Display:将像素发送给GPU，展示在页面上\n\n\n\n在页面初始渲染阶段，回流不可避免的触发，可以理解成页面一开始是空白的元素，后面添加了新的元素使页面布局发生改变\n\n当我们对 `DOM` 的修改引发了 `DOM `几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来\n\n当我们对 `DOM `的修改导致了样式的变化（`color`或`background-color`），却并未影响其几何属性时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式，这里就仅仅触发了回流\n\n\n\n## 二、如何触发\n\n要想减少回流和重绘的次数，首先要了解回流和重绘是如何触发的\n\n### 回流触发时机\n\n回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流，如下面情况：\n\n- 添加或删除可见的DOM元素\n- 元素的位置发生变化\n- 元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）\n- 内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代\n- 页面一开始渲染的时候（这避免不了）\n- 浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）\n\n还有一些容易被忽略的操作：获取一些特定属性的值\n\n> offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight\n\n这些属性有一个共性，就是需要通过即时计算得到。因此浏览器为了获取这些值，也会进行回流\n\n除此还包括`getComputedStyle `方法，原理是一样的\n\n\n\n### 重绘触发时机\n\n触发回流一定会触发重绘\n\n可以把页面理解为一个黑板，黑板上有一朵画好的小花。现在我们要把这朵从左边移到了右边，那我们要先确定好右边的具体位置，画好形状（回流），再画上它原有的颜色（重绘）\n\n除此之外还有一些其他引起重绘行为：\n\n- 颜色的修改\n\n- 文本方向的修改\n- 阴影的修改\n\n\n\n### 浏览器优化机制\n\n由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列\n\n当你获取布局信息的操作的时候，会强制队列刷新，包括前面讲到的`offsetTop`等方法都会返回最新的数据\n\n因此浏览器不得不清空队列，触发回流重绘来返回正确的值\n\n\n\n## 三、如何减少\n\n我们了解了如何触发回流和重绘的场景，下面给出避免回流的经验：\n\n- 如果想设定元素的样式，通过改变元素的 `class` 类名 (尽可能在 DOM 树的最里层)\n- 避免设置多项内联样式\n- 应用元素的动画，使用 `position` 属性的 `fixed` 值或 `absolute` 值(如前文示例所提)\n- 避免使用 `table` 布局，`table` 中每个元素的大小以及内容的改动，都会导致整个 `table` 的重新计算\n- 对于那些复杂的动画，对其设置 `position: fixed/absolute`，尽可能地使元素脱离文档流，从而减少对其他元素的影响\n- 使用css3硬件加速，可以让`transform`、`opacity`、`filters`这些动画不会引起回流重绘\n- 避免使用 CSS 的 `JavaScript` 表达式 \n\n在使用 `JavaScript` 动态插入多个节点时, 可以使用`DocumentFragment`. 创建后一次插入. 就能避免多次的渲染性能\n\n但有时候，我们会无可避免地进行回流或者重绘，我们可以更好使用它们\n\n例如，多次修改一个把元素布局的时候，我们很可能会如下操作\n\n```js\nconst el = document.getElementById('el')\nfor(let i=0;i<10;i++) {\n    el.style.top  = el.offsetTop  + 10 + \"px\";\n    el.style.left = el.offsetLeft + 10 + \"px\";\n}\n```\n\n每次循环都需要获取多次`offset`属性，比较糟糕，可以使用变量的形式缓存起来，待计算完毕再提交给浏览器发出重计算请求\n\n```js\n// 缓存offsetLeft与offsetTop的值\nconst el = document.getElementById('el') \nlet offLeft = el.offsetLeft, offTop = el.offsetTop\n\n// 在JS层面进行计算\nfor(let i=0;i<10;i++) {\n  offLeft += 10\n  offTop  += 10\n}\n\n// 一次性将计算结果应用到DOM上\nel.style.left = offLeft + \"px\"\nel.style.top = offTop  + \"px\"\n```\n\n我们还可避免改变样式，使用类名去合并样式\n\n```js\nconst container = document.getElementById('container')\ncontainer.style.width = '100px'\ncontainer.style.height = '200px'\ncontainer.style.border = '10px solid red'\ncontainer.style.color = 'red'\n```\n\n使用类名去合并样式\n\n```html\n<style>\n    .basic_style {\n        width: 100px;\n        height: 200px;\n        border: 10px solid red;\n        color: red;\n    }\n</style>\n<script>\n    const container = document.getElementById('container')\n    container.classList.add('basic_style')\n</script>\n```\n\n前者每次单独操作，都去触发一次渲染树更改（新浏览器不会），\n\n都去触发一次渲染树更改，从而导致相应的回流与重绘过程\n\n合并之后，等于我们将所有的更改一次性发出\n\n我们还可以通过通过设置元素属性`display: none`，将其从页面上去掉，然后再进行后续操作，这些后续操作也不会触发回流与重绘，这个过程称为离线操作\n\n```js\nconst container = document.getElementById('container')\ncontainer.style.width = '100px'\ncontainer.style.height = '200px'\ncontainer.style.border = '10px solid red'\ncontainer.style.color = 'red'\n```\n\n离线操作后\n\n```js\nlet container = document.getElementById('container')\ncontainer.style.display = 'none'\ncontainer.style.width = '100px'\ncontainer.style.height = '200px'\ncontainer.style.border = '10px solid red'\ncontainer.style.color = 'red'\n...（省略了许多类似的后续操作）\ncontainer.style.display = 'block'\n```\n","level":3,"tagId":11}
{"_id":{"$oid":"61aa3853291c0100017ee1ac"},"exerciseKey":"4972c81e-86f9-4ef4-b59b-ae3d7680374c","category":"QA","renderType":"md","title":"请手写“计数排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。\n\n## 算法描述\n\n具体算法描述如下：\n\n* 找出待排序的数组中最大和最小的元素；\n* 统计数组中每个值为i的元素出现的次数，存入数组C的第i项；\n* 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；\n* 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。\n\n## 代码实现\n\n```javascript\nfunction countingSort(array) {\n    var len = array.length,\n        B = [],\n        C = [],\n        min = max = array[0];\n    console.time('计数排序耗时');\n    for (var i = 0; i < len; i++) {\n        min = min <= array[i] ? min : array[i];\n        max = max >= array[i] ? max : array[i];\n        C[array[i]] = C[array[i]] ? C[array[i]] + 1 : 1;\n    }\n    for (var j = min; j < max; j++) {\n        C[j + 1] = (C[j + 1] || 0) + (C[j] || 0);\n    }\n    for (var k = len - 1; k >= 0; k--) {\n        B[C[array[k]] - 1] = array[k];\n        C[array[k]]--;\n    }\n    console.timeEnd('计数排序耗时');\n    return B;\n}\nvar arr = [2, 2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2];\nconsole.log(countingSort(arr)); //[1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 6, 7, 7, 8, 8, 9, 9]\n\n```\n\n## 算法分析\n\n当输入的元素是n 个0到k之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。\n\n* 最佳情况：T(n) = O(n+k)\n* 最差情况：T(n) = O(n+k)\n* 平均情况：T(n) = O(n+k)","level":3,"tagId":26}
{"_id":{"$oid":"61aa3855cd02c30001dd2212"},"exerciseKey":"4d6b5cd5-7b0d-460a-9a20-010d885349a0","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst { name: myName } = { name: \"Lydia\" };\n\nconsole.log(name);\n```","options":"{\"options\":[\"\\\"Lydia\\\"\",\"\\\"myName\\\"\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[3]}","explanation":"当我们从右侧的对象解构属性`name`时，我们将其值`Lydia`分配给名为`myName`的变量。\n使用`{name：myName}`，我们是在告诉JavaScript我们要创建一个名为`myName`的新变量，并且其值是右侧对象的`name`属性的值。\n当我们尝试打印`name`，一个未定义的变量时，就会引发`ReferenceError`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38553d5f3a0001af558c"},"exerciseKey":"52e2ccda-70e2-438b-8328-ef25f78afb6a","category":"QA","renderType":"md","title":"什么是CSS Sprites？","desc":null,"options":null,"explanation":"将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 `background-image`，`background-repeat`，`background-position` 的组合进行背景定位。\n利用`CSS Sprites`能很好地减少网页的http请求，从而大大的提高页面的性能。","level":1,"tagId":20}
{"_id":{"$oid":"61aa38558e97d900018086ea"},"exerciseKey":"53060972-481f-4025-a055-aa278d737fc1","category":"QA","renderType":"md","title":"HTML 标签中的 src 和 href 有什么区别","desc":null,"options":null,"explanation":"* href 是超文本引用，它是指向资源的位置，建立与目标文件的联系；\n* src 目的是把资源下载到页面中；\n\n浏览器解析 href 不会阻塞对文档的处理（这就是官方建议使用 link 引入而不是 @ import 的原因），src 会阻塞对文档的处理。","level":0.5,"tagId":12}
{"_id":{"$oid":"61aa38563dd7f70001832f24"},"exerciseKey":"5438d05b-ec3b-42f6-8819-1f73213d654b","category":"QA","renderType":"md","title":"说说你对Redux的理解？其工作原理？","desc":null,"options":null,"explanation":"## 一、是什么\n\n`React`是用于构建用户界面的，帮助我们解决渲染`DOM`的过程\n\n而在整个应用中会存在很多个组件，每个组件的`state`是由自身进行管理，包括组件定义自身的`state`、组件之间的通信通过`props`传递、使用`Context`实现数据共享\n\n如果让每个组件都存储自身相关的状态，理论上来讲不会影响应用的运行，但在开发及后续维护阶段，我们将花费大量精力去查询状态的变化过程\n\n这种情况下，如果将所有的状态进行集中管理，当需要更新状态的时候，仅需要对这个管理集中处理，而不用去关心状态是如何分发到每一个组件内部的\n\n`redux`就是一个实现上述集中管理的容器，遵循三大基本原则：\n\n- 单一数据源\n- state 是只读的\n- 使用纯函数来执行修改\n\n注意的是，`redux`并不是只应用在`react`中，还与其他界面库一起使用，如`Vue`\n\n\n## 二、工作原理\n\n`redux `要求我们把数据都放在 `store `公共存储空间\n\n一个组件改变了 `store` 里的数据内容，其他组件就能感知到 `store `的变化，再来取数据，从而间接的实现了这些数据传递的功能\n\n工作流程图如下所示：\n\n ![](https://static.vue-js.com/27b2e930-e56b-11eb-85f6-6fac77c0c9b3.png)\n\n根据流程图，可以想象，`React Components` 是借书的用户， `Action Creactor` 是借书时说的话(借什么书)， `Store` 是图书馆管理员，`Reducer` 是记录本(借什么书，还什么书，在哪儿，需要查一下)， `state` 是书籍信息\n\n整个流程就是借书的用户需要先存在，然后需要借书，需要一句话来描述借什么书，图书馆管理员听到后需要查一下记录本，了解图书的位置，最后图书馆管理员会把这本书给到这个借书人\n\n转换为代码是，`React Components` 需要获取一些数据, 然后它就告知 `Store` 需要获取数据，这就是就是 `Action Creactor` , `Store` 接收到之后去 `Reducer` 查一下， `Reducer` 会告诉 `Store` 应该给这个组件什么数据\n\n\n\n## 三、如何使用\n\n创建一个`store`的公共数据区域\n\n```js\nimport { createStore } from 'redux' // 引入一个第三方的方法\nconst store = createStore() // 创建数据的公共存储区域（管理员）\n```\n\n还需要创建一个记录本去辅助管理数据，也就是`reduecer`，本质就是一个函数，接收两个参数`state`，`action`，返回`state`\n\n```js\n// 设置默认值\nconst initialState = {\n  counter: 0\n}\n\nconst reducer = (state = initialState, action) => {\n}\n```\n\n然后就可以将记录本传递给`store`，两者建立连接。如下：\n\n```js\nconst store = createStore(reducer)\n```\n\n如果想要获取`store`里面的数据，则通过`store.getState()`来获取当前`state`\n\n```js\nconsole.log(store.getState());\n```\n\n下面再看看如何更改`store`里面数据，是通过`dispatch`来派发`action`，通常`action`中都会有`type`属性，也可以携带其他的数据\n\n```js\nstore.dispatch({\n  type: \"INCREMENT\"\n})\n\nstore.dispath({\n  type: \"DECREMENT\"\n})\n\nstore.dispatch({\n  type: \"ADD_NUMBER\",\n  number: 5\n})\n```\n\n下面再来看看修改`reducer`中的处理逻辑：\n\n```js\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {...state, counter: state.counter + 1};\n    case \"DECREMENT\":\n      return {...state, counter: state.counter - 1};\n    case \"ADD_NUMBER\":\n      return {...state, counter: state.counter + action.number}\n    default: \n      return state;\n  }\n}\n```\n\n注意，`reducer`是一个纯函数，不需要直接修改`state`\n\n这样派发`action`之后，既可以通过`store.subscribe`监听`store`的变化，如下：\n\n```js\nstore.subscribe(() => {\n  console.log(store.getState());\n})\n```\n\n在`React`项目中，会搭配`react-redux`进行使用\n\n完整代码如下：\n\n```js\nconst redux = require('redux');\n\nconst initialState = {\n  counter: 0\n}\n\n// 创建reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {...state, counter: state.counter + 1};\n    case \"DECREMENT\":\n      return {...state, counter: state.counter - 1};\n    case \"ADD_NUMBER\":\n      return {...state, counter: state.counter + action.number}\n    default: \n      return state;\n  }\n}\n\n// 根据reducer创建store\nconst store = redux.createStore(reducer);\n\nstore.subscribe(() => {\n  console.log(store.getState());\n})\n\n// 修改store中的state\nstore.dispatch({\n  type: \"INCREMENT\"\n})\n// console.log(store.getState());\n\nstore.dispatch({\n  type: \"DECREMENT\"\n})\n// console.log(store.getState());\n\nstore.dispatch({\n  type: \"ADD_NUMBER\",\n  number: 5\n})\n// console.log(store.getState());\n```\n\n\n\n### 小结\n\n- createStore可以帮助创建 store\n- store.dispatch 帮助派发 action , action 会传递给 store\n- store.getState 这个方法可以帮助获取 store 里边所有的数据内容\n- store.subscrible 方法订阅 store 的改变，只要 store 发生改变， store.subscrible 这个函数接收的这个回调函数就会被执行\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa385634458700017f1c73"},"exerciseKey":"55ba9331-1165-4b0e-baba-dc9a6378a8fb","category":"QA","renderType":"md","title":"前端该如何选择图片的格式？","desc":null,"options":null,"explanation":"##图片的类型\n\n图片的类型目前就分为两种：\n\n* 位图\n* 矢量图\n\n### 位图\n\n所谓位图就是用像素点拼起来的图也叫点阵图，平时我们用到的png、jpg等图片就是位图。\n\n### 矢量图\n\n矢量图，也叫做向量图。矢量图并不纪录画面上每一点的信息，而是纪录了元素形状及颜色的算法，当你打开一幅矢量图的时候，软件对图形对应的函数进行运算，将运算结果图形的形状和颜色显示给你看。\n\n无论显示画面是大还是小，画面上的对象对应的算法是不变的，所以，即使对画面进行倍数相当大的缩放，它也不会像位图那样会失真。\n\n常见的就是svg格式的。\n\n## 图片的压缩类型\n\n* 无压缩\n* 有损压缩\n* 无损压缩\n\n### 无压缩\n\n无压缩的图片格式不对图片数据进行压缩处理，能准确地呈现原图片。例如BMP格式的图片。\n\n### 有损压缩\n\n指在压缩文件大小的过程中，损失了一部分图片的信息，也即降低了图片的质量（即图片被压糊了），并且这种损失是不可逆的。\n\n常见的有损压缩手段是按照一定的算法将临近的像素点进行合并。压缩算法不会对图片所有的数据进行编码压缩，而是在压缩的时候，去除了人眼无法识别的图片细节。因此有损压缩可以在同等图片质量的情况下大幅降低图片的体积。例如jpg格式的图片使用的就是有损压缩。\n\n### 无损压缩\n\n在压缩图片的过程中，图片的质量没有任何损耗。我们任何时候都可以从无损压缩过的图片中恢复出原来的信息。\n\n压缩算法对图片的所有的数据进行编码压缩，能在保证图片的质量的同时降低图片的体积。例如png、gif使用的就是无损压缩。\n\n## 图片位数\n\n图片位数通常分为8、16、24、32\n\n* 图片位数越大，能表示的颜色越多，同时占用的体积也约大。例如8位图片支持256种颜色，即2的8次方。\n* 图片位数越大，颜色过渡也就越细腻，携带的色彩信息可以更加丰富。\n* 32位跟24位的区别就是多了一个Alpha通道，用来支持半透明，其他的跟24位基本一样。\n\n## 常见的图片的格式\n\n### GIF\n\nGIF的全称是`Graphics Interchange Format`，可译为图形交换格式，是在1987年由Compu Serve公司为了填补跨平台图像格式的空白而发展起来的。\n\nGIF采用的是Lempel-Zev-Welch（LZW）压缩算法，最高支持256种颜色。由于这种特性，GIF比较适用于色彩较少的图片，比如卡通造型、公司标志等等。如果碰到需要用24位真彩色的场合，那么GIF的表现力就有限了。\n\nGIF格式图片最大的特性是帧动画，相比古老的bmp格式，尺寸较小，而且支持透明(不支持半透明，因为不支持 Alpha 透明通道 )和动画。\n\n优点：\n\n* 体积小\n* 支持动画\n\n缺点：\n\n* 由于采用了8位压缩，最多只能处理256种颜色\n\n### JPEG/JPG\n\nJPEG是`Joint Photographic Experts Group`(联合图像专家组)的缩写，文件后辍名为\"．jpg\"或\"．jpeg\"，是常用的图像文件格式，由一个软件开发联合会组织制定，是一种有损压缩格式，能够将图像压缩在很小的储存空间，图像中重复或不重要的资料会被丢失，因此容易造成图像数据的损伤。尤其是使用过高的压缩比例，将使最终解压缩后恢复的图像质量明显降低，如果追求高品质图像，不宜采用过高压缩比例。\n\n优点：\n\n* 采用有损压缩，压缩后体积更小\n* 支持24位真彩色\n* 支持渐进式加载\n\n缺点：\n\n* 有损压缩会损坏图片的质量\n* 不支持透明/半透明\n\n### 渐进式jpeg(progressive jpeg)\n\n渐进式jpg文件包含多次扫描，这些扫描顺寻的存储在jpg文件中。打开文件过程中，会先显示整个图片的模糊轮廓，随着扫描次数的增加，图片变得越来越清晰。\n\n### PNG\n\npng，即便携式网络图形是一种无损压缩的位图片形格式，其设计目的是试图替代GIF和TIFF文件格式，同时增加一些GIF文件格式所不具备的特性。PNG使用从LZ77派生的无损数据压缩算法，一般应用于JAVA程序、网页或S60程序中，原因是它压缩比高，生成文件体积小。\n\npng支持8位、24位、32位3种，我们通常叫它们png8、png24、png32。\n\n优点：\n\n* 无损压缩\n* 支持透明、半透明\n* 最高支持24位真彩色图像以及8位灰度图像，从而彻底地消除锯齿边缘。\n\n缺点：\n\n* 与jpg的有损耗压缩相比，png提供的压缩量较少\n* 不支持动画，如需支持动画还得使用apng\n\n### APNG\n\nAPNG（Animated Portable Network Graphics）是一个基于PNG（Portable Network Graphics）的位图动画格式。实际上就是多张png组成的动图。MAC电脑打开可以看到组成apng的每一张图。\n\n优点：\n\n* 支持png的所有优点\n* 支持动画\n\n缺点：\n\n* 浏览器支持情况较差\n\n### WEBP\n\nWebP是由Google最初在2010年发布，目标是减少文件大小。它能同时支持无损压缩和有损压缩。\n\n它几乎集成了以上所有图片的优点，并且能够拥有更高的压缩率，但是浏览器支持率还不够理想。\n\n### SVG\n\nSVG是一种用XML定义的语言，用来描述二维矢量及矢量/栅格图形。SVG提供了3种类型的图形对象：矢量图形（例如：由直线和曲线组成的路径）、图象、文本。图形对象还可进行分组、添加样式、变换、组合等操作，特征集包括嵌套变换、剪切路径、alpha蒙板、滤镜效果、模板对象和其它扩展。\n\nSVG图形是可交互的和动态的，可以在SVG文件中嵌入动画元素或通过脚本来定义动画。\n\nSVG与上面图片不同的是它是矢量图，无论你怎么放大，它都不会失真；同时，SVG文件通常要比比JPEG和PNG格式的文件要小很多。\n\n优点：\n\n* SVG 可被非常多的工具读取和修改（比如记事本）\n* SVG 与 JPEG 和 GIF 图像比起来，尺寸更小，且可压缩性更强。\n* SVG 是可伸缩\n* SVG 图像可在任何的分辨率下被高质量地打印\n* SVG 可在图像质量不下降的情况下被放大\n* SVG 可以与 JavaScript 技术一起运行\n* SVG 文件是纯粹的 XML\n\n缺点：\n\n* 渲染成本相对于其他格式图片比较高，对于性能有影响。\n* 需要学习成本，因为SVG是一种用XML定义的语言。\n\n## 如何选择图片的格式\n\n![image.png](https://i.loli.net/2021/07/04/Aq1IQVw4Ni7jD5C.png)\n\n","level":3,"tagId":12}
{"_id":{"$oid":"61aa3857796412000191741d"},"exerciseKey":"57a80f97-7217-4625-80f1-71ba9fd6d268","category":"QA","renderType":"html","title":"options请求方法及使用场景","desc":null,"options":null,"explanation":"<p style=\"text-align:left;text-indent:2em;\">OPTIONS是除了GET和POST之外的其中一种 HTTP请求方法。</p><p style=\"text-align:left;text-indent:2em;\">OPTIONS方法是用于请求获得由<code>Request-URI</code>标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以<strong>在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能</strong>。该请求方法的响应不能缓存。</p><p style=\"text-align:left;text-indent:2em;\">OPTIONS请求方法的<strong>主要用途</strong>有两个：</p><ul><li>获取服务器支持的所有HTTP请求方法；</li><li>用来检查访问权限。例如：JS 的 XMLHttpRequest对象进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</li></ul><p></p>","level":1.5,"tagId":16}
{"_id":{"$oid":"61aa385839bf10000191c9b3"},"exerciseKey":"59d7f771-83c9-4e85-a9a6-f348e6a547c9","category":"QA","renderType":"md","title":"异步编程有哪些实现方式？","desc":null,"options":null,"explanation":"js 中的异步机制可以分为以下几种：\n\n第一种最常见的是使用回调函数的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\n\n第二种是 Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\n\n第三种是使用 generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部我们还可以将执行权转移回来。当我们遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕的时候我们再将执行权给转移回来。因此我们在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式我们需要考虑的问题是何时将函数的控制权转移回来，因此我们需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\n\n第四种是使用 async 函数的形式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此我们可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。","level":3.5,"tagId":10}
{"_id":{"$oid":"61aa3858b804f8000122aa66"},"exerciseKey":"5a6bab0d-b96e-42ce-bfce-ba3b38e32728","category":"QA","renderType":"html","title":"工厂模式","desc":null,"options":null,"explanation":"<p><strong>1.什么是工厂模式</strong><br/> </p><ul><li>它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。实现了创建者和调用者分离，工厂模式分为简单工厂、工厂方法、抽象工厂模式</li></ul><p><strong> 2.工厂模式好处</strong><br/> </p><ul><li>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。</li><li>利用工厂模式可以降低程序的耦合性，为后期的维护修改提供了很大的便利。</li><li>将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</li></ul><p> </p>","level":1.5,"tagId":27}
{"_id":{"$oid":"61aa385a3dd7f70001832f4c"},"exerciseKey":"62b96cb2-ea9a-489f-9547-7bc8832a5913","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nvar status = \"😎\"\n\nsetTimeout(() => {\n  const status = \"😍\"\n\n  const data = {\n    status: \"🥑\",\n    getStatus() {\n      return this.status\n    }\n  }\n\n  console.log(data.getStatus())\n  console.log(data.getStatus.call(this))\n}, 0)\n```","options":"{\"options\":[\"\\\"🥑\\\" and \\\"😍\\\"\",\"\\\"🥑\\\" and \\\"😎\\\"\",\"\\\"😍\\\" and \\\"😎\\\"\",\"\\\"😎\\\" and \\\"😎\\\"\"],\"isMulti\":false,\"answer\":[1]}","explanation":"`this`关键字的指向取决于使用它的位置。 在**函数**中，比如`getStatus`，`this`指向的是调用它的对象，上述例子中`data`对象调用了`getStatus`，因此`this`指向的就是`data`对象。 当我们打印`this.status`时，`data`对象的`status`属性被打印，即`\"🥑\"`。\n使用`call`方法，可以更改`this`指向的对象。`data.getStatus.call(this)`是将`this`的指向由`data`对象更改为全局对象。在全局对象上，有一个名为`status`的变量，其值为`”😎“`。 因此打印`this.status`时，会打印`“😎”`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa385bd00c060001bf1221"},"exerciseKey":"66ee2368-475e-403c-afb2-2c3fd693a843","category":"QA","renderType":"md","title":"简述一下微信小程序的主要文件有哪些？","desc":null,"options":null,"explanation":"* WXML——模板文件\n* JSON——配置/设置文件，如标题,tabbar,页面注册\n* WXSS——样式文件，样式可直接用import导入\n* JS——脚本逻辑文件，逻辑处理，网络请求\n* app.json——配置文件入口，整个小程序的全局配置，网络超时时间、底部tab、页面路径，window字段是小程序所有页面的顶部背景颜色、文字颜色\n* app.js——可以没有内容，可以在里边监听生命周期函数、声明全局变量\n* app.wxss——全局配置样式文件","level":1,"tagId":23}
{"_id":{"$oid":"61aa385c291c0100017ee1f9"},"exerciseKey":"69fc3145-fc55-4a19-87be-9dd486c16eae","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconsole.log(String.raw`Hello\\nworld`);\n```","options":"{\"options\":[\"Hello world!\",\"Hello <br />&nbsp; &nbsp; &nbsp;world\",\"Hello\\\\nworld\",\"Hello\\\\n <br /> &nbsp; &nbsp; &nbsp;world\"],\"isMulti\":false,\"answer\":[2]}","explanation":"`String.raw`函数是用来获取一个模板字符串的原始字符串的，它返回一个字符串，其中忽略了转义符（`\\n`，`\\v`，`\\t`等）。但反斜杠可能造成问题，因为你可能会遇到下面这种类似情况：\n```javascript\nconst path = `C:\\Documents\\Projects\\table.html`\nString.raw`${path}`\n```\n这将导致：\n`\"C:DocumentsProjects able.html\"`\n直接使用`String.raw`\n```javascript\nString.raw`C:\\Documents\\Projects\\table.html`\n```\n它会忽略转义字符并打印：`C:\\Documents\\Projects\\table.html`\n上述情况，字符串是`Hello\\nworld`被打印出。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa385cbdfab500012c8481"},"exerciseKey":"6a5130e7-9c13-4dce-9ab5-07ace7597d59","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst myPromise = Promise.resolve(\"Woah some cool data\");\n\n(async () => {\n\ttry {\n\t\tconsole.log(await myPromise);\n\t} catch {\n\t\tthrow new Error(`Oops didn't work`);\n\t} finally {\n\t\tconsole.log(\"Oh finally!\");\n\t}\n})();\n```","options":"{\"options\":[\"Woah some cool data\",\"Oh finally!\",\"Woah some cool data Oh finally!\",\"Oops didn't work Oh finally!\"],\"isMulti\":false,\"answer\":[2]}","explanation":"在 `try` 块区，我们打印 `myPromise` 变量的 awaited 值： `\"Woah some cool data\"`。因为`try` 块区没有错误抛出，`catch` 块区的代码并不执行。`finally` 块区的代码 _总是_ 执行，`\"Oh finally!\"` 被输出。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa385d3976eb00014e450e"},"exerciseKey":"6db4a7aa-877e-4ec6-966f-3ada571e2fbf","category":"QA","renderType":"md","title":"什么是虚拟DOM？","desc":null,"options":null,"explanation":"虚拟DOM（VDOM）它是真实DOM的内存表示,一种编程概念，一种模式。它会和真实的DOM同步，比如通过ReactDOM这种库，这个同步的过程叫做调和(reconcilation)。\n\n虚拟DOM更多是一种模式，不是一种特定的技术。","level":1,"tagId":14}
{"_id":{"$oid":"61aa38600f30890001ab8119"},"exerciseKey":"74cf701d-95e7-428a-a7c1-d746c6c0877c","category":"QA","renderType":"md","title":"Javascript本地存储的方式有哪些，有什么区别，及有哪些应用场景？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/68dccf20-849f-11eb-ab90-d9ae814b240d.png)\n\n## 一、方式\n\n`javaScript`本地缓存的方法我们主要讲述以下四种：\n\n- cookie\n- sessionStorage\n- localStorage\n- indexedDB\n\n\n### cookie\n\n`Cookie`，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。是为了解决 `HTTP `无状态导致的问题\n\n作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 `cookie `有效期、安全性、使用范围的可选属性组成\n\n但是`cookie`在每次请求中都会被发送，如果不使用 `HTTPS `并对其加密，其保存的信息很容易被窃取，导致安全风险。举个例子，在一些使用 `cookie `保持登录态的网站上，如果 `cookie `被窃取，他人很容易利用你的 `cookie `来假扮成你登录网站\n\n关于`cookie`常用的属性如下：\n\n- Expires 用于设置 Cookie 的过期时间\n\n```js\nExpires=Wed, 21 Oct 2015 07:28:00 GMT\n```\n\n- Max-Age 用于设置在 Cookie 失效之前需要经过的秒数（优先级比`Expires`高）\n\n```js\nMax-Age=604800\n```\n\n- `Domain `指定了 `Cookie` 可以送达的主机名\n- `Path `指定了一个 `URL `路径，这个路径必须出现在要请求的资源的路径中才可以发送 `Cookie` 首部\n\n```js\nPath=/docs   # /docs/Web/ 下的资源会带 Cookie 首部\n```\n\n- 标记为 `Secure `的 `Cookie `只应通过被`HTTPS`协议加密过的请求发送给服务端\n\n通过上述，我们可以看到`cookie`又开始的作用并不是为了缓存而设计出来，只是借用了`cookie`的特性实现缓存\n\n关于`cookie`的使用如下：\n\n```js\ndocument.cookie = '名字=值';\n```\n\n关于`cookie`的修改，首先要确定`domain`和`path`属性都是相同的才可以，其中有一个不同得时候都会创建出一个新的`cookie`\n\n```js\nSet-Cookie:name=aa; domain=aa.net; path=/  # 服务端设置\ndocument.cookie =name=bb; domain=aa.net; path=/  # 客户端设置\n```\n\n最后`cookie`的删除，最常用的方法就是给`cookie`设置一个过期的事件，这样`cookie`过期后会被浏览器删除\n\n\n\n### localStorage\n\n`HTML5`新方法，IE8及以上浏览器都兼容\n\n### 特点\n\n- 生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的\n- 存储的信息在同一域中是共享的\n- 当本页操作（新增、修改、删除）了`localStorage`的时候，本页面不会触发`storage`事件,但是别的页面会触发`storage`事件。\n- 大小：5M（跟浏览器厂商有关系）\n- `localStorage`本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡\n- 受同源策略的限制\n\n下面再看看关于`localStorage`的使用\n\n设置\n\n```js\nlocalStorage.setItem('username','cfangxu');\n```\n\n获取\n\n```js\nlocalStorage.getItem('username')\n```\n\n获取键名\n\n```js\nlocalStorage.key(0) //获取第一个键名\n```\n\n删除\n\n```js\nlocalStorage.removeItem('username')\n```\n\n一次性清除所有存储\n\n```js\nlocalStorage.clear()\n```\n\n`localStorage` 也不是完美的，它有两个缺点：\n\n- 无法像` Cookie `一样设置过期时间\n- 只能存入字符串，无法直接存对象\n\n```js\nlocalStorage.setItem('key', {name: 'value'});\nconsole.log(localStorage.getItem('key')); // '[object, Object]'\n```\n\n\n\n### sessionStorage\n\n`sessionStorage `和 `localStorage `使用方法基本一致，唯一不同的是生命周期，一旦页面（会话）关闭，`sessionStorage` 将会删除数据\n\n\n\n### 扩展的前端存储方式\n\n`indexedDB `是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索\n\n虽然 `Web Storage `对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。`IndexedDB`提供了一个解决方案\n\n#### 优点：\n\n- 储存量理论上没有上限\n- 所有操作都是异步的，相比 `LocalStorage` 同步操作性能更高，尤其是数据量较大时\n- 原生支持储存` JS `的对象\n- 是个正经的数据库，意味着数据库能干的事它都能干\n\n#### 缺点：\n\n- 操作非常繁琐\n- 本身有一定门槛\n\n关于`indexedDB`的使用基本使用步骤如下：\n\n- 打开数据库并且开始一个事务\n\n- 创建一个 `object store`\n- 构建一个请求来执行一些数据库操作，像增加或提取数据等。\n- 通过监听正确类型的 `DOM` 事件以等待操作完成。\n- 在操作结果上进行一些操作（可以在 `request `对象中找到）\n\n关于使用`indexdb`的使用会比较繁琐，大家可以通过使用`Godb.js`库进行缓存，最大化的降低操作难度\n\n\n\n\n## 二、区别\n\n关于`cookie`、`sessionStorage`、`localStorage`三者的区别主要如下：\n\n- 存储大小：` cookie`数据大小不能超过`4k`，`sessionStorage`和`localStorage `虽然也有存储大小的限制，但比`cookie`大得多，可以达到5M或更大\n\n- 有效时间：` localStorage   `存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； `sessionStorage  `数据在当前浏览器窗口关闭后自动删除；` cookie `设置的`cookie`过期时间之前一直有效，即使窗口或浏览器关闭\n\n- 数据与服务器之间的交互方式，`  cookie`的数据会自动的传递到服务器，服务器端也可以写`cookie`到客户端； `sessionStorage`和`localStorage`不会自动把数据发给服务器，仅在本地保存\n\n\n\n## 三、应用场景\n\n在了解了上述的前端的缓存方式后，我们可以看看针对不对场景的使用选择：\n\n- 标记用户与跟踪用户行为的情况，推荐使用`cookie`\n- 适合长期保存在本地的数据（令牌），推荐使用`localStorage`\n- 敏感账号一次性登录，推荐使用`sessionStorage`\n- 存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用`indexedDB`\n\n","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa3862b804f8000122aa9f"},"exerciseKey":"7b48e19d-6596-4853-875f-067f9bb048a8","category":"QA","renderType":"md","title":"js 中的倒计时，怎么实现纠正偏差？","desc":null,"options":null,"explanation":"在前端实现中我们一般通过 setTimeout 和 setInterval 方法来实现一个倒计时效果。但是使用这些方法会存在时间偏差的问题，这是由于 js 的程序执行机制造成的，setTimeout 和 setInterval 的作用是隔一段时间将回调事件加入到事件队列中，因此事件并不是立即执行的，它会等到当前执行栈为空的时候再取出事件执行，因此事件等待执行的时间就是造成误差的原因。\n\n一般解决倒计时中的误差的有这样两种办法：\n\n（1）第一种是通过前端定时向服务器发送请求获取最新的时间差，以此来校准倒计时时间。\n\n（2）第二种方法是前端根据偏差时间来自动调整间隔时间的方式来实现的。这一种方式首先是以 setTimeout 递归的方式来实现倒计时，然后通过一个变量来记录已经倒计时的秒数。每一次函数调用的时候，首先将变量加一，然后根据这个变量和每次的间隔时间，我们就可以计算出此时无偏差时应该显示的时间。然后将当前的真实时间与这个时间相减，这样我们就可以得到时间的偏差大小，因此我们在设置下一个定时器的间隔大小的时候，我们就从间隔时间中减去这个偏差大小，以此来实现由于程序执行所造成的时间误差的纠正。","level":3.5,"tagId":10}
{"_id":{"$oid":"61aa3862bdfab500012c84aa"},"exerciseKey":"7d27dc57-5d95-4e3f-88a7-eb685b7c21e4","category":"QA","renderType":"md","title":"说说vue中的diff算法","desc":null,"options":null,"explanation":"\n\n![](https://static.vue-js.com/5e858e30-4585-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n`diff` 算法是一种通过同层的树节点进行比较的高效算法\n\n其有两个特点：\n- 比较只会在同层级进行, 不会跨层级比较\n- 在diff比较的过程中，循环从两边向中间比较\n\n`diff` 算法的在很多场景下都有应用，在 `vue` 中，作用于虚拟 `dom` 渲染成真实 `dom` 的新旧 `VNode` 节点比较\n\n## 二、比较方式\n\n`diff`整体策略为：深度优先，同层比较\n\n1. 比较只会在同层级进行, 不会跨层级比较\n\n<img src=\"https://static001.infoq.cn/resource/image/91/54/91e9c9519a11caa0c5bf70714383f054.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n2. 比较的过程中，循环从两边向中间收拢\n\n<img src=\"https://static001.infoq.cn/resource/image/2d/ec/2dcd6ad5cf82c65b9cfc43a27ba1e4ec.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n下面举个`vue`通过`diff`算法更新的例子：\n\n新旧`VNode`节点如下图所示：\n\n![](https://static001.infoq.cn/resource/image/80/6d/80dc339f73b186479e6d1fc18bfbf66d.png)\n\n第一次循环后，发现旧节点D与新节点D相同，直接复用旧节点D作为`diff`后的第一个真实节点，同时旧节点`endIndex`移动到C，新节点的 `startIndex` 移动到了 C\n\n![](https://static001.infoq.cn/resource/image/76/54/76032c78c8ef74047efd42c070e48854.png)\n\n第二次循环后，同样是旧节点的末尾和新节点的开头(都是 C)相同，同理，`diff` 后创建了 C 的真实节点插入到第一次创建的 B 节点后面。同时旧节点的 `endIndex` 移动到了 B，新节点的 `startIndex` 移动到了 E\n\n![](https://static001.infoq.cn/resource/image/1c/d7/1c76e7489660188d35f0a38ea8c8ecd7.png)\n\n第三次循环中，发现E没有找到，这时候只能直接创建新的真实节点 E，插入到第二次创建的 C 节点之后。同时新节点的 `startIndex` 移动到了 A。旧节点的 `startIndex` 和 `endIndex` 都保持不动\n\n![](https://static001.infoq.cn/resource/image/4b/08/4b622c0d61673ec5474465d82305d308.png)\n\n第四次循环中，发现了新旧节点的开头(都是 A)相同，于是 `diff` 后创建了 A 的真实节点，插入到前一次创建的 E 节点后面。同时旧节点的 `startIndex` 移动到了 B，新节点的` startIndex` 移动到了 B\n\n![](https://static001.infoq.cn/resource/image/59/b4/5982417c3e0b2fa9ae940354a0e67ab4.png)\n\n第五次循环中，情形同第四次循环一样，因此 `diff` 后创建了 B 真实节点 插入到前一次创建的 A 节点后面。同时旧节点的 `startIndex `移动到了 C，新节点的 startIndex 移动到了 F\n\n![](https://static001.infoq.cn/resource/image/16/86/16cf0ef90f6e19d26c0ddffeca067e86.png)\n\n新节点的 `startIndex` 已经大于 `endIndex` 了，需要创建 `newStartIdx` 和 `newEndIdx` 之间的所有节点，也就是节点F，直接创建 F 节点对应的真实节点放到 B 节点后面\n\n![](https://static001.infoq.cn/resource/image/dc/ad/dc215b45682cf6c9cc4700a5425673ad.png)\n\n## 三、原理分析\n\n当数据发生改变时，`set`方法会调用`Dep.notify`通知所有订阅者`Watcher`，订阅者就会调用`patch`给真实的`DOM`打补丁，更新相应的视图\n\n源码位置：src/core/vdom/patch.js\n\n```js\nfunction patch(oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) { // 没有新节点，直接执行destory钩子函数\n        if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n        return\n    }\n\n    let isInitialPatch = false\n    const insertedVnodeQueue = []\n\n    if (isUndef(oldVnode)) {\n        isInitialPatch = true\n        createElm(vnode, insertedVnodeQueue) // 没有旧节点，直接用新节点生成dom元素\n    } else {\n        const isRealElement = isDef(oldVnode.nodeType)\n        if (!isRealElement && sameVnode(oldVnode, vnode)) {\n            // 判断旧节点和新节点自身一样，一致执行patchVnode\n            patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly)\n        } else {\n            // 否则直接销毁及旧节点，根据新节点生成dom元素\n            if (isRealElement) {\n\n                if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n                    oldVnode.removeAttribute(SSR_ATTR)\n                    hydrating = true\n                }\n                if (isTrue(hydrating)) {\n                    if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n                        invokeInsertHook(vnode, insertedVnodeQueue, true)\n                        return oldVnode\n                    }\n                }\n                oldVnode = emptyNodeAt(oldVnode)\n            }\n            return vnode.elm\n        }\n    }\n}\n```\n\n`patch`函数前两个参数位为`oldVnode` 和 `Vnode` ，分别代表新的节点和之前的旧节点，主要做了四个判断：\n\n- 没有新节点，直接触发旧节点的`destory`钩子\n- 没有旧节点，说明是页面刚开始初始化的时候，此时，根本不需要比较了，直接全是新建，所以只调用 `createElm`\n- 旧节点和新节点自身一样，通过 `sameVnode` 判断节点是否一样，一样时，直接调用 `patchVnode `去处理这两个节点\n- 旧节点和新节点自身不一样，当两个节点不一样的时候，直接创建新节点，删除旧节点\n\n下面主要讲的是`patchVnode`部分\n\n```js\nfunction patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    // 如果新旧节点一致，什么都不做\n    if (oldVnode === vnode) {\n      return\n    }\n\n    // 让vnode.el引用到现在的真实dom，当el修改时，vnode.el会同步变化\n    const elm = vnode.elm = oldVnode.elm\n\n    // 异步占位符\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue)\n      } else {\n        vnode.isAsyncPlaceholder = true\n      }\n      return\n    }\n    // 如果新旧都是静态节点，并且具有相同的key\n    // 当vnode是克隆节点或是v-once指令控制的节点时，只需要把oldVnode.elm和oldVnode.child都复制到vnode上\n    // 也不用再有其他操作\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance\n      return\n    }\n\n    let i\n    const data = vnode.data\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode)\n    }\n\n    const oldCh = oldVnode.children\n    const ch = vnode.children\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) cbs.update[i](oldVnode, vnode)\n      if (isDef(i = data.hook) && isDef(i = i.update)) i(oldVnode, vnode)\n    }\n    // 如果vnode不是文本节点或者注释节点\n    if (isUndef(vnode.text)) {\n      // 并且都有子节点\n      if (isDef(oldCh) && isDef(ch)) {\n        // 并且子节点不完全一致，则调用updateChildren\n        if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n\n        // 如果只有新的vnode有子节点\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, '')\n        // elm已经引用了老的dom节点，在老的dom节点上添加子节点\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue)\n\n        // 如果新vnode没有子节点，而vnode有子节点，直接删除老的oldCh\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1)\n\n        // 如果老节点是文本节点\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '')\n      }\n\n      // 如果新vnode和老vnode是文本节点或注释节点\n      // 但是vnode.text != oldVnode.text时，只需要更新vnode.elm的文本内容就可以\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text)\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) i(oldVnode, vnode)\n    }\n  }\n```\n\n`patchVnode`主要做了几个判断：\n\n- 新节点是否是文本节点，如果是，则直接更新`dom`的文本内容为新节点的文本内容\n- 新节点和旧节点如果都有子节点，则处理比较更新子节点\n- 只有新节点有子节点，旧节点没有，那么不用比较了，所有节点都是全新的，所以直接全部新建就好了，新建是指创建出所有新`DOM`，并且添加进父节点\n- 只有旧节点有子节点而新节点没有，说明更新后的页面，旧节点全部都不见了，那么要做的，就是把所有的旧节点删除，也就是直接把`DOM` 删除\n\n子节点不完全一致，则调用`updateChildren`\n\n```js\nfunction updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    let oldStartIdx = 0 // 旧头索引\n    let newStartIdx = 0 // 新头索引\n    let oldEndIdx = oldCh.length - 1 // 旧尾索引\n    let newEndIdx = newCh.length - 1 // 新尾索引\n    let oldStartVnode = oldCh[0] // oldVnode的第一个child\n    let oldEndVnode = oldCh[oldEndIdx] // oldVnode的最后一个child\n    let newStartVnode = newCh[0] // newVnode的第一个child\n    let newEndVnode = newCh[newEndIdx] // newVnode的最后一个child\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    const canMove = !removeOnly\n\n    // 如果oldStartVnode和oldEndVnode重合，并且新的也都重合了，证明diff完了，循环结束\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      // 如果oldVnode的第一个child不存在\n      if (isUndef(oldStartVnode)) {\n        // oldStart索引右移\n        oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n\n      // 如果oldVnode的最后一个child不存在\n      } else if (isUndef(oldEndVnode)) {\n        // oldEnd索引左移\n        oldEndVnode = oldCh[--oldEndIdx]\n\n      // oldStartVnode和newStartVnode是同一个节点\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        // patch oldStartVnode和newStartVnode， 索引左移，继续循环\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)\n        oldStartVnode = oldCh[++oldStartIdx]\n        newStartVnode = newCh[++newStartIdx]\n\n      // oldEndVnode和newEndVnode是同一个节点\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        // patch oldEndVnode和newEndVnode，索引右移，继续循环\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)\n        oldEndVnode = oldCh[--oldEndIdx]\n        newEndVnode = newCh[--newEndIdx]\n\n      // oldStartVnode和newEndVnode是同一个节点\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        // patch oldStartVnode和newEndVnode\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)\n        // 如果removeOnly是false，则将oldStartVnode.eml移动到oldEndVnode.elm之后\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n        // oldStart索引右移，newEnd索引左移\n        oldStartVnode = oldCh[++oldStartIdx]\n        newEndVnode = newCh[--newEndIdx]\n\n      // 如果oldEndVnode和newStartVnode是同一个节点\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        // patch oldEndVnode和newStartVnode\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)\n        // 如果removeOnly是false，则将oldEndVnode.elm移动到oldStartVnode.elm之前\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n        // oldEnd索引左移，newStart索引右移\n        oldEndVnode = oldCh[--oldEndIdx]\n        newStartVnode = newCh[++newStartIdx]\n\n      // 如果都不匹配\n      } else {\n        if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n\n        // 尝试在oldChildren中寻找和newStartVnode的具有相同的key的Vnode\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n\n        // 如果未找到，说明newStartVnode是一个新的节点\n        if (isUndef(idxInOld)) { // New element\n          // 创建一个新Vnode\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm)\n\n        // 如果找到了和newStartVnodej具有相同的key的Vnode，叫vnodeToMove\n        } else {\n          vnodeToMove = oldCh[idxInOld]\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !vnodeToMove) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            )\n          }\n\n          // 比较两个具有相同的key的新节点是否是同一个节点\n          //不设key，newCh和oldCh只会进行头尾两端的相互比较，设key后，除了头尾两端的比较外，还会从用key生成的对象oldKeyToIdx中查找匹配的节点，所以为节点设置key可以更高效的利用dom。\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            // patch vnodeToMove和newStartVnode\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)\n            // 清除\n            oldCh[idxInOld] = undefined\n            // 如果removeOnly是false，则将找到的和newStartVnodej具有相同的key的Vnode，叫vnodeToMove.elm\n            // 移动到oldStartVnode.elm之前\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n\n          // 如果key相同，但是节点不相同，则创建一个新的节点\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm)\n          }\n        }\n\n        // 右移\n        newStartVnode = newCh[++newStartIdx]\n      }\n    }\n```\n\n`while`循环主要处理了以下五种情景：\n\n- 当新老 `VNode` 节点的 `start` 相同时，直接 `patchVnode` ，同时新老 `VNode` 节点的开始索引都加 1\n- 当新老 `VNode` 节点的 `end`相同时，同样直接 `patchVnode` ，同时新老 `VNode` 节点的结束索引都减 1\n- 当老 `VNode` 节点的 `start` 和新 `VNode` 节点的 `end` 相同时，这时候在 `patchVnode` 后，还需要将当前真实 `dom` 节点移动到 `oldEndVnode` 的后面，同时老 `VNode` 节点开始索引加 1，新 `VNode` 节点的结束索引减 1\n- 当老 `VNode` 节点的 `end` 和新 `VNode` 节点的 `start` 相同时，这时候在 `patchVnode` 后，还需要将当前真实 `dom` 节点移动到 `oldStartVnode` 的前面，同时老 `VNode` 节点结束索引减 1，新 `VNode` 节点的开始索引加 1\n- 如果都不满足以上四种情形，那说明没有相同的节点可以复用，则会分为以下两种情况：\n  - 从旧的 `VNode` 为 `key` 值，对应 `index` 序列为 `value` 值的哈希表中找到与 `newStartVnode` 一致 `key` 的旧的 `VNode` 节点，再进行`patchVnode `，同时将这个真实 `dom `移动到 `oldStartVnode` 对应的真实 `dom` 的前面\n  - 调用 `createElm` 创建一个新的 `dom` 节点放到当前 `newStartIdx` 的位置\n\n\n\n### 小结\n\n- 当数据发生改变时，订阅者`watcher`就会调用`patch`给真实的`DOM`打补丁\n- 通过`isSameVnode`进行判断，相同则调用`patchVnode`方法\n- `patchVnode`做了以下操作：\n  - 找到对应的真实`dom`，称为`el`\n  - 如果都有都有文本节点且不相等，将`el`文本节点设置为`Vnode`的文本节点\n  - 如果`oldVnode`有子节点而`VNode`没有，则删除`el`子节点\n  - 如果`oldVnode`没有子节点而`VNode`有，则将`VNode`的子节点真实化后添加到`el`\n  - 如果两者都有子节点，则执行`updateChildren`函数比较子节点\n- `updateChildren`主要做了以下操作：\n  - 设置新旧`VNode`的头尾指针\n  - 新旧头尾指针进行比较，循环向中间靠拢，根据情况调用`patchVnode`进行`patch`重复流程、调用`createElem`创建一个新节点，从哈希表寻找 `key`一致的`VNode` 节点再分情况操作\n\n\n","level":3,"tagId":14}
{"_id":{"$oid":"61aa383e0f30890001ab800f"},"exerciseKey":"01797b51-cfe0-483c-a937-b8e430d78cee","category":"QA","renderType":"md","title":"使用ts实现一个判断入参是否是数组类型的方法？","desc":null,"options":null,"explanation":"unknown 用于变量类型不确定，但肯定可以确定的情形下，比如下面这个示例中，入参总归会有个值，根据这个值的类型进行不同的处理，这里使用 unknown 替代 any 则会更加类型安全。\n\n```ts\nfunction isArray(x: unknown): boolean {\n  if (Array.isArray(x)) {\n    return true;\n  }\n  return false;\n}\n```\n\n","level":2,"tagId":19}
{"_id":{"$oid":"61aa384391a75000018d2c34"},"exerciseKey":"13f1b2b9-725c-4c16-ada0-fb050fdafe28","category":"QA","renderType":"html","title":"设计模式的六大原则","desc":null,"options":null,"explanation":"<p><strong>开放封闭原则（Open Close Principle）</strong><br/> </p><ul><li>原则思想：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</li><li>描述：一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。</li><li>优点：单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。</li></ul><p></p><p><strong> 里氏代换原则（Liskov Substitution Principle）</strong><br/> </p><ul><li>原则思想：使用的基类可以在任何地方使用继承的子类，完美的替换基类。</li><li>大概意思是：子类可以扩展父类的功能，但不能改变父类原有的功能。子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法，子类中可以增加自己特有的方法。</li><li>优点：增加程序的健壮性，即使增加了子类，原有的子类还可以继续运行，互不影响。</li></ul><p></p><p><strong> 依赖倒转原则（Dependence Inversion Principle）</strong><br/> </p><ul><li> 依赖倒置原则的核心思想是面向接口编程.<br/> </li><li> 依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，<br/> </li><li> 这个是开放封闭原则的基础，具体内容是：对接口编程，依赖于抽象而不依赖于具体。<br/> </li></ul><p> <strong>接口隔离原则（Interface Segregation Principle）</strong><br/> </p><ul><li>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</li><li>例如：支付类的接口和订单类的接口，需要把这俩个类别的接口变成俩个隔离的接口</li></ul><p></p><p><strong> 迪米特法则（最少知道原则）（Demeter Principle）</strong><br/> </p><ul><li>原则思想：一个对象应当对其他对象有尽可能少地了解，简称类间解耦</li><li>大概意思就是一个类尽量减少自己对其他对象的依赖，原则是低耦合，高内聚，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。</li><li>优点：低耦合，高内聚。</li></ul><p></p><p><strong> 单一职责原则（Principle of single responsibility）</strong><br/> </p><ul><li>原则思想：一个方法只负责一件事情。</li><li>描述：单一职责原则很简单，一个方法 一个类只负责一个职责，各个职责的程序改动，不影响其它程序。 这是常识，几乎所有程序员都会遵循这个原则。</li><li>优点：降低类和类的耦合，提高可读性，增加可维护性和可拓展性，降低可变性的风险。</li></ul><p><br/></p>","level":3,"tagId":27}
{"_id":{"$oid":"61aa38480f30890001ab8056"},"exerciseKey":"22d88306-35f1-4538-898c-2ce3e5303fea","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst groceries = [\"banana\", \"apple\", \"peanuts\"];\n\nif (groceries.indexOf(\"banana\")) {\n\tconsole.log(\"We have to buy bananas!\");\n} else {\n\tconsole.log(`We don't have to buy bananas!`);\n}\n```","options":"{\"options\":[\"We have to buy bananas!\",\"We don't have to buy bananas\",\"undefined\",\"1\"],\"isMulti\":false,\"answer\":[1]}","explanation":"我们传递了一个状态 `groceries.indexOf(\"banana\")` 给if条件语句。`groceries.indexOf(\"banana\")` 返回 `0`， 一个 falsy 的值。因为if条件语句的状态为 falsy，`else` 块区内的代码执行，并且 `We don't have to buy bananas!` 被输出.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3848291c0100017ee168"},"exerciseKey":"241821b0-1f2d-42b4-a245-2eee847fd732","category":"QA","renderType":"md","title":"计算聚会人数","desc":"一次朋友聚会，大家见面时总共握手45次。如果参加聚会的人和其余的每个人只握手一次，问参加聚会的共有多少人？","options":null,"explanation":"很简单的排列组合问题，答案 **10人**","level":1,"tagId":17}
{"_id":{"$oid":"61aa384b81337a00011e054b"},"exerciseKey":"30ae1cd5-9a7f-409b-9839-181f42fa6a15","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\n[1, 2, 3, 4].reduce((x, y) => console.log(x, y));\n```","options":"{\"options\":[\"1 2 and 3 3 and 6 4\",\"1 2 and 2 3 and 3 4\",\"1 undefined and 2 undefined and 3 undefined and 4 undefined\",\"1 2 and undefined 3 and undefined 4\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`reducer` 函数接收4个参数:\n1. Accumulator (acc) (累计器)\n2. Current Value (cur) (当前值)\n3. Current Index (idx) (当前索引)\n4. Source Array (src) (源数组)\n`reducer` 函数的返回值将会分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n`reducer` 函数还有一个可选参数`initialValue`, 该参数将作为第一次调用回调函数时的第一个参数的值。如果没有提供`initialValue`，则将使用数组中的第一个元素。\n在上述例子，`reduce`方法接收的第一个参数(Accumulator)是`x`, 第二个参数(Current Value)是`y`。\n在第一次调用时，累加器`x`为`1`，当前值`“y”`为`2`，打印出累加器和当前值：`1`和`2`。\n例子中我们的回调函数没有返回任何值，只是打印累加器的值和当前值。如果函数没有返回值，则默认返回`undefined`。 在下一次调用时，累加器为`undefined`，当前值为“3”, 因此`undefined`和`3`被打印出。\n在第四次调用时，回调函数依然没有返回值。 累加器再次为 `undefined` ，当前值为“4”。 `undefined`和`4`被打印出。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384c79641200019173c7"},"exerciseKey":"322d4cf7-d372-4963-87d3-173a058c4099","category":"Choice","renderType":"md","title":"返回值是什么?","desc":"```javascript\nconst firstPromise = new Promise((res, rej) => {\n  setTimeout(res, 500, \"one\");\n});\n\nconst secondPromise = new Promise((res, rej) => {\n  setTimeout(res, 100, \"two\");\n});\n\nPromise.race([firstPromise, secondPromise]).then(res => console.log(res));\n```","options":"{\"options\":[\"\\\"one\\\"\",\"\\\"two\\\"\",\"\\\"two\\\" \\\"one\\\"\",\"\\\"one\\\" \\\"two\\\"\"],\"isMulti\":false,\"answer\":[1]}","explanation":"当我们向`Promise.race`方法中传入多个`Promise`时，会进行 _优先_ 解析。在这个例子中，我们用`setTimeout`给`firstPromise`和`secondPromise`分别设定了500ms和100ms的定时器。这意味着`secondPromise`会首先解析出字符串`two`。那么此时`res`参数即为`two`，是为输出结果。","level":1,"tagId":32}
{"_id":{"$oid":"61aa384d0f30890001ab8085"},"exerciseKey":"3538f4eb-5b78-4ffc-aeae-ccfdd45976a4","category":"QA","renderType":"md","title":"什么是跨域？","desc":null,"options":null,"explanation":"跨域本质是浏览器基于**同源策略**的一种安全手段\n\n同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能\n\n所谓同源（即指在同一个域）具有以下三个相同点\n- 协议相同（protocol）\n- 主机相同（host）\n- 端口相同（port）\n\n反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域\n\n>一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用postman请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。\n","level":1,"tagId":16}
{"_id":{"$oid":"61aa385254ebf60001a1a3a5"},"exerciseKey":"4585f639-0eff-4190-9fa0-e1c0838284e8","category":"QA","renderType":"md","title":"浏览器一帧都会干些什么？","desc":null,"options":null,"explanation":"我们都知道，页面的内容都是一帧一帧绘制出来的，浏览器刷新率代表浏览器一秒绘制多少帧。原则上说 1s 内绘制的帧数也多，画面表现就也细腻。目前浏览器大多是 60Hz（60帧/s），每一帧耗时也就是在 16.6ms 左右。那么在这一帧的（16.6ms） 过程中浏览器又干了些什么呢？\n\n![image.png](https://i.loli.net/2021/08/07/E2jyGxNbFpz7QXg.png)\n\n通过上面这张图可以清楚的知道，浏览器一帧会经过下面这几个过程：\n\n* 接受输入事件\n* 执行事件回调\n* 开始一帧\n* 执行 RAF (RequestAnimationFrame)\n* 页面布局，样式计算\n* 绘制渲染\n* 执行 RIC (RequestIdelCallback)\n\n第七步的 RIC 事件不是每一帧结束都会执行，只有在一帧的 16.6ms 中做完了前面 6 件事儿且还有剩余时间，才会执行。如果一帧执行结束后还有时间执行 RIC 事件，那么下一帧需要在事件执行结束才能继续渲染，所以 RIC 执行不要超过 30ms，如果长时间不将控制权交还给浏览器，会影响下一帧的渲染，导致页面出现卡顿和事件响应不及时。\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa38553dd7f70001832f21"},"exerciseKey":"5116f1a8-f1b2-49ec-bbfc-5550861762da","category":"QA","renderType":"md","title":"你是怎么理解ES6中 Decorator 的？使用场景有哪些？","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/7df43560-5ba5-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 一、介绍\n\nDecorator，即装饰器，从名字上很容易让我们联想到装饰者模式\n\n简单来讲，装饰者模式就是一种在不改变原类和使用继承的情况下，动态地扩展对象功能的设计理论。\n\n`ES6`中`Decorator`功能亦如此，其本质也不是什么高大上的结构，就是一个普通的函数，用于扩展类属性和类方法\n\n这里定义一个士兵，这时候他什么装备都没有\n\n```js\nclass soldier{ \n}\n```\n\n定义一个得到 AK 装备的函数，即装饰器\n\n```js\nfunction strong(target){\n    target.AK = true\n}\n```\n\n使用该装饰器对士兵进行增强\n\n```js\n@strong\nclass soldier{\n}\n```\n\n这时候士兵就有武器了\n\n```js\nsoldier.AK // true\n```\n\n上述代码虽然简单，但也能够清晰看到了使用`Decorator`两大优点：\n\n- 代码可读性变强了，装饰器命名相当于一个注释\n- 在不改变原有代码情况下，对原来功能进行扩展\n\n\n\n## 二、用法\n\n`Docorator`修饰对象为下面两种：\n\n- 类的装饰\n- 类属性的装饰\n\n### 类的装饰\n\n当对类本身进行装饰的时候，能够接受一个参数，即类本身\n\n将装饰器行为进行分解，大家能够有个更深入的了解\n\n```js\n@decorator\nclass A {}\n\n// 等同于\n\nclass A {}\nA = decorator(A) || A;\n```\n\n下面`@testable`就是一个装饰器，`target`就是传入的类，即`MyTestableClass`，实现了为类添加静态属性\n\n```js\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n如果想要传递参数，可以在装饰器外层再封装一层函数\n\n```js\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n\n\n\n### 类属性的装饰\n\n当对类属性进行装饰的时候，能够接受三个参数：\n\n- 类的原型对象\n- 需要装饰的属性名\n- 装饰属性名的描述对象\n\n首先定义一个`readonly`装饰器\n\n```js\nfunction readonly(target, name, descriptor){\n  descriptor.writable = false; // 将可写属性设为false\n  return descriptor;\n}\n```\n\n使用`readonly`装饰类的`name`方法\n\n```javascript\nclass Person {\n  @readonly\n  name() { return `${this.first} ${this.last}` }\n}\n```\n\n相当于以下调用\n\n```js\nreadonly(Person.prototype, 'name', descriptor);\n```\n\n如果一个方法有多个装饰器，就像洋葱一样，先从外到内进入，再由内到外执行\n\n```javascript\nfunction dec(id){\n    console.log('evaluated', id);\n    return (target, property, descriptor) =>console.log('executed', id);\n}\n\nclass Example {\n    @dec(1)\n    @dec(2)\n    method(){}\n}\n// evaluated 1\n// evaluated 2\n// executed 2\n// executed 1\n```\n\n外层装饰器`@dec(1)`先进入，但是内层装饰器`@dec(2)`先执行\n\n\n\n### 注意\n\n装饰器不能用于修饰函数，因为函数存在变量声明情况\n\n```js\nvar counter = 0;\n\nvar add = function () {\n  counter++;\n};\n\n@add\nfunction foo() {\n}\n```\n\n编译阶段，变成下面\n\n```js\nvar counter;\nvar add;\n\n@add\nfunction foo() {\n}\n\ncounter = 0;\n\nadd = function () {\n  counter++;\n};\n```\n\n意图是执行后`counter`等于 1，但是实际上结果是`counter`等于 0\n\n\n\n## 三、使用场景\n\n基于`Decorator`强大的作用，我们能够完成各种场景的需求，下面简单列举几种：\n\n使用`react-redux`的时候，如果写成下面这种形式，既不雅观也很麻烦\n\n```js\nclass MyReactComponent extends React.Component {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);\n```\n\n通过装饰器就变得简洁多了\n\n```js\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyReactComponent extends React.Component {}\n```\n\n将`mixins`，也可以写成装饰器，让使用更为简洁了\n\n```js\nfunction mixins(...list) {\n  return function (target) {\n    Object.assign(target.prototype, ...list);\n  };\n}\n\n// 使用\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // \"foo\"\n```\n\n\n\n下面再讲讲`core-decorators.js`几个常见的装饰器\n\n#### @antobind\n\n`autobind`装饰器使得方法中的`this`对象，绑定原始对象\n\n```javascript\nimport { autobind } from 'core-decorators';\n\nclass Person {\n  @autobind\n  getPerson() {\n    return this;\n  }\n}\n\nlet person = new Person();\nlet getPerson = person.getPerson;\n\ngetPerson() === person;\n// true\n```\n\n\n\n#### @readonly\n\n`readonly`装饰器使得属性或方法不可写\n\n```javascript\nimport { readonly } from 'core-decorators';\n\nclass Meal {\n  @readonly\n  entree = 'steak';\n}\n\nvar dinner = new Meal();\ndinner.entree = 'salmon';\n// Cannot assign to read only property 'entree' of [object Object]\n```\n\n\n\n\n\n#### @deprecate\n\n`deprecate`或`deprecated`装饰器在控制台显示一条警告，表示该方法将废除\n\n```javascript\nimport { deprecate } from 'core-decorators';\n\nclass Person {\n  @deprecate\n  facepalm() {}\n\n  @deprecate('功能废除了')\n  facepalmHard() {}\n}\n\nlet person = new Person();\n\nperson.facepalm();\n// DEPRECATION Person#facepalm: This function will be removed in future versions.\n\nperson.facepalmHard();\n// DEPRECATION Person#facepalmHard: 功能废除了\n\n```\n\n","level":3.5,"tagId":24}
{"_id":{"$oid":"61aa38578e97d900018086fa"},"exerciseKey":"593b09fd-094f-44b7-a375-6ddc393113a5","category":"QA","renderType":"md","title":"ES6中对象新增了哪些扩展?","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/4da4dd40-5427-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、属性的简写\n\nES6中，当对象键名与对应值名相等的时候，可以进行简写\n\n```js\nconst baz = {foo:foo}\n\n// 等同于\nconst baz = {foo}\n```\n\n方法也能够进行简写\n\n```js\nconst o = {\n  method() {\n    return \"Hello!\";\n  }\n};\n\n// 等同于\n\nconst o = {\n  method: function() {\n    return \"Hello!\";\n  }\n}\n```\n\n在函数内作为返回值，也会变得方便很多\n\n```js\nfunction getPoint() {\n  const x = 1;\n  const y = 10;\n  return {x, y};\n}\n\ngetPoint()\n// {x:1, y:10}\n```\n\n注意：简写的对象方法不能用作构造函数，否则会报错\n\n```js\nconst obj = {\n  f() {\n    this.foo = 'bar';\n  }\n};\n\nnew obj.f() // 报错\n```\n\n\n\n## 二、属性名表达式\n\nES6 允许字面量定义对象时，将表达式放在括号内\n\n```js\nlet lastWord = 'last word';\n\nconst a = {\n  'first word': 'hello',\n  [lastWord]: 'world'\n};\n\na['first word'] // \"hello\"\na[lastWord] // \"world\"\na['last word'] // \"world\"\n```\n\n表达式还可以用于定义方法名\n\n```js\nlet obj = {\n  ['h' + 'ello']() {\n    return 'hi';\n  }\n};\n\nobj.hello() // hi\n```\n\n注意，属性名表达式与简洁表示法，不能同时使用，会报错\n\n```js\n// 报错\nconst foo = 'bar';\nconst bar = 'abc';\nconst baz = { [foo] };\n\n// 正确\nconst foo = 'bar';\nconst baz = { [foo]: 'abc'};\n```\n\n注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串`[object Object]`\n\n```js\nconst keyA = {a: 1};\nconst keyB = {b: 2};\n\nconst myObject = {\n  [keyA]: 'valueA',\n  [keyB]: 'valueB'\n};\n\nmyObject // Object {[object Object]: \"valueB\"}\n```\n\n\n\n## 三、super关键字\n\n`this`关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字`super`，指向当前对象的原型对象\n\n```javascript\nconst proto = {\n  foo: 'hello'\n};\n\nconst obj = {\n  foo: 'world',\n  find() {\n    return super.foo;\n  }\n};\n\nObject.setPrototypeOf(obj, proto); // 为obj设置原型对象\nobj.find() // \"hello\"\n```\n\n\n\n## 四、扩展运算符的应用\n\n在解构赋值中，未被读取的可遍历的属性，分配到指定的对象上面\n\n```js\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx // 1\ny // 2\nz // { a: 3, b: 4 }\n```\n\n注意：解构赋值必须是最后一个参数，否则会报错\n\n解构赋值是浅拷贝\n\n```js\nlet obj = { a: { b: 1 } };\nlet { ...x } = obj;\nobj.a.b = 2; // 修改obj里面a属性中键值\nx.a.b // 2，影响到了结构出来x的值\n```\n\n对象的扩展运算符等同于使用`Object.assign()`方法\n\n\n\n## 五、属性的遍历\n\nES6 一共有 5 种方法可以遍历对象的属性。\n\n- for...in：循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）\n\n- Object.keys(obj)：返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名\n\n- Object.getOwnPropertyNames(obj)：回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名\n\n- Object.getOwnPropertySymbols(obj)：返回一个数组，包含对象自身的所有 Symbol 属性的键名\n\n- Reflect.ownKeys(obj)：返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举\n\n上述遍历，都遵守同样的属性遍历的次序规则：\n\n- 首先遍历所有数值键，按照数值升序排列\n- 其次遍历所有字符串键，按照加入时间升序排列\n- 最后遍历所有 Symbol 键，按照加入时间升序排\n\n```js\nReflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })\n// ['2', '10', 'b', 'a', Symbol()]\n```\n\n\n\n\n\n## 六、对象新增的方法\n\n关于对象新增的方法，分别有以下：\n\n- Object.is()\n- Object.assign()\n- Object.getOwnPropertyDescriptors()\n- Object.setPrototypeOf()，Object.getPrototypeOf()\n- Object.keys()，Object.values()，Object.entries()\n- Object.fromEntries()\n\n\n\n### Object.is()\n\n严格判断两个值是否相等，与严格比较运算符（===）的行为基本一致，不同之处只有两个：一是`+0`不等于`-0`，二是`NaN`等于自身\n\n```js\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n\n\n\n### Object.assign()\n\n`Object.assign()`方法用于对象的合并，将源对象`source`的所有可枚举属性，复制到目标对象`target`\n\n`Object.assign()`方法的第一个参数是目标对象，后面的参数都是源对象\n\n```javascript\nconst target = { a: 1, b: 1 };\n\nconst source1 = { b: 2, c: 2 };\nconst source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n```\n\n注意：`Object.assign()`方法是浅拷贝，遇到同名属性会进行替换\n\n\n\n### Object.getOwnPropertyDescriptors()\n\n返回指定对象所有自身属性（非继承属性）的描述对象\n\n```js\nconst obj = {\n  foo: 123,\n  get bar() { return 'abc' }\n};\n\nObject.getOwnPropertyDescriptors(obj)\n// { foo:\n//    { value: 123,\n//      writable: true,\n//      enumerable: true,\n//      configurable: true },\n//   bar:\n//    { get: [Function: get bar],\n//      set: undefined,\n//      enumerable: true,\n//      configurable: true } }\n```\n\n\n\n### Object.setPrototypeOf()\n\n`Object.setPrototypeOf`方法用来设置一个对象的原型对象\n\n```js\nObject.setPrototypeOf(object, prototype)\n\n// 用法\nconst o = Object.setPrototypeOf({}, null);\n```\n\n\n\n### Object.getPrototypeOf()\n\n用于读取一个对象的原型对象\n\n```js\nObject.getPrototypeOf(obj);\n```\n\n\n\n### Object.keys()\n\n返回自身的（不含继承的）所有可遍历（enumerable）属性的键名的数组\n\n```js\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n```\n\n\n\n### Object.values()\n\n返回自身的（不含继承的）所有可遍历（enumerable）属性的键对应值的数组\n\n```js\nconst obj = { foo: 'bar', baz: 42 };\nObject.values(obj)\n// [\"bar\", 42]\n```\n\n\n\n### Object.entries()\n\n返回一个对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对的数组\n\n```js\nconst obj = { foo: 'bar', baz: 42 };\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n\n\n### Object.fromEntries()\n\n用于将一个键值对数组转为对象\n\n```js\nObject.fromEntries([\n  ['foo', 'bar'],\n  ['baz', 42]\n])\n// { foo: \"bar\", baz: 42 }\n```\n","level":1.5,"tagId":24}
{"_id":{"$oid":"61aa385a54ebf60001a1a3d5"},"exerciseKey":"614de7f3-ce19-4359-aeb5-e63f64c8b48e","category":"QA","renderType":"md","title":"什么是TypeScript映射文件？","desc":null,"options":null,"explanation":"* TypeScript Map文件是一个源映射文件，其中包含有关我们原始文件的信息。\n* .map文件是源映射文件，可让工具在发出的JavaScript代码和创建它的TypeScript源文件之间进行映射。\n* 许多调试器可以使用这些文件，因此我们可以调试TypeScript文件而不是JavaScript文件。","level":3,"tagId":19}
{"_id":{"$oid":"61aa385c34458700017f1c98"},"exerciseKey":"6b910440-48ae-49f9-8659-8aa880d239fb","category":"QA","renderType":"md","title":"什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？","desc":null,"options":null,"explanation":"## 什么是前端路由？\n\n前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的。\n\n## 什么时候使用前端路由？\n\n在单页面应用，大部分页面结构不变，只改变部分内容的使用\n\n## 前端路由有什么优点和缺点？\n\n优点：用户体验好，不需要每次都从服务器全部获取，快速展现给用户\n\n缺点：单页面无法记住之前滚动的位置，无法在前进，后退的时候记住滚动的位置\n\n## 实现方式\n\n前端路由一共有两种实现方式，一种是通过 **hash** 的方式，一种是通过使用 **pushState** 的方式。","level":3,"tagId":10}
{"_id":{"$oid":"61aa385d0f30890001ab8103"},"exerciseKey":"6dd078d0-5728-4901-acab-bda0f365347d","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst myLifeSummedUp = [\"☕\", \"💻\", \"🍷\", \"🍫\"]\n\nfor (let item in myLifeSummedUp) {\n  console.log(item)\n}\n\nfor (let item of myLifeSummedUp) {\n  console.log(item)\n}\n```","options":"{\"options\":[\"0 1 2 3 and \\\"☕\\\"  \\\"💻\\\" \\\"🍷\\\" \\\"🍫\\\"\",\"\\\"☕\\\"  \\\"💻\\\" \\\"🍷\\\" \\\"🍫\\\" and \\\"☕\\\"  \\\"💻\\\" \\\"🍷\\\" \\\"🍫\\\"\",\"\\\"☕\\\"  \\\"💻\\\" \\\"🍷\\\" \\\"🍫\\\" and 0 1 2 3\",\"0 1 2 3 and {0: \\\"☕\\\", 1: \\\"💻\\\", 2: \\\"🍷\\\", 3: \\\"🍫\\\"}\"],\"isMulti\":false,\"answer\":[0]}","explanation":"通过`for-in`循环，我们可以遍历一个对象**自有的**、**继承的**、**可枚举的**、**非Symbol的**属性。 在数组中，可枚举属性是数组元素的“键”， 即它们的索引。 类似于下面这个对象：\n`{0: \"☕\", 1: \"💻\", 2: \"🍷\", 3: \"🍫\"}`\n其中键则是可枚举属性，因此 `0`，`1`，`2`，`3`被记录。\n通过`for-of`循环，我们可以迭代**可迭代对象**（包括 `Array`，`Map`，`Set`，`String`，`arguments`等）。当我们迭代数组时，在每次迭代中，不同属性的值将被分配给变量`item`, 因此`“☕”`，`“💻”`，`“🍷”`，`“🍫”`被打印。","level":1,"tagId":32}
{"_id":{"$oid":"61aa385d39bf10000191c9e0"},"exerciseKey":"6efa769a-3eb9-44ea-bd7c-01c5c991000f","category":"QA","renderType":"md","title":"怎么使用 js 实现拖拽功能？\n","desc":null,"options":null,"explanation":"一个元素的拖拽过程，我们可以分为三个步骤:\n1. 第一步是鼠标按下目标元素\n2. 第二步是鼠标保持按下的状态移动鼠标\n3. 第三步是鼠标抬起，拖拽过程结束\n\n这三步分别对应了三个事件，mousedown 事件，mousemove 事件和 mouseup 事件。只有在鼠标按下的状态移动鼠标我们才会执行拖拽事件，因此我们需要在 mousedown 事件中设置一个状态来标识鼠标已经按下，然后在 mouseup 事件中再取消这个状态。在 mousedown 事件中我们首先应该判断，目标元素是否为拖拽元素，如果是拖拽元素，我们就设置状态并且保存这个时候鼠标的位置。然后在 mousemove 事件中，我们通过判断鼠标现在的位置和以前位置的相对移动，来确定拖拽元素在移动中的坐标。最后 mouseup 事件触发后，清除状态，结束拖拽事件。","level":3.5,"tagId":10}
{"_id":{"$oid":"61aa385ecd02c30001dd2256"},"exerciseKey":"702b094e-0bdc-4be6-b8c7-e2a70dc13688","category":"QA","renderType":"md","title":"React中的类组件和函数组件之间有什么区别？","desc":null,"options":null,"explanation":"\n## 类组件（Class components）\n\n* 无论是使用函数或是类来声明一个组件，它决不能修改它自己的 props。\n\t* 所有 React 组件都必须是纯函数，并禁止修改其自身 props。\n* React是单项数据流，父组件改变了属性，那么子组件视图会更新。\n\t* 属性 props是外界传递过来的，状态 state是组件本身的，状态可以在组件中任意修改\n\t* 组件的属性和状态改变都会更新视图。\n    \n```react.js\nclass Welcome extends React.Component {\n  render() {\n    return (\n      <h1>Welcome { this.props.name }</h1>\n    );\n  }\n}\nReactDOM.render(<Welcome name='react' />, document.getElementById('root'));\n```\n\n## 函数组件（functional component）\n\n函数组件接收一个单一的 props 对象并返回了一个React元素\n\n```react.js\nfunction Welcome (props) {\n  return <h1>Welcome {props.name}</h1>\n}\nReactDOM.render(<Welcome name='react' />, document.getElementById('root'));\n```\n\n## 区别\n\n* 语法上\n\n两者最明显的不同就是在语法上，函数组件是一个纯函数，它接收一个props对象返回一个react元素。而类组件需要去继承React.Component并且创建render函数返回react元素，这将会要更多的代码，虽然它们实现的效果相同。\n\n* 状态管理\n\n因为函数组件是一个纯函数，你不能在组件中使用setState()，这也是为什么把函数组件称作为无状态组件。\n\n如果你需要在你的组件中使用state，你可以选择创建一个类组件或者将state提升到你的父组件中，然后通过props对象传递到子组件。\n\n* 生命周期钩子\n\n你不能在函数组件中使用生命周期钩子，原因和不能使用state一样，所有的生命周期钩子都来自于继承的React.Component中。\n\n因此，如果你想使用生命周期钩子，那么需要使用类组件。\n\n**注意**：在react16.8版本中添加了hooks，使得我们可以在函数组件中使用useState钩子去管理state，使用useEffect钩子去使用生命周期函数。因此，2、3两点就不是它们的区别点。从这个改版中我们可以看出作者更加看重函数组件，而且react团队曾提及到在react之后的版本将会对函数组件的性能方面进行提升。\n\n* 调用方式\n\n如果SayHi是一个函数，React需要调用它：\n\n```react.js\n// 你的代码 \nfunction SayHi() { \n    return <p>Hello, React</p> \n} \n// React内部 \nconst result = SayHi(props) // » <p>Hello, React</p>\n```\n\n如果SayHi是一个类，React需要先用new操作符将其实例化，然后调用刚才生成实例的render方法：\n\n```react.js\n// 你的代码 \nclass SayHi extends React.Component { \n    render() { \n        return <p>Hello, React</p> \n    } \n} \n// React内部 \nconst instance = new SayHi(props) // » SayHi {} \nconst result = instance.render() // » <p>Hello, React</p>\n```\n\n可想而知，函数组件重新渲染将重新调用组件方法返回新的react元素，类组件重新渲染将new一个新的组件实例，然后调用render类方法返回react元素，这也说明为什么类组件中this是可变的。\n\n\n\n","level":1,"tagId":13}
{"_id":{"$oid":"61aa385f8e97d9000180872e"},"exerciseKey":"7288dc5d-1485-4275-8a19-acf2bdc7f909","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\n(() => {\n  let x, y\n  try {\n    throw new Error()\n  } catch (x) {\n    (x = 1), (y = 2)\n    console.log(x)\n  }\n  console.log(x)\n  console.log(y)\n})()\n```","options":"{\"options\":[\"1 undefined 2\",\"undefined undefined undefined\",\"1 1 2\",\"1 undefined undefined\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`catch` 代码块接收参数 `x`。当我们传递参数时，这与之前定义的变量 `x` 不同 。这个 `x` 是属于 `catch` 块级作用域的。\n然后，我们将块级作用域中的变量赋值为 `1`，同时也设置了变量 `y` 的值。现在，我们打印块级作用域中的变量 `x`，值为 `1`。\n`catch` 块之外的变量 `x` 的值仍为 `undefined`， `y` 的值为 `2`。当我们在 `catch` 块之外执行 `console.log(x)` 时，返回 `undefined`，`y` 返回 `2`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386385c5f70001542fac"},"exerciseKey":"7e7da360-d6e1-4f9f-b987-7e740b8d8d7e","category":"QA","renderType":"md","title":"Object.is和===有什么区别？","desc":null,"options":null,"explanation":"Object在严格等于的基础上修复了一些特殊情况下的失误，具体来说就是+0和-0，NaN和NaN。 \n\n源码如下：\n```js\nfunction is(x, y) {\nif (x === y) {\n//运行到1/x === 1/y的时候x和y都为0，但是1/+0 = +Infinity， 1/-0 = -Infinity, 是不\n一样的\nreturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n} else {\n//NaN===NaN是false,这是不对的，我们在这里做一个拦截，x !== x，那么一定是 NaN, y 同理\n//两个都是NaN的时候返回true\nreturn x !== x && y !== y;\n}\n\n```\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa383f39bf10000191c8fd"},"exerciseKey":"060a3711-75a5-4bb3-bb18-9e6e358da4bf","category":"QA","renderType":"md","title":"在 React 中可以做哪些性能优化？","desc":null,"options":null,"explanation":"* 使用 shouldComponentUpdate 避免不需要的渲染，但是如果对 props 和 state 做深比较，代价很大，所以需要根据业务进行些取舍；在有子组件的情况下，为了避免子组件的重复渲染，可以通过父组件来判断子组件是否需要 PureRender。\n\n* 将 props 设置为数组或对象：每次调用 React 组件都会创建新组件，就算传入的数组或对象的值没有改变，他们的引用地址也会发生改变，比如，如果按照如下的写法，那么每次渲染时 style 都是一个新对象\n\n```react.js\n// 不推荐\n<button style={{ color: 'red' }} />\n\n// 推荐\nconst style = { color: 'red' }\n<button style={style} />\n\n// 不推荐\n<button style={this.props.style || {} } />  \n\n// 推荐\nconst defaultStyle = {}\n<button style={this.props.style || defaultStyle } />   \n```\n\n* 将函数的绑定移动到构造函数内：可以避免每次都绑定事件。\n* 使用 immutable 不可变数据，在我们项目中使用引用类型时，为了避免对原始数据的影响，一般建议使用 shallowCopy 和 deepCopy 对数据进行处理，但是这样会造成 CPU 和 内存的浪费，所以推荐使用 immutable，优点如下\n\t* 降低了“可变”带来的复杂度\n\t* 节省内存，immutable 使用结构共享尽量复用内存，没有被引用的对象会被垃圾回收\n\t* 可以更好的做撤销/重做，复制/粘贴，时间旅行\n\t* 不会有并发问题（因为数据本身就是不可变的）\n\t* 拥抱函数式编程\n* 给子组件设置一个唯一的 key，因为在 diff 算法中，会用 key 作为唯一标识优化渲染\n","level":1,"tagId":20}
{"_id":{"$oid":"61aa3841291c0100017ee133"},"exerciseKey":"0bb0b3a7-ed1b-41c0-a93e-7187b2aa85a8","category":"QA","renderType":"md","title":"你知道哪些css模块化的方案？","desc":null,"options":null,"explanation":"目前主流的 css 模块化分为 css modules 和 css in js 两种方案。\n\n## css modules\n\n> CSS Modules 指的是我们像 import js 一样去引入我们的 css 代码，代码中的每一个类名都是引入对象的一个属性, 编译时会将 css 类名 加上唯一 hash。\n\ncss module 需要 webpack 配置 css-loader 或者 scss-loader , module 为 true\n\n```\n{\n    loader: 'css-loader',\n    options: {\n        modules: true, // 开启模块化\n        localIdentName: '[path][name]-[local]-[hash:base64:5]'\n    }\n}\n```\n\n### localIdentName\n\n介绍下 localIdentName 自定义生成的类名格式，可选参数有：\n\n* [path]表示样式表相对于项目根目录所在的路径(默认不拼接)\n* [name] 表示样式表文件名称\n* [local] 表示样式表的类名定义名称\n* [hash:length] 表示 32 位的 hash 值\n\n注意：只有类名选择器和 ID 选择器才会被模块化控制，类似 `body`、`h2`、`span` 这些标签选择器不会被模块化控制。\n\n### css module 作用域\n\n* 作用域默认为 local 即只在当前模块生效\n* global：被 `:global` 包裹起来的类名，不会被模块化\n\n```css\n/* 加上 :global 会全局样式 */\n:global(.global-color) {\n  color: blue;\n  :global(.common-width) {\n    width: 200px;\n  }\n}\n```\n\n### css module 高级使用\n\n* 和外部样式混用\n\n```js\nimport classNames from 'classnames';\n\n// 使用classNames\nconst wrapperClassNames = classNames({\n  'common-show': visible,\n  'common-hide': !visible,\n  [styles1['view-wrapper']]: true\n});\n<div className={wrapperClassNames}></div>;\n\n// 使用模板字符串\n<div className={`${styles1.content} ${styles1.color} common-show`}>\n  我是文章内容我是文章内容我是文章内容我是文章内容我是文章内容我是文章内容\n</div>;\n```\n\n* 覆盖第三方 UI 库\n\n```\n{/* 覆盖第三方UI库 样式*/}\n<div className={styles1['am-button-custom-wrapper']}>\n  <Button type={'primary'} onClick={() => toggle()}>\n     {visible ? '隐藏' : '显示'}\n  </Button>\n</div>\n\n//  覆盖第三方UI库的 样式\n.am-button-custom-wrapper {\n  :global {\n    .am-button-primary {\n      color: red;\n    }\n  }\n}\n```\n\n## css in js\n\nCSS-in-JS是一种技术（technique），而不是一个具体的库实现（library）。\n\n简单来说CSS-in-JS就是将应用的CSS样式写在JavaScript文件里面，而不是独立为一些.css，.scss或者less之类的文件，这样你就可以在CSS中使用一些属于JS的诸如模块声明，变量定义，函数调用和条件判断等语言特性来提供灵活的可扩展的样式定义。\n\n值得一提的是，虽然CSS-in-JS不是一种很新的技术，它当初的出现是因为一些component-based的Web框架（例如React，Vue和Angular）的逐渐流行，使得开发者也想将组件的CSS样式也一块封装到组件中去以解决原生CSS写法的一系列问题。\n\n还有就是CSS-in-JS在React社区的热度是最高的，这是因为React本身不会管用户怎么去为组件定义样式的问题，而Vue和Angular都有属于框架自己的一套定义样式的方案。\n\n实现了CSS-in-JS的库有很多，虽然每个库解决的问题都差不多，可是它们的实现方法和语法却大相径庭。\n\n从实现方法上区分大体分为两种：唯一CSS选择器和内联样式（Unique Selector VS Inline Styles）。\n\n接下来我们来分别看一下对应于这两种实现方式的两个比较有代表性的实现：styled-components和radium。\n\n### Styled-components\n\n通过styled-components，你可以使用ES6的标签模板字符串语法（Tagged Templates）为需要styled的Component定义一系列CSS属性，当该组件的JS代码被解析执行的时候，styled-components会动态生成一个CSS选择器，并把对应的CSS样式通过style标签的形式插入到head标签里面。\n\n动态生成的CSS选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突。\n\n```jsx\nconst DivWrapper = styled.div`\n  width: '100%';\n  height: 300;\n  background-color: ${(props) => props.color};\n`;\n\n// 封装第三方组件库\nconst AntdButtonWrapper = styled(Button)`\n  color: 'red';\n`;\n\n// 通过属性动态定义样式\nconst MyButton = styled.button`\n  background: ${(props) => (props.primary ? 'palevioletred' : 'white')};\n  color: ${(props) => (props.primary ? 'white' : 'palevioletred')};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// 样式复用\nconst TomatoButton = styled(MyButton)`\n  color: tomato;\n  border-color: tomato;\n`;\n\n// 创建关键帧\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n  `;\n\n// 创建动画组件\nconst Rotate = styled.div`\n  display: inline-block;\n  animation: ${rotate} 2s linear infinite;\n  padding: 2rem 1rem;\n  font-size: 1.2rem;\n`;\n```\n\nstyled-components 优势: 支持将 props 以插值的方式传递给组件,以调整组件样式, 跨平台可在 RN 和 next 中使用。 缺点： 预处理器和后处理器不兼容。\n\n### Radium\n\nRadium和styled-components的最大区别是它生成的是标签内联样式（inline styles）。\n\n由于标签内联样式在处理诸如media query以及:hover，:focus，:active等和浏览器状态相关的样式的时候非常不方便，所以radium为这些样式封装了一些标准的接口以及抽象。\n\n```jsx\nimport Radium from 'radium';\n\nconst Button = () => (\n    <button\n        style={styles.base}>\n        {this.props.children}\n    </button>;\n)\n\nvar styles = {\n  red: {\n    backgroundColor: 'red'\n  }\n};\n\nButton = Radium(Button);\n```\n\n内联样式相比于CSS选择器的方法有以下的优点： \n\n* 自带局部样式作用域的效果，无需额外的操作\n* 内联样式的权重（specificity）是最高的，可以避免权重冲突的烦恼 \n* 由于样式直接写在HTML中，十分方便开发者调试","level":3,"tagId":11}
{"_id":{"$oid":"61aa3841c2d0220001c963fc"},"exerciseKey":"0bd0c9bd-9e5f-47af-8a7d-3ba7aaa28dcd","category":"QA","renderType":"md","title":"typeof NaN 的结果是什么？","desc":null,"options":null,"explanation":"NaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n\n```js\ntypeof NaN; // \"number\"\n```\n\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。","level":0.5,"tagId":10}
{"_id":{"$oid":"61aa38438e97d90001808666"},"exerciseKey":"13232ee2-18b7-45a3-a633-c796611934e8","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst name = \"Lydia Hallie\";\n\nconsole.log(!typeof name === \"object\");\nconsole.log(!typeof name === \"string\");\n```","options":"{\"options\":[\"false true\",\"true false\",\"false false\",\"true true\"],\"isMulti\":false,\"answer\":[2]}","explanation":"`typeof name` 返回 `\"string\"`。字符串 `\"string\"` 是一个 truthy 的值，因此 `!typeof name` 返回一个布尔值 `false`。 `false === \"object\"` 和 `false === \"string\"` 都返回 `false`。\n（如果我们想检测一个值的类型，我们应该用 `!==` 而不是 `!typeof`）","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38440d111e00010371cc"},"exerciseKey":"16026c51-5821-4251-8d0c-374eac4dedf8","category":"QA","renderType":"md","title":"说说对git pull 和 git fetch 的理解？有什么区别？","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/cc90c050-fac2-11eb-991d-334fd31f0201.png)\n\n\n\n## 一、是什么\n先回顾两个命令的定义\n- git fetch 命令用于从另一个存储库下载对象和引用\n- git pull 命令用于从另一个存储库或本地分支获取并集成(整合)\n\n再来看一次`git`的工作流程图，如下所示：\n\n ![](https://static.vue-js.com/d523ba60-fac2-11eb-991d-334fd31f0201.png)\n\n可以看到，`git fetch`是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中\n\n而`git pull` 则是将远程主机的最新内容拉下来后直接合并，即：`git pull = git fetch + git merge`，这样可能会产生冲突，需要手动解决\n\n在我们本地的`git`文件中对应也存储了`git`本地仓库分支的`commit ID `和 跟踪的远程分支的`commit ID`，对应文件如下：\n\n-  .git/refs/head/[本地分支]\n-  .git/refs/remotes/[正在跟踪的分支]\n\n使用 `git fetch`更新代码，本地的库中`master`的`commitID`不变\n\n但是与`git`上面关联的那个`orign/master`的`commit ID`发生改变\n\n这时候我们本地相当于存储了两个代码的版本号，我们还要通过`merge`去合并这两个不同的代码版本\n\n ![](https://static.vue-js.com/fd23ff70-fb12-11eb-bc6f-3f06e1491664.png)\n\n也就是`fetch`的时候本地的`master`没有变化，但是与远程仓关联的那个版本号被更新了，接下来就是在本地`merge`合并这两个版本号的代码\n\n相比之下，使用`git pull`就更加简单粗暴，会将本地的代码更新至远程仓库里面最新的代码版本，如下图：\n\n ![](https://static.vue-js.com/091b8140-fb13-11eb-bc6f-3f06e1491664.png)\n\n\n\n\n\n## 二、用法\n\n一般远端仓库里有新的内容更新，当我们需要把新内容下载的时候，就使用到`git pull`或者`git fetch`命令\n\n### fetch\n\n用法如下：\n\n```cmd\ngit fetch <远程主机名> <远程分支名>:<本地分支名>\n```\n\n例如从远程的`origin`仓库的`master`分支下载代码到本地并新建一个`temp`分支\n\n```cmd\ngit fetch origin master:temp\n```\n\n如果上述没有冒号，则表示将远程`origin`仓库的`master`分支拉取下来到本地当前分支\n\n这里`git fetch`不会进行合并，执行后需要手动执行`git merge`合并，如下：\n\n```cmd\ngit merge temp\n```\n\n\n\n### pull\n\n两者的用法十分相似，`pull`用法如下：\n\n```cmd\ngit pull <远程主机名> <远程分支名>:<本地分支名>\n```\n\n例如将远程主机`origin`的`master`分支拉取过来，与本地的`branchtest`分支合并，命令如下：\n\n```cmd\ngit pull origin master:branchtest\n```\n\n同样如果上述没有冒号，则表示将远程`origin`仓库的`master`分支拉取下来与本地当前分支合并\n\n\n\n## 三、区别\n\n相同点：\n\n- 在作用上他们的功能是大致相同的，都是起到了更新代码的作用\n\n不同点：\n\n- git pull是相当于从远程仓库获取最新版本，然后再与本地分支merge，即git pull = git fetch + git merge\n- 相比起来，git fetch 更安全也更符合实际要求，在 merge 前，我们可以查看更新情况，根据实际情况再决定是否合并\n","level":3,"tagId":29}
{"_id":{"$oid":"61aa38453976eb00014e4469"},"exerciseKey":"19448048-9bd0-46ba-9cf4-3946003a83df","category":"QA","renderType":"md","title":"实现AJAX","desc":null,"options":null,"explanation":"```js\nconst getJSON = function(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Mscrosoft.XMLHttp');\n    xhr.open('GET', url, false);\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState !== 4) return;\n      if (xhr.status === 200 || xhr.status === 304) {\n        resolve(xhr.responseText);\n      } else {\n        reject(new Error(xhr.responseText));\n      }\n    }\n    xhr.send();\n  })\n}\n\n```\n","level":2,"tagId":26}
{"_id":{"$oid":"61aa384c3d5f3a0001af5538"},"exerciseKey":"321642db-58ca-47ab-9d2a-9cebc24a9bb1","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst animals = {};\nlet dog = { emoji: '🐶' }\nlet cat = { emoji: '🐈' }\n\nanimals[dog] = { ...dog, name: \"Mara\" }\nanimals[cat] = { ...cat, name: \"Sara\" }\n\nconsole.log(animals[dog])\n```","options":"{\"options\":[\"{ emoji: \\\"🐶\\\", name: \\\"Mara\\\" }\",\"{ emoji: \\\"🐈\\\", name: \\\"Sara\\\" }\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"对象的键会被转换为字符串。\n因为  `dog` 的值是一个对象，   `animals[dog]` 实际上意味着我们创建了一个叫做 `\"object Object\"` 的属性来代表新的对象。  `animals[\"object Object\"]` 现在等于 `{ emoji: \"🐶\", name: \"Mara\"}`。\n`cat` 也是一个对象，`animals[cat]` 实际上意味着我们在用新的cat的属性覆盖  `animals[``\"``object Object``\"``]` 的值。\n打印  `animals[dog]`，实际上是`animals[\"object Object\"]`，这是因为转化`dog`对象为一个字符串结果 `\"object Object\"` ，所以返回 `{ emoji: \"🐈\", name: \"Sara\" }`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384cb804f8000122aa19"},"exerciseKey":"32a7006f-143a-4490-baf1-c903f98d826b","category":"QA","renderType":"md","title":"使用 useState （const [test, setTest] = useState([])）是，为什么连续调用 setTest({...test, newValue}) 会出现值的丢失？","desc":null,"options":null,"explanation":"useState是异步执行的，也就是执行 setTest 后，不会立即更新 test 的结果，多次调用时，出现了值覆盖的情况。\n\n如果本次的状态更新依赖于上一次最近的状态更新，那么我们可以给 setTest 传递一个函数进去，函数的参数即为最后一次更新的状态的值：\n\n```react\nsetTest(prevState => ([\n\t...prevState,\n    newValue\n]))\n```","level":3,"tagId":13}
{"_id":{"$oid":"61aa384e34458700017f1c2f"},"exerciseKey":"3804a9d9-03c0-4588-b696-1068d745c7b9","category":"QA","renderType":"md","title":"说说你对immutable的理解？如何应用在react项目中？","desc":null,"options":null,"explanation":"## 一、是什么\n\nImmutable，不可改变的，在计算机中，即指一旦创建，就不能再被更改的数据\n\n对 `Immutable `对象的任何修改或添加删除操作都会返回一个新的 `Immutable `对象\n\n`Immutable` 实现的原理是 `Persistent Data Structure`（持久化数据结构）:\n\n- 用一种数据结构来保存数据\n- 当数据被修改时，会返回一个对象，但是新的对象会尽可能的利用之前的数据结构而不会对内存造成浪费\n\n也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变，同时为了避免 `deepCopy `把所有节点都复制一遍带来的性能损耗，`Immutable` 使用了 `Structural Sharing`（结构共享）\n\n如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享\n\n如下图所示：\n\n![](https://pic4.zhimg.com/80/2b4c801a7b40eefcd4ee6767fb984fdf_720w.gif)\n\n\n\n## 二、如何使用\n\n使用`Immutable`对象最主要的库是`immutable.js`\n\nimmutable.js 是一个完全独立的库，无论基于什么框架都可以用它\n\n其出现场景在于弥补 Javascript 没有不可变数据结构的问题，通过 structural sharing来解决的性能问题\n\n内部提供了一套完整的 Persistent Data Structure，还有很多易用的数据类型，如`Collection`、`List`、`Map`、`Set`、`Record`、`Seq`，其中：\n\n- List: 有序索引集，类似 JavaScript 中的 Array\n\n- Map: 无序索引集，类似 JavaScript 中的 Object\n\n- Set: 没有重复值的集合\n\n\n\n主要的方法如下：\n\n- fromJS()：将一个js数据转换为Immutable类型的数据\n\n```js\nconst obj = Immutable.fromJS({a:'123',b:'234'})\n```\n\n- toJS()：将一个Immutable数据转换为JS类型的数据\n- is()：对两个对象进行比较\n\n```js\nimport { Map, is } from 'immutable'\nconst map1 = Map({ a: 1, b: 1, c: 1 })\nconst map2 = Map({ a: 1, b: 1, c: 1 })\nmap1 === map2   //false\nObject.is(map1, map2) // false\nis(map1, map2) // true\n```\n\n- get(key)：对数据或对象取值\n\n- getIn([]) ：对嵌套对象或数组取值，传参为数组，表示位置\n\n```js\nlet abs = Immutable.fromJS({a: {b:2}});\nabs.getIn(['a', 'b']) // 2\nabs.getIn(['a', 'c']) // 子级没有值\n\nlet arr = Immutable.fromJS([1 ,2, 3, {a: 5}]);\narr.getIn([3, 'a']); // 5\narr.getIn([3, 'c']); // 子级没有值\n```\n\n- \n\n如下例子：使用方法如下：\n\n```js\nimport Immutable from 'immutable';\nfoo = Immutable.fromJS({a: {b: 1}});\nbar = foo.setIn(['a', 'b'], 2);   // 使用 setIn 赋值\nconsole.log(foo.getIn(['a', 'b']));  // 使用 getIn 取值，打印 1\nconsole.log(foo === bar);  //  打印 false\n```\n\n如果换到原生的`js`，则对应如下：\n\n```js\nlet foo = {a: {b: 1}};\nlet bar = foo;\nbar.a.b = 2;\nconsole.log(foo.a.b);  // 打印 2\nconsole.log(foo === bar);  //  打印 true\n```\n\n\n\n## 三、在React中应用\n\n使用 `Immutable `可以给 `React` 应用带来性能的优化，主要体现在减少渲染的次数\n\n在做`react`性能优化的时候，为了避免重复渲染，我们会在`shouldComponentUpdate()`中做对比，当返回`true`执行`render`方法\n\n`Immutable`通过`is`方法则可以完成对比，而无需像一样通过深度比较的方式比较\n\n在使用`redux`过程中也可以结合`Immutable`，不使用`Immutable`前修改一个数据需要做一个深拷贝\n\n```jsx\nimport '_' from 'lodash';\n\nconst Component = React.createClass({\n  getInitialState() {\n    return {\n      data: { times: 0 }\n    }\n  },\n  handleAdd() {\n    let data = _.cloneDeep(this.state.data);\n    data.times = data.times + 1;\n    this.setState({ data: data });\n  }\n}\n```\n\n使用 Immutable 后：\n\n```jsx\ngetInitialState() {\n  return {\n    data: Map({ times: 0 })\n  }\n},\n  handleAdd() {\n    this.setState({ data: this.state.data.update('times', v => v + 1) });\n    // 这时的 times 并不会改变\n    console.log(this.state.data.get('times'));\n  }\n```\n\n同理，在`redux`中也可以将数据进行`fromJS`处理\n\n```js\nimport * as constants from './constants'\nimport {fromJS} from 'immutable'\nconst defaultState = fromJS({ //将数据转化成immutable数据\n    home:true,\n    focused:false,\n    mouseIn:false,\n    list:[],\n    page:1,\n    totalPage:1\n})\nexport default(state=defaultState,action)=>{\n    switch(action.type){\n        case constants.SEARCH_FOCUS:\n            return state.set('focused',true) //更改immutable数据\n        case constants.CHANGE_HOME_ACTIVE:\n            return state.set('home',action.value)\n        case constants.SEARCH_BLUR:\n            return state.set('focused',false)\n        case constants.CHANGE_LIST:\n            // return state.set('list',action.data).set('totalPage',action.totalPage)\n            //merge效率更高，执行一次改变多个数据\n            return state.merge({\n                list:action.data,\n                totalPage:action.totalPage\n            })\n        case constants.MOUSE_ENTER:\n            return state.set('mouseIn',true)\n        case constants.MOUSE_LEAVE:\n            return state.set('mouseIn',false)\n        case constants.CHANGE_PAGE:\n            return state.set('page',action.page)\n        default:\n            return state\n    }\n}\n```\n","level":3,"tagId":13}
{"_id":{"$oid":"61aa384e85c5f70001542f12"},"exerciseKey":"393c70e6-3652-45e0-b1a9-d03eb27641b6","category":"QA","renderType":"md","title":"怎么进行移动端的调试？","desc":null,"options":null,"explanation":"* vConsole：Web 调试面板\n\nvConsole 会在你网页中加一个悬浮的小按钮，可以点击它来打开关闭调试面板，并查看 DOM、Console、Network和 本地存储 等信息。基本可以满足普通前端开发的需求。使用方法也很简单，通过npm安装或者直接在需要的页面引入 js文件 ，然后 new VConsole() 就可以了。\n\n*  Charles\n\nCharles 是一款强大的抓包工具，可以截取包括 https 在内的各种网络请求并方便的查看具体信息。有 Mac、Windows 和 Linux多版本，通过配置 WIFI 代理，也可以拦截手机发出的请求。毕竟前端相当一部分报错是网络错误或数据不符合预期导致的（甩锅后端😄）。所以通过拦截 http 请求,查看具体的请求信息和数据，能获取很多有用的信息，可以在一定程度上帮助 debug。\n\n* Chrome浏览器 + Android\n\n使用Chrome中的 Inspect，直接在PC端调试android机器中的webview的页面。\n\n* Mac + IOS + Safari\n\n方法基本同上\n","level":2.5,"tagId":29}
{"_id":{"$oid":"61aa384f0d111e0001037215"},"exerciseKey":"3bd8f12b-0050-4323-869c-4b63d7820276","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nlet name = 'Lydia'\n\nfunction getName() {\n  console.log(name)\n  let name = 'Sarah'\n}\n\ngetName()\n```","options":"{\"options\":[\"Lydia\",\"Sarah\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[3]}","explanation":"每个函数都有其自己的执行上下文。 `getName`函数首先在其自身的上下文（范围）内查找，以查看其是否包含我们尝试访问的变量`name`。 上述情况，`getName`函数包含其自己的`name`变量：我们用`let`关键字和`Sarah`的值声明变量`name`。\n带有`let`关键字（和`const`）的变量被提升，但是与`var`不同，它不会被***初始化***。 在我们声明（初始化）它们之前，无法访问它们。 这称为“暂时性死区”。 当我们尝试在声明变量之前访问变量时，JavaScript会抛出`ReferenceError: Cannot access 'name' before initialization`。\n如果我们不在`getName`函数中声明`name`变量，则javascript引擎会查看原型链。会找到其外部作用域有一个名为`name`的变量，其值为`Lydia`。 在这种情况下，它将打印`Lydia`：\n```javascript\nlet name = 'Lydia'\nfunction getName() {\n  console.log(name)\n}\ngetName() // Lydia\n```","level":1,"tagId":32}
{"_id":{"$oid":"61aa385034458700017f1c35"},"exerciseKey":"3cfca707-0c28-403b-bf3a-c2b892010ade","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst myPromise = Promise.resolve(Promise.resolve(\"Promise!\"));\n\nfunction funcOne() {\n\tmyPromise.then(res => res).then(res => console.log(res));\n\tsetTimeout(() => console.log(\"Timeout!\"), 0);\n\tconsole.log(\"Last line!\");\n}\n\nasync function funcTwo() {\n\tconst res = await myPromise;\n\tconsole.log(await res);\n\tsetTimeout(() => console.log(\"Timeout!\"), 0);\n\tconsole.log(\"Last line!\");\n}\n\nfuncOne();\nfuncTwo();\n```","options":"{\"options\":[\"Promise! Last line! Promise! Last line! Last line! Promise!\",\"Last line! Timeout! Promise! Last line! Timeout! Promise!\",\"Promise! Last line! Last line! Promise! Timeout! Timeout!\",\"Last line! Promise! Promise! Last line! Timeout! Timeout!\"],\"isMulti\":false,\"answer\":[3]}","explanation":"首先，我们调用 `funcOne`。在函数 `funcOne` 的第一行，我们调用`myPromise` promise _异步操作_。当JS引擎在忙于执行 promise，它继续执行函数 `funcOne`。下一行 _异步操作_ `setTimeout`，其回调函数被 Web API 调用。 (详情请参考我关于event loop的文章.)\npromise 和 timeout 都是异步操作，函数继续执行当JS引擎忙于执行promise 和 处理 `setTimeout` 的回调。相当于 `Last line!` 首先被输出， 因为它不是异步操作。执行完 `funcOne` 的最后一行，promise 状态转变为 resolved，`Promise!` 被打印。然而，因为我们调用了 `funcTwo()`, 调用栈不为空，`setTimeout` 的回调仍不能入栈。\n我们现在处于 `funcTwo`，先 _awaiting_ myPromise。通过 `await` 关键字， 我们暂停了函数的执行直到 promise 状态变为 resolved (或 rejected)。然后，我们输出 `res` 的 awaited 值（因为 promise 本身返回一个 promise）。 接着输出 `Promise!`。\n下一行就是 _异步操作_ `setTimeout`，其回调函数被 Web API 调用。\n我们执行到函数 `funcTwo` 的最后一行，输出 `Last line!`。现在，因为 `funcTwo` 出栈，调用栈为空。在事件队列中等待的回调函数（`() => console.log(\"Timeout!\")` from `funcOne`, and `() => console.log(\"Timeout!\")` from `funcTwo`）以此入栈。第一个回调输出 `Timeout!`，并出栈。然后，第二个回调输出 `Timeout!`，并出栈。得到结果 `Last line! Promise! Promise! Last line! Timeout! Timeout!`","level":1,"tagId":32}
{"_id":{"$oid":"61aa385191a75000018d2c8e"},"exerciseKey":"41132096-4901-45d1-a453-6119931a083e","category":"QA","renderType":"md","title":"Vue实例挂载的过程中发生了什么？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/63194810-3a09-11eb-85f6-6fac77c0c9b3.png)\n \n\n## 一、思考\n\n我们都听过知其然知其所以然这句话\n\n那么不知道大家是否思考过`new Vue()`这个过程中究竟做了些什么？\n\n过程中是如何完成数据的绑定，又是如何将数据渲染到视图的等等\n\n## 一、分析\n\n首先找到`vue`的构造函数\n\n源码位置：src\\core\\instance\\index.js\n\n```js\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n```\n\n`options`是用户传递过来的配置项，如`data、methods`等常用的方法\n\n`vue`构建函数调用`_init`方法，但我们发现本文件中并没有此方法，但仔细可以看到文件下方定定义了很多初始化方法\n\n```js\ninitMixin(Vue);     // 定义 _init\nstateMixin(Vue);    // 定义 $set $get $delete $watch 等\neventsMixin(Vue);   // 定义事件  $on  $once $off $emit\nlifecycleMixin(Vue);// 定义 _update  $forceUpdate  $destroy\nrenderMixin(Vue);   // 定义 _render 返回虚拟dom\n```\n\n首先可以看`initMixin`方法，发现该方法在`Vue`原型上定义了`_init`方法\n\n源码位置：src\\core\\instance\\init.js\n\n```js\nVue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n    let startTag, endTag\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = `vue-perf-start:${vm._uid}`\n      endTag = `vue-perf-end:${vm._uid}`\n      mark(startTag)\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true\n    // merge options\n    // 合并属性，判断初始化的是否是组件，这里合并主要是 mixins 或 extends 的方法\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else { // 合并vue属性\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // 初始化proxy拦截器\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n    // expose real self\n    vm._self = vm\n    // 初始化组件生命周期标志位\n    initLifecycle(vm)\n    // 初始化组件事件侦听\n    initEvents(vm)\n    // 初始化渲染方法\n    initRender(vm)\n    callHook(vm, 'beforeCreate')\n    // 初始化依赖注入内容，在初始化data、props之前\n    initInjections(vm) // resolve injections before data/props\n    // 初始化props/data/method/watch/methods\n    initState(vm)\n    initProvide(vm) // resolve provide after data/props\n    callHook(vm, 'created')\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false)\n      mark(endTag)\n      measure(`vue ${vm._name} init`, startTag, endTag)\n    }\n    // 挂载元素\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el)\n    }\n  }\n```\n\n仔细阅读上面的代码，我们得到以下结论：\n\n- 在调用`beforeCreate`之前，数据初始化并未完成，像`data`、`props`这些属性无法访问到\n\n- 到了`created`的时候，数据已经初始化完成，能够访问`data`、`props`这些属性，但这时候并未完成`dom`的挂载，因此无法访问到`dom`元素\n- 挂载方法是调用`vm.$mount`方法\n\n`initState`方法是完成`props/data/method/watch/methods`的初始化\n\n源码位置：src\\core\\instance\\state.js\n\n```js\nexport function initState (vm: Component) {\n  // 初始化组件的watcher列表\n  vm._watchers = []\n  const opts = vm.$options\n  // 初始化props\n  if (opts.props) initProps(vm, opts.props)\n  // 初始化methods方法\n  if (opts.methods) initMethods(vm, opts.methods)\n  if (opts.data) {\n    // 初始化data  \n    initData(vm)\n  } else {\n    observe(vm._data = {}, true /* asRootData */)\n  }\n  if (opts.computed) initComputed(vm, opts.computed)\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n```\n\n我们和这里主要看初始化`data`的方法为`initData`，它与`initState`在同一文件上\n\n```js\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  // 获取到组件上的data\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {}\n  if (!isPlainObject(data)) {\n    data = {}\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    )\n  }\n  // proxy data on instance\n  const keys = Object.keys(data)\n  const props = vm.$options.props\n  const methods = vm.$options.methods\n  let i = keys.length\n  while (i--) {\n    const key = keys[i]\n    if (process.env.NODE_ENV !== 'production') {\n      // 属性名不能与方法名重复\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          `Method \"${key}\" has already been defined as a data property.`,\n          vm\n        )\n      }\n    }\n    // 属性名不能与state名称重复\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        `The data property \"${key}\" is already declared as a prop. ` +\n        `Use prop default value instead.`,\n        vm\n      )\n    } else if (!isReserved(key)) { // 验证key值的合法性\n      // 将_data中的数据挂载到组件vm上,这样就可以通过this.xxx访问到组件上的数据\n      proxy(vm, `_data`, key)\n    }\n  }\n  // observe data\n  // 响应式监听data是数据的变化\n  observe(data, true /* asRootData */)\n}\n```\n\n仔细阅读上面的代码，我们可以得到以下结论：\n\n- 初始化顺序：`props`、`methods`、`data`\n\n- `data`定义的时候可选择函数形式或者对象形式（组件只能为函数形式）\n\n关于数据响应式在这就不展开详细说明\n\n上文提到挂载方法是调用`vm.$mount`方法\n\n源码位置：\n\n```js\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  // 获取或查询元素\n  el = el && query(el)\n\n  /* istanbul ignore if */\n  // vue 不允许直接挂载到body或页面文档上\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    let template = options.template\n    // 存在template模板，解析vue模板文件\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      // 通过选择器获取元素内容\n      template = getOuterHTML(el)\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile')\n      }\n      /**\n       *  1.将temmplate解析ast tree\n       *  2.将ast tree转换成render语法字符串\n       *  3.生成render方法\n       */\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        outputSourceRange: process.env.NODE_ENV !== 'production',\n        shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end')\n        measure(`vue ${this._name} compile`, 'compile', 'compile end')\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n}\n```\n\n阅读上面代码，我们能得到以下结论：\n\n- 不要将根元素放到`body`或者`html`上\n\n- 可以在对象中定义`template/render`或者直接使用`template`、`el`表示元素选择器\n\n- 最终都会解析成`render`函数，调用`compileToFunctions`，会将`template`解析成`render`函数\n\n对`template`的解析步骤大致分为以下几步：\n\n- 将`html`文档片段解析成`ast`描述符\n\n- 将`ast`描述符解析成字符串\n\n- 生成`render`函数\n\n\n\n生成`render`函数，挂载到`vm`上后，会再次调用`mount`方法\n\n源码位置：src\\platforms\\web\\runtime\\index.js\n\n```js\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  // 渲染组件\n  return mountComponent(this, el, hydrating)\n}\n```\n\n调用`mountComponent`渲染组件\n\n```js\nexport function mountComponent (\n  vm: Component,\n  el: ?Element,\n  hydrating?: boolean\n): Component {\n  vm.$el = el\n  // 如果没有获取解析的render函数，则会抛出警告\n  // render是解析模板文件生成的\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        )\n      } else {\n        // 没有获取到vue的模板文件\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        )\n      }\n    }\n  }\n  // 执行beforeMount钩子\n  callHook(vm, 'beforeMount')\n\n  let updateComponent\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = () => {\n      const name = vm._name\n      const id = vm._uid\n      const startTag = `vue-perf-start:${id}`\n      const endTag = `vue-perf-end:${id}`\n\n      mark(startTag)\n      const vnode = vm._render()\n      mark(endTag)\n      measure(`vue ${name} render`, startTag, endTag)\n\n      mark(startTag)\n      vm._update(vnode, hydrating)\n      mark(endTag)\n      measure(`vue ${name} patch`, startTag, endTag)\n    }\n  } else {\n    // 定义更新函数\n    updateComponent = () => {\n      // 实际调⽤是在lifeCycleMixin中定义的_update和renderMixin中定义的_render\n      vm._update(vm._render(), hydrating)\n    }\n  }\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  // 监听当前组件状态，当有数据变化时，更新组件\n  new Watcher(vm, updateComponent, noop, {\n    before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        // 数据更新引发的组件更新\n        callHook(vm, 'beforeUpdate')\n      }\n    }\n  }, true /* isRenderWatcher */)\n  hydrating = false\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true\n    callHook(vm, 'mounted')\n  }\n  return vm\n}\n```\n\n阅读上面代码，我们得到以下结论：\n\n- 会触发`boforeCreate`钩子\n- 定义`updateComponent`渲染页面视图的方法\n- 监听组件数据，一旦发生变化，触发`beforeUpdate`生命钩子\n\n`updateComponent`方法主要执行在`vue`初始化时声明的`render`，`update`方法\n\n`render`的作用主要是生成`vnode`\n\n源码位置：src\\core\\instance\\render.js\n\n```js\n// 定义vue 原型上的render方法\nVue.prototype._render = function (): VNode {\n    const vm: Component = this\n    // render函数来自于组件的option\n    const { render, _parentVnode } = vm.$options\n\n    if (_parentVnode) {\n        vm.$scopedSlots = normalizeScopedSlots(\n            _parentVnode.data.scopedSlots,\n            vm.$slots,\n            vm.$scopedSlots\n        )\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode\n    // render self\n    let vnode\n    try {\n        // There's no need to maintain a stack because all render fns are called\n        // separately from one another. Nested component's render fns are called\n        // when parent component is patched.\n        currentRenderingInstance = vm\n        // 调用render方法，自己的独特的render方法， 传入createElement参数，生成vNode\n        vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n        handleError(e, vm, `render`)\n        // return error render result,\n        // or previous vnode to prevent render error causing blank component\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n            try {\n                vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n            } catch (e) {\n                handleError(e, vm, `renderError`)\n                vnode = vm._vnode\n            }\n        } else {\n            vnode = vm._vnode\n        }\n    } finally {\n        currentRenderingInstance = null\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n        vnode = vnode[0]\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n        if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n            warn(\n                'Multiple root nodes returned from render function. Render function ' +\n                'should return a single root node.',\n                vm\n            )\n        }\n        vnode = createEmptyVNode()\n    }\n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n}\n```\n\n`_update`主要功能是调用`patch`，将`vnode`转换为真实`DOM`，并且更新到页面中\n\n源码位置：src\\core\\instance\\lifecycle.js\n\n```js\nVue.prototype._update = function (vnode: VNode, hydrating?: boolean) {\n    const vm: Component = this\n    const prevEl = vm.$el\n    const prevVnode = vm._vnode\n    // 设置当前激活的作用域\n    const restoreActiveInstance = setActiveInstance(vm)\n    vm._vnode = vnode\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      // 执行具体的挂载逻辑\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n    restoreActiveInstance()\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  }\n```\n\n\n\n## 三、结论\n\n- `new Vue`的时候调用会调用`_init`方法\n  - 定义 `$set`、` $get` 、`$delete`、`$watch` 等方法\n  - 定义 `$on`、`$off`、`$emit`、`$off `等事件\n  - 定义 `_update`、`$forceUpdate`、`$destroy`生命周期\n\n- 调用`$mount`进行页面的挂载\n- 挂载的时候主要是通过`mountComponent`方法\n- 定义`updateComponent`更新函数\n- 执行`render`生成虚拟`DOM`\n- `_update`将虚拟`DOM`生成真实`DOM`结构，并且渲染到页面中\n\n\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa385191a75000018d2c90"},"exerciseKey":"4232c372-316f-4a53-99b9-6d9299b7e91f","category":"QA","renderType":"md","title":"ES6中新增的Set、Map两种数据结构怎么理解?","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/2b947d00-560c-11eb-85f6-6fac77c0c9b3.png)\n\n如果要用一句来描述，我们可以说\n\n`Set`是一种叫做集合的数据结构，`Map`是一种叫做字典的数据结构\n\n什么是集合？什么又是字典？\n\n- 集合  \n是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合\n\n- 字典   \n是一些元素的集合。每个元素有一个称作key 的域，不同元素的key 各不相同\n\n区别？\n\n- 共同点：集合、字典都可以存储不重复的值\n- 不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储\n\n## 一、Set\n\n` Set`是`es6`新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合\n\n`Set`本身是一个构造函数，用来生成 Set 数据结构\n\n```js\nconst s = new Set();\n```\n\n\n\n### 增删改查\n\n`Set`的实例关于增删改查的方法：\n\n- add()\n- delete()\n\n- has()\n- clear()\n\n### add()\n\n添加某个值，返回 `Set` 结构本身\n\n当添加实例中已经存在的元素，`set`不会进行处理添加\n\n```js\ns.add(1).add(2).add(2); // 2只被添加了一次\n```\n\n### delete()\n\n删除某个值，返回一个布尔值，表示删除是否成功\n\n```js\ns.delete(1)\n```\n\n### has()\n\n返回一个布尔值，判断该值是否为`Set`的成员\n\n```js\ns.has(2)\n```\n\n### clear()\n\n清除所有成员，没有返回值\n\n```js\ns.clear()\n```\n\n\n\n### 遍历\n\n`Set`实例遍历的方法有如下：\n\n关于遍历的方法，有如下：\n\n- keys()：返回键名的遍历器\n- values()：返回键值的遍历器\n- entries()：返回键值对的遍历器\n- forEach()：使用回调函数遍历每个成员\n\n`Set`的遍历顺序就是插入顺序\n\n`keys`方法、`values`方法、`entries`方法返回的都是遍历器对象\n\n```javascript\nlet set = new Set(['red', 'green', 'blue']);\n\nfor (let item of set.keys()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.values()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.entries()) {\n  console.log(item);\n}\n// [\"red\", \"red\"]\n// [\"green\", \"green\"]\n// [\"blue\", \"blue\"]\n```\n\n`forEach()`用于对每个成员执行某种操作，没有返回值，键值、键名都相等，同样的`forEach`方法有第二个参数，用于绑定处理函数的`this`\n\n```javascript\nlet set = new Set([1, 4, 9]);\nset.forEach((value, key) => console.log(key + ' : ' + value))\n// 1 : 1\n// 4 : 4\n// 9 : 9\n```\n\n扩展运算符和` Set` 结构相结合实现数组或字符串去重\n\n```javascript\n// 数组\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)]; // [3, 5, 2]\n\n// 字符串\nlet str = \"352255\";\nlet unique = [...new Set(str)].join(\"\"); // \"\"\n```\n\n实现并集、交集、和差集\n\n```javascript\nlet a = new Set([1, 2, 3]);\nlet b = new Set([4, 3, 2]);\n\n// 并集\nlet union = new Set([...a, ...b]);\n// Set {1, 2, 3, 4}\n\n// 交集\nlet intersect = new Set([...a].filter(x => b.has(x)));\n// set {2, 3}\n\n// （a 相对于 b 的）差集\nlet difference = new Set([...a].filter(x => !b.has(x)));\n// Set {1}\n```\n\n\n\n## 二、Map\n\n`Map`类型是键值对的有序列表，而键和值都可以是任意类型\n\n`Map`本身是一个构造函数，用来生成 `Map` 数据结构\n\n```js\nconst m = new Map()\n```\n\n\n\n### 增删改查\n\n`Map` 结构的实例针对增删改查有以下属性和操作方法：\n\n- size 属性\n- set()\n- get()\n- has()\n- delete()\n- clear()\n\n### size\n\n`size`属性返回 Map 结构的成员总数。\n\n```javascript\nconst map = new Map();\nmap.set('foo', true);\nmap.set('bar', false);\n\nmap.size // 2\n```\n\n\n\n### set()\n\n设置键名`key`对应的键值为`value`，然后返回整个 Map 结构\n\n如果`key`已经有值，则键值会被更新，否则就新生成该键\n\n同时返回的是当前`Map`对象，可采用链式写法\n\n```javascript\nconst m = new Map();\n\nm.set('edition', 6)        // 键是字符串\nm.set(262, 'standard')     // 键是数值\nm.set(undefined, 'nah')    // 键是 undefined\nm.set(1, 'a').set(2, 'b').set(3, 'c') // 链式操作\n```\n\n\n\n### get()\n\n`get`方法读取`key`对应的键值，如果找不到`key`，返回`undefined`\n\n```javascript\nconst m = new Map();\n\nconst hello = function() {console.log('hello');};\nm.set(hello, 'Hello ES6!') // 键是函数\n\nm.get(hello)  // Hello ES6!\n```\n\n\n\n### has()\n\n`has`方法返回一个布尔值，表示某个键是否在当前 Map 对象之中\n\n```javascript\nconst m = new Map();\n\nm.set('edition', 6);\nm.set(262, 'standard');\nm.set(undefined, 'nah');\n\nm.has('edition')     // true\nm.has('years')       // false\nm.has(262)           // true\nm.has(undefined)     // true\n```\n\n\n\n### delete()\n\n`delete`方法删除某个键，返回`true`。如果删除失败，返回`false`\n\n```javascript\nconst m = new Map();\nm.set(undefined, 'nah');\nm.has(undefined)     // true\n\nm.delete(undefined)\nm.has(undefined)       // false\n```\n\n### clear()\n\n`clear`方法清除所有成员，没有返回值\n\n```javascript\nlet map = new Map();\nmap.set('foo', true);\nmap.set('bar', false);\n\nmap.size // 2\nmap.clear()\nmap.size // 0\n```\n\n\n\n### 遍历\n\n`Map `结构原生提供三个遍历器生成函数和一个遍历方法：\n\n- keys()：返回键名的遍历器\n- values()：返回键值的遍历器\n- entries()：返回所有成员的遍历器\n- forEach()：遍历 Map 的所有成员\n\n遍历顺序就是插入顺序\n\n```javascript\nconst map = new Map([\n  ['F', 'no'],\n  ['T',  'yes'],\n]);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n// \"F\"\n// \"T\"\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n// \"no\"\n// \"yes\"\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n// \"F\" \"no\"\n// \"T\" \"yes\"\n\n// 或者\nfor (let [key, value] of map.entries()) {\n  console.log(key, value);\n}\n// \"F\" \"no\"\n// \"T\" \"yes\"\n\n// 等同于使用map.entries()\nfor (let [key, value] of map) {\n  console.log(key, value);\n}\n// \"F\" \"no\"\n// \"T\" \"yes\"\n\nmap.forEach(function(value, key, map) {\n  console.log(\"Key: %s, Value: %s\", key, value);\n});\n```\n\n## 三、WeakSet 和 WeakMap\n\n### WeakSet\n\n创建`WeakSet`实例\n\n```js\nconst ws = new WeakSet();\n```\n\n`WeakSet `可以接受一个具有 `Iterable `接口的对象作为参数\n\n```js\nconst a = [[1, 2], [3, 4]];\nconst ws = new WeakSet(a);\n// WeakSet {[1, 2], [3, 4]}\n```\n\n在`API`中`WeakSet`与`Set`有两个区别：\n\n- 没有遍历操作的`API`\n- 没有`size`属性\n\n`WeackSet`只能成员只能是引用类型，而不能是其他类型的值\n\n```js\nlet ws=new WeakSet();\n\n// 成员不是引用类型\nlet weakSet=new WeakSet([2,3]);\nconsole.log(weakSet) // 报错\n\n// 成员为引用类型\nlet obj1={name:1}\nlet obj2={name:1}\nlet ws=new WeakSet([obj1,obj2]); \nconsole.log(ws) //WeakSet {{…}, {…}}\n```\n\n`WeakSet `里面的引用只要在外部消失，它在 `WeakSet `里面的引用就会自动消失\n\n\n\n### WeakMap\n\n`WeakMap`结构与`Map`结构类似，也是用于生成键值对的集合\n\n在`API`中`WeakMap`与`Map`有两个区别：\n\n- 没有遍历操作的`API`\n- 没有`clear`清空方法\n\n```javascript\n// WeakMap 可以使用 set 方法添加成员\nconst wm1 = new WeakMap();\nconst key = {foo: 1};\nwm1.set(key, 2);\nwm1.get(key) // 2\n\n// WeakMap 也可以接受一个数组，\n// 作为构造函数的参数\nconst k1 = [1, 2, 3];\nconst k2 = [4, 5, 6];\nconst wm2 = new WeakMap([[k1, 'foo'], [k2, 'bar']]);\nwm2.get(k2) // \"bar\"\n```\n\n`WeakMap`只接受对象作为键名（`null`除外），不接受其他类型的值作为键名\n\n```javascript\nconst map = new WeakMap();\nmap.set(1, 2)\n// TypeError: 1 is not an object!\nmap.set(Symbol(), 2)\n// TypeError: Invalid value used as weak map key\nmap.set(null, 2)\n// TypeError: Invalid value used as weak map key\n```\n\n`WeakMap`的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失，不用手动删除引用\n\n举个场景例子：\n\n在网页的 DOM 元素上添加数据，就可以使用`WeakMap`结构，当该 DOM 元素被清除，其所对应的`WeakMap`记录就会自动被移除\n\n```javascript\nconst wm = new WeakMap();\n\nconst element = document.getElementById('example');\n\nwm.set(element, 'some information');\nwm.get(element) // \"some information\"\n```\n\n注意：`WeakMap` 弱引用的只是键名，而不是键值。键值依然是正常引用\n\n下面代码中，键值`obj`会在`WeakMap`产生新的引用，当你修改`obj`不会影响到内部\n\n```js\nconst wm = new WeakMap();\nlet key = {};\nlet obj = {foo: 1};\n\nwm.set(key, obj);\nobj = null;\nwm.get(key)\n// Object {foo: 1}\n```\n\n","level":2,"tagId":24}
{"_id":{"$oid":"61aa38513dd7f70001832f0c"},"exerciseKey":"43dad801-6c42-4638-9006-2c51a7cf0c91","category":"QA","renderType":"md","title":"说说你对以下几个页面生命周期事件的理解：DOMContentLoaded，load，beforeunload，unload","desc":null,"options":null,"explanation":"HTML 页面的生命周期包含三个重要事件：\n\n* DOMContentLoaded —— 浏览器已完全加载 HTML，并构建了 DOM 树，但像 <img> 和样式表之类的外部资源可能尚未加载完成。\n* load —— 浏览器不仅加载完成了 HTML，还加载完成了所有外部资源：图片，样式等。\n* beforeunload/unload —— 当用户正在离开页面时。\n\n每个事件都是有用的：\n\n* DOMContentLoaded 事件 —— DOM 已经就绪，因此处理程序可以查找 DOM 节点，并初始化接口。\n* load 事件 —— 外部资源已加载完成，样式已被应用，图片大小也已知了。\n* beforeunload 事件 —— 用户正在离开：我们可以检查用户是否保存了更改，并询问他是否真的要离开。\n* unload 事件 —— 用户几乎已经离开了，但是我们仍然可以启动一些操作，例如发送统计数据。\n\n## DOMContentLoaded 和脚本\n\n当浏览器处理一个 HTML 文档，并在文档中遇到 <script> 标签时，就会在继续构建 DOM 之前运行它。这是一种防范措施，因为脚本可能想要修改 DOM，甚至对其执行 document.write 操作，所以 DOMContentLoaded 必须等待脚本执行结束。\n\n因此，DOMContentLoaded 肯定在下面的这些脚本执行结束之后发生。\n\n此规则有两个例外：\n\n* 具有 async 特性（attribute）的脚本不会阻塞 DOMContentLoaded，稍后 我们会讲到。\n* 使用 document.createElement('script') 动态生成并添加到网页的脚本也不会阻塞 DOMContentLoaded。\n\n## DOMContentLoaded 和样式\n\n外部样式表不会影响 DOM，因此 DOMContentLoaded 不会等待它们。\n\n但这里有一个陷阱。如果在样式后面有一个脚本，那么该脚本必须等待样式表加载完成。原因是，脚本可能想要获取元素的坐标和其他与样式相关的属性。因此，它必须等待样式加载完成。\n\n当 DOMContentLoaded 等待脚本时，它现在也在等待脚本前面的样式。\n\n## 浏览器内建的自动填充\n\nFirefox，Chrome 和 Opera 都会在 DOMContentLoaded 中自动填充表单。\n\n例如，如果页面有一个带有登录名和密码的表单，并且浏览器记住了这些值，那么在 DOMContentLoaded 上，浏览器会尝试自动填充它们（如果得到了用户允许）。\n\n因此，如果 DOMContentLoaded 被需要加载很长时间的脚本延迟触发，那么自动填充也会等待。你可能在某些网站上看到过（如果你使用浏览器自动填充）—— 登录名/密码字段不会立即自动填充，而是在页面被完全加载前会延迟填充。这实际上是 DOMContentLoaded 事件之前的延迟。\n\n## window.onload\n\n当整个页面，包括样式、图片和其他资源被加载完成时，会触发 window 对象上的 load 事件。可以通过 onload 属性获取此事件。\n\n## window.onunload\n\n当访问者离开页面时，window 对象上的 unload 事件就会被触发。我们可以在那里做一些不涉及延迟的操作，例如关闭相关的弹出窗口。\n\n有一个值得注意的特殊情况是发送分析数据。\n\n假设我们收集有关页面使用情况的数据：鼠标点击，滚动，被查看的页面区域等。\n\n自然地，当用户要离开的时候，我们希望通过 unload 事件将数据保存到我们的服务器上。\n\n有一个特殊的 navigator.sendBeacon(url, data) 方法可以满足这种需求，详见规范 https://w3c.github.io/beacon/。\n\n它在后台发送数据，转换到另外一个页面不会有延迟：浏览器离开页面，但仍然在执行 sendBeacon。\n\n当 sendBeacon 请求完成时，浏览器可能已经离开了文档，所以就无法获取服务器响应（对于分析数据来说通常为空）。\n\n还有一个 keep-alive 标志，该标志用于在 fetch 方法中为通用的网络请求执行此类“离开页面后”的请求。你可以在 Fetch API 一章中找到更多相关信息。\n\n如果我们要取消跳转到另一页面的操作，在这里做不到。但是我们可以使用另一个事件 —— onbeforeunload。\n\n## window.onbeforeunload\n\n如果访问者触发了离开页面的导航（navigation）或试图关闭窗口，beforeunload 处理程序将要求进行更多确认。\n\n如果我们要取消事件，浏览器会询问用户是否确定。\n\n## 总结\n\n页面生命周期事件：\n\n* 当 DOM 准备就绪时，document 上的 DOMContentLoaded 事件就会被触发。在这个阶段，我们可以将 JavaScript 应用于元素。\n\t* 诸如 <script>...</script> 或 <script src=\"...\"></script> 之类的脚本会阻塞 DOMContentLoaded，浏览器将等待它们执行结束。\n\t* 图片和其他资源仍然可以继续被加载。\n* 当页面和所有资源都加载完成时，window 上的 load 事件就会被触发。我们很少使用它，因为通常无需等待那么长时间。\n* 当用户想要离开页面时，window 上的 beforeunload 事件就会被触发。如果我们取消这个事件，浏览器就会询问我们是否真的要离开（例如，我们有未保存的更改）。\n* 当用户最终离开时，window 上的 unload 事件就会被触发。在处理程序中，我们只能执行不涉及延迟或询问用户的简单操作。正是由于这个限制，它很少被使用。我们可以使用 navigator.sendBeacon 来发送网络请求。\n\n\n","level":1.5,"tagId":12}
{"_id":{"$oid":"61aa3852b804f8000122aa3e"},"exerciseKey":"43fc5697-d7c8-4d68-9ac7-f074d8a7b185","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nconst user = { name: \"Lydia\", age: 21 };\nconst admin = { admin: true, ...user };\n\nconsole.log(admin);\n```","options":"{\"options\":[\"{ admin: true, user: { name: \\\"Lydia\\\", age: 21 } }\",\"{ admin: true, name: \\\"Lydia\\\", age: 21 }\",\"{ admin: true, user: [\\\"Lydia\\\", 21] }\",\"{ admin: true }\"],\"isMulti\":false,\"answer\":[1]}","explanation":"扩展运算符`...`为对象的组合提供了可能。你可以复制对象中的键值对，然后把它们加到另一个对象里去。在本例中，我们复制了`user`对象键值对，然后把它们加入到`admin`对象中。`admin`对象就拥有了这些键值对，所以结果为`{ admin: true, name: \"Lydia\", age: 21 }`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa38520f30890001ab80aa"},"exerciseKey":"4449a399-c20d-49e7-aac6-05236ee28662","category":"QA","renderType":"md","title":"说说对 WebSocket 的了解","desc":null,"options":null,"explanation":"## 什么是WebSocket\n\nHTML5开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。\n\n## 优点 \n\n说到优点，这里的对比参照物是HTTP协议，概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。\n\n* 支持双向通信，实时性更强。\n* 更好的二进制支持。\n* 较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。\n* 支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）\n\n\n\n","level":2.5,"tagId":16}
{"_id":{"$oid":"61aa3854bdfab500012c844e"},"exerciseKey":"4cf47e01-92e5-4e04-ab83-f4eca1953e23","category":"QA","renderType":"md","title":"如何提高webpack的构建速度？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/3a1b8620-b01b-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、背景\n\n随着我们的项目涉及到页面越来越多，功能和业务代码也会随着越多，相应的 `webpack` 的构建时间也会越来越久\n\n构建时间与我们日常开发效率密切相关，当我们本地开发启动 `devServer` 或者 `build` 的时候，如果时间过长，会大大降低我们的工作效率\n\n所以，优化`webpack` 构建速度是十分重要的环节\n\n\n## 二、如何优化\n\n常见的提升构建速度的手段有如下：\n\n- 优化 loader 配置\n- 合理使用 resolve.extensions\n- 优化 resolve.modules\n- 优化 resolve.alias\n- 使用 DLLPlugin 插件\n- 使用 cache-loader\n- terser 启动多线程\n- 合理使用 sourceMap\n\n\n\n\n\n### 优化loader配置\n\n在使用`loader`时，可以通过配置`include`、`exclude`、`test`属性来匹配文件，接触`include`、`exclude`规定哪些匹配应用`loader`\n\n如采用 ES6 的项目为例，在配置 `babel-loader `时，可以这样：\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        // 如果项目源码中只有 js 文件就不要写成 /\\.jsx?$/，提升正则表达式性能\n        test: /\\.js$/,\n        // babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启\n        use: ['babel-loader?cacheDirectory'],\n        // 只对项目根目录下的 src 目录中的文件采用 babel-loader\n        include: path.resolve(__dirname, 'src'),\n      },\n    ]\n  },\n};\n```\n\n\n\n### 合理使用 resolve.extensions\n\n在开发中我们会有各种各样的模块依赖，这些模块可能来自于自己编写的代码，也可能来自第三方库， `resolve`可以帮助`webpack`从每个 `require/import` 语句中，找到需要引入到合适的模块代码\n\n通过`resolve.extensions`是解析到文件时自动添加拓展名，默认情况如下：\n\n```js\nmodule.exports = {\n    ...\n    extensions:[\".warm\",\".mjs\",\".js\",\".json\"]\n}\n```\n\n当我们引入文件的时候，若没有文件后缀名，则会根据数组内的值依次查找\n\n当我们配置的时候，则不要随便把所有后缀都写在里面，这会调用多次文件的查找，这样就会减慢打包速度\n\n\n\n### 优化 resolve.modules\n\n`resolve.modules` 用于配置 `webpack` 去哪些目录下寻找第三方模块。默认值为`['node_modules']`，所以默认会从`node_modules`中查找文件\n当安装的第三方模块都放在项目根目录下的 `./node_modules `目录下时，所以可以指明存放第三方模块的绝对路径，以减少寻找，配置如下：\n\n```\nmodule.exports = {\n  resolve: {\n    // 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤\n    // 其中 __dirname 表示当前工作目录，也就是项目根目录\n    modules: [path.resolve(__dirname, 'node_modules')]\n  },\n};\n```\n\n\n\n### 优化 resolve.alias \n\n`alias`给一些常用的路径起一个别名，特别当我们的项目目录结构比较深的时候，一个文件的路径可能是`./../../`的形式\n\n通过配置`alias`以减少查找过程\n\n```js\nmodule.exports = {\n    ...\n    resolve:{\n        alias:{\n            \"@\":path.resolve(__dirname,'./src')\n        }\n    }\n}\n```\n\n\n\n\n\n### 使用 DLLPlugin 插件\n\n`DLL`全称是 动态链接库，是为软件在winodw种实现共享函数库的一种实现方式，而Webpack也内置了DLL的功能，为的就是可以共享，不经常改变的代码，抽成一个共享的库。这个库在之后的编译过程中，会被引入到其他项目的代码中\n\n使用步骤分成两部分：\n\n- 打包一个 DLL 库\n- 引入 DLL 库\n\n#### 打包一个 DLL 库\n\n`webpack`内置了一个`DllPlugin`可以帮助我们打包一个DLL的库文件\n\n```js\nmodule.exports = {\n    ...\n    plugins:[\n        new webpack.DllPlugin({\n            name:'dll_[name]',\n            path:path.resolve(__dirname,\"./dll/[name].mainfest.json\")\n        })\n    ]\n}\n```\n\n\n\n#### 引入 DLL 库\n\n使用 `webpack` 自带的 `DllReferencePlugin` 插件对 `mainfest.json` 映射文件进行分析，获取要使用的`DLL`库\n\n然后再通过`AddAssetHtmlPlugin`插件，将我们打包的`DLL`库引入到`Html`模块中\n\n```js\nmodule.exports = {\n    ...\n    new webpack.DllReferencePlugin({\n        context:path.resolve(__dirname,\"./dll/dll_react.js\"),\n        mainfest:path.resolve(__dirname,\"./dll/react.mainfest.json\")\n    }),\n    new AddAssetHtmlPlugin({\n        outputPath:\"./auto\",\n        filepath:path.resolve(__dirname,\"./dll/dll_react.js\")\n    })\n}\n```\n\n\n\n### 使用 cache-loader\n\n在一些性能开销较大的 `loader `之前添加 `cache-loader`，以将结果缓存到磁盘里，显著提升二次构建速度\n\n保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 `loader` 使用此` loader`\n\n```js\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.ext$/,\n                use: ['cache-loader', ...loaders],\n                include: path.resolve('src'),\n            },\n        ],\n    },\n};\n```\n\n\n\n### terser 启动多线程\n\n使用多进程并行运行来提高构建速度\n\n```js\nmodule.exports = {\n  optimization: {\n    minimizer: [\n      new TerserPlugin({\n        parallel: true,\n      }),\n    ],\n  },\n};\n```\n\n\n\n### 合理使用 sourceMap\n\n打包生成  `sourceMap` 的时候，如果信息越详细，打包速度就会越慢。对应属性取值如下所示：\n\n![](https://static.vue-js.com/11647af0-b01d-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n\n\n### 三、总结\n\n可以看到，优化`webpack`构建的方式有很多，主要可以从优化搜索时间、缩小文件搜索范围、减少不必要的编译等方面入手\n","level":3,"tagId":28}
{"_id":{"$oid":"61aa38578e97d900018086f8"},"exerciseKey":"58313b6b-5983-4414-8b85-81057f1c7d9a","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst box = { x: 10, y: 20 };\n\nObject.freeze(box);\n\nconst shape = box;\nshape.x = 100;\nconsole.log(shape)\n```","options":"{\"options\":[\"{ x: 100, y: 20 }\",\"{ x: 10, y: 20 }\",\"{ x: 100 }\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"`Object.freeze`使得无法添加、删除或修改对象的属性（除非属性的值是另一个对象）。\n当我们创建变量`shape`并将其设置为等于冻结对象`box`时，`shape`指向的也是冻结对象。你可以使用`Object.isFrozen`检查一个对象是否被冻结，上述情况，`Object.isFrozen（shape）`将返回`true`。\n由于`shape`被冻结，并且`x`的值不是对象，所以我们不能修改属性`x`。 `x`仍然等于`10`，`{x：10，y：20}`被打印。\n注意，上述例子我们对属性`x`进行修改，可能会导致抛出TypeError异常（最常见但不仅限于严格模式下时）。","level":1.5,"tagId":32}
{"_id":{"$oid":"61aa38590f30890001ab80dd"},"exerciseKey":"5ee5ebe0-04c8-4852-a0fb-5c1178cb17dc","category":"QA","renderType":"md","title":"什么是对象存储OSS？","desc":null,"options":null,"explanation":"对象存储OSS（Object Storage Service）是一种海量、安全、低成本、高持久的云存储服务。\n\nOSS具有与平台无关的RESTful API接口，您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。\n\n## OSS相关概念\n\n* 存储类型（Storage Class）\nOSS提供标准、低频访问、归档、冷归档四种存储类型，全面覆盖从热到冷的各种数据存储场景。其中标准存储类型提供高持久、高可用、高性能的对象存储服务，能够支持频繁的数据访问；低频访问存储类型适合长期保存不经常访问的数据（平均每月访问频率1到2次），存储单价低于标准类型；归档存储类型适合需要长期保存（建议半年以上）的归档数据；冷归档存储适合需要超长时间存放的极冷数据。更多信息，请参见存储类型介绍。\n\n* 存储空间（Bucket）\n存储空间是您用于存储对象（Object）的容器，所有的对象都必须隶属于某个存储空间。存储空间具有各种配置属性，包括地域、访问权限、存储类型等。您可以根据实际需求，创建不同类型的存储空间来存储不同的数据。\n\n* 对象（Object）\n对象是OSS存储数据的基本单元，也被称为OSS的文件。对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的Key来标识。对象元信息是一组键值对，表示了对象的一些属性，例如最后修改时间、大小等信息，同时可以在元信息中存储一些自定义的信息。\n\n* 地域（Region）\n地域表示OSS的数据中心所在物理位置。您可以根据费用、请求来源等选择合适的地域创建Bucket。更多信息，请参见OSS已开通的地域。\n\n* 访问域名（Endpoint）\nEndpoint表示OSS对外服务的访问域名。OSS以HTTP RESTful API的形式对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名也是不同的。\n\n* 访问密钥（AccessKey）\nAccessKey简称AK，指的是访问身份验证中用到的AccessKey ID和AccessKey Secret。OSS通过使用AccessKey ID和AccessKey Secret对称加密的方法来验证某个请求的发送者身份。AccessKey ID用于标识用户；AccessKey Secret是用户用于加密签名字符串和OSS用来验证签名字符串的密钥，必须保密。","level":2,"tagId":16}
{"_id":{"$oid":"61aa385b34458700017f1c8d"},"exerciseKey":"637b0af3-e1e1-42c0-9825-e34aa0a4e4a0","category":"QA","renderType":"md","title":"说说你对React Router的理解？常用的Router组件有哪些？","desc":null,"options":null,"explanation":"## 一、是什么\n\n`react-router`等前端路由的原理大致相同，可以实现无刷新的条件下切换显示不同的页面\n\n路由的本质就是页面的`URL`发生改变时，页面的显示结果可以根据`URL`的变化而变化，但是页面不会刷新\n\n因此，可以通过前端路由可以实现单页(SPA)应用\n\n`react-router`主要分成了几个不同的包：\n\n- react-router: 实现了路由的核心功能\n- react-router-dom： 基于 react-router，加入了在浏览器运行环境下的一些功能\n- react-router-native：基于 react-router，加入了 react-native 运行环境下的一些功能\n\n- react-router-config: 用于配置静态路由的工具库\n\n\n\n\n\n## 二、有哪些\n\n这里主要讲述的是`react-router-dom`的常用`API`，主要是提供了一些组件：\n\n- BrowserRouter、HashRouter\n- Route\n- Link、NavLink\n- switch\n- redirect\n\n\n\n### BrowserRouter、HashRouter\n\n`Router`中包含了对路径改变的监听，并且会将相应的路径传递给子组件\n\n`BrowserRouter`是`history`模式，`HashRouter`模式\n\n使用两者作为最顶层组件包裹其他组件\n\n```jsx\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <main>\n        <nav>\n          <ul>\n            <li>\n              < a href=\" \">Home</ a>\n            </li>\n            <li>\n              < a href=\"/about\">About</ a>\n            </li>\n            <li>\n              < a href=\"/contact\">Contact</ a>\n            </li>\n          </ul>\n        </nav>\n      </main>\n    </Router>\n  );\n}\n```\n\n\n\n### Route\n\n`Route`用于路径的匹配，然后进行组件的渲染，对应的属性如下：\n\n- path 属性：用于设置匹配到的路径\n- component 属性：设置匹配到路径后，渲染的组件\n- render 属性：设置匹配到路径后，渲染的内容\n- exact 属性：开启精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件\n\n```jsx\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <main>\n        <nav>\n          <ul>\n            <li>\n              < a href=\"/\">Home</ a>\n            </li>\n            <li>\n              < a href=\"/about\">About</ a>\n            </li>\n            <li>\n              < a href=\"/contact\">Contact</ a>\n            </li>\n          </ul>\n        </nav>\n        <Route path=\"/\" render={() => <h1>Welcome!</h1>} />\n      </main>\n    </Router>\n  );\n}\n```\n\n\n\n\n\n### Link、NavLink\n\n通常路径的跳转是使用`Link`组件，最终会被渲染成`a`元素，其中属性`to`代替`a`标题的`href`属性\n\n`NavLink`是在`Link`基础之上增加了一些样式属性，例如组件被选中时，发生样式变化，则可以设置`NavLink`的一下属性：\n\n- activeStyle：活跃时（匹配时）的样式\n- activeClassName：活跃时添加的class\n\n如下：\n\n```js\n<NavLink to=\"/\" exact activeStyle={{color: \"red\"}}>首页</NavLink>\n<NavLink to=\"/about\" activeStyle={{color: \"red\"}}>关于</NavLink>\n<NavLink to=\"/profile\" activeStyle={{color: \"red\"}}>我的</NavLink>\n```\n\n如果需要实现`js`实现页面的跳转，那么可以通过下面的形式：\n\n通过`Route`作为顶层组件包裹其他组件后,页面组件就可以接收到一些路由相关的东西，比如`props.history`\n\n```jsx\nconst Contact = ({ history }) => (\n  <Fragment>\n    <h1>Contact</h1>\n    <button onClick={() => history.push(\"/\")}>Go to home</button>\n    <FakeText />\n  </Fragment>\n);\n```\n\n`props `中接收到的`history`对象具有一些方便的方法，如`goBack`，`goForward`,`push`\n\n\n\n### redirect\n\n用于路由的重定向，当这个组件出现时，就会执行跳转到对应的`to`路径中，如下例子：\n\n```js\nconst About = ({\n  match: {\n    params: { name },\n  },\n}) => (\n  // props.match.params.name\n  <Fragment>\n    {name !== \"tom\" ? <Redirect to=\"/\" /> : null}\n    <h1>About {name}</h1>\n    <FakeText />\n  </Fragment>\n)\n```\n\n上述组件当接收到的路由参数`name` 不等于 `tom` 的时候，将会自动重定向到首页\n\n\n\n\n\n### switch\n\n`swich`组件的作用适用于当匹配到第一个组件的时候，后面的组件就不应该继续匹配\n\n如下例子：\n\n```jsx\n<Switch>\n  <Route exact path=\"/\" component={Home} />\n  <Route path=\"/about\" component={About} />\n  <Route path=\"/profile\" component={Profile} />\n  <Route path=\"/:userid\" component={User} />\n  <Route component={NoMatch} />\n</Switch>\n```\n\n如果不使用`switch`组件进行包裹\n\n\n\n\n\n除了一些路由相关的组件之外，`react-router`还提供一些`hooks`，如下：\n\n- useHistory\n- useParams\n- useLocation\n\n\n\n### useHistory\n\n`useHistory`可以让组件内部直接访问`history`，无须通过`props`获取\n\n```js\nimport { useHistory } from \"react-router-dom\";\n\nconst Contact = () => {\n  const history = useHistory();\n  return (\n    <Fragment>\n      <h1>Contact</h1>\n      <button onClick={() => history.push(\"/\")}>Go to home</button>\n    </Fragment>\n  );\n};\n```\n\n\n\n### useParams\n\n\n\n```jsx\nconst About = () => {\n  const { name } = useParams();\n  return (\n    // props.match.params.name\n    <Fragment>\n      {name !== \"John Doe\" ? <Redirect to=\"/\" /> : null}\n      <h1>About {name}</h1>\n      <Route component={Contact} />\n    </Fragment>\n  );\n};\n```\n\n\n\n### useLocation\n\n`useLocation` 会返回当前 `URL `的 `location `对象\n\n```jsx\nimport { useLocation } from \"react-router-dom\";\n\nconst Contact = () => {\n  const { pathname } = useLocation();\n\n  return (\n    <Fragment>\n      <h1>Contact</h1>\n      <p>Current URL: {pathname}</p >\n    </Fragment>\n  );\n};\n```\n\n\n\n\n\n## 三、参数传递\n\n这些路由传递参数主要分成了三种形式：\n\n- 动态路由的方式\n- search传递参数\n- to传入对象\n\n\n\n### 动态路由\n\n动态路由的概念指的是路由中的路径并不会固定\n\n例如将`path`在`Route`匹配时写成`/detail/:id`，那么 `/detail/abc`、`/detail/123`都可以匹配到该`Route`\n\n```jsx\n<NavLink to=\"/detail/abc123\">详情</NavLink>\n\n<Switch>\n    ... 其他Route\n    <Route path=\"/detail/:id\" component={Detail}/>\n    <Route component={NoMatch} />\n</Switch>\n```\n\n获取参数方式如下：\n\n```jsx\nconsole.log(props.match.params.xxx)\n```\n\n\n\n### search传递参数\n\n在跳转的路径中添加了一些query参数；\n\n```jsx\n<NavLink to=\"/detail2?name=why&age=18\">详情2</NavLink>\n\n<Switch>\n  <Route path=\"/detail2\" component={Detail2}/>\n</Switch>\n```\n\n获取形式如下：\n\n```js\nconsole.log(props.location.search)\n```\n\n\n\n\n\n### to传入对象\n\n传递方式如下：\n\n```jsx\n<NavLink to={{\n    pathname: \"/detail2\", \n    query: {name: \"kobe\", age: 30},\n    state: {height: 1.98, address: \"洛杉矶\"},\n    search: \"?apikey=123\"\n  }}>\n  详情2\n</NavLink>\n```\n\n获取参数的形式如下：\n\n```js\nconsole.log(props.location)\n```\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa385e54ebf60001a1a3f6"},"exerciseKey":"6fc4d84b-0b4f-4cc3-8109-f5ec5a981da5","category":"QA","renderType":"md","title":"请手写“希尔排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版》的合著者Robert Sedgewick提出的。\n\n## 算法描述\n\n先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：\n\n* 选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1；\n* 按增量序列个数k，对序列进行k 趟排序；\n* 每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\n\n## 代码实现\n\n```javascript\nfunction shellSort(arr) {\n    var len = arr.length,\n        temp,\n        gap = 1;\n    console.time('希尔排序耗时:');\n    while(gap < len/5) {          //动态定义间隔序列\n        gap =gap*5+1;\n    }\n    for (gap; gap > 0; gap = Math.floor(gap/5)) {\n        for (var i = gap; i < len; i++) {\n            temp = arr[i];\n            for (var j = i-gap; j >= 0 && arr[j] > temp; j-=gap) {\n                arr[j+gap] = arr[j];\n            }\n            arr[j+gap] = temp;\n        }\n    }\n    console.timeEnd('希尔排序耗时:');\n    return arr;\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(shellSort(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(nlog2 n)\n* 最坏情况：T(n) = O(nlog2 n)\n* 平均情况：T(n) =O(nlog n)\n","level":3.5,"tagId":26}
{"_id":{"$oid":"61aa385fff0573000165b2b5"},"exerciseKey":"71d2fd07-2629-4ffd-a9ea-750ee912f912","category":"QA","renderType":"md","title":"Vue项目中有封装过axios吗？怎么封装的？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/2bf1e460-45a7-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、axios是什么\n\n`axios` 是一个轻量的 `HTTP`客户端\n\n基于 `XMLHttpRequest` 服务来执行 `HTTP` 请求，支持丰富的配置，支持 `Promise`，支持浏览器端和 `Node.js` 端。自`Vue`2.0起，尤大宣布取消对 `vue-resource` 的官方推荐，转而推荐 `axios`。现在 `axios` 已经成为大部分 `Vue` 开发者的首选\n\n### 特性\n\n- 从浏览器中创建 `XMLHttpRequests`\n- 从 `node.js` 创建 `http`请求\n- 支持 `Promise` API\n- 拦截请求和响应\n- 转换请求数据和响应数据\n- 取消请求\n- 自动转换` JSON` 数据\n- 客户端支持防御`XSRF`\n\n### 基本使用\n\n安装\n\n```js\n// 项目中安装\nnpm install axios --S\n// cdn 引入\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n导入\n\n```js\nimport axios from 'axios'\n```\n\n发送请求\n\n```js\naxios({        \n  url:'xxx',    // 设置请求的地址\n  method:\"GET\", // 设置请求方法\n  params:{      // get请求使用params进行参数凭借,如果是post请求用data\n    type: '',\n    page: 1\n  }\n}).then(res => {  \n  // res为后端返回的数据\n  console.log(res);   \n})\n```\n\n\n\n并发请求`axios.all([])`\n\n```js\nfunction getUserAccount() {\n    return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n    return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n    .then(axios.spread(function (res1, res2) { \n    // res1第一个请求的返回的内容，res2第二个请求返回的内容\n    // 两个请求都执行完成才会执行\n}));\n```\n\n\n\n## 二、为什么要封装\n\n`axios` 的 API 很友好，你完全可以很轻松地在项目中直接使用。\n\n不过随着项目规模增大，如果每发起一次`HTTP`请求，就要把这些比如设置超时时间、设置请求头、根据项目环境判断使用哪个请求地址、错误处理等等操作，都需要写一遍\n\n这种重复劳动不仅浪费时间，而且让代码变得冗余不堪，难以维护。为了提高我们的代码质量，我们应该在项目中二次封装一下 `axios` 再使用\n\n举个例子：\n\n```js\naxios('http://localhost:3000/data', {\n  // 配置代码\n  method: 'GET',\n  timeout: 1000,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: 'xxx',\n  },\n  transformRequest: [function (data, headers) {\n    return data;\n  }],\n  // 其他请求配置...\n})\n.then((data) => {\n  // todo: 真正业务逻辑代码\n  console.log(data);\n}, (err) => {\n  // 错误处理代码  \n  if (err.response.status === 401) {\n  // handle authorization error\n  }\n  if (err.response.status === 403) {\n  // handle server forbidden error\n  }\n  // 其他错误处理.....\n  console.log(err);\n});\n```\n\n如果每个页面都发送类似的请求，都要写一堆的配置与错误处理，就显得过于繁琐了\n\n这时候我们就需要对`axios`进行二次封装，让使用更为便利\n\n\n\n## 三、如何封装\n\n封装的同时，你需要和 后端协商好一些约定，请求头，状态码，请求超时时间.......\n\n设置接口请求前缀：根据开发、测试、生产环境的不同，前缀需要加以区分\n\n请求头 :  来实现一些具体的业务，必须携带一些参数才可以请求(例如：会员业务)\n\n状态码:   根据接口返回的不同`status` ， 来执行不同的业务，这块需要和后端约定好\n\n请求方法：根据`get`、`post`等方法进行一个再次封装，使用起来更为方便\n\n请求拦截器:  根据请求的请求头设定，来决定哪些请求可以访问\n\n响应拦截器： 这块就是根据 后端`返回来的状态码判定执行不同业务\n\n\n\n### 设置接口请求前缀\n\n利用`node`环境变量来作判断，用来区分开发、测试、生产环境\n\n```js\nif (process.env.NODE_ENV === 'development') {\n  axios.defaults.baseURL = 'http://dev.xxx.com'\n} else if (process.env.NODE_ENV === 'production') {\n  axios.defaults.baseURL = 'http://prod.xxx.com'\n}\n```\n\n在本地调试的时候，还需要在`vue.config.js`文件中配置`devServer`实现代理转发，从而实现跨域\n\n```js\ndevServer: {\n    proxy: {\n      '/proxyApi': {\n        target: 'http://dev.xxx.com',\n        changeOrigin: true,\n        pathRewrite: {\n          '/proxyApi': ''\n        }\n      }\n    }\n  }\n```\n\n\n\n### 设置请求头与超时时间\n\n大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，这里将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置\n\n```js\nconst service = axios.create({\n    ...\n    timeout: 30000,  // 请求 30s 超时\n\t  headers: {\n        get: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n          // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来\n        },\n        post: {\n          'Content-Type': 'application/json;charset=utf-8'\n          // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来\n        }\n  },\n})\n```\n\n\n\n### 封装请求方法\n\n先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去\n\n```js\n// get 请求\nexport function httpGet({\n  url,\n  params = {}\n}) {\n  return new Promise((resolve, reject) => {\n    axios.get(url, {\n      params\n    }).then((res) => {\n      resolve(res.data)\n    }).catch(err => {\n      reject(err)\n    })\n  })\n}\n\n// post\n// post请求\nexport function httpPost({\n  url,\n  data = {},\n  params = {}\n}) {\n  return new Promise((resolve, reject) => {\n    axios({\n      url,\n      method: 'post',\n      transformRequest: [function (data) {\n        let ret = ''\n        for (let it in data) {\n          ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'\n        }\n        return ret\n      }],\n      // 发送的数据\n      data,\n      // \u0010url参数\n      params\n\n    }).then(res => {\n      resolve(res.data)\n    })\n  })\n}\n```\n\n把封装的方法放在一个`api.js`文件中\n\n```js\nimport { httpGet, httpPost } from './http'\nexport const getorglist = (params = {}) => httpGet({ url: 'apps/api/org/list', params })\n```\n\n页面中就能直接调用\n\n```js\n// .vue\nimport { getorglist } from '@/assets/js/api'\n\ngetorglist({ id: 200 }).then(res => {\n  console.log(res)\n})\n```\n\n这样可以把`api`统一管理起来，以后维护修改只需要在`api.js`文件操作即可\n\n\n\n### 请求拦截器\n\n请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便\n\n```js\n// 请求拦截器\naxios.interceptors.request.use(\n  config => {\n    // 每次发送请求之前判断是否存在token\n    // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的\n    token && (config.headers.Authorization = token)\n    return config\n  },\n  error => {\n    return Promise.error(error)\n  })\n```\n\n\n\n### 响应拦截器\n\n响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权\n\n```js\n// 响应拦截器\naxios.interceptors.response.use(response => {\n  // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n  // 否则的话抛出错误\n  if (response.status === 200) {\n    if (response.data.code === 511) {\n      // 未授权调取授权接口\n    } else if (response.data.code === 510) {\n      // 未登录跳转登录页\n    } else {\n      return Promise.resolve(response)\n    }\n  } else {\n    return Promise.reject(response)\n  }\n}, error => {\n  // 我们可以在这里对异常状态作统一处理\n  if (error.response.status) {\n    // 处理请求失败的情况\n    // 对不同返回码对相应处理\n    return Promise.reject(error.response)\n  }\n})\n```\n\n\n\n### 小结\n\n- 封装是编程中很有意义的手段，简单的`axios`封装，就可以让我们可以领略到它的魅力\n- 封装 `axios` 没有一个绝对的标准，只要你的封装可以满足你的项目需求，并且用起来方便，那就是一个好的封装方案\n\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa38648e97d9000180874f"},"exerciseKey":"8244fd41-2b94-4179-887f-177501ddf280","category":"QA","renderType":"md","title":"object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别是什么？","desc":null,"options":null,"explanation":"* 扩展运算符\n\n```js\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = {...outObj}\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n```\n\n* Object.assign()\n\n```js\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = Object.assign({}, outObj)\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n```\n\n可以看到，两者都是浅拷贝。\n\nObject.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。\n\n扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。\n\n\n","level":3,"tagId":24}
{"_id":{"$oid":"61aa384439bf10000191c925"},"exerciseKey":"1592fd61-1555-4646-a2a0-438828b5b8e5","category":"QA","renderType":"md","title":"能否使用自闭合script标签引入脚本文件?\n","desc":null,"options":null,"explanation":"不能。自闭合标签来自于XML语法，而不是HTML语法。\n\n根据现在的HTML语法，只有不需要结束标签的void element（如img之类的），或者是外部元素（如svg）可以使用自闭合。script标签显然不在此列。\n\n ```html\n // 正确写法\n <script src=\"...\"></script>\n \n // 错误写法\n <script src=\"...\"/>\n ```","level":1,"tagId":12}
{"_id":{"$oid":"61aa3845b804f8000122a9e5"},"exerciseKey":"18682a73-0c4e-4859-96fd-2a6fde7587b7","category":"QA","renderType":"md","title":"ES6中的 Reflect 对象有什么用？","desc":null,"options":null,"explanation":"Reflect 对象不是构造函数，所以创建时不是用 new 来进行创建。\n\n在 ES6 中增加这个对象的目的：\n\n- 将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。现阶段，某些方法同时在 Object 和 Reflect 对象上部署，未来的新方法将只部署在 Reflect 对象上。也就是说，从 Reflect 对象上可以拿到语言内部的方法。\n- 修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc)则会返回 false。\n- 让 Object 操作都变成函数行为。某些 Object 操作是命令式，比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name)和 Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n- Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。\n\n```javascript\nvar loggedObj = new Proxy(obj, {\n  get(target, name) {\n    console.log(\"get\", target, name);\n    return Reflect.get(target, name);\n  },\n  deleteProperty(target, name) {\n    console.log(\"delete\" + name);\n    return Reflect.deleteProperty(target, name);\n  },\n  has(target, name) {\n    console.log(\"has\" + name);\n    return Reflect.has(target, name);\n  },\n});\n\n```\n\n上面代码中，每一个 Proxy 对象的拦截操作（get、delete、has），内部都调用对应的 Reflect 方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。\n\n","level":3,"tagId":24}
{"_id":{"$oid":"61aa384681337a00011e0526"},"exerciseKey":"1b65452c-ab0b-41a8-8621-fc25704afa33","category":"QA","renderType":"md","title":"JS中怎么阻止事件冒泡和默认事件？","desc":null,"options":null,"explanation":"## event.stopPropagation()方法\n\n这是阻止事件的冒泡方法，不让事件向 document 上蔓延，但是默认事件任然会执行，当你掉用这个方法的时候，如果点击一个连接，这个连接仍然会被打开，\n\n## event.preventDefault()方法\n\n这是阻止默认事件的方法，比如在a标签的绑定事件上调用此方法，链接则不会被打开，但是会发生冒泡，冒泡会传递到上一层的父元素；\n\n## return false\n\n这个方法比较暴力，他会同事阻止事件冒泡也会阻止默认事件；写上此代码，连接不会被打开，事件也不会传递到上一层的父元素；可以理解为return false就等于同时调用了event.stopPropagation()和event.preventDefault()\n\n","level":1,"tagId":10}
{"_id":{"$oid":"61aa3848cd02c30001dd21ab"},"exerciseKey":"252525e4-0c4c-4e41-9279-41bc59f06f85","category":"QA","renderType":"md","title":"Vue项目如何进行部署？是否有遇到部署服务器后刷新404问题？","desc":null,"options":null,"explanation":" ![image.png](https://static.vue-js.com/002c9320-4f3e-11eb-ab90-d9ae814b240d.png)\n\n## 一、如何部署\n\n前后端分离开发模式下，前后端是独立布署的，前端只需要将最后的构建物上传至目标服务器的`web`容器指定的静态目录下即可\n\n我们知道`vue`项目在构建后，是生成一系列的静态文件\n\n\n![](https://imgkr2.cn-bj.ufileos.com/b9d13e56-f859-4b4b-a9da-a703a34c2f5d.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=m1qDXRSFHrfXlnAtAlVhjoLKP70%253D&Expires=1609927181)\n\n\n常规布署我们只需要将这个目录上传至目标服务器即可\n\n```bash\n// scp 上传 user为主机登录用户，host为主机外网ip, xx为web容器静态资源路径\nscp dist.zip user@host:/xx/xx/xx\n```\n\n让`web`容器跑起来，以`nginx`为例\n\n```bash\nserver {\n  listen  80;\n  server_name  www.xxx.com;\n\n  location / {\n    index  /data/dist/index.html;\n  }\n}\n```\n配置完成记得重启`nginx`\n```bash\n// 检查配置是否正确\nnginx -t \n\n// 平滑重启\nnginx -s reload\n```\n\n操作完后就可以在浏览器输入域名进行访问了\n\n当然上面只是提到最简单也是最直接的一种布署方式\n\n什么自动化，镜像，容器，流水线布署，本质也是将这套逻辑抽象，隔离，用程序来代替重复性的劳动，本文不展开\n\n## 二、404问题\n\n这是一个经典的问题，相信很多同学都有遇到过，那么你知道其真正的原因吗？\n\n我们先还原一下场景：\n\n- `vue`项目在本地时运行正常，但部署到服务器中，刷新页面，出现了404错误\n\n先定位一下，HTTP 404 错误意味着链接指向的资源不存在\n\n问题在于为什么不存在？且为什么只有`history`模式下会出现这个问题？\n\n### 为什么history模式下有问题\n\n`Vue`是属于单页应用（single-page application）\n\n而`SPA`是一种网络应用程序或网站的模型，所有用户交互是通过动态重写当前页面，前面我们也看到了，不管我们应用有多少页面，构建物都只会产出一个`index.html`\n\n现在，我们回头来看一下我们的`nginx`配置\n\n```js\nserver {\n  listen  80;\n  server_name  www.xxx.com;\n\n  location / {\n    index  /data/dist/index.html;\n  }\n}\n```\n\n可以根据 `nginx` 配置得出，当我们在地址栏输入 `www.xxx.com` 时，这时会打开我们 `dist` 目录下的 `index.html` 文件，然后我们在跳转路由进入到 `www.xxx.com/login`\n\n关键在这里，当我们在 `website.com/login` 页执行刷新操作，`nginx location` 是没有相关配置的，所以就会出现 404 的情况\n\n\n### 为什么hash模式下没有问题\n\n`router hash` 模式我们都知道是用符号#表示的，如  `website.com/#/login`, `hash` 的值为 `#/login`\n\n它的特点在于：`hash` 虽然出现在 `URL` 中，但不会被包括在 `HTTP` 请求中，对服务端完全没有影响，因此改变 `hash` 不会重新加载页面\n\n`hash` 模式下，仅 `hash` 符号之前的内容会被包含在请求中，如 `website.com/#/login` 只有 `website.com` 会被包含在请求中 ，因此对于服务端来说，即使没有配置`location`，也不会返回404错误\n\n\n\n## 解决方案\n\n看到这里我相信大部分同学都能想到怎么解决问题了，\n\n产生问题的本质是因为我们的路由是通过JS来执行视图切换的，\n\n当我们进入到子路由时刷新页面，`web`容器没有相对应的页面此时会出现404\n\n所以我们只需要配置将任意页面都重定向到 `index.html`，把路由交由前端处理\n\n对`nginx`配置文件`.conf`修改，添加`try_files $uri $uri/ /index.html;`\n\n```bash\nserver {\n  listen  80;\n  server_name  www.xxx.com;\n\n  location / {\n    index  /data/dist/index.html;\n    try_files $uri $uri/ /index.html;\n  }\n}\n```\n\n修改完配置文件后记得配置的更新\n\n```bash\nnginx -s reload\n```\n\n这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 `index.html` 文件\n\n为了避免这种情况，你应该在 `Vue` 应用里面覆盖所有的路由情况，然后在给出一个 404 页面\n\n```js\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { path: '*', component: NotFoundComponent }\n  ]\n})\n```\n\n关于后端配置方案还有：`Apache`、`nodejs`等，思想是一致的，这里就不展开述说了\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa384ab804f8000122aa0d"},"exerciseKey":"2caef7c7-6f12-4104-9a51-b360dc775357","category":"QA","renderType":"md","title":"null是对象吗？为什么？","desc":null,"options":null,"explanation":"null不是对象。\n\n虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object 。","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa384bc2d0220001c9643a"},"exerciseKey":"3172f055-5f37-4a60-9940-bb15c6a7d4b6","category":"Choice","renderType":"md","title":"以下是个纯函数么?","desc":"```javascript\nfunction sum(a, b) {\n  return a + b;\n}\n```","options":"{\"options\":[\"Yes\",\"No\"],\"isMulti\":false,\"answer\":[0]}","explanation":"纯函数在相同的输入值时，需产生相同的输出，其输出的结果，与输入值以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关。\n纯函数不会产生副作用。\n纯函数与副作用的定义可参考：\nhttps://zh.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384d79641200019173d2"},"exerciseKey":"37021e43-c8e8-4664-afa2-0c16eee6e4b2","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nfunction getItems(fruitList, ...args, favoriteFruit) {\n  return [...fruitList, ...args, favoriteFruit]\n}\n\ngetItems([\"banana\", \"apple\"], \"pear\", \"orange\")\n```","options":"{\"options\":[\"[\\\"banana\\\", \\\"apple\\\", \\\"pear\\\", \\\"orange\\\"]\",\"[[\\\"banana\\\", \\\"apple\\\"], \\\"pear\\\", \\\"orange\\\"]\",\"[\\\"banana\\\", \\\"apple\\\", [\\\"pear\\\"], \\\"orange\\\"]\",\"SyntaxError\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`... args`是剩余参数，剩余参数的值是一个包含所有剩余参数的数组，**并且只能作为最后一个参数**。上述示例中，剩余参数是第二个参数，这是不可能的，并会抛出语法错误。\n```javascript\nfunction getItems(fruitList, favoriteFruit, ...args) {\n  return [...fruitList, ...args, favoriteFruit]\n}\ngetItems([\"banana\", \"apple\"], \"pear\", \"orange\")\n```\n上述例子是有效的，将会返回数组：`[ 'banana', 'apple', 'orange', 'pear' ]`","level":1,"tagId":32}
{"_id":{"$oid":"61aa384fcd02c30001dd21e5"},"exerciseKey":"3bf627cd-6b02-4904-9d4c-979794d6cde3","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nlet c = { greeting: 'Hey!' }\nlet d\n\nd = c\nc.greeting = 'Hello'\nconsole.log(d.greeting)\n```","options":"{\"options\":[\"Hello\",\"undefined\",\"ReferenceError\",\"TypeError\"],\"isMulti\":false,\"answer\":[0]}","explanation":"在 JavaScript 中，当设置两个对象彼此相等时，它们会通过*引用*进行交互。\n首先，变量 `c` 的值是一个对象。接下来，我们给 `d` 分配了一个和 `c` 对象相同的引用。\n<img src=\"https://i.imgur.com/ko5k0fs.png\" width=\"200\">\n因此当我们改变其中一个对象时，其实是改变了所有的对象。","level":2,"tagId":32}
{"_id":{"$oid":"61aa38523976eb00014e44b6"},"exerciseKey":"45b15dc2-e189-4d3a-80b3-b65bef138ccb","category":"QA","renderType":"md","title":"与webpack类似的工具还有哪些？区别？","desc":null,"options":null,"explanation":"\n![](https://static.vue-js.com/8ed8d520-b1a4-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、模块化工具\n\n模块化是一种处理复杂系统分解为更好的可管理模块的方式\n\n可以用来分割，组织和打包应用。每个模块完成一个特定的子功能，所有的模块按某种方法组装起来，成为一个整体(`bundle`)\n\n在前端领域中，并非只有`webpack`这一款优秀的模块打包工具，还有其他类似的工具，例如`Rollup`、`Parcel`、`snowpack`，以及最近风头无两的`Vite`\n\n通过这些模块打包工具，能够提高我们的开发效率，减少开发成本\n\n这里没有提及`gulp`、`grunt`是因为它们只是定义为构建工具，不能类比\n\n### Rollup\n\n`Rollup` 是一款 `ES Modules` 打包器，从作用上来看，`Rollup` 与 `Webpack` 非常类似。不过相比于 `Webpack`，`Rollup `要小巧的多\n\n现在很多我们熟知的库都都使用它进行打包，比如：`Vue`、`React`和`three.js`等\n\n举个例子：\n\n```js\n// ./src/messages.js\nexport default {\n  hi: 'Hey Guys, I am zce~'\n}\n\n// ./src/logger.js\nexport const log = msg => {\n  console.log('---------- INFO ----------')\n  console.log(msg)\n  console.log('--------------------------')\n}\n\nexport const error = msg => {\n  console.error('---------- ERROR ----------')\n  console.error(msg)\n  console.error('---------------------------')\n}\n\n// ./src/index.js\nimport { log } from './logger'\nimport messages from './messages'\nlog(messages.hi)\n```\n\n然后通过`rollup`进行打包\n\n```js\n$ npx rollup ./src/index.js --file ./dist/bundle.js\n```\n\n打包结果如下图![](https://static.vue-js.com/8fe07830-b143-11eb-85f6-6fac77c0c9b3.png)\n\n可以看到，代码非常简洁，完成不像`webpack`那样存在大量引导代码和模块函数\n\n并且`error`方法由于没有被使用，输出的结果中并无`error`方法，可以看到，`rollup`默认开始`Tree-shaking` 优化输出结果\n\n因此，可以看到`Rollup`的优点：\n\n- 代码效率更简洁、效率更高\n- 默认支持 Tree-shaking\n\n但缺点也十分明显，加载其他类型的资源文件或者支持导入 `CommonJS` 模块，又或是编译 `ES` 新特性，这些额外的需求 `Rollup `需要使用插件去完成\n\n综合来看，`rollup`并不适合开发应用使用，因为需要使用第三方模块，而目前第三方模块大多数使用`CommonJs`方式导出成员，并且`rollup`不支持`HMR`，使开发效率降低\n\n但是在用于打包` JavaScript` 库时，`rollup`比 `webpack` 更有优势，因为其打包出来的代码更小、更快，其存在的缺点可以忽略\n\n\n\n\n\n### Parcel\n\nParcel ，是一款完全零配置的前端打包器，它提供了 “傻瓜式” 的使用体验，只需了解简单的命令，就能构建前端应用程序\n\n`Parcel` 跟 `Webpack` 一样都支持以任意类型文件作为打包入口，但建议使用`HTML`文件作为入口，该`HTML`文件像平时一样正常编写代码、引用资源。如下所示：\n\n```js\n<!-- ./src/index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Parcel Tutorials</title>\n</head>\n<body>\n  <script src=\"main.js\"></script>\n</body>\n</html>\n```\n\nmain.js文件通过`ES Moudle`方法导入其他模块成员\n\n```js\n// ./src/main.js\nimport { log } from './logger'\nlog('hello parcel')\n// ./src/logger.js\nexport const log = msg => {\n  console.log('---------- INFO ----------')\n  console.log(msg)\n}\n```\n\n运行之后，使用命令打包\n\n```cmd\nnpx parcel src/index.html\n```\n\n执行命令后，`Parcel`不仅打包了应用，同时也启动了一个开发服务器，跟`webpack Dev Server`一样\n\n跟`webpack`类似，也支持模块热替换，但用法更简单\n\n同时，`Parcel`有个十分好用的功能：支持自动安装依赖，像`webpack`开发阶段突然使用安装某个第三方依赖，必然会终止`dev server`然后安装再启动。而`Parcel`则免了这繁琐的工作流程\n\n同时，`Parcel`能够零配置加载其他类型的资源文件，无须像`webpack`那样配置对应的`loader`\n\n打包命令如下：\n\n```cmd\nnpx parcel src/index.html\n```\n\n由于打包过程是多进程同时工作，构建速度会比`Webpack` 快，输出文件也会被压缩，并且样式代码也会被单独提取到单个文件中\n\n![](https://static.vue-js.com/ec17e7a0-b1a2-11eb-85f6-6fac77c0c9b3.png)\n\n可以感受到，`Parcel `给开发者一种很大的自由度，只管去实现业务代码，其他事情用`Parcel`解决\n\n\n\n### Snowpack\n\nSnowpack，是一种闪电般快速的前端构建工具，专为现代`Web`设计，较复杂的打包工具（如`Webpack`或`Parcel`）的替代方案，利用`JavaScript`的本机模块系统，避免不必要的工作并保持流畅的开发体验\n\n开发阶段，每次保存单个文件时，`Webpack`和`Parcel`都需要重新构建和重新打包应用程序的整个`bundle`。而`Snowpack`为你的应用程序每个文件构建一次，就可以永久缓存，文件更改时，`Snowpack`会重新构建该单个文件\n\n下图给出`webpack`与`snowpack`打包区别：\n\n ![](https://static.vue-js.com/79197830-b1a3-11eb-85f6-6fac77c0c9b3.png)\n\n在重新构建每次变更时没有任何的时间浪费，只需要在浏览器中进行HMR更新\n\n### Vite\n\nvite ，是一种新型前端构建工具，能够显著提升前端开发体验\n\n它主要由两部分组成：\n\n- 一个开发服务器，它基于 原生 ES 模块 提供了丰富的内建功能，如速度快到惊人的 [模块热更新HMR\n- 一套构建指令，它使用 Rollup打包你的代码，并且它是预配置的，可以输出用于生产环境的优化过的静态资源\n\n其作用类似`webpack `+ `webpack-dev-server`，其特点如下：\n\n- 快速的冷启动\n- 即时的模块热更新\n- 真正的按需编译\n\n`vite`会直接启动开发服务器，不需要进行打包操作，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快\n\n利用现代浏览器支持`ES Module`的特性，当浏览器请求某个模块的时候，再根据需要对模块的内容进行编译，这种方式大大缩短了编译时间\n\n原理图如下所示：\n\n ![](https://static.vue-js.com/9f2eed30-b143-11eb-85f6-6fac77c0c9b3.png)\n\n在热模块`HMR`方面，当修改一个模块的时候，仅需让浏览器重新请求该模块即可，无须像`webpack`那样需要把该模块的相关依赖模块全部编译一次，效率更高\n\n\n\n### webpack\n\n相比上述的模块化工具，`webpack`大而全，很多常用的功能做到开箱即用。有两大最核心的特点：**一切皆模块**和**按需加载**\n\n与其他构建工具相比，有如下优势：\n\n- 智能解析：对 CommonJS 、 AMD 、ES6 的语法做了兼容\n- 万物模块：对 js、css、图片等资源文件都支持打包\n- 开箱即用：HRM、Tree-shaking等功能\n- 代码分割：可以将代码切割成不同的 chunk，实现按需加载，降低了初始化时间\n- 插件系统，具有强大的 Plugin 接口，具有更好的灵活性和扩展性\n- 易于调试：支持 SourceUrls 和 SourceMaps\n- 快速运行：webpack 使用异步 IO 并具有多级缓存，这使得 webpack 很快且在增量编译上更加快\n- 生态环境好：社区更丰富，出现的问题更容易解决\n","level":2.5,"tagId":28}
{"_id":{"$oid":"61aa38523dd7f70001832f12"},"exerciseKey":"462a3a5d-0364-41c1-b437-d8f63587ae1c","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst randomValue = 21;\n\nfunction getInfo() {\n\tconsole.log(typeof randomValue);\n\tconst randomValue = \"Lydia Hallie\";\n}\n\ngetInfo();\n```","options":"{\"options\":[\"\\\"number\\\"\",\"\\\"string\\\"\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[3]}","explanation":"通过 `const` 关键字声明的变量在被初始化之前不可被引用：这被称之为 _暂时性死区_。在函数 `getInfo` 中, 变量 `randomValue` 声明在`getInfo` 的作用域的此法环境中。在想要对 `typeof randomValue` 进行log之前，变量 `randomValue` 仍未被初始化： 错误`ReferenceError` 被抛出! JS引擎并不会根据作用域链网上寻找该变量，因为我们已经在 `getInfo` 函数中声明了 `randomValue` 变量。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3852ff0573000165b26b"},"exerciseKey":"47240d74-7170-41b6-b85d-2a6977ea9a11","category":"QA","renderType":"md","title":"实现有并行限制的Promise调度器","desc":null,"options":null,"explanation":"```js\nclass Scheduler {\n  constructor() {\n    this.queue = [];\n    this.maxCount = 2;\n    this.runCounts = 0;\n  }\n  add(promiseCreator) {\n    this.queue.push(promiseCreator);\n  }\n  taskStart() {\n    for (let i = 0; i < this.maxCount; i++) {\n      this.request();\n    }\n  }\n  request() {\n    if (!this.queue || !this.queue.length || this.runCounts >= this.maxCount) {\n      return;\n    }\n    this.runCounts++;\n\n    this.queue.shift()().then(() => {\n      this.runCounts--;\n      this.request();\n    });\n  }\n}\n   \nconst timeout = time => new Promise(resolve => {\n  setTimeout(resolve, time);\n})\n  \nconst scheduler = new Scheduler();\n  \nconst addTask = (time,order) => {\n  scheduler.add(() => timeout(time).then(()=>console.log(order)))\n}\n  \n  \naddTask(1000, '1');\naddTask(500, '2');\naddTask(300, '3');\naddTask(400, '4');\nscheduler.taskStart()\n// 2\n// 3\n// 1\n// 4\n```\n```","level":4,"tagId":26}
{"_id":{"$oid":"61aa3853cd02c30001dd2205"},"exerciseKey":"48502771-0558-47ba-84f6-00b0f3395236","category":"QA","renderType":"html","title":"HTTP 1.0和 HTTP 1.1 之间有哪些区别？","desc":null,"options":null,"explanation":"<p style=\"text-align:left;text-indent:2em;\"><strong>HTTP 1.0和 HTTP 1.1 有以下区别</strong>：</p><ul><li><strong>连接方面</strong> 的区别，http1.1 默认使用持久连接，而 http1.0 默认使用非持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。</li><li><strong>资源请求方面</strong> 的区别，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li><strong>缓存方面</strong> 的区别，在 http1.0 中主要使用 header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li><li>http1.1 中还<strong>新增了 host 字段</strong>，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。因此有了 host 字段，就可以将请求发往同一台服务器上的不同网站。</li><li>http1.1 相对于 http1.0 还新增了很多<strong>请求方法</strong>，如 PUT、HEAD、OPTIONS 等。</li></ul><p></p>","level":2,"tagId":16}
{"_id":{"$oid":"61aa385485c5f70001542f42"},"exerciseKey":"4ce73150-a0ff-495a-a669-191b7bd7c830","category":"QA","renderType":"html","title":"HTTP和HTTPS的区别","desc":null,"options":null,"explanation":"<p><code>HTTPS</code>是在<code>HTTP</code>的基础上加入了<code>SSL</code>协议，<code>SSL</code>依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密（在传输层）<br/> <code>HTTP</code> + 加密 + 认证 + 完整性保护 = <code>HTTPS</code><br/> </p><ol><li> <code>HTTPS</code>协议需要到CA申请证书或自制证书<br/> </li><li> <code>HTTP</code>的信息是明文传输；<br/> <code>HTTPS</code>则是具有安全性的ssl加密<br/> </li><li> <code>HTTP</code>是直接与TCP进行数据传输；<br/> 而<code>HTTPS</code>运行在<code>SSL/TLS</code>(安全传输层协议)之上，<code>SSL/TLS</code>运行在<code>TCP</code>之上，用的端口也不一样，前者是80（需要国内备案），后者是443<br/> </li><li> <code>HTTP</code>的连接很简单，是无状态的；<br/> <code>HTTPS</code>协议是由<code>SSL+HTTP</code>协议构建的，可进行加密传输、身份认证的网络协议，比<code>HTTP</code>协议安全<br/> </li></ol><p> </p>","level":2,"tagId":16}
{"_id":{"$oid":"61aa385791a75000018d2cb5"},"exerciseKey":"5893d2cc-0ce2-473b-9d42-341860dfdec9","category":"QA","renderType":"html","title":"设计模式分类","desc":null,"options":null,"explanation":"<p></p><div class=\"media-wrap image-wrap\"><img alt=\"在这里插入图片描述\" src=\"https://user-gold-cdn.xitu.io/2020/4/13/17172acfe20b2d2d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" loading=\"lazy\" class=\"medium-zoom-image\"/></div><p><br/> </p><ul><li> 创建型模式，共五种：<strong>工厂方法模式、抽象工厂模式</strong>、<strong>单例模式</strong>、建造者模式、<strong>原型模式。</strong><br/> </li><li> 结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br/> </li><li> 行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ul><p></p>","level":3,"tagId":27}
{"_id":{"$oid":"61aa385bbdfab500012c8479"},"exerciseKey":"65d6d0c8-c15e-43d2-9e94-4fb86284fbd0","category":"QA","renderType":"md","title":"小白鼠试毒问题","desc":"现在有 1000 瓶药水，其中有 1 瓶毒药，毒药药性发作致死时间为 1 小时。现在有 1 个小时的时间找出毒药，那么至少需要多少只小白鼠来试毒？假设药水量无限，可以无限稀释，喝药时间不计。","options":null,"explanation":"答案是**10只**\n\n## 解析\n\n给1000个瓶分别标上如下标签（10位长度）：\n\n* 0000000001 （第1瓶）\n* 0000000010 （第2瓶）\n* 0000000011 （第3瓶）\n* ...\n* 1111101000 （第1000瓶）\n\n从编号最后1位是1的所有的瓶子里面取出1滴混在一起（比如从第一瓶,第三瓶,.里分别取出一滴混在一起）并标上记号为1.给第一个小白鼠喝。\n\n* 从编号倒数第2位是1的所有的瓶子里面取出1滴混在一起并标上记号为2.给第2个小白鼠喝。\n* 从编号倒数第3位是1的所有的瓶子里面取出1滴混在一起并标上记号为3.给第3个小白鼠喝。\n* 从编号倒数第4位是1的所有的瓶子里面取出1滴混在一起并标上记号为4.给第4个小白鼠喝。\n* 从编号倒数第5位是1的所有的瓶子里面取出1滴混在一起并标上记号为5.给第5个小白鼠喝。\n* 从编号倒数第6位是1的所有的瓶子里面取出1滴混在一起并标上记号为6.给第6个小白鼠喝。\n* 以此类推...\n\n24小时后过来检查：\n\n* 如果只有第一个小白鼠死了。即00000 00001，则第1瓶有毒。\n* 如果只有第1,4个小白鼠死了。即00000 01001，则第9瓶有毒。\n* 以此类推...\n","level":3,"tagId":17}
{"_id":{"$oid":"61aa385c3d5f3a0001af55ba"},"exerciseKey":"6b4f3ad8-5cd8-49f3-941c-c916615546d0","category":"QA","renderType":"md","title":"怎么理解ES6中 Generator的？使用场景有哪些？","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/7db499b0-5947-11eb-ab90-d9ae814b240d.png)\n\n## 一、介绍\n\nGenerator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同\n\n回顾下上文提到的解决异步的手段：\n\n- 回调函数\n- promise\n\n那么，上文我们提到`promsie`已经是一种比较流行的解决异步方案，那么为什么还出现`Generator`？甚至`async/await`呢？\n\n该问题我们留在后面再进行分析，下面先认识下`Generator`\n\n### Generator函数\n\n执行 `Generator` 函数会返回一个遍历器对象，可以依次遍历 `Generator` 函数内部的每一个状态\n\n形式上，`Generator `函数是一个普通函数，但是有两个特征：\n\n- `function`关键字与函数名之间有一个星号\n- 函数体内部使用`yield`表达式，定义不同的内部状态\n\n```javascript\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n```\n\n\n\n## 二、使用\n\n`Generator` 函数会返回一个遍历器对象，即具有`Symbol.iterator`属性，并且返回给自己\n\n```javascript\nfunction* gen(){\n  // some code\n}\n\nvar g = gen();\n\ng[Symbol.iterator]() === g\n// true\n```\n\n通过`yield`关键字可以暂停`generator`函数返回的遍历器对象的状态\n\n```javascript\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\nvar hw = helloWorldGenerator();\n```\n\n上述存在三个状态：`hello`、`world`、`return`\n\n通过`next`方法才会遍历到下一个内部状态，其运行逻辑如下：\n\n- 遇到`yield`表达式，就暂停执行后面的操作，并将紧跟在`yield`后面的那个表达式的值，作为返回的对象的`value`属性值。\n- 下一次调用`next`方法时，再继续往下执行，直到遇到下一个`yield`表达式\n- 如果没有再遇到新的`yield`表达式，就一直运行到函数结束，直到`return`语句为止，并将`return`语句后面的表达式的值，作为返回的对象的`value`属性值。\n- 如果该函数没有`return`语句，则返回的对象的`value`属性值为`undefined`\n\n```javascript\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n`done`用来判断是否存在下个状态，`value`对应状态值\n\n`yield`表达式本身没有返回值，或者说总是返回`undefined`\n\n通过调用`next`方法可以带一个参数，该参数就会被当作上一个`yield`表达式的返回值\n\n```javascript\nfunction* foo(x) {\n  var y = 2 * (yield (x + 1));\n  var z = yield (y / 3);\n  return (x + y + z);\n}\n\nvar a = foo(5);\na.next() // Object{value:6, done:false}\na.next() // Object{value:NaN, done:false}\na.next() // Object{value:NaN, done:true}\n\nvar b = foo(5);\nb.next() // { value:6, done:false }\nb.next(12) // { value:8, done:false }\nb.next(13) // { value:42, done:true }\n```\n\n正因为`Generator `函数返回`Iterator`对象，因此我们还可以通过`for...of`进行遍历\n```javascript\nfunction* foo() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor (let v of foo()) {\n  console.log(v);\n}\n// 1 2 3 4 5\n```\n\n原生对象没有遍历接口，通过`Generator `函数为它加上这个接口，就能使用`for...of`进行遍历了\n\n```javascript\nfunction* objectEntries(obj) {\n  let propKeys = Reflect.ownKeys(obj);\n\n  for (let propKey of propKeys) {\n    yield [propKey, obj[propKey]];\n  }\n}\n\nlet jane = { first: 'Jane', last: 'Doe' };\n\nfor (let [key, value] of objectEntries(jane)) {\n  console.log(`${key}: ${value}`);\n}\n// first: Jane\n// last: Doe\n```\n\n\n\n## 三、异步解决方案\n\n回顾之前展开异步解决的方案：\n\n- 回调函数\n- Promise 对象\n- generator 函数\n- async/await\n\n\n\n这里通过文件读取案例，将几种解决异步的方案进行一个比较：\n\n### 回调函数\n\n所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，再调用这个函数\n\n```javascript\nfs.readFile('/etc/fstab', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n  fs.readFile('/etc/shells', function (err, data) {\n    if (err) throw err;\n    console.log(data);\n  });\n});\n```\n\n`readFile`函数的第三个参数，就是回调函数，等到操作系统返回了`/etc/passwd`这个文件以后，回调函数才会执行\n\n\n\n### Promise\n\n`Promise`就是为了解决回调地狱而产生的，将回调函数的嵌套，改成链式调用\n\n```js\nconst fs = require('fs');\n\nconst readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\n\n\nreadFile('/etc/fstab').then(data =>{\n    console.log(data)\n    return readFile('/etc/shells')\n}).then(data => {\n    console.log(data)\n})\n```\n\n这种链式操作形式，使异步任务的两段执行更清楚了，但是也存在了很明显的问题，代码变得冗杂了，语义化并不强\n\n\n\n### generator\n\n`yield`表达式可以暂停函数执行，`next`方法用于恢复函数执行，这使得`Generator`函数非常适合将异步任务同步化\n\n```javascript\nconst gen = function* () {\n  const f1 = yield readFile('/etc/fstab');\n  const f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n\n\n\n\n### async/await\n\n将上面`Generator`函数改成`async/await`形式，更为简洁，语义化更强了\n\n```js\nconst asyncReadFile = async function () {\n  const f1 = await readFile('/etc/fstab');\n  const f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n\n\n### 区别：\n\n通过上述代码进行分析，将`promise`、`Generator`、`async/await`进行比较：\n\n- `promise`和`async/await`是专门用于处理异步操作的\n- `Generator`并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署`Interator`接口...）\n- `promise`编写代码相比`Generator`、`async`更为复杂化，且可读性也稍差\n\n- `Generator`、`async`需要与`promise`对象搭配处理异步情况\n- `async`实质是`Generator`的语法糖，相当于会自动执行`Generator`函数\n- `async`使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案\n\n\n\n## 四、使用场景\n\n`Generator`是异步解决的一种方案，最大特点则是将异步操作同步化表达出来\n\n```js\nfunction* loadUI() {\n  showLoadingScreen();\n  yield loadUIDataAsynchronously();\n  hideLoadingScreen();\n}\nvar loader = loadUI();\n// 加载UI\nloader.next()\n\n// 卸载UI\nloader.next()\n```\n\n包括`redux-saga `中间件也充分利用了`Generator`特性\n\n```js\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport Api from '...'\n\nfunction* fetchUser(action) {\n   try {\n      const user = yield call(Api.fetchUser, action.payload.userId);\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n   } catch (e) {\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\n   }\n}\n\nfunction* mySaga() {\n  yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\nfunction* mySaga() {\n  yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\nexport default mySaga;\n```\n\n还能利用`Generator`函数，在对象上实现`Iterator`接口\n\n```js\nfunction* iterEntries(obj) {\n  let keys = Object.keys(obj);\n  for (let i=0; i < keys.length; i++) {\n    let key = keys[i];\n    yield [key, obj[key]];\n  }\n}\n\nlet myObj = { foo: 3, bar: 7 };\n\nfor (let [key, value] of iterEntries(myObj)) {\n  console.log(key, value);\n}\n\n// foo 3\n// bar 7\n```\n\n\n","level":3.5,"tagId":24}
{"_id":{"$oid":"61aa385d85c5f70001542f7b"},"exerciseKey":"6c0d11e8-a6cf-4f70-af8b-17f0490f36e2","category":"Choice","renderType":"md","title":"将会发生什么?","desc":"```javascript\nlet config = {\n  alert: setInterval(() => {\n    console.log('Alert!')\n  }, 1000)\n}\n\nconfig = null\n```","options":"{\"options\":[\"setInterval 的回调不会被调用\",\"setInterval 的回调被调用一次\",\"setInterval 的回调仍然会被每秒钟调用\",\"我们从没调用过 config.alert(), config 为 null\"],\"isMulti\":false,\"answer\":[2]}","explanation":"一般情况下当我们将对象赋值为 `null`, 那些对象会被进行 _垃圾回收（garbage collected）_ 因为已经没有对这些对象的引用了。然而，`setInterval`的参数是一个箭头函数（所以上下文绑定到对象 `config` 了），回调函数仍然保留着对 `config`的引用。只要存在引用，对象就不会被垃圾回收。因为没有被垃圾回收，`setInterval` 的回调每1000ms (1s)会被调用一次。","level":1,"tagId":32}
{"_id":{"$oid":"61aa385ebdfab500012c848b"},"exerciseKey":"706d3e5d-a02b-4925-84e2-3e2c81c7ef1b","category":"QA","renderType":"html","title":"GET和POST的请求的区别","desc":null,"options":null,"explanation":"<p style=\"text-align:left;text-indent:2em;\">Post 和 Get 是 HTTP 请求的两种方法。</p><ul><li>应用场景：GET 请求是一个<strong><u><span style=\"color:#f32784\">幂等</span></u></strong>的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景。比如注册用户这一类的操作。</li><li>是否缓存：因为不同的应用场景，所以浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。</li><li>发送的报文格式：Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</li><li>安全性：Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说，一个方面是不太安全，因为请求的 url 会被保留在历史记录中。</li><li>请求长度：浏览器由于对 url 有一个长度上的限制，所以会影响 get 请求发送数据时的长度。<span style=\"color:#f32784\">这个限制是浏览器规定的，并不是 RFC 规定的。</span></li><li>参数类型：post 的参数传递支持更多的数据类型。</li></ul><p style=\"text-align:left;text-indent:2em;\"></p><p></p>","level":3,"tagId":16}
{"_id":{"$oid":"61aa3862c2d0220001c964ce"},"exerciseKey":"7ce6573e-b10b-4962-a732-aec1ca3207a1","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst person = {\n  name: \"Lydia\",\n  age: 21\n}\n\nconst changeAge = (x = { ...person }) => x.age += 1\nconst changeAgeAndName = (x = { ...person }) => {\n  x.age += 1\n  x.name = \"Sarah\"\n}\n\nchangeAge(person)\nchangeAgeAndName()\n\nconsole.log(person)\n```","options":"{\"options\":[\"{name: \\\"Sarah\\\", age: 22}\",\"{name: \\\"Sarah\\\", age: 23}\",\"{name: \\\"Lydia\\\", age: 22}\",\"{name: \\\"Lydia\\\", age: 23}\"],\"isMulti\":false,\"answer\":[2]}","explanation":"函数 `changeAge` 和函数 `changeAgeAndName` 有着不同的参数，定义一个 _新_ 生成的对象 `{ ...person }`。这个对象有着所有 `person` 对象 中 k/v 值的副本。\n首项, 我们调用 `changeAge` 函数并传递 `person` 对象作为它的参数。这个函数对 `age` 属性进行加一操作。`person` 现在是 `{ name: \"Lydia\", age: 22 }`。\n然后，我们调用函数 `changeAgeAndName` ，然而我们没有传递参数。取而代之，`x` 的值等价 _new_ 生成的对象: `{ ...person }`。因为它是一个新生成的对象，它并不会对对象 `person` 造成任何副作用。`person` 仍然等价于 `{ name: \"Lydia\", age: 22 }`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38630f30890001ab812c"},"exerciseKey":"7e425b82-69b3-41e3-997a-72090ce30e21","category":"QA","renderType":"md","title":"React构建组件的方式有哪些？有什么区别？","desc":null,"options":null,"explanation":"## 一、是什么\n\n组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式\n\n在`React`中，一个类、一个函数都可以视为一个组件\n\n组件所存在的优势：\n\n- 降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现\n- 调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单\n- 提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级\n\n\n\n## 二、如何构建\n\n在`React`目前来讲，组件的创建主要分成了三种方式：\n\n- 函数式创建\n- 通过 React.createClass 方法创建\n- 继承 React.Component 创建\n\n\n\n### 函数式创建\n\n在`React Hooks`出来之前，函数式组件可以视为无状态组件，只负责根据传入的`props`来展示视图，不涉及对`state`状态的操作\n\n大多数组件可以写为无状态组件，通过简单组合构建其他组件\n\n在`React`中，通过函数简单创建组件的示例如下：\n\n```jsx\nfunction HelloComponent(props, /* context */) {\n  return <div>Hello {props.name}</div>\n}\n```\n\n\n\n\n\n### 通过 React.createClass 方法创建\n\n`React.createClass`是react刚开始推荐的创建组件的方式，目前这种创建方式已经不怎么用了\n\n像上述通过函数式创建的组件的方式，最终会通过`babel`转化成`React.createClass`这种形式，转化成如下：\n\n```jsx\nfunction HelloComponent(props) /* context */{\n  return React.createElement(\n    \"div\",\n    null,\n    \"Hello \",\n    props.name\n  );\n}\n```\n\n由于上述的编写方式过于冗杂，目前基本上不使用上\n\n\n\n### 继承 React.Component 创建\n\n同样在`react hooks`出来之前，有状态的组件只能通过继承`React.Component`这种形式进行创建\n\n有状态的组件也就是组件内部存在维护的数据，在类创建的方式中通过`this.state`进行访问\n\n当调用`this.setState`修改组件的状态时，组价会再次会调用`render()`方法进行重新渲染\n\n通过继承`React.Component`创建一个时钟示例如下：\n\n```jsx\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Seconds: {this.state.seconds}\n      </div>\n    );\n  }\n}\n```\n\n\n\n## 三、区别\n\n由于`React.createClass `创建的方式过于冗杂，并不建议使用\n\n而像函数式创建和类组件创建的区别主要在于需要创建的组件是否需要为有状态组件：\n\n- 对于一些无状态的组件创建，建议使用函数式创建的方式\n\n- 由于`react hooks`的出现，函数式组件创建的组件通过使用`hooks`方法也能使之成为有状态组件，再加上目前推崇函数式编程，所以这里建议都使用函数式的方式来创建组件\n\n在考虑组件的选择原则上，能用无状态组件则用无状态组件\n\n","level":1,"tagId":13}
{"_id":{"$oid":"61aa3863d00c060001bf125a"},"exerciseKey":"7f7e5941-1079-476a-8a62-8ca51879c7ab","category":"QA","renderType":"md","title":"强缓存和协商缓存分别是什么？","desc":null,"options":null,"explanation":"这里说的缓存是指浏览器（客户端）在本地磁盘中对访问过的资源保存的副本文件。\n\n浏览器缓存主要有以下几个优点：\n\n* 减少重复数据请求，避免通过网络再次加载资源，节省流量。\n* 降低服务器的压力，提升网站性能。\n* 加快客户端加载网页的速度， 提升用户体验。\n\n浏览器缓存分为强缓存和协商缓存，两者有两个比较明显的区别：\n\n* 如果浏览器命中强缓存，则不需要给服务器发请求；而协商缓存最终由服务器来决定是否使用缓存，即客户端与服务器之间存在一次通信。\n* 在 chrome 中强缓存（虽然没有发出真实的 http 请求）的请求状态码返回是 200 (from cache)；而协商缓存如果命中走缓存的话，请求的状态码是 304 (not modified)。 不同浏览器的策略不同，在 Fire Fox中，from cache 状态码是 304.\n\n## 请求流程\n\n浏览器在第一次请求后缓存资源，再次请求时，会进行下面两个步骤：\n\n* 浏览器会获取该缓存资源的 header 中的信息，根据 response header 中的 expires 和 cache-control 来判断是否命中强缓存，如果命中则直接从缓存中获取资源。\n* 如果没有命中强缓存，浏览器就会发送请求到服务器，这次请求会带上 IF-Modified-Since 或者 IF-None-Match, 它们的值分别是第一次请求返回 Last-Modified或者 Etag，由服务器来对比这一对字段来判断是否命中。如果命中，则服务器返回 304 状态码，并且不会返回资源内容，浏览器会直接从缓存获取；否则服务器最终会返回资源的实际内容，并更新 header 中的相关缓存字段。\n\n## 强缓存\n\n强缓存是根据返回头中的 Expires 或者 Cache-Control 两个字段来控制的，都是表示资源的缓存有效时间。\n\n* Expires 是 http 1.0 的规范，值是一个GMT 格式的时间点字符串，比如 Expires:Mon,18 Oct 2066 23:59:59 GMT 。这个时间点代表资源失效的时间，如果当前的时间戳在这个时间之前，则判定命中缓存。有一个缺点是，失效时间是一个绝对时间，如果服务器时间与客户端时间偏差较大时，就会导致缓存混乱。而服务器的时间跟用户的实际时间是不一样是很正常的，所以 Expires 在实际使用中会带来一些麻烦。\n* Cache-Control这个字段是 http 1.1 的规范，一般常用该字段的 max-age 值来进行判断，它是一个相对时间，比如 .Cache-Control:max-age=3600 代表资源的有效期是 3600 秒。并且返回头中的 Date 表示消息发送的时间，表示当前资源在 Date ~ Date +3600s 这段时间里都是有效的。不过我在实际使用中常常遇到设置了 max-age 之后，在 max-age 时间内重新访问资源却会返回 304 not modified ，这是由于服务器的时间与本地的时间不同造成的。当然 Cache-Control 还有其他几个值可以设置， 不过相对来说都很少用了：\n\t* no-cache 不使用本地缓存。需要使用协商缓存。\n\t* no-store直接禁止浏览器缓存数据，每次请求资源都会向服务器要完整的资源， 类似于 network 中的 disabled cache。\n\t* public 可以被所有用户缓存，包括终端用户和 cdn 等中间件代理服务器。\n\t* private 只能被终端用户的浏览器缓存。\n\n如果 Cache-Control与 Expires 同时存在的话， Cache-Control 的优先级高于 Expires 。\n\n## 协商缓存\n\n协商缓存是由服务器来确定缓存资源是否可用。 主要涉及到两对属性字段，都是成对出现的，即第一次请求的响应头带上某个字, Last-Modified 或者 Etag，则后续请求则会带上对应的请求字段 If-Modified-Since或者 If-None-Match，若响应头没有 Last-Modified 或者 Etag 字段，则请求头也不会有对应的字段。\n\n* Last-Modified/If-Modified-Since 二者的值都是 GMT 格式的时间字符串， Last-Modified 标记最后文件修改时间， 下一次请求时，请求头中会带上 If-Modified-Since 值就是 Last-Modified 告诉服务器我本地缓存的文件最后修改的时间，在服务器上根据文件的最后修改时间判断资源是否有变化， 如果文件没有变更则返回 304 Not Modified ，请求不会返回资源内容，浏览器直接使用本地缓存。当服务器返回 304 Not Modified 的响应时，response header 中不会再添加的 Last-Modified 去试图更新本地缓存的 Last-Modified， 因为既然资源没有变化，那么 Last-Modified 也就不会改变；如果资源有变化，就正常返回返回资源内容，新的 Last-Modified 会在 response header 返回，并在下次请求之前更新本地缓存的 Last-Modified，下次请求时，If-Modified-Since会启用更新后的 Last-Modified。\n* Etag/If-None-Match， 值都是由服务器为每一个资源生成的唯一标识串，只要资源有变化就这个值就会改变。服务器根据文件本身算出一个哈希值并通过 ETag字段返回给浏览器，接收到 If-None-Match 字段以后，服务器通过比较两者是否一致来判定文件内容是否被改变。与 Last-Modified 不一样的是，当服务器返回 304 Not Modified 的响应时，由于在服务器上ETag 重新计算过，response header中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化。\n\nHTTP 中并没有指定如何生成 ETag，可以由开发者自行生成，哈希是比较理想的选择。\n\n\n\n","level":2,"tagId":16}
{"_id":{"$oid":"61aa383f34458700017f1bb3"},"exerciseKey":"04705905-b7f4-41cc-8828-1b14f2f42af2","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst person = {\n  name: \"Lydia\",\n  age: 21\n}\n\nfor (const [x, y] of Object.entries(person)) {\n  console.log(x, y)\n}\n```","options":"{\"options\":[\"name Lydia and age 21\",\"[\\\"name\\\", \\\"Lydia\\\"] and [\\\"age\\\", 21]\",\"[\\\"name\\\", \\\"age\\\"] and undefined\",\"Error\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`Object.entries()`方法返回一个给定对象自身可枚举属性的键值对数组，上述情况返回一个二维数组，数组每个元素是一个包含键和值的数组：\n`[['name'，'Lydia']，['age'，21]]`\n使用`for-of`循环，我们可以迭代数组中的每个元素，上述情况是子数组。 我们可以使用`const [x，y]`在`for-of`循环中解构子数组。 `x`等于子数组中的第一个元素，`y`等于子数组中的第二个元素。\n第一个子阵列是`[“name”，“Lydia”]`，其中`x`等于`name`，而`y`等于`Lydia`。\n第二个子阵列是`[“age”，21]`，其中`x`等于`age`，而`y`等于`21`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3840bdfab500012c83b6"},"exerciseKey":"06e95561-9b06-4cd8-b700-4305c1743808","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nconst shape = {\n  radius: 10,\n  diameter() {\n    return this.radius * 2\n  },\n  perimeter: () => 2 * Math.PI * this.radius\n}\n\nshape.diameter()\nshape.perimeter()\n```","options":"{\"options\":[\"20 and 62.83185307179586\",\"20 and NaN\",\"20 and 63\",\"NaN and 63\"],\"isMulti\":false,\"answer\":[1]}","explanation":"注意 `diameter` 的值是一个常规函数，但是 `perimeter` 的值是一个箭头函数。\n对于箭头函数，`this` 关键字指向的是它当前周围作用域（简单来说是包含箭头函数的常规函数，如果没有常规函数的话就是全局对象），这个行为和常规函数不同。这意味着当我们调用 `perimeter` 时，`this` 不是指向 `shape` 对象，而是它的周围作用域（在例子中是 `window`）。\n在 `window` 中没有 `radius` 这个属性，因此返回 `undefined`。","level":1.5,"tagId":32}
{"_id":{"$oid":"61aa38403976eb00014e443d"},"exerciseKey":"08ec624c-9c3d-4f11-ba4f-09e0986c9838","category":"QA","renderType":"md","title":"React 组件间怎么进行通信？","desc":null,"options":null,"explanation":"## 一、是什么\n\n我们将组件间通信可以拆分为两个词：\n\n- 组件\n- 通信\n\n`React`的组件灵活多样，按照不同的方式可以分成很多类型的组件\n\n而通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的，广义上，任何信息的交通都是通信\n\n组件间通信即指组件通过某种方式来传递信息以达到某个目的\n\n\n## 二、如何通信\n\n组件传递的方式有很多种，根据传送者和接收者可以分为如下：\n\n- 父组件向子组件传递\n- 子组件向父组件传递\n- 兄弟组件之间的通信\n- 父组件向后代组件传递\n- 非关系组件传递\n\n\n### 父组件向子组件传递\n\n由于`React`的数据流动为单向的，父组件向子组件传递是最常见的方式\n\n父组件在调用子组件的时候，只需要在子组件标签内传递参数，子组件通过`props`属性就能接收父组件传递过来的参数\n\n```jsx\nfunction EmailInput(props) {\n  return (\n    <label>\n      Email: <input value={props.email} />\n    </label>\n  );\n}\n\nconst element = <EmailInput email=\"123124132@163.com\" />;\n```\n\n\n### 子组件向父组件传递\n\n子组件向父组件通信的基本思路是，父组件向子组件传一个函数，然后通过这个函数的回调，拿到子组件传过来的值\n\n父组件对应代码如下：\n\n```jsx\nclass Parents extends Component {\n  constructor() {\n    super();\n    this.state = {\n      price: 0\n    };\n  }\n\n  getItemPrice(e) {\n    this.setState({\n      price: e\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>price: {this.state.price}</div>\n        {/* 向子组件中传入一个函数  */}\n        <Child getPrice={this.getItemPrice.bind(this)} />\n      </div>\n    );\n  }\n}\n```\n\n子组件对应代码如下：\n\n```jsx\nclass Child extends Component {\n  clickGoods(e) {\n    // 在此函数中传入值\n    this.props.getPrice(e);\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.clickGoods.bind(this, 100)}>goods1</button>\n        <button onClick={this.clickGoods.bind(this, 1000)}>goods2</button>\n      </div>\n    );\n  }\n}\n```\n\n\n\n### 兄弟组件之间的通信\n\n如果是兄弟组件之间的传递，则父组件作为中间层来实现数据的互通，通过使用父组件传递\n\n```jsx\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {count: 0}\n  }\n  setCount = () => {\n    this.setState({count: this.state.count + 1})\n  }\n  render() {\n    return (\n      <div>\n        <SiblingA\n          count={this.state.count}\n        />\n        <SiblingB\n          onClick={this.setCount}\n        />\n      </div>\n    );\n  }\n}\n```\n\n\n\n### 父组件向后代组件传递\n\n父组件向后代组件传递数据是一件最普通的事情，就像全局数据一样\n\n使用`context`提供了组件之间通讯的一种方式，可以共享数据，其他数据都能读取对应的数据\n\n通过使用`React.createContext`创建一个`context`\n\n```js\n const PriceContext = React.createContext('price')\n```\n\n`context`创建成功后，其下存在`Provider`组件用于创建数据源，`Consumer`组件用于接收数据，使用实例如下：\n\n`Provider`组件通过`value`属性用于给后代组件传递数据：\n\n```jsx\n<PriceContext.Provider value={100}>\n</PriceContext.Provider>\n```\n\n如果想要获取`Provider`传递的数据，可以通过`Consumer`组件或者或者使用`contextType`属性接收，对应分别如下：\n\n```jsx\nclass MyClass extends React.Component {\n  static contextType = PriceContext;\n  render() {\n    let price = this.context;\n    /* 基于这个值进行渲染工作 */\n  }\n}\n```\n\n`Consumer`组件：\n\n````jsx\n<PriceContext.Consumer>\n    { /*这里是一个函数*/ }\n    {\n        price => <div>price：{price}</div>\n    }\n</PriceContext.Consumer>\n````\n\n### 非关系组件传递\n\n如果组件之间关系类型比较复杂的情况，建议将数据进行一个全局资源管理，从而实现通信，例如`redux`。关于`redux`的使用后续再详细介绍\n\n\n## 三、总结\n\n由于`React`是单向数据流，主要思想是组件不会改变接收的数据，只会监听数据的变化，当数据发生变化时它们会使用接收到的新值，而不是去修改已有的值\n\n因此，可以看到通信过程中，数据的存储位置都是存放在上级位置中\n","level":3,"tagId":13}
{"_id":{"$oid":"61aa384181337a00011e04ff"},"exerciseKey":"0d68ac37-7345-4813-a9cd-95a5089c61ba","category":"QA","renderType":"md","title":"JavaScript脚本延迟加载的方式有哪些？","desc":null,"options":null,"explanation":"延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n\n一般有以下几种方式：\n\n* defer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n* async 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n* 动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n* 使用 setTimeout 延迟方法： 设置一个定时器来延迟加载js脚本文件\n* 让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。","level":3.5,"tagId":10}
{"_id":{"$oid":"61aa3847bdfab500012c83f1"},"exerciseKey":"1ea15cb6-7aa1-4d94-8bae-f20fa5594c87","category":"QA","renderType":"md","title":"怎么使用 setTimeout 实现 setInterval？","desc":null,"options":null,"explanation":"setInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\n\n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\n\n```js\n// 思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\n\nfunction mySetInterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n\n  // 设置递归函数，模拟定时器执行。\n  function interval() {\n    if (timer.flag) {\n      fn();\n      setTimeout(interval, timeout);\n    }\n  }\n\n  // 启动定时器\n  setTimeout(interval, timeout);\n\n  // 返回控制器\n  return timer;\n}\n\n```","level":3,"tagId":26}
{"_id":{"$oid":"61aa3849cd02c30001dd21b4"},"exerciseKey":"29c67c75-924b-461b-9a71-c5e0fd5e42ef","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nclass Person {\n  constructor(name) {\n    this.name = name\n  }\n}\n\nconst member = new Person(\"John\")\nconsole.log(typeof member)\n```","options":"{\"options\":[\"\\\"class\\\"\",\"\\\"function\\\"\",\"\\\"object\\\"\",\"\\\"string\\\"\"],\"isMulti\":false,\"answer\":[2]}","explanation":"类是构造函数的语法糖，如果用构造函数的方式来重写`Person`类则将是：\n```javascript\nfunction Person() {\n  this.name = name\n}\n```\n通过`new`来调用构造函数，将会生成构造函数`Person`的实例，对实例执行`typeof`关键字将返回`\"object\"`，上述情况打印出`\"object\"`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa384d3976eb00014e449b"},"exerciseKey":"368a4fdc-4c5f-4a97-81a8-eab34a3fcb7c","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nvar num = 8\nvar num = 10\n\nconsole.log(num)\n```","options":"{\"options\":[\"8\",\"10\",\"SyntaxError\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"使用 `var` 关键字，你可以用相同的名称声明多个变量。然后变量将保存最新的值。\n你不能使用 `let` 或 `const` 来实现这一点，因为它们是块作用域的。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38508e97d900018086ca"},"exerciseKey":"3d3c752d-f969-44ce-acaf-18e43d52f069","category":"QA","renderType":"md","title":"实现 event模块","desc":"实现node中回调函数的机制，node中回调函数其实是内部使用了观察者模式。\n\n>观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。\n\n","options":null,"explanation":"```js\nfunction EventEmitter() {\n  this.events = new Map();\n}\n\n// 需要实现的一些方法：\n// addListener、removeListener、once、removeAllListeners、emit\n\n// 模拟实现addlistener方法\nconst wrapCallback = (fn, once = false) => ({ callback: fn, once });\nEventEmitter.prototype.addListener = function(type, fn, once = false) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) {\n    // 没有type绑定事件\n    this.events.set(type, wrapCallback(fn, once));\n  } else if (hanlder && typeof hanlder.callback === 'function') {\n    // 目前type事件只有一个回调\n    this.events.set(type, [hanlder, wrapCallback(fn, once)]);\n  } else {\n    // 目前type事件数>=2\n    hanlder.push(wrapCallback(fn, once));\n  }\n}\n// 模拟实现removeListener\nEventEmitter.prototype.removeListener = function(type, listener) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  if (!Array.isArray(this.events)) {\n    if (hanlder.callback === listener.callback) this.events.delete(type);\n    else return;\n  }\n  for (let i = 0; i < hanlder.length; i++) {\n    const item = hanlder[i];\n    if (item.callback === listener.callback) {\n      hanlder.splice(i, 1);\n      i--;\n      if (hanlder.length === 1) {\n        this.events.set(type, hanlder[0]);\n      }\n    }\n  }\n}\n// 模拟实现once方法\nEventEmitter.prototype.once = function(type, listener) {\n  this.addListener(type, listener, true);\n}\n// 模拟实现emit方法\nEventEmitter.prototype.emit = function(type, ...args) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  if (Array.isArray(hanlder)) {\n    hanlder.forEach(item => {\n      item.callback.apply(this, args);\n      if (item.once) {\n        this.removeListener(type, item);\n      }\n    })\n  } else {\n    hanlder.callback.apply(this, args);\n    if (hanlder.once) {\n      this.events.delete(type);\n    }\n  }\n  return true;\n}\nEventEmitter.prototype.removeAllListeners = function(type) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  this.events.delete(type);\n}\n\n```","level":1,"tagId":26}
{"_id":{"$oid":"61aa3850d00c060001bf11d7"},"exerciseKey":"3e5ade06-6338-4949-b642-47f09bcff045","category":"QA","renderType":"md","title":"CSS匹配规则顺序是怎么样的？","desc":null,"options":null,"explanation":"相信大多数初学者都会认为CSS匹配是左向右的，其实恰恰相反。\n\nCSS匹配发生在Render Tree构建时（Chrome Dev Tools将其归属于Layout过程）。此时浏览器构建出了DOM，而且拿到了CSS样式，此时要做的就是把样式跟DOM上的节点对应上，浏览器为了提高性能需要做的就是快速匹配。\n\n首先要明确一点，浏览器此时是给一个\"可见\"节点找对应的规则，这和jQuery选择器不同，后者是使用一个规则去找对应的节点，这样从左到右或许更快。但是对于前者，由于CSS的庞大，一个CSS文件中或许有上千条规则，而且对于当前节点来说，大多数规则是匹配不上的，稍微想一下就知道，如果从右开始匹配（也是从更精确的位置开始），能更快排除不合适的大部分节点，而如果从左开始，只有深入了才会发现匹配失败，如果大部分规则层级都比较深，就比较浪费资源了。\n\n除了上面这点，我们前面还提到DOM构建是\"循序渐进的\"，而且DOM不阻塞Render Tree构建（只有CSSOM阻塞），这样也是为了能让页面更早有元素呈现。\n\n考虑如下情况，如果我们此时构建的只是部分DOM，而CSSOM构建完成，浏览器就会构建Render Tree。\n\n这个时候对每一个节点，如果找到一条规则从右向左匹配，我们只需要逐层观察该节点父节点是否匹配，而此时其父节点肯定已经在DOM上。\n\n但是反过来，我们可能会匹配到一个DOM上尚未存在的节点，此时的匹配过程就浪费了资源。","level":2,"tagId":11}
{"_id":{"$oid":"61aa385885c5f70001542f62"},"exerciseKey":"5b612b6a-3828-4cd9-9de4-b05bb36a4e3d","category":"QA","renderType":"md","title":"html和css中的图片加载与渲染规则是什么样的？","desc":null,"options":null,"explanation":"Web浏览器先会把获取到的HTML代码解析成一个DOM树，HTML中的每个标签都是DOM树中的一个节点，包括display: none隐藏的标签，还有JavaScript动态添加的元素等。浏览器会获取到所有样式，并会把所有样式解析成样式规则，在解析的过程中会去掉浏览器不能识别的样式。\n\n浏览器将会把DOM树和样式规则组合在一起（DOM元素和样式规则匹配）后将会合建一个渲染树（Render Tree），渲染树类似于DOM树，但两者别还是很大的：渲染树能识别样式，渲染树中每个节点（NODE）都有自己的样式，而且渲染树不包含隐藏的节点（比如display:none的节点，还有</head>内的一些节点），因为这些节点不会用于渲染，也不会影响节点的渲染，因此不会包含到渲染树中。一旦渲染树构建完毕后，浏览器就可以根据渲染树来绘制页面了。\n\n简单的归纳就是浏览器渲染Web页面大约会经过六个过程：\n\n* 解析HTML，构成DOM树\n* 解析加载的样式，构建样式规则树\n* 加载JavaScript，执行JavaScript代码\n* DOM树和样式规则树进行匹配，构成渲染树\n* 计算元素位置进行页面布局\n* 绘制页面，最终在浏览器中呈现\n\n是不是会感觉这个和我们图像加载渲染没啥关系一样，事实并非如此，因为img、picture或者background-image都是DOM树或样式规则中的一部分，那么咱们套用进来，图片加载和渲染的时机有可能是下面这样：\n\n* 解析HTML时，如果遇到img或picture标签，将会加载图片\n* 解析加载的样式，遇到background-image时，并不会加载图片，而会构建样式规则树\n* 加载JavaScript，执行JavaScript代码，如果代码中有创建img元素之类，会添加到DOM树中；如查有添加background-image规则，将会添加到样式规则树中\n* DOM树和样式规则匹配时构建渲染树，如果DOM树节点匹配到样式规则中的backgorund-image，则会加载背景图片\n* 计算元素（图片）位置进行布局\n* 开始渲染图片，浏览器将呈现渲染出来的图片\n\n上面套用浏览器渲染页面的机制，但图片加载与渲染还是有一定的规则。因为，页面中不是所有的<img>（或picture）元素引入的图片和background-image引入的背景图片都会加载的。那么就引发出新问题了，什么时候会真正的加载，加载规则又是什么？\n\n先概括一点：\n\n> Web页面中不是所有的图片都会加载和渲染！\n\n根据前面介绍的浏览器加载和渲染机制，我们可以归纳为：\n\n* <img>、<picture>和设置background-image的元素遇到display:none时，图片会加载但不会渲染\n* <img>、<picture>和设置background-image的元素祖先元素设置display:none时，background-image不会渲染也不会加载，而img和picture引入的图片不会渲染但会加载\n* <img>、<picture>和background-image引入相同路径相同图片文件名时，图片只会加载一次\n* 样式文件中background-image引入的图片，如果匹配不到DOM元素，图片不会加载\n* 伪类引入的background-image，比如:hover，只有当伪类被触发时，图片才会加载\n","level":3,"tagId":12}
{"_id":{"$oid":"61aa385b0d111e0001037271"},"exerciseKey":"6612daa5-7854-4379-bdb9-46398ef4f87c","category":"Choice","renderType":"md","title":"以下哪一项会对对象 `person` 有副作用？","desc":"```javascript\nconst person = {\n\tname: \"Lydia Hallie\",\n\taddress: {\n\t\tstreet: \"100 Main St\"\n\t}\n};\n\nObject.freeze(person);\n```","options":"{\"options\":[\"person.name = \\\"Evan Bacon\\\"\",\"delete person.address\",\"person.address.street = \\\"101 Main St\\\"\",\"person.pet = { name: \\\"Mara\\\" }\"],\"isMulti\":false,\"answer\":[2]}","explanation":"使用方法 `Object.freeze` 对一个对象进行 _冻结_。不能对属性进行添加，修改，删除。\n然而，它仅 对对象进行 _浅_ 冻结，意味着只有 对象中的 _直接_ 属性被冻结。如果属性是另一个 object，像案例中的 `address`，`address` 中的属性没有被冻结，仍然可以被修改。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa385c291c0100017ee1fe"},"exerciseKey":"6b11a97d-74b0-4768-a8ae-33b6886da458","category":"QA","renderType":"md","title":"什么是时间复杂度？","desc":null,"options":null,"explanation":"> 时间复杂度的计算并不是计算程序具体运行的时间，而是算法执行语句的次数。\n\n随着n的不断增大，时间复杂度不断增大，算法花费时间越多。\n\n## 常见的时间复杂度\n\n* 常数阶O(1)\n* 对数阶O(log2 n)\n* 线性阶O(n)\n* 线性对数阶O(n log2 n)\n* 平方阶O(n^2)\n* 立方阶O(n^3)\n* k次方阶O(n^K)\n* 指数阶O(2^n)\n\n## 计算方法\n\n* 选取相对增长最高的项\n* 最高项系数是都化为1\n* 若是常数的话用O(1)表示\n\n举个例子：如f(n)=3*n^4+3n+300 则 O(n)=n^4\n\n通常我们计算时间复杂度都是计算最坏情况。计算时间复杂度的要注意的几个点:\n\n* 如果算法的执行时间不随n的增加而增长，假如算法中有上千条语句，执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。\n\n举例如下：代码执行100次，是一个常数，复杂度也是O(1)。\n```javascript\nlet x = 1;\nwhile (x <100) {\n\tx++;\n}\n```\n\n* 有多个循环语句时候，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的方法决定的。\n\n举例如下：在下面for循环当中，外层循环每执行一次，内层循环要执行n次，执行次数是根据n所决定的，时间复杂度是O(n^2)。\n\n```javascript\nfor (i = 0; i < n; i++){\n  for (j = 0; j < n; j++) {\n  \t// ...code\n  }\n}\n```\n\n* 循环不仅与n有关，还与执行循环判断条件有关。\n\n举例如下：在代码中，如果arr[i]不等于1的话，时间复杂度是O(n)。如果arr[i]等于1的话，循环不执行，时间复杂度是O(0)。\n\n```javascript\nfor(var i = 0; i<n && arr[i] !=1; i++) {\n\t// ...code\n}\n```\n","level":2,"tagId":15}
{"_id":{"$oid":"61aa38617964120001917463"},"exerciseKey":"769ab8fd-1070-42d3-817e-48d9b37374ff","category":"QA","renderType":"md","title":"什么是 let 的临时性死区？","desc":null,"options":null,"explanation":"let 会产生临时性死区，在当前的执行上下文中，会进行变量提升，但是未被初始化，所以在执行上下文执行阶段，执行代码如果还没有执行到变量赋值，就引用此变量就会报错，此变量未初始化。","level":2,"tagId":24}
{"_id":{"$oid":"61aa38610f30890001ab8121"},"exerciseKey":"78f63a99-87f9-4162-b932-3bdb38e4b166","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nfunction greeting() {\n  throw \"Hello world!\";\n}\n\nfunction sayHi() {\n  try {\n    const data = greeting();\n    console.log(\"It worked!\", data);\n  } catch (e) {\n    console.log(\"Oh no an error:\", e);\n  }\n}\n\nsayHi();\n```","options":"{\"options\":[\"\\\"It worked! Hello world!\\\"\",\"\\\"Oh no an error: undefined\",\"SyntaxError: can only throw Error objects\",\"\\\"Oh no an error: Hello world!\"],\"isMulti\":false,\"answer\":[3]}","explanation":"通过`throw`语句，我么可以创建自定义错误。 而通过它，我们可以抛出异常。异常可以是一个<b>字符串</b>, 一个 <b>数字</b>, 一个 <b>布尔类型</b> 或者是一个 <b>对象</b>。在本例中，我们的异常是字符串`'Hello world'`.\n通过 `catch`语句，我们可以设定当`try`语句块中抛出异常后应该做什么处理。在本例中抛出的异常是字符串`'Hello world'`. `e`就是这个字符串，因此被输出。最终结果就是`'Oh an error: Hello world'`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa3863ff0573000165b2dd"},"exerciseKey":"7e8c5dd0-90cc-451b-afdb-0c4150704768","category":"QA","renderType":"md","title":"为什么Vue中的data属性是一个函数而不是一个对象？","desc":null,"options":null,"explanation":"## 面试官：为什么data属性是一个函数而不是一个对象？\r\n\r\n\r\n ![image.png](https://static.vue-js.com/83e51560-3acc-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n\r\n## 一、实例和组件定义data的区别\r\n\r\n`vue`实例的时候定义`data`属性既可以是一个对象，也可以是一个函数\r\n\r\n```js\r\nconst app = new Vue({\r\n    el:\"#app\",\r\n    // 对象格式\r\n    data:{\r\n        foo:\"foo\"\r\n    },\r\n    // 函数格式\r\n    data(){\r\n        return {\r\n             foo:\"foo\"\r\n        }\r\n    }\r\n})\r\n```\r\n\r\n组件中定义`data`属性，只能是一个函数\r\n\r\n如果为组件`data`直接定义为一个对象\r\n\r\n```js\r\nVue.component('component1',{\r\n    template:`<div>组件</div>`,\r\n    data:{\r\n        foo:\"foo\"\r\n    }\r\n})\r\n```\r\n\r\n则会得到警告信息\r\n\r\n\r\n ![image.png](https://static.vue-js.com/8e6fc0c0-3acc-11eb-ab90-d9ae814b240d.png)\r\n\r\n\r\n警告说明：返回的`data`应该是一个函数在每一个组件实例中\r\n\r\n## 二、组件data定义函数与对象的区别\r\n\r\n上面讲到组件`data`必须是一个函数，不知道大家有没有思考过这是为什么呢？\r\n\r\n在我们定义好一个组件的时候，`vue`最终都会通过`Vue.extend()`构成组件实例\r\n\r\n这里我们模仿组件构造函数，定义`data`属性，采用对象的形式\r\n\r\n```js\r\nfunction Component(){\r\n \r\n}\r\nComponent.prototype.data = {\r\n\tcount : 0\r\n}\r\n```\r\n\r\n创建两个组件实例\r\n\r\n```\r\nconst componentA = new Component()\r\nconst componentB = new Component()\r\n```\r\n\r\n修改`componentA`组件`data`属性的值，`componentB`中的值也发生了改变\r\n\r\n```js\r\nconsole.log(componentB.data.count)  // 0\r\ncomponentA.data.count = 1\r\nconsole.log(componentB.data.count)  // 1\r\n```\r\n\r\n产生这样的原因这是两者共用了同一个内存地址，`componentA`修改的内容，同样对`componentB`产生了影响\r\n\r\n如果我们采用函数的形式，则不会出现这种情况（函数返回的对象内存地址并不相同）\r\n\r\n```js\r\nfunction Component(){\r\n\tthis.data = this.data()\r\n}\r\nComponent.prototype.data = function (){\r\n    return {\r\n   \t\tcount : 0\r\n    }\r\n}\r\n```\r\n\r\n修改`componentA`组件`data`属性的值，`componentB`中的值不受影响\r\n\r\n```js\r\nconsole.log(componentB.data.count)  // 0\r\ncomponentA.data.count = 1\r\nconsole.log(componentB.data.count)  // 0\r\n```\r\n\r\n`vue`组件可能会有很多个实例，采用函数返回一个全新`data`形式，使每个实例对象的数据不会受到其他实例对象数据的污染\r\n\r\n## 三、原理分析\r\n\r\n首先可以看看`vue`初始化`data`的代码，`data`的定义可以是函数也可以是对象\r\n\r\n源码位置：`/vue-dev/src/core/instance/state.js`\r\n\r\n```js\r\nfunction initData (vm: Component) {\r\n  let data = vm.$options.data\r\n  data = vm._data = typeof data === 'function'\r\n    ? getData(data, vm)\r\n    : data || {}\r\n    ...\r\n}\r\n```\r\n`data`既能是`object`也能是`function`，那为什么还会出现上文警告呢？\r\n\r\n别急，继续看下文\r\n\r\n组件在创建的时候，会进行选项的合并\r\n\r\n源码位置：`/vue-dev/src/core/util/options.js`\r\n\r\n自定义组件会进入`mergeOptions`进行选项合并\r\n\r\n```js\r\nVue.prototype._init = function (options?: Object) {\r\n    ...\r\n    // merge options\r\n    if (options && options._isComponent) {\r\n      // optimize internal component instantiation\r\n      // since dynamic options merging is pretty slow, and none of the\r\n      // internal component options needs special treatment.\r\n      initInternalComponent(vm, options)\r\n    } else {\r\n      vm.$options = mergeOptions(\r\n        resolveConstructorOptions(vm.constructor),\r\n        options || {},\r\n        vm\r\n      )\r\n    }\r\n    ...\r\n  }\r\n```\r\n\r\n定义`data`会进行数据校验\r\n\r\n源码位置：`/vue-dev/src/core/instance/init.js`\r\n\r\n这时候`vm`实例为`undefined`，进入`if`判断，若`data`类型不是`function`，则出现警告提示\r\n\r\n```js\r\nstrats.data = function (\r\n  parentVal: any,\r\n  childVal: any,\r\n  vm?: Component\r\n): ?Function {\r\n  if (!vm) {\r\n    if (childVal && typeof childVal !== \"function\") {\r\n      process.env.NODE_ENV !== \"production\" &&\r\n        warn(\r\n          'The \"data\" option should be a function ' +\r\n            \"that returns a per-instance value in component \" +\r\n            \"definitions.\",\r\n          vm\r\n        );\r\n\r\n      return parentVal;\r\n    }\r\n    return mergeDataOrFn(parentVal, childVal);\r\n  }\r\n  return mergeDataOrFn(parentVal, childVal, vm);\r\n};\r\n```\r\n\r\n### 四、结论\r\n\r\n- 根实例对象`data`可以是对象也可以是函数（根实例是单例），不会产生数据污染情况\r\n- 组件实例对象`data`必须为函数，目的是为了防止多个组件实例对象之间共用一个`data`，产生数据污染。采用函数的形式，`initData`时会将其作为工厂函数都会返回全新`data`对象","level":2,"tagId":14}
{"_id":{"$oid":"61aa383d34458700017f1baa"},"exerciseKey":"01011a04-509e-4f6f-89d5-aa348d76ae2b","category":"QA","renderType":"md","title":"TypeScript中的类型有哪些？","desc":null,"options":null,"explanation":"类型系统表示语言支持的不同类型的值。它在程序存储或操作所提供的值之前检查其有效性。\n\n它可以分为两种类型，\n\n* 内置：包括数字(number)，字符串(string)，布尔值(boolean)，无效(void)，空值(null)和未定义(undefined)。\n* 用户定义的：它包括枚举(enums)，类(classes)，接口(interfaces)，数组(arrays)和元组(tuple)。","level":3,"tagId":19}
{"_id":{"$oid":"61aa383e3976eb00014e4435"},"exerciseKey":"025b1291-525e-4605-ac8a-6a53baf94d5d","category":"QA","renderType":"md","title":"Object.create 和 new 有什么区别？","desc":null,"options":null,"explanation":"js中创建对象的方式一般有两种Object.create和new\n\n```javascript\nconst Base = function(){};\nconst o1 = Object.create(Base);\nconst o2 = new Base();\n```\n\n在讲述两者区别之前，我们需要知道：\n\n* 构造函数Foo的原型属性Foo.prototype指向了原型对象。\n* 原型对象保存着实例共享的方法，有一个指针constructor指回构造函数。\n* js中只有函数有 prototype 属性，所有的对象只有 __proto__ 隐式属性。\n\n那这样到底有什么不一样呢？\n\n## Object.create\n\n先来看看 `Object.create` 的实现方式\n\n```javascript\nObject.create =  function (o) {\n    var F = function () {};\n    F.prototype = o;\n    return new F();\n};\n```\n\n可以看出来。Object.create是内部定义一个对象，并且让F.prototype对象 赋值为引进的对象/函数 o，并return出一个新的对象。\n\n## new\n\n再看看 `const o2 = new Base()` 的时候，new做了什么。\n\n```javascript\nvar o1 = new Object();\no1.[[Prototype]] = Base.prototype;\nBase.call(o1);\n```\n\nnew做法是新建一个obj对象o1，并且让o1的__proto__指向了Base.prototype对象。并且使用 call 进行强转作用环境。从而实现了实例的创建。\n\n## 区别\n\n看似是一样的。我们对原来的代码进行改进一下。\n\n```javascript\nvar Base = function () {\n    this.a = 2\n}\nvar o1 = new Base();\nvar o2 = Object.create(Base);\nconsole.log(o1.a); // 2\nconsole.log(o2.a); // undefined\n```\n\n可以看到Object.create 失去了原来对象的属性的访问。\n\n再进行下改造：\n```javascript\nvar Base = function () {\n    this.a = 2\n}\nBase.prototype.a = 3;\nvar o1 = new Base();\nvar o2 = Object.create(Base);\nconsole.log(o1.a); // 2\nconsole.log(o2.a); // undefined\n```\n\n## 小结\n\n小结\n\n|比较|new|Object.create|\n|--|--|--|\n|构造函数|保留原构造函数属性|丢失原构造函数属性|\n|原型链|原构造函数prototype属性|原构造函数/（对象）本身|\n|作用对象|function|function和object|\n\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa38408e97d90001808654"},"exerciseKey":"093766f5-6c3c-4844-a823-4a7e49864a18","category":"QA","renderType":"md","title":"沙漠尸体","desc":"一个人被发现死在沙漠里，手中捏着一根火柴，周围没有任何足迹，也没有其他线索。他是怎么死的呢？","options":null,"explanation":"男子是从飞机上坠落死亡的。\n\n可能是因为机械故障之类的原因，有部分乘客必须离开飞机，于是大家用火柴来抽签，而男子的运气不好，只能跳出飞机。","level":1,"tagId":17}
{"_id":{"$oid":"61aa38413976eb00014e4442"},"exerciseKey":"0b4af1f7-d0bc-4a85-8c28-f620b5d6d23e","category":"Choice","renderType":"md","title":"哪个选项是将 hasName 设置为 true 的方法（不能将true作为参数传递）?","desc":"```javascript\nfunction getName(name) {\n  const hasName = //\n}\n```","options":"{\"options\":[\"!!name\",\"name\",\"new Boolean(name)\",\"name.length\"],\"isMulti\":false,\"answer\":[0]}","explanation":"使用逻辑非运算符`!`，将返回一个布尔值，使用`!! name`，我们可以确定`name`的值是真的还是假的。 如果`name`是真实的，那么`!name`返回`false`。 `!false`返回`true`。\n通过将`hasName`设置为`name`，可以将`hasName`设置为等于传递给`getName`函数的值，而不是布尔值`true`。\n`new Boolean（true）`返回一个对象包装器，而不是布尔值本身。\n`name.length`返回传递的参数的长度，而不是布尔值`true`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa384139bf10000191c90d"},"exerciseKey":"0c0db5d1-e09a-4699-911a-3cfa4f4bd765","category":"QA","renderType":"md","title":"什么是微前端？","desc":null,"options":null,"explanation":"微前端（Micro-Frontends）是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。\n\n各个前端应用还可以独立运行、独立开发、独立部署。\n\n微前端不是单纯的前端框架或者工具，而是一套架构体系，","level":3,"tagId":10}
{"_id":{"$oid":"61aa384191a75000018d2c2a"},"exerciseKey":"0cc5abe2-7798-40a6-b930-7dacdb404b8d","category":"QA","renderType":"md","title":"你是怎么处理vue项目中的错误的？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/3cafe4f0-4fd9-11eb-ab90-d9ae814b240d.png)\n\n## 一、错误类型\n\n任何一个框架，对于错误的处理都是一种必备的能力\n\n在`Vue` 中，则是定义了一套对应的错误处理规则给到使用者，且在源代码级别，对部分必要的过程做了一定的错误处理。\n\n主要的错误来源包括：\n\n- 后端接口错误\n- 代码中本身逻辑错误\n\n\n\n## 二、如何处理\n\n### 后端接口错误\n\n通过`axios`的`interceptor`实现网络请求的`response`先进行一层拦截\n\n```js\napiClient.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    if (error.response.status == 401) {\n      router.push({ name: \"Login\" });\n    } else {\n      message.error(\"出错了\");\n      return Promise.reject(error);\n    }\n  }\n);\n```\n\n\n\n### 代码逻辑问题\n\n#### 全局设置错误处理\n\n设置全局错误处理函数\n\n```js\nVue.config.errorHandler = function (err, vm, info) {\n  // handle error\n  // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子\n  // 只在 2.2.0+ 可用\n}\n```\n\n`errorHandler`指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 `Vue` 实例\n\n不过值得注意的是，在不同` Vue` 版本中，该全局 `API` 作用的范围会有所不同：\n\n> 从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 `undefined` 时，被捕获的错误会通过 `console.error` 输出而避免应用崩\n\n> 从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了\n\n> 从 2.6.0 起，这个钩子也会捕获 `v-on` DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理\n\n\n\n#### 生命周期钩子\n\n`errorCaptured`是 2.5.0 新增的一个生命钩子函数，当捕获到一个来自子孙组件的错误时被调用\n\n基本类型\n\n```js\n(err: Error, vm: Component, info: string) => ?boolean\n```\n\n此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 `false` 以阻止该错误继续向上传播\n\n参考官网，错误传播规则如下：\n\n- 默认情况下，如果全局的 `config.errorHandler` 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报\n- 如果一个组件的继承或父级从属链路中存在多个 `errorCaptured` 钩子，则它们将会被相同的错误逐个唤起。\n- 如果此 `errorCaptured` 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 `config.errorHandler`\n- 一个 `errorCaptured` 钩子能够返回 `false` 以阻止错误继续向上传播。本质上是说“这个错误已经被搞定了且应该被忽略”。它会阻止其它任何会被这个错误唤起的 `errorCaptured` 钩子和全局的 `config.errorHandler`\n\n下面来看个例子\n\n定义一个父组件`cat`\n\n```js\nVue.component('cat', {\n    template:`\n        <div>\n\t\t\t<h1>Cat: </h1>\n        \t<slot></slot>\n        </div>`,\n    props:{\n        name:{\n            required:true,\n            type:String\n        }\n    },\n    errorCaptured(err,vm,info) {\n        console.log(`cat EC: ${err.toString()}\\ninfo: ${info}`); \n        return false;\n    }\n\n});\n```\n\n定义一个子组件`kitten`，其中`dontexist()`并没有定义，存在错误\n\n```js\nVue.component('kitten', {\n    template:'<div><h1>Kitten: {{ dontexist() }}</h1></div>',\n    props:{\n        name:{\n            required:true,\n            type:String\n        }\n    }\n});\n```\n\n页面中使用组件\n\n```html\n<div id=\"app\" v-cloak>\n    <cat name=\"my cat\">\n        <kitten></kitten>\n    </cat>\n</div>\n```\n\n在父组件的`errorCaptured`则能够捕获到信息\n\n```js\ncat EC: TypeError: dontexist is not a function\ninfo: render\n```\n\n\n\n### 三、源码分析\n\n异常处理源码\n\n源码位置：/src/core/util/error.js\n\n```js\n// Vue 全局配置,也就是上面的Vue.config\nimport config from '../config'\nimport { warn } from './debug'\n// 判断环境\nimport { inBrowser, inWeex } from './env'\n// 判断是否是Promise，通过val.then === 'function' && val.catch === 'function', val ！=== null && val !== undefined\nimport { isPromise } from 'shared/util'\n// 当错误函数处理错误时，停用deps跟踪以避免可能出现的infinite rendering\n// 解决以下出现的问题https://github.com/vuejs/vuex/issues/1505的问题\nimport { pushTarget, popTarget } from '../observer/dep'\n\nexport function handleError (err: Error, vm: any, info: string) {\n    // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n    pushTarget()\n    try {\n        // vm指当前报错的组件实例\n        if (vm) {\n            let cur = vm\n            // 首先获取到报错的组件，之后递归查找当前组件的父组件，依次调用errorCaptured 方法。\n            // 在遍历调用完所有 errorCaptured 方法、或 errorCaptured 方法有报错时，调用 globalHandleError 方法\n            while ((cur = cur.$parent)) {\n                const hooks = cur.$options.errorCaptured\n                // 判断是否存在errorCaptured钩子函数\n                if (hooks) {\n                    // 选项合并的策略，钩子函数会被保存在一个数组中\n                    for (let i = 0; i < hooks.length; i++) {\n                        // 如果errorCaptured 钩子执行自身抛出了错误，\n                        // 则用try{}catch{}捕获错误，将这个新错误和原本被捕获的错误都会发送给全局的config.errorHandler\n                        // 调用globalHandleError方法\n                        try {\n                            // 当前errorCaptured执行，根据返回是否是false值\n                            // 是false，capture = true，阻止其它任何会被这个错误唤起的 errorCaptured 钩子和全局的 config.errorHandler\n                            // 是true capture = fale，组件的继承或父级从属链路中存在的多个 errorCaptured 钩子，会被相同的错误逐个唤起\n                            // 调用对应的钩子函数，处理错误\n                            const capture = hooks[i].call(cur, err, vm, info) === false\n                            if (capture) return\n                        } catch (e) {\n                            globalHandleError(e, cur, 'errorCaptured hook')\n                        }\n                    }\n                }\n            }\n        }\n        // 除非禁止错误向上传播，否则都会调用全局的错误处理函数\n        globalHandleError(err, vm, info)\n    } finally {\n        popTarget()\n    }\n}\n// 异步错误处理函数\nexport function invokeWithErrorHandling (\nhandler: Function,\n context: any,\n args: null | any[],\n    vm: any,\n        info: string\n        ) {\n            let res\n            try {\n                // 根据参数选择不同的handle执行方式\n                res = args ? handler.apply(context, args) : handler.call(context)\n                // handle返回结果存在\n                // res._isVue an flag to avoid this being observed，如果传入值的_isVue为ture时(即传入的值是Vue实例本身)不会新建observer实例\n                // isPromise(res) 判断val.then === 'function' && val.catch === 'function', val ！=== null && val !== undefined\n                // !res._handled  _handle是Promise 实例的内部变量之一，默认是false，代表onFulfilled,onRejected是否被处理\n                if (res && !res._isVue && isPromise(res) && !res._handled) {\n                    res.catch(e => handleError(e, vm, info + ` (Promise/async)`))\n                    // avoid catch triggering multiple times when nested calls\n                    // 避免嵌套调用时catch多次的触发\n                    res._handled = true\n                }\n            } catch (e) {\n                // 处理执行错误\n                handleError(e, vm, info)\n            }\n            return res\n        }\n\n//全局错误处理\nfunction globalHandleError (err, vm, info) {\n    // 获取全局配置，判断是否设置处理函数，默认undefined\n    // 已配置\n    if (config.errorHandler) {\n        // try{}catch{} 住全局错误处理函数\n        try {\n            // 执行设置的全局错误处理函数，handle error 想干啥就干啥💗\n            return config.errorHandler.call(null, err, vm, info)\n        } catch (e) {\n            // 如果开发者在errorHandler函数中手动抛出同样错误信息throw err\n            // 判断err信息是否相等，避免log两次\n            // 如果抛出新的错误信息throw err Error('你好毒')，将会一起log输出\n            if (e !== err) {\n                logError(e, null, 'config.errorHandler')\n            }\n        }\n    }\n    // 未配置常规log输出\n    logError(err, vm, info)\n}\n\n// 错误输出函数\nfunction logError (err, vm, info) {\n    if (process.env.NODE_ENV !== 'production') {\n        warn(`Error in ${info}: \"${err.toString()}\"`, vm)\n    }\n    /* istanbul ignore else */\n    if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n        console.error(err)\n    } else {\n        throw err\n    }\n}\n```\n\n### 小结\n\n- `handleError`在需要捕获异常的地方调用，首先获取到报错的组件，之后递归查找当前组件的父组件，依次调用`errorCaptured` 方法，在遍历调用完所有 `errorCaptured` 方法或 `errorCaptured` 方法有报错时，调用 `globalHandleError` 方法\n- `globalHandleError `调用全局的 `errorHandler` 方法，再通过`logError`判断环境输出错误信息\n- `invokeWithErrorHandling`更好的处理异步错误信息\n- `logError`判断环境，选择不同的抛错方式。非生产环境下，调用`warn`方法处理错误\n\n\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa3843bdfab500012c83d2"},"exerciseKey":"14437ae4-d571-4139-88ec-eb9825196c4d","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nlet num = 1;\nconst list = [\"🥳\", \"🤠\", \"🥰\", \"🤪\"];\n\nconsole.log(list[(num += 1)]);\n```","options":"{\"options\":[\"🤠\",\"🥰\",\"SyntaxError\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"通过 `+=` 操作符，我们对值 `num` 进行加 `1` 操作。 `num` 有初始值 `1`，因此 `1 + 1` 的执行结果为 `2`。数组 `list` 的第二项为 🥰，`console.log(list[2])` 输出 🥰.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3846d00c060001bf1182"},"exerciseKey":"19ba02c8-2fde-4dd3-b396-c2e9bb291269","category":"QA","renderType":"md","title":"URI、URL、URN分别是什么？","desc":null,"options":null,"explanation":"URL代表资源的路径地址，而URI代表资源的名称。\n\n* URI: Universal Resource Identifier 统一资源标志符\n\n* URL: Universal Resource Locator 统一资源定位符\nURL类似于住址，它告诉你一种寻找目标的方式(在这个例子中，是通过街道地址找到一个人)。要知道，上述定义同时也是一个URI。\n\n* URN: Universal Resource Name 统一资源名称\n我们可以把一个人的名字看作是URN;因此可以用URN来唯一标识一个实体\n\nURL是URI的一个子集，告诉我们访问网络位置的方式\n\nURN是URI的子集，包括名字(给定的命名空间内)，但是不包括访问方式\n\nURN 和 URL 都是URI的子集。\n\n","level":1,"tagId":16}
{"_id":{"$oid":"61aa384b0f30890001ab8070"},"exerciseKey":"300d6f04-63e9-4360-82fa-e4a505d618a1","category":"QA","renderType":"md","title":"说说React render方法的原理？在什么时候会被触发？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/3d855230-ec6d-11eb-ab90-d9ae814b240d.png)\n\n## 一、原理\n\n首先，`render`函数在`react`中有两种形式：\n\n在类组件中，指的是`render`方法：\n\n```jsx\nclass Foo extends React.Component {\n    render() {\n        return <h1> Foo </h1>;\n    }\n}\n```\n\n在函数组件中，指的是函数组件本身：\n\n```js\nfunction Foo() {\n    return <h1> Foo </h1>;\n}\n```\n\n在`render`中，我们会编写`jsx`，`jsx`通过`babel`编译后就会转化成我们熟悉的`js`格式，如下：\n\n```jsx\nreturn (\n  <div className='cn'>\n    <Header> hello </Header>\n    <div> start </div>\n    Right Reserve\n  </div>\n)\n```\n\n`babel`编译后：\n\n```js\nreturn (\n  React.createElement(\n    'div',\n    {\n      className : 'cn'\n    },\n    React.createElement(\n      Header,\n      null,\n      'hello'\n    ),\n    React.createElement(\n      'div',\n      null,\n      'start'\n    ),\n    'Right Reserve'\n  )\n)\n```\n\n从名字上来看，`createElement`方法用来元素的\n\n在`react`中，这个元素就是虚拟`DOM`树的节点，接收三个参数：\n\n- type：标签\n- attributes：标签属性，若无则为null\n\n- children：标签的子节点\n\n这些虚拟`DOM`树最终会渲染成真实`DOM`\n\n在`render`过程中，`React` 将新调用的 `render `函数返回的树与旧版本的树进行比较，这一步是决定如何更新 `DOM` 的必要步骤，然后进行 `diff` 比较，更新 `DOM `树\n\n\n\n\n\n## 二、触发时机\n\n`render`的执行时机主要分成了两部分：\n\n- 类组件调用 setState 修改状态\n\n```jsx\nclass Foo extends React.Component {\n  state = { count: 0 };\n\n  increment = () => {\n    const { count } = this.state;\n\n    const newCount = count < 10 ? count + 1 : count;\n\n    this.setState({ count: newCount });\n  };\n\n  render() {\n    const { count } = this.state;\n    console.log(\"Foo render\");\n\n    return (\n      <div>\n        <h1> {count} </h1>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n```\n\n点击按钮，则调用`setState`方法，无论`count`发生变化辩护，控制台都会输出`Foo render`，证明`render`执行了\n\n- 函数组件通过`useState hook`修改状态\n\n```jsx\nfunction Foo() {\n  const [count, setCount] = useState(0);\n\n  function increment() {\n    const newCount = count < 10 ? count + 1 : count;\n    setCount(newCount);\n  }\n\n  console.log(\"Foo render\");\n  \n  return (\n    <div>\n      <h1> {count} </h1>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n函数组件通过`useState`这种形式更新数据，当数组的值不发生改变了，就不会触发`render`\n\n- 类组件重新渲染\n\n```js\nclass App extends React.Component {\n  state = { name: \"App\" };\n  render() {\n    return (\n      <div className=\"App\">\n        <Foo />\n        <button onClick={() => this.setState({ name: \"App\" })}>\n          Change name\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction Foo() {\n  console.log(\"Foo render\");\n\n  return (\n    <div>\n      <h1> Foo </h1>\n    </div>\n  );\n}\n```\n\n只要点击了 `App` 组件内的 `Change name` 按钮，不管 `Foo` 具体实现是什么，都会被重新`render`渲染\n\n- 函数组件重新渲染\n\n```jsx\nfunction App(){\n    const [name,setName] = useState('App')\n\n    return (\n        <div className=\"App\">\n            <Foo />\n            <button onClick={() => setName(\"aaa\")}>\n                { name }\n            </button>\n      </div>\n    )\n}\n\nfunction Foo() {\n  console.log(\"Foo render\");\n\n  return (\n    <div>\n      <h1> Foo </h1>\n    </div>\n  );\n}\n```\n\n可以发现，使用`useState`来更新状态的时候，只有首次会触发`Foo render`，后面并不会导致`Foo render`\n\n\n\n## 三、总结\n\n`render`函数里面可以编写`JSX`，转化成`createElement`这种形式，用于生成虚拟`DOM`，最终转化成真实`DOM`\n\n在` React` 中，类组件只要执行了 `setState` 方法，就一定会触发 `render` 函数执行，函数组件使用`useState`更改状态不一定导致重新`render`\n\n组件的` props` 改变了，不一定触发 `render` 函数的执行，但是如果 `props` 的值来自于父组件或者祖先组件的 `state`\n\n在这种情况下，父组件或者祖先组件的 `state` 发生了改变，就会导致子组件的重新渲染\n\n所以，一旦执行了`setState`就会执行`render`方法，`useState` 会判断当前值有无发生改变确定是否执行`render`方法，一旦父组件发生渲染，子组件也会渲染\n\n ![](https://static.vue-js.com/229784b0-ecf5-11eb-ab90-d9ae814b240d.png)\n\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa384b79641200019173c2"},"exerciseKey":"31134096-417d-48df-8030-68dd004c40d1","category":"QA","renderType":"md","title":"如果new一个箭头函数会怎么样？","desc":null,"options":null,"explanation":"箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。\n\nnew操作符的实现步骤如下：\n\n1、创建一个空的简单JavaScript对象（即{}）；\n\n2、为步骤1新创建的对象添加属性__proto__，将该属性链接至构造函数的原型对象 ；\n\n3、将步骤1新创建的对象作为this的上下文 ；\n\n4、如果该函数没有返回对象，则返回this。\n\n所以，上面的第二、三步，箭头函数都是没有办法执行的。","level":2,"tagId":24}
{"_id":{"$oid":"61aa384c3976eb00014e4492"},"exerciseKey":"32bf429e-2cda-408b-905c-f6149bbb972b","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nconsole.log(3 + 4 + \"5\");\n```","options":"{\"options\":[\"\\\"345\\\"\",\"\\\"75\\\"\",\"12\",\"\\\"12\\\"\"],\"isMulti\":false,\"answer\":[1]}","explanation":"当所有运算符的 _优先级_ 相同时，计算表达式需要确定运算符的结合顺序，即从右到左还是从左往右。在这个例子中，我们只有一类运算符`+`，对于加法来说，结合顺序就是从左到右。\n`3 + 4`首先计算，得到数字`7`.\n由于类型的强制转换，`7 + '5'`的结果是`\"75\"`. JavaScript将`7`转换成了字符串，可以参考问题15.我们可以用`+`号把两个字符串连接起来。 `\"7\" + \"5\"` 就得到了`\"75\"`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384d34458700017f1c26"},"exerciseKey":"34d5eef9-20cb-4aac-b34b-87ab513456a7","category":"QA","renderType":"md","title":"你是怎么理解ES6中 Promise的？使用场景有哪些？","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/f033b160-5811-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 一、介绍\n\n`Promise `，译为承诺，是异步编程的一种解决方案，比传统的解决方案（回调函数）更加合理和更加强大\n\n在以往我们如果处理多层异步操作，我们往往会像下面那样编写我们的代码\n\n```js\ndoSomething(function(result) {\n  doSomethingElse(result, function(newResult) {\n    doThirdThing(newResult, function(finalResult) {\n      console.log('得到最终结果: ' + finalResult);\n    }, failureCallback);\n  }, failureCallback);\n}, failureCallback);\n```\n\n阅读上面代码，是不是很难受，上述形成了经典的回调地狱\n\n现在通过`Promise`的改写上面的代码\n\n```js\ndoSomething().then(function(result) {\n  return doSomethingElse(result);\n})\n.then(function(newResult) {\n  return doThirdThing(newResult);\n})\n.then(function(finalResult) {\n  console.log('得到最终结果: ' + finalResult);\n})\n.catch(failureCallback);\n```\n\n瞬间感受到`promise`解决异步操作的优点：\n\n- 链式操作减低了编码难度\n- 代码可读性明显增强\n\n\n\n下面我们正式来认识`promise`：\n\n### 状态\n\n`promise`对象仅有三种状态\n\n- `pending`（进行中）\n- `fulfilled`（已成功）\n- `rejected`（已失败）\n\n### 特点\n\n- 对象的状态不受外界影响，只有异步操作的结果，可以决定当前是哪一种状态\n- 一旦状态改变（从`pending`变为`fulfilled`和从`pending`变为`rejected`），就不会再变，任何时候都可以得到这个结果\n\n\n\n### 流程\n\n认真阅读下图，我们能够轻松了解`promise`整个流程\n\n ![](https://static.vue-js.com/1b02ae90-58a9-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 二、用法\n\n`Promise`对象是一个构造函数，用来生成`Promise`实例\n\n```javascript\nconst promise = new Promise(function(resolve, reject) {});\n```\n\n`Promise`构造函数接受一个函数作为参数，该函数的两个参数分别是`resolve`和`reject`\n\n- `resolve`函数的作用是，将`Promise`对象的状态从“未完成”变为“成功”\n- `reject`函数的作用是，将`Promise`对象的状态从“未完成”变为“失败”\n\n\n\n### 实例方法\n\n`Promise`构建出来的实例存在以下方法：\n\n- then()\n- then()\n- catch()\n- finally()\n\n\n\n#### then()\n\n`then`是实例状态发生改变时的回调函数，第一个参数是`resolved`状态的回调函数，第二个参数是`rejected`状态的回调函数\n\n`then`方法返回的是一个新的`Promise`实例，也就是`promise`能链式书写的原因\n\n```javascript\ngetJSON(\"/posts.json\").then(function(json) {\n  return json.post;\n}).then(function(post) {\n  // ...\n});\n```\n\n\n\n#### catch\n\n`catch()`方法是`.then(null, rejection)`或`.then(undefined, rejection)`的别名，用于指定发生错误时的回调函数\n\n```javascript\ngetJSON('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n```\n\n`Promise `对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止\n\n```javascript\ngetJSON('/post/1.json').then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function(comments) {\n  // some code\n}).catch(function(error) {\n  // 处理前面三个Promise产生的错误\n});\n```\n\n一般来说，使用`catch`方法代替`then()`第二个参数\n\n`Promise `对象抛出的错误不会传递到外层代码，即不会有任何反应\n\n```js\nconst someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n```\n\n浏览器运行到这一行，会打印出错误提示`ReferenceError: x is not defined`，但是不会退出进程\n\n`catch()`方法之中，还能再抛出错误，通过后面`catch`方法捕获到\n\n\n\n#### finally()\n\n`finally()`方法用于指定不管 Promise 对象最后状态如何，都会执行的操作\n\n```javascript\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n```\n\n\n\n### 构造函数方法\n\n`Promise`构造函数存在以下方法：\n\n- all()\n- race()\n- allSettled()\n- resolve()\n- reject()\n- try()\n\n\n\n### all()\n\n`Promise.all()`方法用于将多个 `Promise `实例，包装成一个新的 `Promise `实例\n\n```javascript\nconst p = Promise.all([p1, p2, p3]);\n```\n\n接受一个数组（迭代对象）作为参数，数组成员都应为`Promise`实例\n\n实例`p`的状态由`p1`、`p2`、`p3`决定，分为两种：\n\n- 只有`p1`、`p2`、`p3`的状态都变成`fulfilled`，`p`的状态才会变成`fulfilled`，此时`p1`、`p2`、`p3`的返回值组成一个数组，传递给`p`的回调函数\n- 只要`p1`、`p2`、`p3`之中有一个被`rejected`，`p`的状态就变成`rejected`，此时第一个被`reject`的实例的返回值，会传递给`p`的回调函数\n\n注意，如果作为参数的 `Promise` 实例，自己定义了`catch`方法，那么它一旦被`rejected`，并不会触发`Promise.all()`的`catch`方法\n\n```javascript\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n```\n\n如果`p2`没有自己的`catch`方法，就会调用`Promise.all()`的`catch`方法\n\n```javascript\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// Error: 报错了\n```\n\n\n\n### race()\n\n`Promise.race()`方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例\n\n```javascript\nconst p = Promise.race([p1, p2, p3]);\n```\n\n只要`p1`、`p2`、`p3`之中有一个实例率先改变状态，`p`的状态就跟着改变\n\n率先改变的 Promise 实例的返回值则传递给`p`的回调函数\n\n```javascript\nconst p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\n\np\n.then(console.log)\n.catch(console.error);\n```\n\n\n\n### allSettled()\n\n`Promise.allSettled()`方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例\n\n只有等到所有这些参数实例都返回结果，不管是`fulfilled`还是`rejected`，包装实例才会结束\n\n```javascript\nconst promises = [\n  fetch('/api-1'),\n  fetch('/api-2'),\n  fetch('/api-3'),\n];\n\nawait Promise.allSettled(promises);\nremoveLoadingIndicator();\n```\n\n\n\n#### resolve()\n\n将现有对象转为 `Promise `对象\n\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n参数可以分成四种情况，分别如下：\n\n- 参数是一个 Promise 实例，`promise.resolve`将不做任何修改、原封不动地返回这个实例\n- 参数是一个`thenable`对象，`promise.resolve`会将这个对象转为 `Promise `对象，然后就立即执行`thenable`对象的`then()`方法\n- 参数不是具有`then()`方法的对象，或根本就不是对象，`Promise.resolve()`会返回一个新的 Promise 对象，状态为`resolved`\n- 没有参数时，直接返回一个`resolved`状态的 Promise 对象\n\n\n\n#### reject()\n\n`Promise.reject(reason)`方法也会返回一个新的 Promise 实例，该实例的状态为`rejected`\n\n```javascript\nconst p = Promise.reject('出错了');\n// 等同于\nconst p = new Promise((resolve, reject) => reject('出错了'))\n\np.then(null, function (s) {\n  console.log(s)\n});\n// 出错了\n```\n\n`Promise.reject()`方法的参数，会原封不动地变成后续方法的参数\n\n```javascript\nPromise.reject('出错了')\n.catch(e => {\n  console.log(e === '出错了')\n})\n// true\n```\n\n\n\n## 三、使用场景\n\n将图片的加载写成一个`Promise`，一旦加载完成，`Promise`的状态就发生变化\n\n```javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    const image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n```\n\n通过链式操作，将多个渲染数据分别给个`then`，让其各司其职。或当下个异步请求依赖上个请求结果的时候，我们也能够通过链式操作友好解决问题\n\n```js\n// 各司其职\ngetInfo().then(res=>{\n    let { bannerList } = res\n    //渲染轮播图\n    console.log(bannerList)\n    return res\n}).then(res=>{\n    \n    let { storeList } = res\n    //渲染店铺列表\n    console.log(storeList)\n    return res\n}).then(res=>{\n    let { categoryList } = res\n    console.log(categoryList)\n    //渲染分类列表\n    return res\n})\n```\n\n通过`all()`实现多个请求合并在一起，汇总所有请求结果，只需设置一个`loading`即可\n\n```js\nfunction initLoad(){\n    // loading.show() //加载loading\n    Promise.all([getBannerList(),getStoreList(),getCategoryList()]).then(res=>{\n        console.log(res)\n        loading.hide() //关闭loading\n    }).catch(err=>{\n        console.log(err)\n        loading.hide()//关闭loading\n    })\n}\n//数据初始化    \ninitLoad()\n```\n\n通过`race`可以设置图片请求超时\n\n```js\n//请求某个图片资源\nfunction requestImg(){\n    var p = new Promise(function(resolve, reject){\n        var img = new Image();\n        img.onload = function(){\n           resolve(img);\n        }\n        //img.src = \"https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg\"; 正确的\n        img.src = \"https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1\";\n    });\n    return p;\n}\n\n//延时函数，用于给请求计时\nfunction timeout(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            reject('图片请求超时');\n        }, 5000);\n    });\n    return p;\n}\n\nPromise\n.race([requestImg(), timeout()])\n.then(function(results){\n    console.log(results);\n})\n.catch(function(reason){\n    console.log(reason);\n});\n```","level":3,"tagId":24}
{"_id":{"$oid":"61aa384eb804f8000122aa1f"},"exerciseKey":"376fe4ce-b43c-45b3-834b-28da33c56920","category":"QA","renderType":"md","title":"css选择器有哪些？优先级分别是什么？哪些属性可以继承？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/f7dcd330-8fe1-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、选择器\n\nCSS选择器是CSS规则的第一部分\n\n它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式\n\n选择器所选择的元素，叫做“选择器的对象”\n\n我们从一个`Html`结构开始\n\n```html\n<div id=\"box\">\n\t<div class=\"one\">\n\t    <p class=\"one_1\"></p>\n\t    <p class=\"one_1\"></p>\n\t</div>\n\t<div class=\"two\"></div>\n\t<div class=\"two\"></div>\n\t<div class=\"two\"></div>\n</div>\n```\n\n关于`css`属性选择器常用的有：\n\n```css\n- id选择器（#box），选择id为box的元素\n- 类选择器（.one），选择类名为one的所有元素\n- 标签选择器（div），选择标签为div的所有元素\n- 后代选择器（#box div），选择id为box元素内部所有的div元素\n- 子选择器（.one>one_1），选择父元素为.one的所有.one_1的元素\n- 相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素\n- 群组选择器（div,p），选择div、p的所有元素\n```\n\n还有一些使用频率相对没那么多的选择器：\n\n- 伪类选择器\n\n```css\n:link ：选择未被访问的链接\n:visited：选取已被访问的链接\n:active：选择活动链接\n:hover ：鼠标指针浮动在上面的元素\n:focus ：选择具有焦点的\n:first-child：父元素的首个子元素\n```\n- 伪元素选择器\n\n```css\n:first-letter ：用于选取指定选择器的首字母\n:first-line ：选取指定选择器的首行\n:before : 选择器在被选元素的内容前面插入内容\n:after : 选择器在被选元素的内容后面插入内容\n```\n\n- 属性选择器\n\n```css\n[attribute] 选择带有attribute属性的元素\n[attribute=value] 选择所有使用attribute=value的元素\n[attribute~=value] 选择attribute属性包含value的元素\n[attribute|=value]：选择attribute属性以value开头的元素\n```\n在`CSS3`中新增的选择器有如下：\n\n- 层次选择器（p~ul），选择前面有p元素的每个ul元素\n- 伪类选择器\n\n```css\n:first-of-type 父元素的首个元素\n:last-of-type 父元素的最后一个元素\n:only-of-type 父元素的特定类型的唯一子元素\n:only-child 父元素中唯一子元素\n:nth-child(n) 选择父元素中第N个子元素\n:nth-last-of-type(n) 选择父元素中第N个子元素，从后往前\n:last-child 父元素的最后一个元素\n:root 设置HTML文档\n:empty 指定空的元素\n:enabled 选择被禁用元素\n:disabled 选择被禁用元素\n:checked 选择选中的元素\n:not(selector) 选择非 <selector> 元素的所有元素\n```\n\n- 属性选择器\n\n```css\n[attribute*=value]：选择attribute属性值包含value的所有元素\n[attribute^=value]：选择attribute属性开头为value的所有元素\n[attribute$=value]：选择attribute属性结尾为value的所有元素\n```\n\n## 二、优先级\n\n相信大家对`CSS`选择器的优先级都不陌生：\n\n> 内联 > ID选择器 > 类选择器 > 标签选择器\n\n到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：\n\n- 如果存在内联样式，那么 A = 1, 否则 A = 0\n- B的值等于 ID选择器出现的次数\n- C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数\n- D 的值等于 标签选择器 和 伪元素 出现的总次数\n\n这里举个例子：\n\n```css\n#nav-global > ul > li > a.nav-link\n```\n\n套用上面的算法，依次求出 `A` `B` `C` `D` 的值：\n\n- 因为没有内联样式 ，所以 A = 0\n- ID选择器总共出现了1次， B = 1\n- 类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C = (1 + 0 + 0) = 1\n- 标签选择器出现了3次， 伪元素出现了0次，所以 D = (3 + 0) = 3\n\n上面算出的`A` 、 `B`、`C`、`D` 可以简记作：`(0, 1, 1, 3)`\n\n知道了优先级是如何计算之后，就来看看比较规则：\n\n- 从左往右依次进行比较 ，较大者优先级更高\n- 如果相等，则继续往右移动一位进行比较\n- 如果4位全部相等，则后面的会覆盖前面的\n\n经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用`!important`\n\n## 三、继承属性\n\n在`css`中，继承是指的是给父元素设置一些属性，后代元素会自动拥有这些属性\n关于继承属性，可以分成：\n\n- 字体系列属性\n\n```css\nfont:组合字体\nfont-family:规定元素的字体系列\nfont-weight:设置字体的粗细\nfont-size:设置字体的尺寸\nfont-style:定义字体的风格\nfont-variant:偏大或偏小的字体\n```\n\n- 文本系列属性\n\n```css\ntext-indent：文本缩进\ntext-align：文本水平对齐\nline-height：行高\nword-spacing：增加或减少单词间的空白\nletter-spacing：增加或减少字符间的空白\ntext-transform：控制文本大小写\ndirection：规定文本的书写方向\ncolor：文本颜色\n```\n\n- 元素可见性\n\n```css\nvisibility\n```\n\n- 表格布局属性\n\n```css\ncaption-side：定位表格标题位置\nborder-collapse：合并表格边框\nborder-spacing：设置相邻单元格的边框间的距离\nempty-cells：单元格的边框的出现与消失\ntable-layout：表格的宽度由什么决定\n```\n\n- 列表属性\n\n```css\nlist-style-type：文字前面的小点点样式\nlist-style-position：小点点位置\nlist-style：以上的属性可通过这属性集合\n```\n\n- 引用\n\n```css\nquotes：设置嵌套引用的引号类型\n```\n\n- 光标属性\n\n```css\ncursor：箭头可以变成需要的形状\n```\n\n继承中比较特殊的几点：\n\n- a 标签的字体颜色不能被继承\n- h1-h6标签字体的大下也是不能被继承的\n\n## 无继承的属性\n\n- display\n- 文本属性：vertical-align、text-decoration\n- 盒子模型的属性：宽度、高度、内外边距、边框等\n- 背景属性：背景图片、颜色、位置等\n- 定位属性：浮动、清除浮动、定位position等\n- 生成内容属性：content、counter-reset、counter-increment\n- 轮廓样式属性：outline-style、outline-width、outline-color、outline\n- 页面样式属性：size、page-break-before、page-break-after\n","level":1.5,"tagId":11}
{"_id":{"$oid":"61aa384f291c0100017ee193"},"exerciseKey":"39513146-d7a4-41ad-963f-ba32242ddc55","category":"QA","renderType":"md","title":"Javascript字符串的常用方法有哪些？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/ceb6ebc0-65c1-11eb-ab90-d9ae814b240d.png)\r\n\r\n## 一、操作方法\r\n\r\n我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变\r\n\r\n\r\n\r\n### 增\r\n\r\n这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作\r\n\r\n除了常用`+`以及`${}`进行字符串拼接之外，还可通过`concat`\r\n\r\n#### concat\r\n\r\n用于将一个或多个字符串拼接成一个新字符串\r\n\r\n```js\r\nlet stringValue = \"hello \";\r\nlet result = stringValue.concat(\"world\");\r\nconsole.log(result); // \"hello world\"\r\nconsole.log(stringValue); // \"hello\"\r\n```\r\n\r\n\r\n\r\n### 删\r\n\r\n这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作\r\n\r\n常见的有：\r\n\r\n- slice()\r\n- substr()\r\n- substring()\r\n\r\n这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。\r\n\r\n```js\r\nlet stringValue = \"hello world\";\r\nconsole.log(stringValue.slice(3)); // \"lo world\"\r\nconsole.log(stringValue.substring(3)); // \"lo world\"\r\nconsole.log(stringValue.substr(3)); // \"lo world\"\r\nconsole.log(stringValue.slice(3, 7)); // \"lo w\"\r\nconsole.log(stringValue.substring(3,7)); // \"lo w\"\r\nconsole.log(stringValue.substr(3, 7)); // \"lo worl\"\r\n```\r\n\r\n\r\n\r\n### 改\r\n\r\n这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作\r\n\r\n常见的有：\r\n\r\n- trim()、trimLeft()、trimRight()\r\n\r\n- repeat()\r\n- padStart()、padEnd()\r\n- toLowerCase()、 toUpperCase()\r\n\r\n\r\n\r\n#### trim()、trimLeft()、trimRight()\r\n\r\n删除前、后或前后所有空格符，再返回新的字符串\r\n\r\n```js\r\nlet stringValue = \" hello world \";\r\nlet trimmedStringValue = stringValue.trim();\r\nconsole.log(stringValue); // \" hello world \"\r\nconsole.log(trimmedStringValue); // \"hello world\"\r\n```\r\n\r\n\r\n\r\n#### repeat()\r\n\r\n接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果\r\n\r\n```js\r\nlet stringValue = \"na \";\r\nlet copyResult = stringValue.repeat(2) // na na \r\n```\r\n\r\n\r\n\r\n#### padEnd()\r\n\r\n复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件\r\n\r\n```js\r\nlet stringValue = \"foo\";\r\nconsole.log(stringValue.padStart(6)); // \" foo\"\r\nconsole.log(stringValue.padStart(9, \".\")); // \"......foo\"\r\n```\r\n\r\n\r\n\r\n### toLowerCase()、 toUpperCase()\r\n\r\n大小写转化\r\n\r\n```js\r\nlet stringValue = \"hello world\";\r\nconsole.log(stringValue.toUpperCase()); // \"HELLO WORLD\"\r\nconsole.log(stringValue.toLowerCase()); // \"hello world\"\r\n```\r\n\r\n\r\n\r\n### 查\r\n\r\n除了通过索引的方式获取字符串的值，还可通过：\r\n\r\n- chatAt()\r\n\r\n- indexOf()\r\n\r\n- startWith()\r\n\r\n- includes()\r\n\r\n  \r\n\r\n#### charAt()\r\n\r\n返回给定索引位置的字符，由传给方法的整数参数指定\r\n\r\n```js\r\nlet message = \"abcde\";\r\nconsole.log(message.charAt(2)); // \"c\"\r\n```\r\n\r\n\r\n\r\n#### indexOf()\r\n\r\n从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）\r\n\r\n```js\r\nlet stringValue = \"hello world\";\r\nconsole.log(stringValue.indexOf(\"o\")); // 4\r\n```\r\n\r\n\r\n\r\n#### startWith()、includes()\r\n\r\n从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值\r\n\r\n```js\r\nlet message = \"foobarbaz\";\r\nconsole.log(message.startsWith(\"foo\")); // true\r\nconsole.log(message.startsWith(\"bar\")); // false\r\nconsole.log(message.includes(\"bar\")); // true\r\nconsole.log(message.includes(\"qux\")); // false\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 二、转换方法\r\n\r\n### split\r\n\r\n把字符串按照指定的分割符，拆分成数组中的每一项\r\n\r\n```js\r\nlet str = \"12+23+34\"\r\nlet arr = str.split(\"+\") // [12,23,34]\r\n```\r\n\r\n\r\n\r\n## 三、模板匹配方法\r\n\r\n针对正则表达式，字符串设计了几个方法：\r\n\r\n- match()\r\n- search()\r\n- replace()\r\n\r\n\r\n\r\n### match()\r\n\r\n接收一个参数，可以是一个正则表达式字符串，也可以是一个` RegExp `对象，返回数组\r\n\r\n```js\r\nlet text = \"cat, bat, sat, fat\";\r\nlet pattern = /.at/;\r\nlet matches = text.match(pattern);\r\nconsole.log(matches[0]); // \"cat\"\r\n```\r\n\r\n\r\n\r\n### search()\r\n\r\n接收一个参数，可以是一个正则表达式字符串，也可以是一个` RegExp `对象，找到则返回匹配索引，否则返回 -1\r\n\r\n```js\r\nlet text = \"cat, bat, sat, fat\";\r\nlet pos = text.search(/at/);\r\nconsole.log(pos); // 1\r\n```\r\n\r\n\r\n\r\n### replace()\r\n\r\n接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）\r\n\r\n```js\r\nlet text = \"cat, bat, sat, fat\";\r\nlet result = text.replace(\"at\", \"ond\");\r\nconsole.log(result); // \"cond, bat, sat, fat\"\r\n```","level":1,"tagId":10}
{"_id":{"$oid":"61aa38513d5f3a0001af556e"},"exerciseKey":"42405faa-2be2-4ded-8836-96a05586cd43","category":"QA","renderType":"md","title":"请手写“归并排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。\n\n## 算法描述\n\n具体算法描述如下：\n\n* 把长度为n的输入序列分成两个长度为n/2的子序列；\n* 对这两个子序列分别采用归并排序；\n* 将两个排序好的子序列合并成一个最终的排序序列。\n\n```javascript\nfunction mergeSort(arr) {  //采用自上而下的递归方法\n    var len = arr.length;\n    if(len < 2) {\n        return arr;\n    }\n    var middle = Math.floor(len / 2),\n        left = arr.slice(0, middle),\n        right = arr.slice(middle);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right)\n{\n    var result = [];\n    console.time('归并排序耗时');\n    while (left.length && right.length) {\n        if (left[0] <= right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n\n    while (left.length)\n        result.push(left.shift());\n\n    while (right.length)\n        result.push(right.shift());\n    console.timeEnd('归并排序耗时');\n    return result;\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(mergeSort(arr));\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(n)\n* 最差情况：T(n) = O(nlogn)\n* 平均情况：T(n) = O(nlogn)\n","level":3.5,"tagId":26}
{"_id":{"$oid":"61aa3854ff0573000165b276"},"exerciseKey":"4d19c9e2-7a80-40fd-83ee-ae6d9b531a0a","category":"QA","renderType":"md","title":"Promise.all 和 Promise.allSettled 有什么区别？","desc":null,"options":null,"explanation":"一句话概括`Promise.allSettled`和`Promise.all`的最大不同：`Promise.allSettled`永远不会被**reject**。\n\n## Promise.all的痛点\n\n当需要处理多个Promise并行时，大多数情况下Promise.all用起来是非常顺手的，比如下面这样\n\n```js\nconst delay = n => new Promise(resolve => setTimeout(resolve, n));\n\nconst promises = [\n  delay(100).then(() => 1),\n  delay(200).then(() => 2),\n  ]\n\nPromise.all(promises).then(values=>console.log(values))\n// 最终输出： [1, 2]\n```\n\n可是，是一旦有一个promise出现了异常，被reject了，情况就会变的麻烦。\n\n```js\nconst promises = [\n  delay(100).then(() => 1),\n  delay(200).then(() => 2),\n  Promise.reject(3)\n  ]\n\nPromise.all(promises).then(values=>console.log(values))\n// 最终输出： Uncaught (in promise) 3\n\nPromise.all(promises)\n.then(values=>console.log(values))\n.catch(err=>console.log(err))\n// 加入catch语句后，最终输出：3\n```\n\n尽管能用catch捕获其中的异常，但你会发现其他执行成功的Promise的消息都丢失了，仿佛石沉大海一般。\n\n要么全部成功，要么全部重来，这是Promise.all本身的强硬逻辑，也是痛点的来源，不能说它错，但这的确给Promise.allSettled留下了立足的空间。\n\n## Promise.allSettled\n\n假如使用Promise.allSettled来处理这段逻辑会怎样呢?\n\n```js\nconst promises = [\n  delay(100).then(() => 1),\n  delay(200).then(() => 2),\n  Promise.reject(3)\n  ]\n\nPromise.allSettled(promises).then(values=>console.log(values))\n// 最终输出： \n//    [\n//      {status: \"fulfilled\", value: 1},\n//      {status: \"fulfilled\", value: 2},\n//      {status: \"rejected\", value: 3},\n//    ]\n```\n\n可以看到所有promise的数据都被包含在then语句中，且每个promise的返回值多了一个status字段，表示当前promise的状态，没有任何一个promise的信息被丢失。\n\n因此，当用Promise.allSettled时，我们只需专注在then语句里，当有promise被异常打断时，我们依然能妥善处理那些已经成功了的promise，不必全部重来。\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa385434458700017f1c5c"},"exerciseKey":"4d2b6272-e362-4c49-bf69-7f2c2e253e61","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nfunction addToList(item, list) {\n  return list.push(item);\n}\n\nconst result = addToList(\"apple\", [\"banana\"]);\nconsole.log(result);\n```","options":"{\"options\":[\"['apple', 'banana']\",\"2\",\"true\",\"undefined\"],\"isMulti\":false,\"answer\":[1]}","explanation":"`push()`方法返回新数组的长度。一开始，数组包含一个元素（字符串`\"banana\"`），长度为1。 在数组中添加字符串`\"apple\"`后，长度变为2，并将从`addToList`函数返回。\n`push`方法修改原始数组，如果你想从函数返回数组而不是数组长度，那么应该在push `item`之后返回`list`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3855c2d0220001c96473"},"exerciseKey":"524c782b-11d8-4be0-9ba6-6fcfd487ace0","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst emojis = [\"🥑\", [\"✨\", \"✨\", [\"🍕\", \"🍕\"]]];\n\nconsole.log(emojis.flat(1));\n```","options":"{\"options\":[\"['🥑', ['✨', '✨', ['🍕', '🍕']]]\",\"['🥑', '✨', '✨', ['🍕', '🍕']]\",\"['🥑', ['✨', '✨', '🍕', '🍕']]\",\"['🥑', '✨', '✨', '🍕', '🍕']\"],\"isMulti\":false,\"answer\":[1]}","explanation":"通过方法 `flat`， 我们可以创建一个新的, 已被扁平化的数组。被扁平化的深度取决于我们传递的值。在这个case里，我们传递了值 `1` (并不必要，这是默认值)，相当于只有第一层的数组才会被连接。即这个 case 里的 `['🥑']` and `['✨', '✨', ['🍕', '🍕']]`。连接这两个数组得到结果 `['🥑', '✨', '✨', ['🍕', '🍕']]`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3856d00c060001bf11fa"},"exerciseKey":"55af61ba-c3c4-4714-a047-02dedd49d0df","category":"QA","renderType":"md","title":"html文档渲染过程，css文件和js文件的下载，是否会阻塞渲染？","desc":null,"options":null,"explanation":"浏览器内有多个进程，其中渲染进程被称为浏览器内核，负责页面渲染和执行 JS 脚本等。渲染进程负责浏览器的解析和渲染，内部有 JS 引擎线程、 GUI 渲染线程、事件循环管理线程、定时器线程、HTTP 线程。\n\nJS 引擎线程负责执行 JS 脚本，GUI 渲染线程负责页面的解析和渲染，两者是互斥的，也就是执行 JS 的时候页面是停止解析和渲染的。这是因为如果在页面渲染的同时 JS 引擎修改了页面元素，比如清空页面，会造成后续页面渲染的不必要和错误。而由于 JS 经常要操作 DOM ，就要涉及 JS 引擎线程和 GUI 渲染线程的通信，而线程间通信代价是非常昂贵的，这也是造成 JS 操作 DOM 效率不高的原因。\n\n\n浏览器的 HTML/CSS 的解析和渲染都属于 GUI渲染线程，所以和 JS 引擎线程是互斥、阻塞的。下面从代码实际运行的角度分析浏览器解析和渲染的顺序，以及互相间的阻塞关系。\n\n## CSS 阻塞\n\n* css 文件的下载和解析不会影响 DOM 的解析，但是会阻塞 DOM 的渲染。因为 CSSOM Tree 要和 DOM Tree 合成 Render Tree 才能绘制页面。下面的 test1 在 css 下载并解析完成前是默认样式， test2 在 css 下载并解析完成之前不会显示：\n\n```html\n<button class=\"btn btn-primary\">test1</button>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css\">\n<div>test2</div>\n```\n\n* css 文件没下载并解析完成之前，后续的 js 脚本不能执行。下面的 alert('ok') 在 css 下载并解析完成之前不会弹出来：\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css\">\n<script>\n    alert('ok')\n</script>\n```\n\n* css 文件的下载不会阻塞前面的 js 脚本执行。下面的 alert('ok') 会在 css 下载完成前弹出：\n\n```html\n<script>\n    alert('ok')\n</script>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css\">\n```\n\n所以在需要提前执行不操作 dom 元素的 js 时，不妨把 js 放到 css 文件之前。\n\n## js 阻塞\n\njs 文件的下载和解析会阻塞 GUI 渲染进程，也就是会阻塞 DOM 和 CSS 的解析和渲染。\n\njs 文件没下载并解析完成之前，后续的 HTML 和 CSS 无法解析：\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.4.1.js\"></script>\n<div>test</div>\n```\n\n* js 文件的下载不会阻塞前面 HTML 和 CSS 的解析：\n\n```html\n<div>test</div>\n<script src=\"https://code.jquery.com/jquery-3.4.1.js\"></script>\n```\n\n## 需要注意的点\n\n* 第一，GUI 渲染线程会尽可能早的将内容呈现到屏幕上，并不会等到所有的 HTML 都解析完成之后再去构建和布局 Render Tree，而是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。下面 test1 会在 js 文件下载完成前渲染完成，而 test2 则会在 js 文件下载并执行完之后渲染：\n\n```html\n  <div>test1</div>\n  <script src=\"https://code.jquery.com/jquery-3.4.1.js\"></script>\n  <div>test2</div>\n```\n\n* 第二，文件的下载是不会被阻塞的，不管是 css 还是 js 文件，浏览器的主线程会在页面解析前开启下载，所以就算在外部脚本执行前删除脚本，脚本也还是会下载。\n\n```html\n<body>\n  <script>\n    document.body.remove()\n  </script>  \n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css\">\n  <script src=\"https://code.jquery.com/jquery-3.4.1.js\"></script>\n</body>\n```\n\n\n\n\n\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa38573976eb00014e44dc"},"exerciseKey":"576883a2-f601-4c53-9f8c-be61a07168bf","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nconst person = { name: \"Lydia\" };\n\nObject.defineProperty(person, \"age\", { value: 21 });\n\nconsole.log(person);\nconsole.log(Object.keys(person));\n```","options":"{\"options\":[\"{ name: \\\"Lydia\\\", age: 21 }, [\\\"name\\\", \\\"age\\\"]\",\"{ name: \\\"Lydia\\\", age: 21 }, [\\\"name\\\"]\",\"{ name: \\\"Lydia\\\"}, [\\\"name\\\", \\\"age\\\"]\",\"{ name: \\\"Lydia\\\"}, [\\\"age\\\"]\"],\"isMulti\":false,\"answer\":[1]}","explanation":"通过`defineProperty`方法，我们可以给对象添加一个新属性，或者修改已经存在的属性。而我们使用`defineProperty`方法给对象添加了一个属性之后，属性默认为 _不可枚举(not enumerable)_. `Object.keys`方法仅返回对象中 _可枚举(enumerable)_ 的属性，因此只剩下了`\"name\"`.\n用`defineProperty`方法添加的属性默认不可变。你可以通过`writable`, `configurable` 和 `enumerable`属性来改变这一行为。这样的话， 相比于自己添加的属性，`defineProperty`方法添加的属性有了更多的控制权。","level":1,"tagId":32}
{"_id":{"$oid":"61aa385abdfab500012c8472"},"exerciseKey":"60b32fdd-58ef-4fe0-bc87-da65c5a00db1","category":"QA","renderType":"md","title":"元素竖向的百分比设定是相对于容器的高度吗？","desc":null,"options":null,"explanation":"当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，但是，对于一些表示竖向距离的属性，例如 padding-top , padding-bottom , margin-top , margin-bottom 等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。","level":2,"tagId":11}
{"_id":{"$oid":"61aa385ccd02c30001dd2243"},"exerciseKey":"696b2f96-57aa-49cc-9305-4d336e8365ef","category":"Choice","renderType":"md","title":"这个函数干了什么?","desc":"```javascript\nJSON.parse()\n```","options":"{\"options\":[\"Parses JSON to a JavaScript value\",\"Parses a JavaScript object to JSON\",\"Parses any JavaScript value to JSON\",\"Parses JSON to a JavaScript object only\"],\"isMulti\":false,\"answer\":[0]}","explanation":"使用`JSON.parse()`方法，我们可以将JSON字符串解析为JavaScript值。\n```javascript\n// 将数字字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:\nconst jsonNumber = JSON.stringify(4) // '4'\nJSON.parse(jsonNumber) // 4\n// 将数组值字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:\nconst jsonArray = JSON.stringify([1, 2, 3]) // '[1, 2, 3]'\nJSON.parse(jsonArray) // [1, 2, 3]\n// 将对象字符串化为有效的JSON，然后将JSON字符串解析为JavaScript值:\nconst jsonArray = JSON.stringify({ name: \"Lydia\" }) // '{\"name\":\"Lydia\"}'\nJSON.parse(jsonArray) // { name: 'Lydia' }\n```","level":1,"tagId":32}
{"_id":{"$oid":"61aa385c91a75000018d2cdd"},"exerciseKey":"6b6a6323-32e3-4082-91a4-d431a88436d9","category":"QA","renderType":"md","title":"什么是 DOM 和 BOM？","desc":null,"options":null,"explanation":"* DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。\n* BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa3862ff0573000165b2d1"},"exerciseKey":"7aa8fdff-3c1c-423c-8f2d-cd784dfcbac1","category":"QA","renderType":"md","title":"说说你对git stash 的理解？应用场景？","desc":null,"options":null,"explanation":"\r\n ![](https://static.vue-js.com/83ddf210-fd6f-11eb-bc6f-3f06e1491664.png)\r\n\r\n\r\n\r\n## 一、是什么\r\n\r\nstash，译为存放，在 git 中，可以理解为保存当前工作进度，会把暂存区和工作区的改动进行保存，这些修改会保存在一个栈上\r\n\r\n后续你可以在任何时候任何分支重新将某次的修改推出来，重新应用这些更改的代码\r\n\r\n默认情况下，`git stash`会缓存下列状态的文件：\r\n\r\n- 添加到暂存区的修改（staged changes）\r\n- Git跟踪的但并未添加到暂存区的修改（unstaged changes）\r\n\r\n但以下状态的文件不会缓存：\r\n\r\n- 在工作目录中新的文件（untracked files）\r\n- 被忽略的文件（ignored files）\r\n\r\n如果想要上述的文件都被缓存，可以使用`-u`或者`--include-untracked`可以工作目录新的文件，使用`-a`或者`--all`命令可以当前目录下的所有修改\r\n\r\n\r\n\r\n## 二、如何使用\r\n\r\n关于`git stash`常见的命令如下：\r\n\r\n- git stash\r\n- git stash save\r\n\r\n- git stash list\r\n- git stash pop\r\n- git stash apply\r\n- git stash show\r\n\r\n- git stash drop\r\n- git stash clear\r\n\r\n\r\n\r\n### git stash\r\n\r\n保存当前工作进度，会把暂存区和工作区的改动保存起来\r\n\r\n\r\n\r\n### git stash save\r\n\r\n`git stash save`可以用于存储修改.并且将`git`的工作状态切回到`HEAD`也就是上一次合法提交上\r\n\r\n如果给定具体的文件路径,`git stash`只会处理路径下的文件.其他的文件不会被存储，其存在一些参数：\r\n\r\n- --keep-index 或者 -k 只会存储为加入 git 管理的文件\r\n\r\n- --include-untracked 为追踪的文件也会被缓存,当前的工作空间会被恢复为完全清空的状态\r\n- -a 或者 --all 命令可以当前目录下的所有修改，包括被 git 忽略的文件\r\n\r\n\r\n\r\n### git stash list\r\n\r\n显示保存进度的列表。也就意味着，`git stash`命令可以多次执行，当多次使用`git stash`命令后，栈里会充满未提交的代码，如下：\r\n\r\n ![](https://static.vue-js.com/50216dd0-fccf-11eb-bc6f-3f06e1491664.png)\r\n\r\n其中，`stash@{0}`、`stash@{1}`就是当前`stash`的名称\r\n\r\n\r\n\r\n### git stash pop\r\n\r\n`git stash pop` 从栈中读取最近一次保存的内容，也就是栈顶的`stash`会恢复到工作区\r\n\r\n也可以通过 `git stash pop` + `stash`名字执行恢复哪个`stash`恢复到当前目录\r\n\r\n如果从`stash`中恢复的内容和当前目录中的内容发生了冲突，则需要手动修复冲突或者创建新的分支来解决冲突\r\n\r\n\r\n\r\n\r\n\r\n### git stash apply\r\n\r\n将堆栈中的内容应用到当前目录，不同于`git stash pop`，该命令不会将内容从堆栈中删除\r\n\r\n也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况\r\n\r\n同样，可以通过`git stash apply` + `stash`名字执行恢复哪个`stash`恢复到当前目录\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### git stash show\r\n\r\n查看堆栈中最新保存的`stash`和当前目录的差异\r\n\r\n通过使用`git stash show -p`查看详细的不同\r\n\r\n通过使用`git stash show stash@{1}`查看指定的`stash`和当前目录差异\r\n\r\n ![](https://static.vue-js.com/458620a0-fccf-11eb-bc6f-3f06e1491664.png)\r\n\r\n\r\n\r\n### git stash drop\r\n\r\n`git stash drop` + `stash`名称表示从堆栈中移除某个指定的stash\r\n\r\n\r\n\r\n### git stash clear\r\n\r\n删除所有存储的进度\r\n\r\n\r\n\r\n## 三、应用场景\r\n\r\n当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态， 而这时你想要切换到另一个分支或者拉下远端的代码去做一点别的事情\r\n\r\n但是你创建一次未完成的代码的`commit`提交，这时候就可以使用`git stash`\r\n\r\n例如以下场景：\r\n\r\n当你的开发进行到一半,但是代码还不想进行提交 ,然后需要同步去关联远端代码时.如果你本地的代码和远端代码没有冲突时,可以直接通过`git pull`解决\r\n\r\n但是如果可能发生冲突怎么办.直接`git pull`会拒绝覆盖当前的修改，这时候就可以依次使用下述的命令：\r\n\r\n- git stash\r\n- git pull\r\n- git stash pop\r\n\r\n或者当你开发到一半，现在要修改别的分支问题的时候，你也可以使用`git stash`缓存当前区域的代码\r\n\r\n- git stash：保存开发到一半的代码\r\n- git commit -m '修改问题'\r\n- git stash pop：将代码追加到最新的提交之后","level":1,"tagId":29}
{"_id":{"$oid":"61aa3862796412000191746e"},"exerciseKey":"7b63d3a8-32c4-4561-95fc-77755ea629f1","category":"QA","renderType":"md","title":"大文件怎么实现断点续传？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/3ccb0e90-8ba4-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n不管怎样简单的需求，在量级达到一定层次时，都会变得异常复杂\n\n文件上传简单，文件变大就复杂\n\n上传大文件时，以下几个变量会影响我们的用户体验\n\n- 服务器处理数据的能力\n- 请求超时\n- 网络波动\n\n上传时间会变长，高频次文件上传失败，失败后又需要重新上传等等\n\n为了解决上述问题，我们需要对大文件上传单独处理\n\n这里涉及到分片上传及断点续传两个概念\n\n#### 分片上传\n\n分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（Part）来进行分片上传\n\n如下图\n\n ![](https://static.vue-js.com/21db7520-8ba4-11eb-85f6-6fac77c0c9b3.png)\n\n上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件\n\n大致流程如下：\n\n1. 将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；\n2. 初始化一个分片上传任务，返回本次分片上传唯一标识；\n3. 按照一定的策略（串行或并行）发送各个分片数据块；\n4. 发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件\n\n#### 断点续传\n\n断点续传指的是在下载或上传时，将下载或上传任务人为的划分为几个部分\n\n每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度\n\n一般实现方式有两种：\n\n- 服务器端返回，告知从哪开始\n- 浏览器端自行处理\n\n上传过程中将文件在服务器写为临时文件，等全部写完了（文件上传完），将此临时文件重命名为正式文件即可\n\n如果中途上传中断过，下次上传的时候根据当前临时文件大小，作为在客户端读取文件的偏移量，从此位置继续读取文件数据块，上传到服务器从此偏移量继续写入文件即可\n\n## 二、实现思路\n\n整体思路比较简单，拿到文件，保存文件唯一性标识，切割文件，分段上传，每次上传一段，根据唯一性标识判断文件上传进度，直到文件的全部片段上传完毕\n\n![](https://static.vue-js.com/465d2920-8ba4-11eb-85f6-6fac77c0c9b3.png)\n\n下面的内容都是伪代码\n\n读取文件内容：\n\n```js\nconst input = document.querySelector('input');\ninput.addEventListener('change', function() {\n    var file = this.files[0];\n});\n```\n\n可以使用`md5`实现文件的唯一性\n\n```js\nconst md5code = md5(file);\n```\n\n然后开始对文件进行分割\n\n```js\nvar reader = new FileReader();\nreader.readAsArrayBuffer(file);\nreader.addEventListener(\"load\", function(e) {\n    //每10M切割一段,这里只做一个切割演示，实际切割需要循环切割，\n    var slice = e.target.result.slice(0, 10*1024*1024);\n});\n```\n\nh5上传一个（一片）\n\n```js\nconst formdata = new FormData();\nformdata.append('0', slice);\n//这里是有一个坑的，部分设备无法获取文件名称，和文件类型，这个在最后给出解决方案\nformdata.append('filename', file.filename);\nvar xhr = new XMLHttpRequest();\nxhr.addEventListener('load', function() {\n    //xhr.responseText\n});\nxhr.open('POST', '');\nxhr.send(formdata);\nxhr.addEventListener('progress', updateProgress);\nxhr.upload.addEventListener('progress', updateProgress);\n\nfunction updateProgress(event) {\n    if (event.lengthComputable) {\n        //进度条\n    }\n}\n```\n\n这里给出常见的图片和视频的文件类型判断\n\n```js\nfunction checkFileType(type, file, back) {\n/**\n* type png jpg mp4 ...\n* file input.change=> this.files[0]\n* back callback(boolean)\n*/\n    var args = arguments;\n    if (args.length != 3) {\n        back(0);\n    }\n    var type = args[0]; // type = '(png|jpg)' , 'png'\n    var file = args[1];\n    var back = typeof args[2] == 'function' ? args[2] : function() {};\n    if (file.type == '') {\n        // 如果系统无法获取文件类型，则读取二进制流，对二进制进行解析文件类型\n        var imgType = [\n            'ff d8 ff', //jpg\n            '89 50 4e', //png\n\n            '0 0 0 14 66 74 79 70 69 73 6F 6D', //mp4\n            '0 0 0 18 66 74 79 70 33 67 70 35', //mp4\n            '0 0 0 0 66 74 79 70 33 67 70 35', //mp4\n            '0 0 0 0 66 74 79 70 4D 53 4E 56', //mp4\n            '0 0 0 0 66 74 79 70 69 73 6F 6D', //mp4\n\n            '0 0 0 18 66 74 79 70 6D 70 34 32', //m4v\n            '0 0 0 0 66 74 79 70 6D 70 34 32', //m4v\n\n            '0 0 0 14 66 74 79 70 71 74 20 20', //mov\n            '0 0 0 0 66 74 79 70 71 74 20 20', //mov\n            '0 0 0 0 6D 6F 6F 76', //mov\n\n            '4F 67 67 53 0 02', //ogg\n            '1A 45 DF A3', //ogg\n\n            '52 49 46 46 x x x x 41 56 49 20', //avi (RIFF fileSize fileType LIST)(52 49 46 46,DC 6C 57 09,41 56 49 20,4C 49 53 54)\n        ];\n        var typeName = [\n            'jpg',\n            'png',\n            'mp4',\n            'mp4',\n            'mp4',\n            'mp4',\n            'mp4',\n            'm4v',\n            'm4v',\n            'mov',\n            'mov',\n            'mov',\n            'ogg',\n            'ogg',\n            'avi',\n        ];\n        var sliceSize = /png|jpg|jpeg/.test(type) ? 3 : 12;\n        var reader = new FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.addEventListener(\"load\", function(e) {\n            var slice = e.target.result.slice(0, sliceSize);\n            reader = null;\n            if (slice && slice.byteLength == sliceSize) {\n                var view = new Uint8Array(slice);\n                var arr = [];\n                view.forEach(function(v) {\n                    arr.push(v.toString(16));\n                });\n                view = null;\n                var idx = arr.join(' ').indexOf(imgType);\n                if (idx > -1) {\n                    back(typeName[idx]);\n                } else {\n                    arr = arr.map(function(v) {\n                        if (i > 3 && i < 8) {\n                            return 'x';\n                        }\n                        return v;\n                    });\n                    var idx = arr.join(' ').indexOf(imgType);\n                    if (idx > -1) {\n                        back(typeName[idx]);\n                    } else {\n                        back(false);\n                    }\n\n                }\n            } else {\n                back(false);\n            }\n\n        });\n    } else {\n        var type = file.name.match(/\\.(\\w+)$/)[1];\n        back(type);\n    }\n}\n```\n\n调用方法如下\n\n```js\ncheckFileType('(mov|mp4|avi)',file,function(fileType){\n    // fileType = mp4,\n    // 如果file的类型不在枚举之列，则返回false\n});\n```\n\n上面上传文件的一步，可以改成：\n\n```js\nformdata.append('filename', md5code+'.'+fileType);\n```\n\n有了切割上传后，也就有了文件唯一标识信息，断点续传变成了后台的一个小小的逻辑判断\n\n后端主要做的内容为：根据前端传给后台的`md5`值，到服务器磁盘查找是否有之前未完成的文件合并信息（也就是未完成的半成品文件切片），取到之后根据上传切片的数量，返回数据告诉前端开始从第几节上传\n\n如果想要暂停切片的上传，可以使用`XMLHttpRequest `的 `abort `方法\n\n\n## 三、使用场景\n\n- 大文件加速上传：当文件大小超过预期大小时，使用分片上传可实现并行上传多个 Part， 以加快上传速度\n- 网络环境较差：建议使用分片上传。当出现上传失败的时候，仅需重传失败的Part\n- 流式上传：可以在需要上传的文件大小还不确定的情况下开始上传。这种场景在视频监控等行业应用中比较常见\n\n## 小结\n\n当前的伪代码，只是提供一个简单的思路，想要把事情做到极致，我们还需要考虑到更多场景，比如\n\n- 切片上传失败怎么办\n- 上传过程中刷新页面怎么办\n- 如何进行并行上传\n- 切片什么时候按数量切，什么时候按大小切\n- 如何结合 Web Work 处理大文件上传\n- 如何实现秒传\n\n人生又何尝不是如此，极致的人生体验有无限可能，越是后面才发现越是精彩 ~_~\n","level":3,"tagId":26}
{"_id":{"$oid":"61aa383e0f30890001ab800e"},"exerciseKey":"013a77b6-e97b-4271-9e1b-9d632783979d","category":"QA","renderType":"html","title":"介绍下WebSocket","desc":null,"options":null,"explanation":"<h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-82\">1. WebSocket 是什么</h3><p style=\"text-align:left;text-indent:2em;\">WebSocket是HTML5提供的一种浏览器与服务器进行<strong>全双工通讯</strong>的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p><p style=\"text-align:left;text-indent:2em;\">WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：<strong>服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</strong></p><p style=\"text-align:left;text-indent:2em;\"><strong>WebSocket原理</strong> ：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。</p><p></p><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-83\">2. WebSocket 特点</h3><ul><li>支持双向通信，实时性更强</li><li>可以发送文本，也可以发送二进制数据‘’</li><li>建立在TCP协议之上，服务端的实现比较容易</li><li>数据格式比较轻量，性能开销小，通信高效</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li></ul>","level":2,"tagId":16}
{"_id":{"$oid":"61aa3840cd02c30001dd2164"},"exerciseKey":"09420ad4-4cd0-4c3d-9b56-970e21c8f208","category":"QA","renderType":"md","title":"谈谈 Object.defineProperty 与 Proxy 的区别","desc":null,"options":null,"explanation":"在 Vue2.x 的版本中，双向绑定是基于 Object.defineProperty 方式实现的。而 Vue3.x 版本中，使用了 ES6 中的 Proxy 代理的方式实现。\n\n## Object.defineProperty(obj, prop, descriptor)\n\n使用 Object.defineProperty 会产生三个主要的问题：\n\n* 不能监听数组的变化\n\n在 Vue2.x 中解决数组监听的方法是将能够改变原数组的方法进行重写实现（比如：push、 pop、shift、unshift、splice、sort、reverse），举例：\n\n```javascript\n// 我们重写 push 方法\nconst originalPush = Array.prototype.push\n\nArray.prototype.push = function() {\n  // 我们在这个位置就可以进行 数据劫持 了\n  console.log('数组被改变了')\n\n  originalPush.apply(this, arguments)\n}\n```\n\n* 必须遍历对象的每个属性\n\n可以通过 Object.keys() 来实现\n\n* 必须深层遍历嵌套的对象\n\n通过递归深层遍历嵌套对象，然后通过 Object.keys() 来实现对每个属性的劫持\n\n## Proxy\n\n* Proxy 针对的整个对象，Object.defineProperty 针对单个属性，这就解决了 需要对对象进行深度递归（支持嵌套的复杂对象劫持）实现对每个属性劫持的问题\n\n```javascript\n// 定义一个复杂对象\nconst obj = {\n    obj: {\n        children: {\n            a: 1\n        }\n    }\n}\n\nconst objProxy = new Proxy(obj, {\n    get(target, property, receiver){\n        console.log('-- target --')\n        return Reflect.get(target, property, receiver)\n    },\n\n    set(target, property, value, receiver) {\n        console.log('-- set --')\n        return Reflect.set(target, property, value, receiver)\n    }\n})\n\nconsole.log(objProxy.obj) // 输出 '-- target --'\nconsole.log(objProxy.a = 2) // 输出 '-- set --'\n```\n\n* Proxy 解决了 Object.defineProperty 无法劫持数组的问题\n\n```javascript\nconst ary = [1, 2, 3]\n\nconst aryProxy = new Proxy(ary, {\n    get(target, property, receiver){\n        console.log('-- target --')\n        return Reflect.get(target, property, receiver)\n    },\n    set(target, property, value, receiver) {\n        console.log('-- set --')\n        return Reflect.set(target, property, value, receiver)\n    }\n})\n\nconsole.log(aryProxy[0]) // 输出 '-- target --'\nconsole.log(aryProxy.push(1)) // 输出 '-- set --'\n```\n\n*  比 Object.defineProperty 有更多的拦截方法，对比一些新的浏览器，可能会对 Proxy 针正对性的优化，有助于性能提升\n\n\n","level":3,"tagId":24}
{"_id":{"$oid":"61aa38407964120001917379"},"exerciseKey":"097902c0-17b4-4416-9926-3ad88a55416e","category":"QA","renderType":"md","title":"symbol 有什么用处？","desc":null,"options":null,"explanation":"ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。\n\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n\nSymbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。","level":3.5,"tagId":24}
{"_id":{"$oid":"61aa384339bf10000191c922"},"exerciseKey":"144bb888-936e-42c8-bdcb-445b5c4dc774","category":"QA","renderType":"md","title":"IconFont 的原理是什么","desc":null,"options":null,"explanation":"IconFont 的使用原理来自于 css 的 `@font-face` 属性。\n\n这个属性用来定义一个新的字体，基本用法如下：\n\n```css\n@font-face {\n  font-family: <YourFontName>;\n  src: <url> [<format>],[<source> [<format>]], *;\n  [font-weight: <weight>];\n  [font-style: <style>];\n}\n```\n\n* font-family：为载入的字体取名字。\n* src：[url]加载字体，可以是相对路径，可以是绝对路径，也可以是网络地址。[format]定义的字体的格式，用来帮助浏览器识别。主要取值为：【truetype(.ttf)、opentype（.otf）、truetype-aat、embedded-opentype(.eot)、svg(.svg)、woff(.woff)】。\n* font-weight：定义加粗样式。\n* font-style：定义字体样式。\n\n","level":2,"tagId":11}
{"_id":{"$oid":"61aa384439bf10000191c92b"},"exerciseKey":"17a8d905-1699-4e11-a5a1-c5165115de48","category":"QA","renderType":"html","title":"Webpack中 loader的作用是什么，以及常用loader有哪些","desc":null,"options":null,"explanation":"<p><strong>loader作用</strong>：</p><p style=\"text-align:start;text-indent:2em;\"></p><p style=\"text-align:start;text-indent:2em;\">（1）实现对不同格式文件的处理，比如将Scss转换为CSS，或将 TypeScript转化为Javascript。</p><p style=\"text-align:start;text-indent:2em;\">（2）可以编译文件，从而使其能够添加到依赖关系中。loader是 WebPack最重要的部分之一。通过使用不同的 loader，我们能够调用外部的脚本或者工具，实现对不同格式文件的处理。loader需要在 webpack.config.js里单独用 module进行配置。</p><p></p><p></p><p><strong>常用的 loader如下</strong>：</p><p></p><p>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件<br/> url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去<br/> source-map-loader：加载额外的 Source Map 文件，以方便断点调试<br/> image-loader：加载并且压缩图片文件<br/> babel-loader：把 ES6 转换成 ES5<br/> css-loader：加载 CSS，支持模块化、压缩、文件导入等特性<br/> style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。<br/> eslint-loader：通过 ESLint 检查 JavaScript 代码<br/><br/></p>","level":1,"tagId":28}
{"_id":{"$oid":"61aa38453dd7f70001832eaa"},"exerciseKey":"17f833d6-5312-4150-abb8-f3a320581109","category":"QA","renderType":"md","title":"说说vue中，key的原理","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/bc6e9540-3f41-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、Key是什么\n\n开始之前，我们先还原两个实际工作场景\n\n1.  当我们在使用`v-for`时，需要给单元加上`key`\n\n```js\n<ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n</ul>\n```\n2. 用`+new Date()`生成的时间戳作为`key`，手动强制触发重新渲染\n```js\n<Comp :key=\"+new Date()\" />\n```\n\n那么这背后的逻辑是什么，`key`的作用又是什么？\n\n一句话来讲\n\n> key是给每一个vnode的唯一id，也是diff的一种优化策略，可以根据key，更准确， 更快的找到对应的vnode节点\n\n### 场景背后的逻辑\n\n当我们在使用`v-for`时，需要给单元加上`key`\n\n- 如果不用key，Vue会采用就地复地原则：最小化element的移动，并且会尝试尽最大程度在同适当的地方对相同类型的element，做patch或者reuse。\n\n- 如果使用了key，Vue会根据keys的顺序记录element，曾经拥有了key的element如果不再出现的话，会被直接remove或者destoryed\n\n用`+new Date()`生成的时间戳作为`key`，手动强制触发重新渲染\n\n- 当拥有新值的rerender作为key时，拥有了新key的Comp出现了，那么旧key Comp会被移除，新key Comp触发渲染\n\n\n## 二、设置key与不设置key区别\n\n\n举个例子：\n\n创建一个实例，2秒后往`items`数组插入数据\n\n```html\n<body>\n  <div id=\"demo\">\n    <p v-for=\"item in items\" :key=\"item\">{{item}}</p>\n  </div>\n  <script src=\"../../dist/vue.js\"></script>\n  <script>\n    // 创建实例\n    const app = new Vue({\n      el: '#demo',\n      data: { items: ['a', 'b', 'c', 'd', 'e'] },\n      mounted () {\n        setTimeout(() => { \n          this.items.splice(2, 0, 'f')  // \n       }, 2000);\n     },\n   });\n  </script>\n</body>\n```\n\n在不使用`key`的情况，`vue`会进行这样的操作：\n\n ![](https://static.vue-js.com/c9da6790-3f41-11eb-85f6-6fac77c0c9b3.png)\n\n分析下整体流程：\n\n- 比较A，A，相同类型的节点，进行`patch`，但数据相同，不发生`dom`操作\n- 比较B，B，相同类型的节点，进行`patch`，但数据相同，不发生`dom`操作\n- 比较C，F，相同类型的节点，进行`patch`，数据不同，发生`dom`操作\n- 比较D，C，相同类型的节点，进行`patch`，数据不同，发生`dom`操作\n- 比较E，D，相同类型的节点，进行`patch`，数据不同，发生`dom`操作\n- 循环结束，将E插入到`DOM`中\n\n一共发生了3次更新，1次插入操作\n\n在使用`key`的情况：`vue`会进行这样的操作：\n\n- 比较A，A，相同类型的节点，进行`patch`，但数据相同，不发生`dom`操作\n- 比较B，B，相同类型的节点，进行`patch`，但数据相同，不发生`dom`操作\n- 比较C，F，不相同类型的节点\n  - 比较E、E，相同类型的节点，进行`patch`，但数据相同，不发生`dom`操作\n- 比较D、D，相同类型的节点，进行`patch`，但数据相同，不发生`dom`操作\n- 比较C、C，相同类型的节点，进行`patch`，但数据相同，不发生`dom`操作\n- 循环结束，将F插入到C之前\n\n一共发生了0次更新，1次插入操作\n\n通过上面两个小例子，可见设置`key`能够大大减少对页面的`DOM`操作，提高了`diff`效率\n\n### 设置key值一定能提高diff效率吗？\n\n其实不然，文档中也明确表示\n\n> 当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素\n\n这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出\n\n建议尽可能在使用 `v-for` 时提供 `key`，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升\n\n\n## 三、原理分析\n\n源码位置：core/vdom/patch.js\n\n这里判断是否为同一个`key`，首先判断的是`key`值是否相等如果没有设置`key`，那么`key`为`undefined`，这时候`undefined`是恒等于`undefined`\n\n```js\nfunction sameVnode (a, b) {\n    return (\n        a.key === b.key && (\n            (\n                a.tag === b.tag &&\n                a.isComment === b.isComment &&\n                isDef(a.data) === isDef(b.data) &&\n                sameInputType(a, b)\n            ) || (\n                isTrue(a.isAsyncPlaceholder) &&\n                a.asyncFactory === b.asyncFactory &&\n                isUndef(b.asyncFactory.error)\n            )\n        )\n    )\n}\n```\n\n`updateChildren`方法中会对新旧`vnode`进行`diff`，然后将比对出的结果用来更新真实的`DOM`\n\n```js\nfunction updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    ...\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (isUndef(oldStartVnode)) {\n            ...\n        } else if (isUndef(oldEndVnode)) {\n            ...\n        } else if (sameVnode(oldStartVnode, newStartVnode)) {\n            ...\n        } else if (sameVnode(oldEndVnode, newEndVnode)) {\n            ...\n        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n            ...\n        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n            ...\n        } else {\n            if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n            idxInOld = isDef(newStartVnode.key)\n                ? oldKeyToIdx[newStartVnode.key]\n                : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n            if (isUndef(idxInOld)) { // New element\n                createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n            } else {\n                vnodeToMove = oldCh[idxInOld]\n                if (sameVnode(vnodeToMove, newStartVnode)) {\n                    patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n                    oldCh[idxInOld] = undefined\n                    canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n                } else {\n                    // same key but different element. treat as new element\n                    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n                }\n            }\n            newStartVnode = newCh[++newStartIdx]\n        }\n    }\n    ...\n}\n```\n\n","level":2.5,"tagId":14}
{"_id":{"$oid":"61aa38450f30890001ab8047"},"exerciseKey":"1915f55c-162b-46ee-bf06-11194d67730c","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst name = \"Lydia Hallie\"\nconsole.log(name.padStart(13))\nconsole.log(name.padStart(2))\n```","options":"{\"options\":[\"\\\"Lydia Hallie\\\", \\\"Lydia Hallie\\\"\",\"\\\"           Lydia Hallie\\\", \\\"  Lydia Hallie\\\" (\\\"[13x whitespace]Lydia Hallie\\\", \\\"[2x whitespace]Lydia Hallie\\\")\",\"\\\" Lydia Hallie\\\", \\\"Lydia Hallie\\\" (\\\"[1x whitespace]Lydia Hallie\\\", \\\"Lydia Hallie\\\")\",\"\\\"Lydia Hallie\\\", \\\"Lyd\\\"\"],\"isMulti\":false,\"answer\":[2]}","explanation":"使用`padStart`方法，我们可以在字符串的开头添加填充。传递给此方法的参数是字符串的总长度（包含填充）。字符串`Lydia Hallie`的长度为`12`, 因此`name.padStart（13）`在字符串的开头只会插入1（`13 - 12 = 1`）个空格。\n如果传递给`padStart`方法的参数小于字符串的长度，则不会添加填充。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384785c5f70001542edc"},"exerciseKey":"1df4a6af-27bf-4e9e-a990-bd7e4c96399a","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1)\n}\n\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1)\n}\n```","options":"{\"options\":[\"0 1 2 和 0 1 2\",\"0 1 2 和 3 3 3\",\"3 3 3 和 0 1 2\"],\"isMulti\":false,\"answer\":[2]}","explanation":"由于 JavaScript 的事件循环，`setTimeout` 回调会在*遍历结束后*才执行。因为在第一个遍历中遍历 `i` 是通过 `var` 关键字声明的，所以这个值是全局作用域下的。在遍历过程中，我们通过一元操作符 `++` 来每次递增 `i` 的值。当 `setTimeout` 回调执行的时候，`i` 的值等于 3。\n在第二个遍历中，遍历 `i` 是通过 `let` 关键字声明的：通过 `let` 和 `const` 关键字声明的变量是拥有块级作用域（指的是任何在 {} 中的内容）。在每次的遍历过程中，`i` 都有一个新值，并且每个值都在循环内的作用域中。","level":2,"tagId":32}
{"_id":{"$oid":"61aa384d3d5f3a0001af5543"},"exerciseKey":"35528a50-c820-4037-beec-ec309c4f2a46","category":"QA","renderType":"md","title":"React Hooks当中的useEffect是如何区分生命周期钩子的\n","desc":null,"options":null,"explanation":"useEffect可以看成是 `componentDidMount`，`componentDidUpdate` 和 `componentWillUnmount` 三者的结合。\n\nuseEffect(callback, [source])接收两个参数，调用方式如下：\n\n```react.js\nuseEffect(() => {\n   console.log('mounted');\n   \n   return () => {\n       console.log('willUnmount');\n   }\n }, [source]);\n```\n\n生命周期函数的调用主要是通过第二个参数`[source]`来进行控制，有如下几种情况：\n\n* [source]参数不传时，则每次都会优先调用上次保存的函数中返回的那个函数，然后再调用外部那个函数；\n* [source]参数传[]时，则外部的函数只会在初始化时调用一次，返回的那个函数也只会最终在组件卸载时调用一次；\n* [source]参数有值时，则只会监听到数组中的值发生变化后才优先调用返回的那个函数，再调用外部的函数。\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa384dbdfab500012c841d"},"exerciseKey":"362a44f0-8be1-4e5b-abfc-f3ddadc4aa2e","category":"QA","renderType":"md","title":"HTML5 有哪些新特性？","desc":null,"options":null,"explanation":"* 新增语义化标签：nav、header、footer、aside、section、article\n* 音频、视频标签：audio、video\n* 数据存储：localStorage、sessionStorage\n* canvas（画布）、Geolocation（地理定位）、websocket（通信协议）\n* input标签新增属性：placeholder、autocomplete、autofocus、required\n* history API\n\t* go、forward、back、pushstate\n","level":0.5,"tagId":12}
{"_id":{"$oid":"61aa3851ff0573000165b263"},"exerciseKey":"4354687c-2600-4b62-98ec-2bef8df9a171","category":"QA","renderType":"md","title":"typeof 与 instanceof 有什么区别","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/3fc158f0-7710-11eb-ab90-d9ae814b240d.png)\r\n\r\n\r\n\r\n## 一、typeof\r\n\r\n`typeof` 操作符返回一个字符串，表示未经计算的操作数的类型\r\n\r\n使用方法如下：\r\n\r\n```js\r\ntypeof operand\r\ntypeof(operand)\r\n```\r\n\r\n`operand`表示对象或原始值的表达式，其类型将被返回\r\n\r\n举个例子\r\n\r\n```js\r\ntypeof 1 // 'number'\r\ntypeof '1' // 'string'\r\ntypeof undefined // 'undefined'\r\ntypeof true // 'boolean'\r\ntypeof Symbol() // 'symbol'\r\ntypeof null // 'object'\r\ntypeof [] // 'object'\r\ntypeof {} // 'object'\r\ntypeof console // 'object'\r\ntypeof console.log // 'function'\r\n```\r\n\r\n从上面例子，前6个都是基础数据类型。虽然`typeof null`为`object`，但这只是` JavaScript` 存在的一个悠久 `Bug`，不代表`null `就是引用数据类型，并且`null `本身也不是对象\r\n\r\n所以，`null `在 `typeof `之后返回的是有问题的结果，不能作为判断` null `的方法。如果你需要在 `if` 语句中判断是否为 `null`，直接通过`===null`来判断就好\r\n\r\n同时，可以发现引用类型数据，用`typeof`来判断的话，除了`function`会被识别出来之外，其余的都输出`object`\r\n\r\n如果我们想要判断一个变量是否存在，可以使用`typeof`：(不能使用`if(a)`， 若`a`未声明，则报错)\r\n\r\n```js\r\nif(typeof a != 'undefined'){\r\n    //变量存在\r\n}\r\n```\r\n\r\n\r\n\r\n## 二、instanceof\r\n\r\n`instanceof` 运算符用于检测构造函数的 `prototype` 属性是否出现在某个实例对象的原型链上\r\n\r\n使用如下：\r\n\r\n```js\r\nobject instanceof constructor\r\n```\r\n\r\n`object`为实例对象，`constructor`为构造函数\r\n\r\n构造函数通过`new`可以实例对象，`instanceof `能判断这个对象是否是之前那个构造函数生成的对象\r\n\r\n```js\r\n// 定义构建函数\r\nlet Car = function() {}\r\nlet benz = new Car()\r\nbenz instanceof Car // true\r\nlet car = new String('xxx')\r\ncar instanceof String // true\r\nlet str = 'xxx'\r\nstr instanceof String // false\r\n```\r\n\r\n关于`instanceof`的实现原理，可以参考下面：\r\n\r\n```js\r\nfunction myInstanceof(left, right) {\r\n    // 这里先用typeof来判断基础数据类型，如果是，直接返回false\r\n    if(typeof left !== 'object' || left === null) return false;\r\n    // getProtypeOf是Object对象自带的API，能够拿到参数的原型对象\r\n    let proto = Object.getPrototypeOf(left);\r\n    while(true) {                  \r\n        if(proto === null) return false;\r\n        if(proto === right.prototype) return true;//找到相同原型对象，返回true\r\n        proto = Object.getPrototypeof(proto);\r\n    }\r\n}\r\n```\r\n\r\n也就是顺着原型链去找，直到找到相同的原型对象，返回`true`，否则为`false`\r\n\r\n\r\n\r\n## 三、区别\r\n\r\n`typeof`与`instanceof`都是判断数据类型的方法，区别如下：\r\n\r\n- `typeof`会返回一个变量的基本类型，`instanceof`返回的是一个布尔值\r\n\r\n- `instanceof` 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型\r\n- 而` typeof` 也存在弊端，它虽然可以判断基础数据类型（`null` 除外），但是引用数据类型中，除了` function` 类型以外，其他的也无法判断\r\n\r\n可以看到，上述两种方法都有弊端，并不能满足所有场景的需求\r\n\r\n如果需要通用检测数据类型，可以采用`Object.prototype.toString`，调用该方法，统一返回格式`“[object Xxx]” `的字符串\r\n\r\n如下\r\n\r\n```js\r\nObject.prototype.toString({})       // \"[object Object]\"\r\nObject.prototype.toString.call({})  // 同上结果，加上call也ok\r\nObject.prototype.toString.call(1)    // \"[object Number]\"\r\nObject.prototype.toString.call('1')  // \"[object String]\"\r\nObject.prototype.toString.call(true)  // \"[object Boolean]\"\r\nObject.prototype.toString.call(function(){})  // \"[object Function]\"\r\nObject.prototype.toString.call(null)   //\"[object Null]\"\r\nObject.prototype.toString.call(undefined) //\"[object Undefined]\"\r\nObject.prototype.toString.call(/123/g)    //\"[object RegExp]\"\r\nObject.prototype.toString.call(new Date()) //\"[object Date]\"\r\nObject.prototype.toString.call([])       //\"[object Array]\"\r\nObject.prototype.toString.call(document)  //\"[object HTMLDocument]\"\r\nObject.prototype.toString.call(window)   //\"[object Window]\"\r\n```\r\n\r\n了解了`toString`的基本用法，下面就实现一个全局通用的数据类型判断方法\r\n\r\n```js\r\nfunction getType(obj){\r\n  let type  = typeof obj;\r\n  if (type !== \"object\") {    // 先进行typeof判断，如果是基础数据类型，直接返回\r\n    return type;\r\n  }\r\n  // 对于typeof返回结果是object的，再进行如下的判断，正则返回结果\r\n  return Object.prototype.toString.call(obj).replace(/^\\[object (\\S+)\\]$/, '$1'); \r\n}\r\n```\r\n\r\n使用如下\r\n\r\n```js\r\ngetType([])     // \"Array\" typeof []是object，因此toString返回\r\ngetType('123')  // \"string\" typeof 直接返回\r\ngetType(window) // \"Window\" toString返回\r\ngetType(null)   // \"Null\"首字母大写，typeof null是object，需toString来判断\r\ngetType(undefined)   // \"undefined\" typeof 直接返回\r\ngetType()            // \"undefined\" typeof 直接返回\r\ngetType(function(){}) // \"function\" typeof能判断，因此首字母小写\r\ngetType(/123/g)      //\"RegExp\" toString返回\r\n```","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa38543d5f3a0001af5583"},"exerciseKey":"4ca8dcc9-9ce6-457c-b6ef-3c2e322aeba5","category":"QA","renderType":"md","title":"浏览器的同源策略是什么？","desc":null,"options":null,"explanation":"同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。\n\n它的核心就在于它认为自任何站点装载的信赖内容是不安全的。当被浏览器半信半疑的脚本运行在沙箱时，它们应该只被允许访问来自同一站点的资源，而不是那些来自其它站点可能怀有恶意的资源。\n\n所谓同源是指：**域名**、**协议**、**端口**相同。\n\n另外，同源策略又分为以下两种：\n\n* DOM 同源策略：禁止对不同源页面 DOM 进行操作。这里主要场景是 iframe 跨域的情况，不同域名的 iframe 是限制互相访问的。\n* XMLHttpRequest 同源策略：禁止使用 XHR 对象向不同源的服务器地址发起 HTTP 请求。","level":0.5,"tagId":30}
{"_id":{"$oid":"61aa3859cd02c30001dd2229"},"exerciseKey":"5c7d7b86-addd-4e6c-92c7-5cf7bd0a6092","category":"Choice","renderType":"md","title":"哪一个选项会导致报错？","desc":"```javascript\nconst emojis = [\"🎄\", \"🎅🏼\", \"🎁\", \"⭐\"];\n\n/* 1 */ emojis.push(\"🦌\");\n/* 2 */ emojis.splice(0, 2);\n/* 3 */ emojis = [...emojis, \"🥂\"];\n/* 4 */ emojis.length = 0;\n```","options":"{\"options\":[\"1\",\"1 and 2\",\"3 and 4\",\"3\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`const` 关键字意味着我们不能 _重定义_ 变量中的值，它 _仅可读_。而然，值本身不可修改。数组 `emojis` 中的值可被修改，如 push 新的值, 拼接，又或者将数组的长度设置为0。","level":1,"tagId":32}
{"_id":{"$oid":"61aa385934458700017f1c83"},"exerciseKey":"5eb78861-d964-4825-8531-316eca1df596","category":"QA","renderType":"md","title":"谈谈 Javascript 中的类型转换机制","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/2abd00a0-6692-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、概述\n\n`JS `中有六种简单数据类型：`undefined`、`null`、`boolean`、`string`、`number`、`symbol`（`BigInt`处理stage-4阶段，不考虑），以及引用类型：`object`\n\n但是我们在声明的时候只有一种数据类型，只有到运行期间才会确定当前类型\n\n```js\nlet x = y ? 1 : a;\n```\n\n上面代码中，`x`的值在编译阶段是无法获取的，只有等到程序运行时才能知道\n\n虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的，如果运算子的类型与预期不符合，就会触发类型转换机制\n\n常见的类型转换有：\n\n- 强制转换（显示转换）\n- 自动转换（隐式转换）\n\n\n\n## 二、显示转换\n\n显示转换，即我们很清楚可以看到这里发生了类型的转变，常见的方法有：\n\n- Number()\n- parseInt()\n- String()\n- Boolean()\n\n\n\n### Number()\n\n将任意类型的值转化为数值\n\n先给出类型转换规则：\n\n ![](https://static.vue-js.com/915b7300-6692-11eb-ab90-d9ae814b240d.png)\n\n实践一下：\n\n```js\nNumber(324) // 324\n\n// 字符串：如果可以被解析为数值，则转换为相应的数值\nNumber('324') // 324\n\n// 字符串：如果不可以被解析为数值，返回 NaN\nNumber('324abc') // NaN\n\n// 空字符串转为0\nNumber('') // 0\n\n// 布尔值：true 转成 1，false 转成 0\nNumber(true) // 1\nNumber(false) // 0\n\n// undefined：转成 NaN\nNumber(undefined) // NaN\n\n// null：转成0\nNumber(null) // 0\n\n// 对象：通常转换成NaN(除了只包含单个数值的数组)\nNumber({a: 1}) // NaN\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5\n```\n\n从上面可以看到，`Number`转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为`NaN`\n\n\n\n### parseInt()\n\n`parseInt`相比`Number`，就没那么严格了，`parseInt`函数逐个解析字符，遇到不能转换的字符就停下来\n\n```js\nparseInt('32a3') //32\n```\n\n\n\n### String()\n\n可以将任意类型的值转化成字符串\n\n给出转换规则图：\n\n   ![](https://static.vue-js.com/48dd8eb0-6692-11eb-85f6-6fac77c0c9b3.png)\n\n实践一下：\n\n```js\n// 数值：转为相应的字符串\nString(1) // \"1\"\n\n//字符串：转换后还是原来的值\nString(\"a\") // \"a\"\n\n//布尔值：true转为字符串\"true\"，false转为字符串\"false\"\nString(true) // \"true\"\n\n//undefined：转为字符串\"undefined\"\nString(undefined) // \"undefined\"\n\n//null：转为字符串\"null\"\nString(null) // \"null\"\n\n//对象\nString({a: 1}) // \"[object Object]\"\nString([1, 2, 3]) // \"1,2,3\"\n```\n\n\n\n### Boolean()\n\n可以将任意类型的值转为布尔值，转换规则如下：\n\n ![](https://static.vue-js.com/53bdad10-6692-11eb-ab90-d9ae814b240d.png)\n\n实践一下：\n\n```js\nBoolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(NaN) // false\nBoolean('') // false\nBoolean({}) // true\nBoolean([]) // true\nBoolean(new Boolean(false)) // true\n```\n\n\n\n## 三、隐式转换\n\n在隐式转换中，我们可能最大的疑惑是 ：何时发生隐式转换？\n\n我们这里可以归纳为两种情况发生隐式转换的场景：\n\n- 比较运算（`==`、`!=`、`>`、`<`）、`if`、`while`需要布尔值地方\n- 算术运算（`+`、`-`、`*`、`/`、`%`）\n\n除了上面的场景，还要求运算符两边的操作数不是同一类型\n\n\n\n### 自动转换为布尔值\n\n在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用`Boolean`函数\n\n可以得出个小结：\n\n- undefined \n- null \n- false \n- +0 \n- -0\n- NaN\n- \"\"\n\n除了上面几种会被转化成`false`，其他都换被转化成`true`\n\n\n\n### 自动转换成字符串\n\n遇到预期为字符串的地方，就会将非字符串的值自动转为字符串\n\n具体规则是：先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串\n\n常发生在`+`运算中，一旦存在字符串，则会进行字符串拼接操作\n\n```js\n'5' + 1 // '51'\n'5' + true // \"5true\"\n'5' + false // \"5false\"\n'5' + {} // \"5[object Object]\"\n'5' + [] // \"5\"\n'5' + function (){} // \"5function (){}\"\n'5' + undefined // \"5undefined\"\n'5' + null // \"5null\"\n```\n\n\n\n### 自动转换成数值\n\n除了`+`有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值\n\n```js\n'5' - '2' // 3\n'5' * '2' // 10\ntrue - 1  // 0\nfalse - 1 // -1\n'1' - 1   // 0\n'5' * []    // 0\nfalse / '5' // 0\n'abc' - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN\n```\n\n`null`转为数值时，值为`0` 。`undefined`转为数值时，值为`NaN`","level":2,"tagId":10}
{"_id":{"$oid":"61aa385b85c5f70001542f71"},"exerciseKey":"65fa7d0f-fd68-4c2d-9c2b-4f98d7a4f9e3","category":"QA","renderType":"md","title":"如何禁用a标签跳转页面或定位链接?","desc":null,"options":null,"explanation":"当页面中a标签不需要任何跳转时，从原理上来讲，可分如下两种方法：\n\n* 标签属性href，使其指向空或不返回任何内容。如：\n\n```html\n<a href=\"javascript:void(0);\" >点此无反应javascript:void(0)</a>\n\n<a href=\"javascript:;\" >点此无反应javascript:</a>\n```\n\n* 从标签事件入手，阻止其默认行为。如：\n\nhtml方法：\n\n```html\n<a href=\"\" onclick=\"return false;\">return false;</a>\n<a href=\"#\" onclick=\"return false;\">return false;</a>\n``` \n\n或者在js文件中阻止默认点击事件：\n\n```javascript\nEvent.preventDefault()\n```\n\n还可以在css文件中处理点击，不响应任何鼠标事件：\n```css\npointer-events: none;\n```","level":2,"tagId":12}
{"_id":{"$oid":"61aa385d291c0100017ee201"},"exerciseKey":"6ccbf43f-c512-4e3c-82ce-fe925b8a0c07","category":"QA","renderType":"html","title":"webpack的Loader和Plugin的不同","desc":null,"options":null,"explanation":"<p><strong>不同的作用:</strong><br/> </p><ul><li> <strong>Loader</strong>直译为&quot;加载器&quot;。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到<code>loader</code>。 所以Loader的作用是让webpack拥有了加载和解析<em>非JavaScript文件</em>的能力。</li><li> <strong>Plugin</strong>直译为&quot;插件&quot;。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li></ul><p> <strong>不同的用法:</strong><br/> </p><ul><li> <strong>Loader</strong>在<code>module.rules</code>中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个<code>Object</code>，里面描述了对于什么类型的文件（<code>test</code>），使用什么加载(<code>loader</code>)和使用的参数（<code>options</code>）</li><li> <strong>Plugin</strong>在<code>plugins</code>中单独配置。 类型为数组，每一项是一个<code>plugin</code>的实例，参数都通过构造函数传入。</li></ul><p><br/></p>","level":1,"tagId":28}
{"_id":{"$oid":"61aa385d85c5f70001542f7e"},"exerciseKey":"6dd983d9-39fc-48ca-9e22-7599ab339f5b","category":"QA","renderType":"md","title":"如何检查Javascript中的内存泄漏？","desc":null,"options":null,"explanation":"## 浏览器\n\nChrome 浏览器查看内存占用，按照以下步骤操作。\n\n![image.png](https://i.loli.net/2021/09/25/luOGHT7a2EqMSf1.png)\n\n```\n1、打开开发者工具，选择 Timeline 面板\n2、在顶部的Capture字段里面勾选 Memory\n3、点击左上角的录制按钮。\n4、在页面上进行各种操作，模拟用户的使用情况。\n5、一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况。\n```\n\n如果内存占用基本平稳，接近水平，就说明不存在内存泄漏。\n\n![image.png](https://i.loli.net/2021/09/25/1jnvlaB8CY7Rqup.png)\n\n反之，就是内存泄漏了。\n\n![image.png](https://i.loli.net/2021/09/25/wUHKg48oArEZMt1.png)\n\n## 命令行\n\n命令行可以使用 Node 提供的process.memoryUsage方法。\n\n```js\nconsole.log(process.memoryUsage());\n// { rss: 27709440,\n//  heapTotal: 5685248,\n//  heapUsed: 3449392,\n//  external: 8772 }\n```\n\nprocess.memoryUsage返回一个对象，包含了 Node 进程的内存占用信息。该对象包含四个字段，单位是字节，含义如下。\n\n![image.png](https://i.loli.net/2021/09/25/Hncwkesmfd5iuG8.png)\n\n```\nrss（resident set size）：所有内存占用，包括指令区和堆栈。\nheapTotal：\"堆\"占用的内存，包括用到的和没用到的。\nheapUsed：用到的堆的部分。\nexternal： V8 引擎内部的 C++ 对象占用的内存。\n```\n\n判断内存泄漏，以 `heapUsed` 字段为准。\n\n\n\n","level":2,"tagId":29}
{"_id":{"$oid":"61aa385fbdfab500012c8493"},"exerciseKey":"73e0dfb8-798e-4380-888b-7e5ae349e2d8","category":"QA","renderType":"md","title":"请手写“桶排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排\n\n## 算法描述\n\n具体算法描述如下：\n\n* 设置一个定量的数组当作空桶；\n* 遍历输入数据，并且把数据一个一个放到对应的桶里去；\n* 对每个不是空的桶进行排序；\n* 从不是空的桶里把排好序的数据拼接起来。\n\n## 代码实现\n\n```javascript\n/*方法说明：桶排序\n@param  array 数组\n@param  num   桶的数量*/\nfunction bucketSort(array, num) {\n    if (array.length <= 1) {\n        return array;\n    }\n    var len = array.length, buckets = [], result = [], min = max = array[0], regex = '/^[1-9]+[0-9]*$/', space, n = 0;\n    num = num || ((num > 1 && regex.test(num)) ? num : 10);\n    console.time('桶排序耗时');\n    for (var i = 1; i < len; i++) {\n        min = min <= array[i] ? min : array[i];\n        max = max >= array[i] ? max : array[i];\n    }\n    space = (max - min + 1) / num;\n    for (var j = 0; j < len; j++) {\n        var index = Math.floor((array[j] - min) / space);\n        if (buckets[index]) {   //  非空桶，插入排序\n            var k = buckets[index].length - 1;\n            while (k >= 0 && buckets[index][k] > array[j]) {\n                buckets[index][k + 1] = buckets[index][k];\n                k--;\n            }\n            buckets[index][k + 1] = array[j];\n        } else {    //空桶，初始化\n            buckets[index] = [];\n            buckets[index].push(array[j]);\n        }\n    }\n    while (n < num) {\n        result = result.concat(buckets[n]);\n        n++;\n    }\n    console.timeEnd('桶排序耗时');\n    return result;\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(bucketSort(arr,4));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n## 算法分析\n\n桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。\n\n* 最佳情况：T(n) = O(n+k)\n* 最差情况：T(n) = O(n+k)\n* 平均情况：T(n) = O(n2)","level":3,"tagId":26}
{"_id":{"$oid":"61aa386381337a00011e05f7"},"exerciseKey":"7f3601d3-aa34-499f-b395-563fa84f9aad","category":"QA","renderType":"md","title":"nginx是什么？","desc":null,"options":null,"explanation":"## Nginx的产生\n\n没有听过Nginx？那么一定听过它的\"同行\"Apache吧！Nginx同Apache一样都是一种WEB服务器，基于REST架构风格，以统一资源描述符(Uniform Resources Identifier)URI或者统一资源定位符(Uniform Resources Locator)URL作为沟通依据，通过HTTP协议提供各种网络服务。\n\n然而，这些服务器在设计之初受到当时环境的局限，例如当时的用户规模，网络带宽，产品特点等局限并且各自的定位和发展都不尽相同。这也使得各个WEB服务器有着各自鲜明的特点。\n\nApache的发展时期很长，而且是毫无争议的世界第一大服务器。它有着很多优点：稳定、开源、跨平台等等。它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个重量级的。它是不支持高并发的服务器。在Apache上运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低。\n\n这些都决定了Apache不可能成为高性能WEB服务器，轻量级高并发服务器Nginx就应运而生了。\n\n俄罗斯的工程师Igor Sysoev，他在为Rambler Media工作期间，使用C语言开发了Nginx。Nginx作为WEB服务器一直为Rambler Media提供出色而又稳定的服务。然后呢，Igor Sysoev将Nginx代码开源，并且赋予自由软件许可证。\n\n## Nginx的用途\n\nNginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。\n\n","level":2.5,"tagId":16}
{"_id":{"$oid":"61aa383fbdfab500012c83af"},"exerciseKey":"052ca3d3-2a82-4f99-87fb-ccf6c4a8e630","category":"QA","renderType":"md","title":"说说你对vue的理解?","desc":null,"options":null,"explanation":"Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。\n\nVue 是一套用于构建用户界面的渐进式MVVM框架。那怎么理解渐进式呢？渐进式含义：强制主张最少。\n\nVue.js包含了声明式渲染、组件化系统、客户端路由、大规模状态管理、构建工具、数据持久化、跨平台支持等，但在实际开发中，并没有强制要求开发者之后某一特定功能，而是根据需求逐渐扩展。\n\nVue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互。\n\nVue.js的核心库只关心视图渲染，且由于渐进式的特性，Vue.js便于与第三方库或既有项目整合。Vue.js 实现了一套声明式渲染引擎，并在runtime或者预编译时将声明式的模板编译成渲染函数，挂载在观察者 Watcher 中，在渲染函数中（touch），响应式系统使用响应式数据的getter方法对观察者进行依赖收集（Collect as Dependency），使用响应式数据的setter方法通知（notify）所有观察者进行更新，此时观察者 Watcher 会触发组件的渲染函数（Trigger re-render），组件执行的 render 函数，生成一个新的 Virtual DOM Tree，此时 Vue 会对新老 Virtual DOM Tree 进行 Diff，查找出需要操作的真实 DOM 并对其进行更新。\n\n\n","level":1.5,"tagId":14}
{"_id":{"$oid":"61aa383fb804f8000122a9c1"},"exerciseKey":"0596de70-b8f3-41a0-8881-03e62bf54398","category":"QA","renderType":"md","title":"小白鼠试毒问题进阶","desc":"有16瓶水，其中只有一瓶水有毒，小白鼠喝一滴之后一小时会死。\n请问最少用多少只小白鼠，在1小时内一定可以找出至少14瓶无毒的水？\n","options":null,"explanation":"\n答案为**3只**。\n\n## 解析：\n\n### 具体步骤\n\n将16瓶水两瓶为一组，组号标为A1-A8，三只小白鼠分别标号为b1、b2、b3。\n\n* A1,001，只让b1喝\n* A2,010，只让b2喝\n* A3,011，让b1、b2喝\n* A4,100，只让b3喝\n* A5,101，b1、b3喝\n* A6,110，b2、b3喝\n* A7,111，让b1、b2、b3喝\n* A8组不喝.\n\n### 结果\n\n* 如果只有b1死了，b2、b3都活着，那么有毒的水在A1组里，剩下的14瓶无毒；\n* 如果只有b2死了，b1、b3都活着，则A2组有毒；\n* 如果b1、b2死，b3活，则A3组有毒；\n* 如果只有b3死了，b1、b2都活着，则A4组有毒；\n* 如果b1、b3死，b2活，则A5有毒；\n* 如果b2、b3死，b1活，则A6有毒；\n* 如果三只全死，A7组有毒；\n* 如果三只全活，A8有毒。","level":3.5,"tagId":17}
{"_id":{"$oid":"61aa384485c5f70001542ece"},"exerciseKey":"154d4288-8195-4fd4-87bb-2844cb22a4e5","category":"QA","renderType":"md","title":"Promise中的值穿透是什么？","desc":null,"options":null,"explanation":"解释：.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。\n\n当then中传入的不是函数，则这个then返回的promise的data，将会保存上一个的promise.data。这就是发生值穿透的原因。而且每一个无效的then所返回的promise的状态都为resolved。\n\n```javascript\nPromise.resolve(1)\n      .then(2) // 注意这里\n      .then(Promise.resolve(3))\n      .then(console.log)\n```\n\n上面代码的输出是 `1`","level":3.5,"tagId":10}
{"_id":{"$oid":"61aa3844b804f8000122a9e1"},"exerciseKey":"16a99f71-99b2-4611-8d11-07e6b294660e","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst value = { number: 10 };\n\nconst multiply = (x = { ...value }) => {\n  console.log(x.number *= 2);\n};\n\nmultiply();\nmultiply();\nmultiply(value);\nmultiply(value);\n```","options":"{\"options\":[\"20, 40, 80, 160\",\"20, 40, 20, 40\",\"20, 20, 20, 40\",\"NaN, NaN, 20, 40\"],\"isMulti\":false,\"answer\":[2]}","explanation":"在ES6中，我们可以使用默认值初始化参数。如果没有给函数传参，或者传的参值为 `\"undefined\"` ，那么参数的值将是默认值。上述例子中，我们将 `value` 对象进行了解构并传到一个新对象中，因此 `x` 的默认值为 `{number：10}` 。\n默认参数在调用时才会进行计算，每次调用函数时，都会创建一个新的对象。我们前两次调用 `multiply` 函数且不传递值，那么每一次 `x` 的默认值都为 `{number：10}` ，因此打印出该数字的乘积值为`20`。\n第三次调用 `multiply` 时，我们传递了一个参数，即对象`value`。 `*=`运算符实际上是`x.number = x.number * 2`的简写，我们修改了`x.number`的值，并打印出值`20`。\n第四次，我们再次传递`value`对象。 `x.number`之前被修改为`20`，所以`x.number * = 2`打印为`40`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38460d111e00010371d9"},"exerciseKey":"1b0c8f90-9f1a-42bf-bd5a-d9efaf0d74eb","category":"QA","renderType":"md","title":"document.write和innerHTML有什么区别","desc":null,"options":null,"explanation":"* document.write是直接写入到页面的内容流，如果在写之前没有调用document.open, 浏览器会自动调用open。每次写完关闭之后重新调用该函数，会导致页面被重写。\n* innerHTML则是DOM页面元素的一个属性，代表该元素的html内容。你可以精确到某一个具体的元素来进行更改。如果想修改document的内容，则需要修改document.documentElement.innerElement。\n* innerHTML将内容写入某个DOM节点，不会导致页面全部重绘\n* innerHTML很多情况下都优于document.write，其原因在于其允许更精确的控制要刷新页面的那一个部分。","level":0.5,"tagId":10}
{"_id":{"$oid":"61aa38493976eb00014e4481"},"exerciseKey":"274fa7ad-e6d3-43e7-8841-6d68c280166b","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst name = \"Lydia Hallie\";\nconst age = 21;\n\nconsole.log(Number.isNaN(name));\nconsole.log(Number.isNaN(age));\n\nconsole.log(isNaN(name));\nconsole.log(isNaN(age));\n```","options":"{\"options\":[\"true false true false\",\"true false false false\",\"false false true false\",\"false true false true\"],\"isMulti\":false,\"answer\":[2]}","explanation":"通过方法 `Number.isNaN`，你可以检测你传递的值是否为 _数字值_ 并且是否等价于 `NaN`。`name` 不是一个数字值，因此 `Number.isNaN(name)` 返回 `false`。`age` 是一个数字值，但它不等价于 `NaN`，因此 `Number.isNaN(age)` 返回 `false`.\n通过方法 `isNaN`， 你可以检测你传递的值是否一个 number。`name` 不是一个 `number`，因此 `isNaN(name)` 返回 `true`. `age` 是一个 `number` 因此 `isNaN(age)` 返回 `false`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa38498e97d90001808696"},"exerciseKey":"290f820a-5d60-466a-aa8c-c51ee79a8f2a","category":"QA","renderType":"md","title":"什么是TypeScript Declare关键字?","desc":null,"options":null,"explanation":"我们知道所有的JavaScript库/框架都没有TypeScript声明文件，但是我们希望在TypeScript文件中使用它们时不会出现编译错误。为此，我们使用declare关键字。在我们希望定义可能存在于其他地方的变量的环境声明和方法中，可以使用declare关键字。\n\n例如，假设我们有一个名为myLibrary的库，它没有TypeScript声明文件，在全局命名空间中有一个名为myLibrary的命名空间。如果我们想在TypeScript代码中使用这个库，我们可以使用以下代码:\n```\ndeclare var myLibrary;  \n```\nTypeScript运行时将把myLibrary变量赋值为任意类型。这是一个问题，我们不会得到智能感知在设计时，但我们将能够使用库在我们的代码。","level":2.5,"tagId":19}
{"_id":{"$oid":"61aa384b34458700017f1c17"},"exerciseKey":"305a1520-b7df-4c05-a72b-a18c165250de","category":"QA","renderType":"md","title":"什么是事件代理，以及它的应用场景有哪些？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/a33f0ab0-797e-11eb-ab90-d9ae814b240d.png)\r\n\r\n## 一、是什么\r\n\r\n事件代理，俗地来讲，就是把一个元素响应事件（`click`、`keydown`......）的函数委托到另一个元素\r\n\r\n前面讲到，事件流的都会经过三个阶段： 捕获阶段 -> 目标阶段 -> 冒泡阶段，而事件委托就是在冒泡阶段完成\r\n\r\n事件委托，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，而不是目标元素\r\n\r\n当事件响应到目标元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数\r\n\r\n下面举个例子：\r\n\r\n比如一个宿舍的同学同时快递到了，一种笨方法就是他们一个个去领取\r\n\r\n较优方法就是把这件事情委托给宿舍长，让一个人出去拿好所有快递，然后再根据收件人一一分发给每个同学\r\n\r\n在这里，取快递就是一个事件，每个同学指的是需要响应事件的 `DOM `元素，而出去统一领取快递的宿舍长就是代理的元素\r\n\r\n所以真正绑定事件的是这个元素，按照收件人分发快递的过程就是在事件执行中，需要判断当前响应的事件应该匹配到被代理元素中的哪一个或者哪几个\r\n\r\n\r\n\r\n## 二、应用场景\r\n\r\n如果我们有一个列表，列表之中有大量的列表项，我们需要在点击列表项的时候响应一个事件\r\n\r\n```js\r\n<ul id=\"list\">\r\n  <li>item 1</li>\r\n  <li>item 2</li>\r\n  <li>item 3</li>\r\n  ......\r\n  <li>item n</li>\r\n</ul>\r\n```\r\n\r\n如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的\r\n\r\n```js\r\n// 获取目标元素\r\nconst lis = document.getElementsByTagName(\"li\")\r\n// 循环遍历绑定事件\r\nfor (let i = 0; i < lis.length; i++) {\r\n    lis[i].onclick = function(e){\r\n        console.log(e.target.innerHTML)\r\n    }\r\n}\r\n```\r\n\r\n这时候就可以事件委托，把点击事件绑定在父级元素`ul`上面，然后执行事件的时候再去匹配目标元素\r\n\r\n```js\r\n// 给父层元素绑定事件\r\ndocument.getElementById('list').addEventListener('click', function (e) {\r\n    // 兼容性处理\r\n    var event = e || window.event;\r\n    var target = event.target || event.srcElement;\r\n    // 判断是否匹配目标元素\r\n    if (target.nodeName.toLocaleLowerCase === 'li') {\r\n        console.log('the content is: ', target.innerHTML);\r\n    }\r\n});\r\n```\r\n\r\n还有一种场景是上述列表项并不多，我们给每个列表项都绑定了事件\r\n\r\n但是如果用户能够随时动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件\r\n\r\n如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的\r\n\r\n举个例子：\r\n\r\n下面`html`结构中，点击`input`可以动态添加元素\r\n\r\n```html\r\n<input type=\"button\" name=\"\" id=\"btn\" value=\"添加\" />\r\n<ul id=\"ul1\">\r\n    <li>item 1</li>\r\n    <li>item 2</li>\r\n    <li>item 3</li>\r\n    <li>item 4</li>\r\n</ul>\r\n```\r\n\r\n使用事件委托\r\n\r\n```js\r\nconst oBtn = document.getElementById(\"btn\");\r\nconst oUl = document.getElementById(\"ul1\");\r\nconst num = 4;\r\n\r\n//事件委托，添加的子元素也有事件\r\noUl.onclick = function (ev) {\r\n    ev = ev || window.event;\r\n    const target = ev.target || ev.srcElement;\r\n    if (target.nodeName.toLowerCase() == 'li') {\r\n        console.log('the content is: ', target.innerHTML);\r\n    }\r\n\r\n};\r\n\r\n//添加新节点\r\noBtn.onclick = function () {\r\n    num++;\r\n    const oLi = document.createElement('li');\r\n    oLi.innerHTML = `item ${num}`;\r\n    oUl.appendChild(oLi);\r\n};\r\n```\r\n\r\n可以看到，使用事件委托，在动态绑定事件的情况下是可以减少很多重复工作的\r\n\r\n\r\n\r\n## 三、总结\r\n\r\n适合事件委托的事件有：`click`，`mousedown`，`mouseup`，`keydown`，`keyup`，`keypress`\r\n\r\n从上面应用场景中，我们就可以看到使用事件委托存在两大优点：\r\n\r\n- 减少整个页面所需的内存，提升整体性能\r\n- 动态绑定，减少重复工作\r\n\r\n但是使用事件委托也是存在局限性：\r\n\r\n- `focus`、`blur `这些事件没有事件冒泡机制，所以无法进行委托绑定事件\r\n\r\n- `mousemove`、`mouseout `这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的\r\n\r\n如果把所有事件都用事件代理，可能会出现事件误判，即本不该被触发的事件被绑定上了事件","level":2,"tagId":10}
{"_id":{"$oid":"61aa38583976eb00014e44e4"},"exerciseKey":"59af70f8-871d-4358-aac1-e5dc4a0ca6df","category":"QA","renderType":"md","title":"如何检查TypeScript中的null和undefined ？","desc":null,"options":null,"explanation":"通过使用一个缓冲检查，我们可以检查空和未定义:\n```\nif (x == null) {  \n}  \n```\n如果我们使用严格的检查，它将总是对设置为null的值为真，而对未定义的变量不为真。\n\n例子\n```\nvar a: number;  \nvar b: number = null;  \nfunction check(x, name) {  \n    if (x == null) {  \n        console.log(name + ' == null');  \n    }  \n    if (x === null) {  \n        console.log(name + ' === null');  \n    }  \n    if (typeof x === 'undefined') {  \n        console.log(name + ' is undefined');  \n    }  \n}  \ncheck(a, 'a');  \ncheck(b, 'b');  \n```\n输出\n```\n\"a == null\"  \n\"a is undefined\"  \n\"b == null\"  \n\"b === null\"  \n```\n","level":4,"tagId":19}
{"_id":{"$oid":"61aa3858d00c060001bf1203"},"exerciseKey":"59ec4023-36a6-42dd-a0d7-e35d6f3a49ef","category":"QA","renderType":"md","title":"说说webpack的构建流程?","desc":null,"options":null,"explanation":"\n![](https://static.vue-js.com/96cf6840-a658-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、运行流程\n\n`webpack` 的运行流程是一个串行的过程，它的工作流程就是将各个插件串联起来\n\n在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条`webpack`机制中，去改变`webpack`的运作，使得整个系统扩展性良好\n\n从启动到结束会依次执行以下三大步骤：\n\n- 初始化流程：从配置文件和 `Shell` 语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数\n- 编译构建流程：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理\n- 输出流程：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统\n\n ![](https://static.vue-js.com/b566d400-a658-11eb-85f6-6fac77c0c9b3.png)\n\n\n### 初始化流程\n\n从配置文件和 `Shell` 语句中读取与合并参数，得出最终的参数\n\n配置文件默认下为`webpack.config.js`，也或者通过命令的形式指定配置文件，主要作用是用于激活`webpack`的加载项和插件\n\n关于文件配置内容分析，如下注释：\n\n```js\nvar path = require('path');\nvar node_modules = path.resolve(__dirname, 'node_modules');\nvar pathToReact = path.resolve(node_modules, 'react/dist/react.min.js');\n\nmodule.exports = {\n  // 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个 chunk。\n  entry: './path/to/my/entry/file.js'，\n  // 文件路径指向(可加快打包过程)。\n  resolve: {\n    alias: {\n      'react': pathToReact\n    }\n  },\n  // 生成文件，是模块构建的终点，包括输出文件与输出路径。\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: '[name].js'\n  },\n  // 这里配置了处理各模块的 loader ，包括 css 预处理 loader ，es6 编译 loader，图片处理 loader。\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        query: {\n          presets: ['es2015', 'react']\n        }\n      }\n    ],\n    noParse: [pathToReact]\n  },\n  // webpack 各插件对象，在 webpack 的事件流中执行对应的方法。\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n  ]\n};\n```\n\n`webpack` 将 `webpack.config.js` 中的各个配置项拷贝到 `options` 对象中，并加载用户配置的 ` plugins`\n\n完成上述步骤之后，则开始初始化`Compiler`编译对象，该对象掌控者`webpack`声明周期，不执行具体的任务，只是进行一些调度工作\n\n```js\nclass Compiler extends Tapable {\n    constructor(context) {\n        super();\n        this.hooks = {\n            beforeCompile: new AsyncSeriesHook([\"params\"]),\n            compile: new SyncHook([\"params\"]),\n            afterCompile: new AsyncSeriesHook([\"compilation\"]),\n            make: new AsyncParallelHook([\"compilation\"]),\n            entryOption: new SyncBailHook([\"context\", \"entry\"])\n            // 定义了很多不同类型的钩子\n        };\n        // ...\n    }\n}\n\nfunction webpack(options) {\n  var compiler = new Compiler();\n  ...// 检查options,若watch字段为true,则开启watch线程\n  return compiler;\n}\n...\n```\n\n`Compiler` 对象继承自 `Tapable`，初始化时定义了很多钩子函数\n\n\n\n### 编译构建流程\n\n根据配置中的 `entry` 找出所有的入口文件\n\n```js\nmodule.exports = {\n  entry: './src/file.js'\n}\n```\n\n初始化完成后会调用`Compiler`的`run`来真正启动`webpack`编译构建流程，主要流程如下：\n\n- `compile` 开始编译\n- `make` 从入口点分析模块及其依赖的模块，创建这些模块对象\n- `build-module` 构建模块\n- `seal` 封装构建结果\n- `emit` 把各个chunk输出到结果文件\n\n\n\n#### compile 编译\n\n执行了`run`方法后，首先会触发`compile`，主要是构建一个`Compilation`对象\n\n该对象是编译阶段的主要执行者，主要会依次下述流程：执行模块创建、依赖收集、分块、打包等主要任务的对象\n\n\n\n#### make 编译模块\n\n当完成了上述的`compilation`对象后，就开始从`Entry`入口文件开始读取，主要执行`_addModuleChain()`函数，如下：\n\n```js\n_addModuleChain(context, dependency, onModule, callback) {\n   ...\n   // 根据依赖查找对应的工厂函数\n   const Dep = /** @type {DepConstructor} */ (dependency.constructor);\n   const moduleFactory = this.dependencyFactories.get(Dep);\n   \n   // 调用工厂函数NormalModuleFactory的create来生成一个空的NormalModule对象\n   moduleFactory.create({\n       dependencies: [dependency]\n       ...\n   }, (err, module) => {\n       ...\n       const afterBuild = () => {\n        this.processModuleDependencies(module, err => {\n         if (err) return callback(err);\n         callback(null, module);\n           });\n    };\n       \n       this.buildModule(module, false, null, null, err => {\n           ...\n           afterBuild();\n       })\n   })\n}\n```\n\n过程如下：\n\n`_addModuleChain`中接收参数`dependency`传入的入口依赖，使用对应的工厂函数`NormalModuleFactory.create`方法生成一个空的`module`对象\n\n回调中会把此`module`存入`compilation.modules`对象和`dependencies.module`对象中，由于是入口文件，也会存入`compilation.entries`中\n\n随后执行`buildModule`进入真正的构建模块`module`内容的过程\n\n\n\n#### build module 完成模块编译\n\n这里主要调用配置的`loaders`，将我们的模块转成标准的`JS`模块\n\n在用` Loader` 对一个模块转换完后，使用 `acorn` 解析转换后的内容，输出对应的抽象语法树（`AST`），以方便 `Webpack `后面对代码的分析\n\n从配置的入口模块开始，分析其 `AST`，当遇到` require `等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系\n\n\n\n### 输出流程\n\n#### seal 输出资源\n\n`seal`方法主要是要生成`chunks`，对`chunks`进行一系列的优化操作，并生成要输出的代码\n\n`webpack` 中的 `chunk` ，可以理解为配置在 `entry` 中的模块，或者是动态引入的模块\n\n根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 `Chunk`，再把每个 `Chunk` 转换成一个单独的文件加入到输出列表\n\n\n\n#### emit 输出完成\n\n在确定好输出内容后，根据配置确定输出的路径和文件名\n\n```js\noutput: {\n    path: path.resolve(__dirname, 'build'),\n        filename: '[name].js'\n}\n```\n\n在 `Compiler` 开始生成文件前，钩子 `emit` 会被执行，这是我们修改最终文件的最后一个机会\n\n从而`webpack`整个打包过程则结束了\n\n\n\n### 小结\n\n ![](https://static.vue-js.com/d77fc560-a658-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n","level":3,"tagId":28}
{"_id":{"$oid":"61aa385bc2d0220001c964a3"},"exerciseKey":"665b5487-848c-424b-b6a5-800169ee8fd5","category":"QA","renderType":"md","title":"实现Object.assign","desc":null,"options":null,"explanation":"Object.assign()方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）\n\n```js\nObject.defineProperty(Object, 'assign', {\n  value: function(target, ...args) {\n    if (target == null) {\n      return new TypeError('Cannot convert undefined or null to object');\n    }\n    \n    // 目标对象需要统一是引用数据类型，若不是会自动转换\n    const to = Object(target);\n\n    for (let i = 0; i < args.length; i++) {\n      // 每一个源对象\n      const nextSource = args[i];\n      if (nextSource !== null) {\n        // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n        for (const nextKey in nextSource) {\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  },\n  // 不可枚举\n  enumerable: false,\n  writable: true,\n  configurable: true,\n})\n```","level":3,"tagId":26}
{"_id":{"$oid":"61aa385eb804f8000122aa87"},"exerciseKey":"6f6f9aed-420d-4ceb-a919-1a3aa779fc38","category":"QA","renderType":"md","title":"请手写“选择排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n\n## 算法步骤\n\n* 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置\n* 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n* 重复第二步，直到所有元素均排序完毕。\n\n## 代码实现\n```javascript\nfunction selectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    console.time('选择排序耗时');\n    for (var i = 0; i < len - 1; i++) {\n        minIndex = i;\n        for (var j = i + 1; j < len; j++) {\n            if (arr[j] < arr[minIndex]) {     //寻找最小的数\n                minIndex = j;                 //将最小数的索引保存\n            }\n        }\n        temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    console.timeEnd('选择排序耗时');\n    return arr;\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(selectionSort(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(n2)\n* 最差情况：T(n) = O(n2)\n* 平均情况：T(n) = O(n2)","level":3,"tagId":26}
{"_id":{"$oid":"61aa386034458700017f1cb2"},"exerciseKey":"73f2cb7c-2613-4f06-8777-f72b1778a28b","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nfunction nums(a, b) {\n  if\n  (a > b)\n  console.log('a is bigger')\n  else \n  console.log('b is bigger')\n  return \n  a + b\n}\n\nconsole.log(nums(4, 2))\nconsole.log(nums(1, 2))\n```","options":"{\"options\":[\"a is bigger, 6 and b is bigger, 3\",\"a is bigger, undefined and b is bigger, undefined\",\"undefined and undefined\",\"SyntaxError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"在JavaScript中，我们不必显式地编写分号(`;`)，但是JavaScript引擎仍然在语句之后自动添加分号。这称为**自动分号插入**。例如，一个语句可以是变量，或者像`throw`、`return`、`break`这样的关键字。\n在这里，我们在新的一行上写了一个`return`语句和另一个值`a + b `。然而，由于它是一个新行，引擎并不知道它实际上是我们想要返回的值。相反，它会在`return`后面自动添加分号。你可以这样看:\n```javascript\n  return;\n  a + b\n```\n这意味着永远不会到达`a + b`，因为函数在`return`关键字之后停止运行。如果没有返回值，就像这里，函数返回`undefined`。注意，在`if/else`语句之后没有自动插入!","level":1,"tagId":32}
{"_id":{"$oid":"61aa38603976eb00014e4520"},"exerciseKey":"7483f06b-131e-43cd-b01b-96e3621a59f8","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst user = {\n\temail: \"e@mail.com\",\n\tpassword: \"12345\"\n}\n\nconst updateUser = ({ email, password }) => {\n\tif (email) {\n\t\tObject.assign(user, { email })\n\t}\n\n\tif (password) {\n\t\tuser.password = password\n\t}\n\n\treturn user\n}\n\nconst updatedUser = updateUser({ email: \"new@email.com\" })\n\nconsole.log(updatedUser === user)\n```","options":"{\"options\":[\"false\",\"true\",\"TypeError\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[1]}","explanation":" `updateUser` 函数更新user的 `email` 和 `password` 属性的值， 如果它们的值传入函数， 函数返回的就是 `user` 对象。 `updateUser` 函数的返回值是 `user` 对象，意味着updatedUser的值与 `user` 指向的是同一个 `user` 对象。`updatedUser === user` 为 `true`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38623dd7f70001832f7d"},"exerciseKey":"7b0cfdab-9709-4c5a-91bb-7fdfbd99c327","category":"QA","renderType":"md","title":"球的重量","desc":"有8个球，其中1个比另外的要略重。在不用砝码的前提下，你最少要称几次，才能找出这个球？","options":null,"explanation":"最少称**两次**。\n\n把所有的球分成三组，其中两组每组3个球，另一组2个球；首先，将3个球的两组进行称重，\n\n* 如果其中一组比较重，从这组球当中任选两个，再次称重\n  * 如果轻重不等，重的球就是你要找的。\n  * 如果轻重相等，剩下那个球就是你要找的。\n* 如果第一次称重时两组球一样重，那么就把剩下一组的两个球进行称重，就能得到答案","level":3,"tagId":17}
{"_id":{"$oid":"61aa3862291c0100017ee22f"},"exerciseKey":"7cefdb7e-8b8a-429f-be44-45b346de6f3f","category":"QA","renderType":"md","title":"说说你对Vue中 keep-alive 的理解","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/2c217260-4021-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、Keep-alive 是什么\n\n`keep-alive`是`vue`中的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染`DOM`\n\n`keep-alive` 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们\n\n`keep-alive`可以设置以下`props`属性：\n\n- `include` - 字符串或正则表达式。只有名称匹配的组件会被缓存\n- `exclude` - 字符串或正则表达式。任何名称匹配的组件都不会被缓存\n- `max` - 数字。最多可以缓存多少组件实例\n\n关于`keep-alive`的基本用法：\n\n```js\n<keep-alive>\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n\n使用`includes`和`exclude`：\n\n```js\n<keep-alive include=\"a,b\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 正则表达式 (使用 `v-bind`) -->\n<keep-alive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 数组 (使用 `v-bind`) -->\n<keep-alive :include=\"['a', 'b']\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n\n匹配首先检查组件自身的 `name` 选项，如果 `name` 选项不可用，则匹配它的局部注册名称 (父组件 `components` 选项的键值)，匿名组件不能被匹配\n\n设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（`activated`与`deactivated`）：\n\n- 首次进入组件时：`beforeRouteEnter` > `beforeCreate` > `created`> `mounted` > `activated` > ... ... > `beforeRouteLeave` > `deactivated`\n\n- 再次进入组件时：`beforeRouteEnter` >`activated` > ... ... > `beforeRouteLeave` > `deactivated`\n\n## 二、使用场景\n\n使用原则：当我们在某些场景下不需要让页面重新加载时我们可以使用`keepalive`\n\n举个栗子:\n\n当我们从`首页`–>`列表页`–>`商详页`–>`再返回`，这时候列表页应该是需要`keep-alive`\n\n从`首页`–>`列表页`–>`商详页`–>`返回到列表页(需要缓存)`–>`返回到首页(需要缓存)`–>`再次进入列表页(不需要缓存)`，这时候可以按需来控制页面的`keep-alive`\n\n在路由中设置`keepAlive`属性判断是否需要缓存\n\n```js\n{\n  path: 'list',\n  name: 'itemList', // 列表页\n  component (resolve) {\n    require(['@/pages/item/list'], resolve)\n },\n meta: {\n  keepAlive: true,\n  title: '列表页'\n }\n}\n```\n\n使用`<keep-alive>`\n\n```js\n<div id=\"app\" class='wrapper'>\n    <keep-alive>\n        <!-- 需要缓存的视图组件 --> \n        <router-view v-if=\"$route.meta.keepAlive\"></router-view>\n     </keep-alive>\n      <!-- 不需要缓存的视图组件 -->\n     <router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n</div>\n```\n\n\n## 三、原理分析\n\n`keep-alive`是`vue`中内置的一个组件\n\n源码位置：src/core/components/keep-alive.js\n\n```js\nexport default {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: [String, RegExp, Array],\n    exclude: [String, RegExp, Array],\n    max: [String, Number]\n  },\n\n  created () {\n    this.cache = Object.create(null)\n    this.keys = []\n  },\n\n  destroyed () {\n    for (const key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n\n  mounted () {\n    this.$watch('include', val => {\n      pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n      pruneCache(this, name => !matches(val, name))\n    })\n  },\n\n  render() {\n    /* 获取默认插槽中的第一个组件节点 */\n    const slot = this.$slots.default\n    const vnode = getFirstComponentChild(slot)\n    /* 获取该组件节点的componentOptions */\n    const componentOptions = vnode && vnode.componentOptions\n\n    if (componentOptions) {\n      /* 获取该组件节点的名称，优先获取组件的name字段，如果name不存在则获取组件的tag */\n      const name = getComponentName(componentOptions)\n\n      const { include, exclude } = this\n      /* 如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode */\n      if (\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      const { cache, keys } = this\n      /* 获取组件的key值 */\n      const key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n        : vnode.key\n     /*  拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存 */\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance\n        // make current key freshest\n        remove(keys, key)\n        keys.push(key)\n      }\n        /* 如果没有命中缓存，则将其设置进缓存 */\n        else {\n        cache[key] = vnode\n        keys.push(key)\n        // prune oldest entry\n        /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode)\n        }\n      }\n\n      vnode.data.keepAlive = true\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n```\n\n可以看到该组件没有`template`，而是用了`render`，在组件渲染的时候会自动执行`render`函数\n\n`this.cache`是一个对象，用来存储需要缓存的组件，它将以如下形式存储：\n\n```js\nthis.cache = {\n    'key1':'组件1',\n    'key2':'组件2',\n    // ...\n}\n```\n\n在组件销毁的时候执行`pruneCacheEntry`函数\n\n```js\nfunction pruneCacheEntry (\n  cache: VNodeCache,\n  key: string,\n  keys: Array<string>,\n  current?: VNode\n) {\n  const cached = cache[key]\n  /* 判断当前没有处于被渲染状态的组件，将其销毁*/\n  if (cached && (!current || cached.tag !== current.tag)) {\n    cached.componentInstance.$destroy()\n  }\n  cache[key] = null\n  remove(keys, key)\n}\n```\n\n在`mounted`钩子函数中观测 `include` 和 `exclude` 的变化，如下：\n\n```javascript\nmounted () {\n    this.$watch('include', val => {\n        pruneCache(this, name => matches(val, name))\n    })\n    this.$watch('exclude', val => {\n        pruneCache(this, name => !matches(val, name))\n    })\n}\n```\n\n如果`include` 或`exclude` 发生了变化，即表示定义需要缓存的组件的规则或者不需要缓存的组件的规则发生了变化，那么就执行`pruneCache`函数，函数如下：\n\n```javascript\nfunction pruneCache (keepAliveInstance, filter) {\n  const { cache, keys, _vnode } = keepAliveInstance\n  for (const key in cache) {\n    const cachedNode = cache[key]\n    if (cachedNode) {\n      const name = getComponentName(cachedNode.componentOptions)\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode)\n      }\n    }\n  }\n}\n```\n\n在该函数内对`this.cache`对象进行遍历，取出每一项的`name`值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用`pruneCacheEntry`函数将其从`this.cache`对象剔除即可\n\n关于`keep-alive`的最强大缓存功能是在`render`函数中实现\n\n首先获取组件的`key`值：\n\n```javascript\nconst key = vnode.key == null? \ncomponentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n: vnode.key\n```\n\n拿到`key`值后去`this.cache`对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存，如下：\n\n```javascript\n/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */\nif (cache[key]) {\n    vnode.componentInstance = cache[key].componentInstance\n    /* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */\n    remove(keys, key)\n    keys.push(key)\n} \n```\n\n直接从缓存中拿 `vnode` 的组件实例，此时重新调整该组件`key`的顺序，将其从原来的地方删掉并重新放在`this.keys`中最后一个\n\n`this.cache`对象中没有该`key`值的情况，如下：\n\n```javascript\n/* 如果没有命中缓存，则将其设置进缓存 */\nelse {\n    cache[key] = vnode\n    keys.push(key)\n    /* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */\n    if (this.max && keys.length > parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n    }\n}\n```\n\n表明该组件还没有被缓存过，则以该组件的`key`为键，组件`vnode`为值，将其存入`this.cache`中，并且把`key`存入`this.keys`中\n\n此时再判断`this.keys`中缓存组件的数量是否超过了设置的最大缓存数量值`this.max`，如果超过了，则把第一个缓存组件删掉\n\n\n\n## 四、思考题：缓存后如何获取数据\n\n解决方案可以有以下两种：\n\n- beforeRouteEnter\n- actived\n\n### beforeRouteEnter\n\n每次组件渲染的时候，都会执行`beforeRouteEnter`\n\n```js\nbeforeRouteEnter(to, from, next){\n    next(vm=>{\n        console.log(vm)\n        // 每次进入路由执行\n        vm.getData()  // 获取数据\n    })\n},\n```\n\n### actived\n\n在`keep-alive`缓存的组件被激活的时候，都会执行`actived`钩子\n\n```js\nactivated(){\n\t  this.getData() // 获取数据\n},\n```\n\n注意：服务器端渲染期间`avtived`不被调用\n\n","level":3,"tagId":14}
{"_id":{"$oid":"61aa3842ff0573000165b1fb"},"exerciseKey":"116db48b-6ad5-40f1-9f60-c5a525673395","category":"QA","renderType":"md","title":"React 的事件代理机制和原生事件绑定有什么区别？\n","desc":null,"options":null,"explanation":"* 事件传播与阻止事件的传播： React 的合成事件并没有实现事件捕获 只支持了事件冒泡。阻止事件传播 React 做了兼容性处理，只需要 e.preventDefault() 即可，原生存在兼容性问题。\n* 事件类型：React 是 原生事件类型 的一个子集（React 只是实现了 DOM level3 的事件接口，有些事件 React 并没有实现，比如 window 的 resize 事件。）阻止 React 事件冒泡的行为只能用于 React 合成事件系统，但是 在原生事件中的阻止冒泡行为，却可以阻止 React 合成事件的传播。\n* 事件的绑定方式：原生事件系统中支持多种不同的绑定事件的方式，React 中只有一种\n* 事件对象：原生中存在 IE 的兼容性问题，React 做了兼容处理。\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa38423d5f3a0001af54f5"},"exerciseKey":"12240b0e-e285-422e-b6ac-b1e839af6cae","category":"QA","renderType":"md","title":"浏览器和 Node 中的事件循环有什么区别？","desc":null,"options":null,"explanation":"## 浏览器\n\n关于微任务和宏任务在浏览器的执行顺序是这样的：\n\n* 执行一只task（宏任务）\n* 执行完micro-task队列 （微任务）\n\n如此循环往复下去\n\n常见的 task（宏任务） 比如：setTimeout、setInterval、script（整体代码）、 I/O 操作、UI 渲染等。\n常见的 micro-task 比如: new Promise().then(回调)、MutationObserver(html5新特性) 等。\n\n## Node\n\nNode的事件循环是libuv实现的，引用一张官网的图：\n\n![image.png](https://i.loli.net/2021/08/07/g47eAhQN85sRBmS.png)\n\n大体的task（宏任务）执行顺序是这样的：\n\n* timers定时器：本阶段执行已经安排的 setTimeout() 和 setInterval() 的回调函数。\n* pending callbacks待定回调：执行延迟到下一个循环迭代的 I/O 回调。\n* idle, prepare：仅系统内部使用。\n* poll 轮询：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，它们由计时器和 \n* setImmediate() 排定的之外），其余情况 node 将在此处阻塞。\n* check 检测：setImmediate() 回调函数在这里执行。\n* close callbacks 关闭的回调函数：一些准备关闭的回调函数，如：socket.on('close', ...)。\n\n微任务和宏任务在Node的执行顺序\n\nNode 10以前：\n\n* 执行完一个阶段的所有任务\n* 执行完nextTick队列里面的内容\n* 然后执行完微任务队列的内容\n\nNode 11以后：\n和浏览器的行为统一了，都是每执行一个宏任务就执行完微任务队列。\n\n\n\n","level":3.5,"tagId":18}
{"_id":{"$oid":"61aa38443d5f3a0001af5503"},"exerciseKey":"15457f3a-3fba-48d2-902e-eda18ef47e18","category":"QA","renderType":"md","title":"TypeScript 中的类型断言是什么？","desc":null,"options":null,"explanation":"TypeScript 中的类型断言的工作方式类似于其他语言中的类型转换，但没有 C# 和 Java 等语言中可能的类型检查或数据重组。类型断言对运行时没有影响，仅由编译器使用。\n\n类型断言本质上是类型转换的软版本，它建议编译器将变量视为某种类型，但如果它处于不同的形式，则不会强制它进入该模型。","level":1.5,"tagId":19}
{"_id":{"$oid":"61aa384539bf10000191c92f"},"exerciseKey":"190f1c7f-4fb5-4fb1-bb7c-f2cc977d50d8","category":"QA","renderType":"md","title":"说说React服务端渲染怎么做？原理是什么？","desc":null,"options":null,"explanation":"## 一、是什么\n\n服务端渲染（`Server-Side Rendering` ，简称`SSR`），指由服务侧完成页面的 `HTML` 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程\n\n ![](https://static.vue-js.com/96dc3e20-f3f7-11eb-85f6-6fac77c0c9b3.png)\n\n其解决的问题主要有两个：\n\n- SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面\n- 加速首屏加载，解决首屏白屏问题\n\n\n## 二、如何做\n\n在`react`中，实现`SSR`主要有两种形式：\n\n- 手动搭建一个 SSR 框架\n- 使用成熟的SSR 框架，如 Next.JS\n\n\n这里主要以手动搭建一个`SSR`框架进行实现\n\n首先通过`express`启动一个`app.js`文件，用于监听3000端口的请求，当请求根目录时，返回`HTML`，如下：\n\n```js\nconst express = require('express')\nconst app = express()\napp.get('/', (req,res) => res.send(`\n<html>\n   <head>\n       <title>ssr demo</title>\n   </head>\n   <body>\n       Hello world\n   </body>\n</html>\n`))\n\napp.listen(3000, () => console.log('Exampleapp listening on port 3000!'))\n```\n\n然后再服务器中编写`react`代码，在`app.js`中进行应引用\n\n```jsx\nimport React from 'react'\n\nconst Home = () =>{\n\n    return <div>home</div>\n\n}\n\nexport default Home\n```\n\n为了让服务器能够识别`JSX`，这里需要使用`webpakc`对项目进行打包转换，创建一个配置文件`webpack.server.js`并进行相关配置，如下：\n\n```js\nconst path = require('path')    //node的path模块\nconst nodeExternals = require('webpack-node-externals')\n\nmodule.exports = {\n    target:'node',\n    mode:'development',           //开发模式\n    entry:'./app.js',             //入口\n    output: {                     //打包出口\n        filename:'bundle.js',     //打包后的文件名\n        path:path.resolve(__dirname,'build')    //存放到根目录的build文件夹\n    },\n    externals: [nodeExternals()],  //保持node中require的引用方式\n    module: {\n        rules: [{                  //打包规则\n           test:   /\\.js?$/,       //对所有js文件进行打包\n           loader:'babel-loader',  //使用babel-loader进行打包\n           exclude: /node_modules/,//不打包node_modules中的js文件\n           options: {\n               presets: ['react','stage-0',['env', { \n                                  //loader时额外的打包规则,对react,JSX，ES6进行转换\n                    targets: {\n                        browsers: ['last 2versions']   //对主流浏览器最近两个版本进行兼容\n                    }\n               }]]\n           }\n       }]\n    }\n}\n```\n\n接着借助`react-dom`提供了服务端渲染的 `renderToString`方法，负责把`React`组件解析成`html`\n\n```js\nimport express from 'express'\nimport React from 'react'//引入React以支持JSX的语法\nimport { renderToString } from 'react-dom/server'//引入renderToString方法\nimport Home from'./src/containers/Home'\n\nconst app= express()\nconst content = renderToString(<Home/>)\napp.get('/',(req,res) => res.send(`\n<html>\n   <head>\n       <title>ssr demo</title>\n   </head>\n   <body>\n        ${content}\n   </body>\n</html>\n`))\n\napp.listen(3001, () => console.log('Exampleapp listening on port 3001!'))\n```\n\n上面的过程中，已经能够成功将组件渲染到了页面上\n\n但是像一些事件处理的方法，是无法在服务端完成，因此需要将组件代码在浏览器中再执行一遍，这种服务器端和客户端共用一套代码的方式就称之为**同构**\n\n重构通俗讲就是一套React代码在服务器上运行一遍，到达浏览器又运行一遍：\n\n- 服务端渲染完成页面结构\n- 浏览器端渲染完成事件绑定\n\n浏览器实现事件绑定的方式为让浏览器去拉取`JS`文件执行，让`JS`代码来控制，因此需要引入`script`标签\n\n通过`script`标签为页面引入客户端执行的`react`代码，并通过`express`的`static`中间件为`js`文件配置路由，修改如下：\n\n```js\nimport express from 'express'\nimport React from 'react'//引入React以支持JSX的语法\nimport { renderToString } from'react-dom/server'//引入renderToString方法\nimport Home from './src/containers/Home'\n \nconst app = express()\napp.use(express.static('public'));\n//使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹\n const content = renderToString(<Home/>)\n \napp.get('/',(req,res)=>res.send(`\n<html>\n   <head>\n       <title>ssr demo</title>\n   </head>\n   <body>\n        ${content}\n   <script src=\"/index.js\"></script>\n   </body>\n</html>\n`))\n\n app.listen(3001, () =>console.log('Example app listening on port 3001!'))\n```\n\n然后再客户端执行以下`react`代码，新建`webpack.client.js`作为客户端React代码的`webpack`配置文件如下：\n\n```js\nconst path = require('path')                    //node的path模块\n\nmodule.exports = {\n    mode:'development',                         //开发模式\n    entry:'./src/client/index.js',              //入口\n    output: {                                   //打包出口\n        filename:'index.js',                    //打包后的文件名\n        path:path.resolve(__dirname,'public')   //存放到根目录的build文件夹\n    },\n    module: {\n        rules: [{                               //打包规则\n           test:   /\\.js?$/,                    //对所有js文件进行打包\n           loader:'babel-loader',               //使用babel-loader进行打包\n           exclude: /node_modules/,             //不打包node_modules中的js文件\n           options: {\n               presets: ['react','stage-0',['env', {     \n                    //loader时额外的打包规则,这里对react,JSX进行转换\n                    targets: {\n                        browsers: ['last 2versions']   //对主流浏览器最近两个版本进行兼容\n                    }\n               }]]\n           }\n       }]\n    }\n}\n```\n\n这种方法就能够简单实现首页的`react`服务端渲染，过程对应如下图：\n\n ![](https://static.vue-js.com/a2894970-f3f7-11eb-85f6-6fac77c0c9b3.png)\n\n在做完初始渲染的时候，一个应用会存在路由的情况，配置信息如下：\n\n```js\nimport React from 'react'                   //引入React以支持JSX\nimport { Route } from 'react-router-dom'    //引入路由\nimport Home from './containers/Home'        //引入Home组件\n\nexport default (\n    <div>\n        <Route path=\"/\" exact component={Home}></Route>\n    </div>\n)\n```\n\n然后可以通过`index.js`引用路由信息，如下：\n\n```js\nimport React from 'react'\nimport ReactDom from 'react-dom'\nimport { BrowserRouter } from'react-router-dom'\nimport Router from'../Routers'\n\nconst App= () => {\n    return (\n        <BrowserRouter>\n           {Router}\n        </BrowserRouter>\n    )\n}\n\nReactDom.hydrate(<App/>, document.getElementById('root'))\n```\n\n这时候控制台会存在报错信息，原因在于每个`Route`组件外面包裹着一层`div`，但服务端返回的代码中并没有这个`div`\n\n解决方法只需要将路由信息在服务端执行一遍，使用使用`StaticRouter`来替代`BrowserRouter`，通过`context`进行参数传递\n\n```js\nimport express from 'express'\nimport React from 'react'//引入React以支持JSX的语法\nimport { renderToString } from 'react-dom/server'//引入renderToString方法\nimport { StaticRouter } from 'react-router-dom'\nimport Router from '../Routers'\n \nconst app = express()\napp.use(express.static('public'));\n//使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹\n\napp.get('/',(req,res)=>{\n    const content  = renderToString((\n        //传入当前path\n        //context为必填参数,用于服务端渲染参数传递\n        <StaticRouter location={req.path} context={{}}>\n           {Router}\n        </StaticRouter>\n    ))\n    res.send(`\n   <html>\n       <head>\n           <title>ssr demo</title>\n       </head>\n       <body>\n       <div id=\"root\">${content}</div>\n       <script src=\"/index.js\"></script>\n       </body>\n   </html>\n    `)\n})\n\n\napp.listen(3001, () => console.log('Exampleapp listening on port 3001!'))\n```\n\n这样也就完成了路由的服务端渲染\n\n\n\n## 三、原理\n\n整体`react`服务端渲染原理并不复杂，具体如下：\n\n`node server` 接收客户端请求，得到当前的请求`url` 路径，然后在已有的路由表内查找到对应的组件，拿到需要请求的数据，将数据作为 `props`、`context`或者`store` 形式传入组件\n\n然后基于 `react` 内置的服务端渲染方法 `renderToString()`把组件渲染为 `html`字符串在把最终的 `html `进行输出前需要将数据注入到浏览器端\n\n浏览器开始进行渲染和节点对比，然后执行完成组件内事件绑定和一些交互，浏览器重用了服务端输出的 `html` 节点，整个流程结束\n\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa384754ebf60001a1a351"},"exerciseKey":"20d4a56b-719b-47ba-b29b-f8a61e226958","category":"QA","renderType":"md","title":"什么是单点登录，以及如何进行实现？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/8a25a760-8c83-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一\n\nSSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统\n\nSSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过`passport`，子系统本身将不参与登录操作\n\n当一个系统成功登录以后，`passport`将会颁发一个令牌给各个子系统，子系统可以拿着令牌会获取各自的受保护资源，为了减少频繁认证，各个子系统在被`passport`授权以后，会建立一个局部会话，在一定时间内可以无需再次向`passport`发起认证\n\n ![](https://static.vue-js.com/2b9b0e70-8c4b-11eb-85f6-6fac77c0c9b3.png)\n\n上图有四个系统，分别是`Application1`、`Application2`、`Application3`、和`SSO`，当`Application1`、`Application2`、`Application3`需要登录时，将跳到`SSO`系统，`SSO`系统完成登录，其他的应用系统也就随之登录了\n\n#### 举个例子\n\n淘宝、天猫都属于阿里旗下，当用户登录淘宝后，再打开天猫，系统便自动帮用户登录了天猫，这种现象就属于单点登录\n\n\n## 二、如何实现\n\n### 同域名下的单点登录\n\n`cookie`的`domin`属性设置为当前域的父域，并且父域的`cookie`会被子域所共享。`path`属性默认为`web`应用的上下文路径\n\n利用 `Cookie` 的这个特点，没错，我们只需要将` Cookie `的` domain`属性设置为父域的域名（主域名），同时将 `Cookie `的` path `属性设置为根路径，将 `Session ID`（或 `Token`）保存到父域中。这样所有的子域应用就都可以访问到这个` Cookie `\n\n不过这要求应用系统的域名需建立在一个共同的主域名之下，如 `tieba.baidu.com` 和 `map.baidu.com`，它们都建立在 `baidu.com `这个主域名之下，那么它们就可以通过这种方式来实现单点登录\n\n\n\n### 不同域名下的单点登录(一)\n\n如果是不同域的情况下，`Cookie`是不共享的，这里我们可以部署一个认证中心，用于专门处理登录请求的独立的 `Web `服务\n\n用户统一在认证中心进行登录，登录成功后，认证中心记录用户的登录状态，并将 `token` 写入 `Cookie`（注意这个 `Cookie `是认证中心的，应用系统是访问不到的）\n\n应用系统检查当前请求有没有 `Token`，如果没有，说明用户在当前系统中尚未登录，那么就将页面跳转至认证中心\n\n由于这个操作会将认证中心的 `Cookie` 自动带过去，因此，认证中心能够根据 `Cookie` 知道用户是否已经登录过了\n\n如果认证中心发现用户尚未登录，则返回登录页面，等待用户登录\n\n如果发现用户已经登录过了，就不会让用户再次登录了，而是会跳转回目标 `URL `，并在跳转前生成一个 `Token`，拼接在目标` URL` 的后面，回传给目标应用系统\n\n应用系统拿到 `Token `之后，还需要向认证中心确认下 `Token` 的合法性，防止用户伪造。确认无误后，应用系统记录用户的登录状态，并将 `Token `写入` Cookie`，然后给本次访问放行。（注意这个 `Cookie` 是当前应用系统的）当用户再次访问当前应用系统时，就会自动带上这个 `Token`，应用系统验证 Token 发现用户已登录，于是就不会有认证中心什么事了\n\n此种实现方式相对复杂，支持跨域，扩展性好，是单点登录的标准做法\n\n\n\n### 不同域名下的单点登录(二)\n\n可以选择将 `Session ID` （或 `Token` ）保存到浏览器的 `LocalStorage` 中，让前端在每次向后端发送请求时，主动将` LocalStorage `的数据传递给服务端\n\n这些都是由前端来控制的，后端需要做的仅仅是在用户登录成功后，将 `Session ID `（或 `Token `）放在响应体中传递给前端\n\n单点登录完全可以在前端实现。前端拿到 `Session ID `（或 `Token` ）后，除了将它写入自己的 `LocalStorage` 中之外，还可以通过特殊手段将它写入多个其他域下的 `LocalStorage` 中\n\n关键代码如下：\n\n```js\n// 获取 token\nvar token = result.data.token;\n \n// 动态创建一个不可见的iframe，在iframe中加载一个跨域HTML\nvar iframe = document.createElement(\"iframe\");\niframe.src = \"http://app1.com/localstorage.html\";\ndocument.body.append(iframe);\n// 使用postMessage()方法将token传递给iframe\nsetTimeout(function () {\n    iframe.contentWindow.postMessage(token, \"http://app1.com\");\n}, 4000);\nsetTimeout(function () {\n    iframe.remove();\n}, 6000);\n \n// 在这个iframe所加载的HTML中绑定一个事件监听器，当事件被触发时，把接收到的token数据写入localStorage\nwindow.addEventListener('message', function (event) {\n    localStorage.setItem('token', event.data)\n}, false);\n```\n\n前端通过 `iframe`+`postMessage()` 方式，将同一份 `Token` 写入到了多个域下的 `LocalStorage` 中，前端每次在向后端发送请求之前，都会主动从 `LocalStorage` 中读取` Token `并在请求中携带，这样就实现了同一份` Token` 被多个域所共享\n\n此种实现方式完全由前端控制，几乎不需要后端参与，同样支持跨域\n\n\n\n## 三、流程\n\n单点登录的流程图如下所示：\n\n ![](https://static.vue-js.com/2422bc40-8c84-11eb-ab90-d9ae814b240d.png)\n\n- 用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数\n\n- sso认证中心发现用户未登录，将用户引导至登录页面\n- 用户输入用户名密码提交登录申请\n- sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌\n- sso认证中心带着令牌跳转会最初的请求地址（系统1）\n- 系统1拿到令牌，去sso认证中心校验令牌是否有效\n- sso认证中心校验令牌，返回有效，注册系统1\n- 系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源\n- 用户访问系统2的受保护资源\n- 系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数\n- sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌\n- 系统2拿到令牌，去sso认证中心校验令牌是否有效\n- sso认证中心校验令牌，返回有效，注册系统2\n- 系统2使用该令牌创建与用户的局部会话，返回受保护资源\n\n用户登录成功之后，会与`sso`认证中心及各个子系统建立会话，用户与`sso`认证中心建立的会话称为全局会话\n\n用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过`sso`认证中心\n\n全局会话与局部会话有如下约束关系：\n\n- 局部会话存在，全局会话一定存在\n- 全局会话存在，局部会话不一定存在\n- 全局会话销毁，局部会话必须销毁\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa384a81337a00011e0543"},"exerciseKey":"2b68a2b5-ab3a-4de4-af48-43ab5f7e99f8","category":"QA","renderType":"md","title":"说说React Router有几种模式，以及实现原理？","desc":null,"options":null,"explanation":"## 一、是什么\n\n在单页应用中，一个`web`项目只有一个`html`页面，一旦页面加载完成之后，就不用因为用户的操作而进行页面的重新加载或者跳转，其特性如下：\n\n- 改变 url 且不让浏览器像服务器发送请求\n\n- 在不刷新页面的前提下动态改变浏览器地址栏中的URL地址\n\n其中主要分成了两种模式：\n\n- hash 模式：在url后面加上#，如http://127.0.0.1:5500/home/#/page1\n- history 模式：允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录\n\n\n## 二、使用\n\n`React Router`对应的`hash`模式和`history`模式对应的组件为：\n\n- HashRouter\n- BrowserRouter\n\n\n这两个组件的使用都十分的简单，作为最顶层组件包裹其他组件，如下所示\n\n```jsx\n// 1.import { BrowserRouter as Router } from \"react-router-dom\";\n// 2.import { HashRouter as Router } from \"react-router-dom\";\n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  // HashRouter as Router  \n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Backend from './pages/Backend';\nimport Admin from './pages/Admin';\n\n\nfunction App() {\n  return (\n    <Router>\n        <Route path=\"/login\" component={Login}/>\n        <Route path=\"/backend\" component={Backend}/>\n        <Route path=\"/admin\" component={Admin}/>\n        <Route path=\"/\" component={Home}/>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\n\n\n## 三、实现原理\n\n路由描述了 `URL` 与 `UI `之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面）\n\n下面以`hash`模式为例子，改变`hash`值并不会导致浏览器向服务器发送请求，浏览器不发出请求，也就不会刷新页面\n\n`hash` 值改变，触发全局 `window` 对象上的 `hashchange` 事件。所以 `hash` 模式路由就是利用 `hashchange` 事件监听 `URL` 的变化，从而进行 `DOM` 操作来模拟页面跳转\n\n`react-router`也是基于这个特性实现路由的跳转\n\n下面以`HashRouter`组件分析进行展开：\n\n\n## HashRouter\n\n`HashRouter`包裹了整应用，\n\n通过`window.addEventListener('hashChange',callback)`监听`hash`值的变化，并传递给其嵌套的组件\n\n然后通过`context`将`location`数据往后代组件传递，如下：\n\n```jsx\nimport React, { Component } from 'react';\nimport { Provider } from './context'\n// 该组件下Api提供给子组件使用\nclass HashRouter extends Component {\n  constructor() {\n    super()\n    this.state = {\n      location: {\n        pathname: window.location.hash.slice(1) || '/'\n      }\n    }\n  }\n  // url路径变化 改变location\n  componentDidMount() {\n    window.location.hash = window.location.hash || '/'\n    window.addEventListener('hashchange', () => {\n      this.setState({\n        location: {\n          ...this.state.location,\n          pathname: window.location.hash.slice(1) || '/'\n        }\n      }, () => console.log(this.state.location))\n    })\n  }\n  render() {\n    let value = {\n      location: this.state.location\n    }\n    return (\n      <Provider value={value}>\n        {\n          this.props.children\n        }\n      </Provider>\n    );\n  }\n}\n\nexport default HashRouter;\n\n```\n\n\n### Router\n\n`Router`组件主要做的是通过`BrowserRouter`传过来的当前值，通过`props`传进来的`path`与`context`传进来的`pathname`进行匹配，然后决定是否执行渲染组件\n\n```js\nimport React, { Component } from 'react';\nimport { Consumer } from './context'\nconst { pathToRegexp } = require(\"path-to-regexp\");\nclass Route extends Component {\n  render() {\n    return (\n      <Consumer>\n        {\n          state => {\n            console.log(state)\n            let {path, component: Component} = this.props\n            let pathname = state.location.pathname\n            let reg = pathToRegexp(path, [], {end: false})\n            // 判断当前path是否包含pathname\n            if(pathname.match(reg)) {\n              return <Component></Component>\n            }\n            return null\n          }\n        }\n      </Consumer>\n    );\n  }\n}\nexport default Route;\n\n```\n\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa384cc2d0220001c9643f"},"exerciseKey":"31a0560a-db67-424e-8ad7-5dc1f04a11b7","category":"QA","renderType":"md","title":"正向代理和反向代理分别是什么？","desc":null,"options":null,"explanation":"说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；\n\n此时就涉及到两个角色，一个是被代理角色，一个是目标角色，被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；如同生活中的专卖店~客人到adidas专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是adidas厂家，目标角色就是用户。\n  \n ## 正向代理\n \n正向代理也是大家最常接触的到的代理模式。\n\n在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个代理工具进行访问，这个代理工具就是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！\n\n上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。\n\n总结来说：正向代理，\"它代理的是客户端，代客户端发出请求\"，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。\n\n正向代理的用途：\n\n* 访问原来无法访问的资源，如Google\n* 可以做缓存，加速访问资源\n* 对客户端访问授权，上网进行认证\n* 代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息\n\n## 反向代理\n\n明白了什么是正向代理，我们继续看关于反向代理的处理方式。\n\n例如某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：分布式部署；\n\n也就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：http://tengine.taobao.org/。\n\n多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时，请求的来源（也就是客户端）是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。\n\n客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。\n\n反向代理，\"它代理的是服务端，代服务端接收请求\"，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。\n\n反向代理的作用：\n\n* 保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网\n* 负载均衡，通过反向代理服务器来优化网站的负载","level":3,"tagId":16}
{"_id":{"$oid":"61aa3850291c0100017ee197"},"exerciseKey":"3c2be850-72a9-42fe-b9cc-60a632f8ac61","category":"QA","renderType":"md","title":"Babel 是什么？","desc":null,"options":null,"explanation":"Babel 是一个 JavaScript 编译器。\n\nBabel 是一个工具链，主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。","level":1,"tagId":10}
{"_id":{"$oid":"61aa3850bdfab500012c8432"},"exerciseKey":"3c6c5215-5db9-45ea-b2c1-6cc1c6aa6acd","category":"QA","renderType":"md","title":"说说webpack中常见的Loader？解决了什么问题？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/5660fc40-a6ff-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n`loader` 用于对模块的\"源代码\"进行转换，在 `import` 或\"加载\"模块时预处理文件\n\n`webpack`做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。如下图所示：\n\n ![](https://static.vue-js.com/7b8d9640-a6ff-11eb-ab90-d9ae814b240d.png)\n\n在`webpack`内部中，任何文件都是模块，不仅仅只是`js`文件\n\n默认情况下，在遇到`import`或者`load`加载模块的时候，`webpack`只支持对`js`文件打包\n\n像`css`、`sass`、`png`等这些类型的文件的时候，`webpack`则无能为力，这时候就需要配置对应的`loader`进行文件内容的解析\n\n在加载模块的时候，执行顺序如下：\n\n ![](https://static.vue-js.com/9c2c43b0-a6ff-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n当 `webpack` 碰到不识别的模块的时候，`webpack` 会在配置的中查找该文件解析规则\n\n\n\n关于配置`loader`的方式有三种：\n\n- 配置方式（推荐）：在 webpack.config.js文件中指定 loader\n- 内联方式：在每个 import 语句中显式指定 loader\n- CLI 方式：在 shell 命令中指定它们\n\n\n### 配置方式\n\n关于`loader`的配置，我们是写在`module.rules`属性中，属性介绍如下：\n\n- `rules`是一个数组的形式，因此我们可以配置很多个`loader`\n\n- 每一个`loader`对应一个对象的形式，对象属性`test` 为匹配的规则，一般情况为正则表达式\n\n- 属性`use`针对匹配到文件类型，调用对应的 `loader` 进行处理\n\n代码编写，如下形式：\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          { loader: 'style-loader' },\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          },\n          { loader: 'sass-loader' }\n        ]\n      }\n    ]\n  }\n};\n```\n\n\n\n## 二、特性\n\n这里继续拿上述代码，来讲讲`loader`的特性\n\n从上述代码可以看到，在处理`css`模块的时候，`use`属性中配置了三个`loader`分别处理`css`文件\n\n因为`loader `支持链式调用，链中的每个` loader `会处理之前已处理过的资源，最终变为`js`代码。顺序为相反的顺序执行，即上述执行方式为`sass-loader`、`css-loader`、`style-loader`\n\n除此之外，`loader`的特性还有如下：\n\n- loader 可以是同步的，也可以是异步的\n- loader 运行在 Node.js 中，并且能够执行任何操作\n- 除了常见的通过 `package.json` 的 `main` 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 `loader` 字段直接引用一个模块\n- 插件(plugin)可以为 loader 带来更多特性\n- loader 能够产生额外的任意文件\n\n可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言翻译和更多其他特性\n\n\n\n\n\n## 三、常见的loader\n\n在页面开发过程中，我们经常性加载除了`js`文件以外的内容，这时候我们就需要配置响应的`loader`进行加载\n\n常见的`loader`如下：\n\n- style-loader: 将css添加到DOM的内联样式标签style里\n- css-loader :允许将css文件通过require的方式引入，并返回css代码\n- less-loader: 处理less\n- sass-loader: 处理sass\n- postcss-loader: 用postcss来处理CSS\n- autoprefixer-loader: 处理CSS3属性前缀，已被弃用，建议直接使用postcss\n- file-loader: 分发文件到output目录并返回相对路径\n- url-loader: 和file-loader类似，但是当文件小于设定的limit时可以返回一个Data Url\n- html-minify-loader: 压缩HTML\n- babel-loader :用babel来转换ES6文件到ES\n\n\n\n下面给出一些常见的`loader`的使用：\n\n### css-loader\n\n分析 `css` 模块之间的关系，并合成⼀个 `css`\n\n```bash\nnpm install --save-dev css-loader\n```\n\n```js\nrules: [\n  ...,\n {\n  test: /\\.css$/,\n    use: {\n      loader: \"css-loader\",\n      options: {\n     // 启用/禁用 url() 处理\n     url: true,\n     // 启用/禁用 @import 处理\n     import: true,\n        // 启用/禁用 Sourcemap\n        sourceMap: false\n      }\n    }\n }\n]\n```\n\n如果只通过`css-loader`加载文件，这时候页面代码设置的样式并没有生效\n\n原因在于，`css-loader`只是负责将`.css`文件进行一个解析，而并不会将解析后的`css`插入到页面中\n\n如果我们希望再完成插入`style`的操作，那么我们还需要另外一个`loader`，就是`style-loader`\n\n\n\n### style-loader\n\n把 `css-loader` 生成的内容，用 `style` 标签挂载到页面的 `head` 中\n\n```bash\nnpm install --save-dev style-loader\n```\n\n```js\nrules: [\n  ...,\n {\n  test: /\\.css$/,\n    use: [\"style-loader\", \"css-loader\"]\n }\n]\n```\n\n同一个任务的 `loader` 可以同时挂载多个，处理顺序为：从右到左，从下往上\n\n\n\n\n\n### less-loader\n\n开发中，我们也常常会使用`less`、`sass`、`stylus`预处理器编写`css`样式，使开发效率提高，这里需要使用`less-loader`\n\n```cmd\nnpm install less-loader -D\n```\n\n```js\nrules: [\n  ...,\n {\n  test: /\\.css$/,\n    use: [\"style-loader\", \"css-loader\",\"less-loader\"]\n }\n]\n```\n\n\n\n### raw-loader\n\n在 `webpack `中通过 `import `方式导入文件内容，该`loader `并不是内置的，所以首先要安装\n\n```bash\nnpm install --save-dev raw-loader\n```\n\n然后在 webpack.config.js 中进行配置\n\n```javascript\nmodule.exports = {  ...,  module: {      rules: [      {        test: /\\.(txt|md)$/,        use: 'raw-loader'     }    ] }}\n```\n\n\n\n### file-loader\n\n把识别出的资源模块，移动到指定的输出⽬目录，并且返回这个资源在输出目录的地址(字符串)\n\n```bash\nnpm install --save-dev file-loader\n```\n\n```javascript\nrules: [  ..., {  test: /\\.(png|jpe?g|gif)$/,    use: {      loader: \"file-loader\",      options: {        // placeholder 占位符 [name] 源资源模块的名称        // [ext] 源资源模块的后缀        name: \"[name]_[hash].[ext]\",        //打包后的存放位置        outputPath: \"./images\",        // 打包后文件的 url        publicPath: './images',      }    } }]\n```\n\n\n\n### url-loader\n\n可以处理理 `file-loader` 所有的事情，但是遇到图片格式的模块，可以选择性的把图片转成 `base64`  格式的字符串，并打包到 `js` 中，对小体积的图片比较合适，大图片不合适。\n\n```bash\nnpm install --save-dev url-loader\n```\n\n```javascript\nrules: [  ..., {  test: /\\.(png|jpe?g|gif)$/,    use: {      loader: \"url-loader\",      options: {        // placeholder 占位符 [name] 源资源模块的名称        // [ext] 源资源模块的后缀        name: \"[name]_[hash].[ext]\",        //打包后的存放位置        outputPath: \"./images\"        // 打包后文件的 url        publicPath: './images',        // 小于 100 字节转成 base64 格式        limit: 100      }    } }]\n```\n\n","level":2.5,"tagId":28}
{"_id":{"$oid":"61aa3850cd02c30001dd21ed"},"exerciseKey":"3d5ed734-a65a-4776-9830-c6d586dc63b0","category":"QA","renderType":"md","title":"干脆面抽卡问题","desc":"假设小浣熊随机赠送的卡片共有 108 种（出现概率相同），那么集齐所有卡片所需购买小浣熊包数的数学期望是多少？\n\n","options":null,"explanation":"明确几个性质：\n\n1) 假设硬币丢正面的概率为p，那么第一次丢到正面的平均次数为1/p\n2) 抽到全部k张卡片所需要的次数=  抽到第一张所需要的次数+抽到第二张所需要的次数+...+ 抽到第k张所需要的次数。\n\n显然，根据2和随机变量期望的线性叠加，我们有：\n\n> 答案 = E(抽到全部k张卡片所需要的次数) =  E(抽到第一张所需要的次数)+E(抽到第二张所需要的次数)+...+ E(抽到第k张所需要的次数)\n\n假设一共有有n张卡片需要抽到，那么抽到第一张的概率为（抽到任何一张都属于被抽到的第一张）p = n/n = 1\n\n根据 1) ，我们有：\n\n> E(抽到第一张所需要的次数) = 1/p = 1\n\n那么抽到第二张的概率为（只要不重复抽到第一张，就属于抽到第二张）:\n\n> p = (n-1)/n \n\n根据1），我们有：\n\n> E(抽到第二张所需要的次数) = 1/p = n/(n-1)\n\n那么抽到第三张的概率为（只要不重复抽到前两张，就属于抽到第三张）：\n\n> p = (n-2)/n 根据1），我们有E(抽到第三张所需要的次数) = 1/p = n/(n-2)\n\n以此类推，答案 = E(抽到全部k张卡片所需要的次数)  = 1 + n/(n-1) + n/(n-2) + ... + n/(n-k+1)n = 108的时候，原题问的是 k = 108，带入即可得到答案。\n\n答案是**519**","level":3,"tagId":17}
{"_id":{"$oid":"61aa38520d111e000103722b"},"exerciseKey":"44c29904-83b1-4e51-905e-2bd3599f9e45","category":"QA","renderType":"md","title":"说说react中引入css的方式有哪几种？区别？","desc":null,"options":null,"explanation":"## 一、是什么\n\n组件式开发选择合适的`css`解决方案尤为重要\n\n通常会遵循以下规则：\n\n- 可以编写局部css，不会随意污染其他组件内的原生；\n- 可以编写动态的css，可以获取当前组件的一些状态，根据状态的变化生成不同的css样式；\n- 支持所有的css特性：伪类、动画、媒体查询等；\n- 编写起来简洁方便、最好符合一贯的css风格特点\n\n在这一方面，`vue`使用`css`起来更为简洁：\n\n- 通过 style 标签编写样式\n- scoped 属性决定编写的样式是否局部有效\n- lang 属性设置预处理器\n- 内联样式风格的方式来根据最新状态设置和改变css\n\n而在`react`中，引入`CSS`就不如`Vue`方便简洁，其引入`css`的方式有很多种，各有利弊\n\n\n## 二、方式\n\n常见的`CSS`引入方式有以下：\n\n- 在组件内直接使用\n- 组件中引入 .css 文件\n- 组件中引入 .module.css 文件\n- CSS in JS\n\n\n### 在组件内直接使用\n\n直接在组件中书写`css`样式，通过`style`属性直接引入，如下：\n\n```js\nimport React, { Component } from \"react\";\n\nconst div1 = {\n  width: \"300px\",\n  margin: \"30px auto\",\n  backgroundColor: \"#44014C\",  //驼峰法\n  minHeight: \"200px\",\n  boxSizing: \"border-box\"\n};\n\nclass Test extends Component {\n  constructor(props, context) {\n    super(props);\n  }\n \n  render() {\n    return (\n     <div>\n       <div style={div1}>123</div>\n       <div style={{backgroundColor:\"red\"}}>\n     </div>\n    );\n  }\n}\n\nexport default Test;\n```\n\n上面可以看到，`css`属性需要转换成驼峰写法\n\n这种方式优点：\n\n- 内联样式, 样式之间不会有冲突\n- 可以动态获取当前state中的状态\n\n缺点：\n\n- 写法上都需要使用驼峰标识\n\n- 某些样式没有提示\n\n- 大量的样式, 代码混乱\n\n- 某些样式无法编写(比如伪类/伪元素)\n\n \n\n### 组件中引入css文件\n\n将`css`单独写在一个`css`文件中，然后在组件中直接引入\n\n`App.css`文件：\n\n```css\n.title {\n  color: red;\n  font-size: 20px;\n}\n\n.desc {\n  color: green;\n  text-decoration: underline;\n}\n```\n\n组件中引入：\n\n```js\nimport React, { PureComponent } from 'react';\n\nimport Home from './Home';\n\nimport './App.css';\n\nexport default class App extends PureComponent {\n  render() {\n    return (\n      <div className=\"app\">\n        <h2 className=\"title\">我是App的标题</h2>\n        <p className=\"desc\">我是App中的一段文字描述</p >\n        <Home/>\n      </div>\n    )\n  }\n}\n```\n\n这种方式存在不好的地方在于样式是全局生效，样式之间会互相影响\n\n\n\n### 组件中引入 .module.css 文件\n\n将`css`文件作为一个模块引入，这个模块中的所有`css`，只作用于当前组件。不会影响当前组件的后代组件\n\n这种方式是`webpack`特工的方案，只需要配置`webpack`配置文件中`modules:true`即可\n\n```jsx\nimport React, { PureComponent } from 'react';\n\nimport Home from './Home';\n\nimport './App.module.css';\n\nexport default class App extends PureComponent {\n  render() {\n    return (\n      <div className=\"app\">\n        <h2 className=\"title\">我是App的标题</h2>\n        <p className=\"desc\">我是App中的一段文字描述</p >\n        <Home/>\n      </div>\n    )\n  }\n}\n```\n\n这种方式能够解决局部作用域问题，但也有一定的缺陷：\n\n- 引用的类名，不能使用连接符(.xxx-xx)，在 JavaScript 中是不识别的\n- 所有的 className 都必须使用 {style.className} 的形式来编写\n- 不方便动态来修改某些样式，依然需要使用内联样式的方式；\n\n\n\n### CSS in JS\n\nCSS-in-JS， 是指一种模式，其中` CSS `由 `JavaScript `生成而不是在外部文件中定义\n\n此功能并不是 React 的一部分，而是由第三方库提供，例如：\n\n- styled-components\n- emotion\n- glamorous\n\n\n\n下面主要看看`styled-components`的基本使用\n\n本质是通过函数的调用，最终创建出一个组件：\n\n- 这个组件会被自动添加上一个不重复的class\n- styled-components会给该class添加相关的样式\n\n基本使用如下：\n\n创建一个`style.js`文件用于存放样式组件：\n\n```js\nexport const SelfLink = styled.div`\n  height: 50px;\n  border: 1px solid red;\n  color: yellow;\n`;\n\nexport const SelfButton = styled.div`\n  height: 150px;\n  width: 150px;\n  color: ${props => props.color};\n  background-image: url(${props => props.src});\n  background-size: 150px 150px;\n`;\n```\n\n引入样式组件也很简单：\n\n```jsx\nimport React, { Component } from \"react\";\n\nimport { SelfLink, SelfButton } from \"./style\";\n\nclass Test extends Component {\n  constructor(props, context) {\n    super(props);\n  }  \n \n  render() {\n    return (\n     <div>\n       <SelfLink title=\"People's Republic of China\">app.js</SelfLink>\n       <SelfButton color=\"palevioletred\" style={{ color: \"pink\" }} src={fist}>\n          SelfButton\n        </SelfButton>\n     </div>\n    );\n  }\n}\n\nexport default Test;\n```\n\n\n\n## 三、区别\n\n通过上面四种样式的引入，可以看到：\n\n- 在组件内直接使用`css`该方式编写方便，容易能够根据状态修改样式属性，但是大量的演示编写容易导致代码混乱\n- 组件中引入 .css 文件符合我们日常的编写习惯，但是作用域是全局的，样式之间会层叠\n- 引入.module.css 文件能够解决局部作用域问题，但是不方便动态修改样式，需要使用内联的方式进行样式的编写\n\n- 通过css in js 这种方法，可以满足大部分场景的应用，可以类似于预处理器一样样式嵌套、定义、修改状态等\n\n至于使用`react`用哪种方案引入`css`，并没有一个绝对的答案，可以根据各自情况选择合适的方案\n","level":1.5,"tagId":13}
{"_id":{"$oid":"61aa385239bf10000191c98a"},"exerciseKey":"475b72b6-3c41-4509-afe3-abaaff8fc651","category":"QA","renderType":"html","title":"前端数据安全","desc":null,"options":null,"explanation":"<p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><strong>描述</strong></span></span></span></span></p><p><br/><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><span style=\"font-size:10.5ptpx\">反爬虫。如猫眼电影、天眼查等等，以数据内容为核心资产的企业</span></span></span></span></p><p><br/><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><strong>预防方案：</strong></span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">i）font-face拼接方式：猫眼电影、天眼查</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）background 拼接：美团</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）伪元素隐藏：汽车之家</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iv）元素定位覆盖式：去哪儿</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">v）iframe 异步加载：网易云音乐</span></span></span></span></li></ul><p><br/></p>","level":2.5,"tagId":21}
{"_id":{"$oid":"61aa3853bdfab500012c8443"},"exerciseKey":"4a0ca854-e576-4046-a740-f1ef8d4060c9","category":"QA","renderType":"md","title":"SSR是什么？Vue中怎么实现？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/84bd83f0-4986-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n`Server-Side Rendering` 我们称其为`SSR`，意为服务端渲染\n\n指由服务侧完成页面的 `HTML` 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程\n\n先来看看`Web`3个阶段的发展史：\n\n- 传统服务端渲染SSR\n- 单页面应用SPA\n- 服务端渲染SSR\n\n### **传统web开发**\n\n网页内容在服务端渲染完成，⼀次性传输到浏览器\n\n![img](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4d666b24e784fd09e565458c7753b54~tplv-k3u1fbpfcp-watermark.image)\n\n打开页面查看源码，浏览器拿到的是全部的`dom`结构\n\n### **单页应用SPA**\n\n单页应用优秀的用户体验，使其逐渐成为主流，页面内容由`JS`渲染出来，这种方式称为客户端渲染\n\n![img](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e8e524a8e7d44cba73e0c3416690087~tplv-k3u1fbpfcp-watermark.image)\n\n打开页面查看源码，浏览器拿到的仅有宿主元素`#app`，并没有内容\n\n### 服务端渲染SSR\n\n`SSR`解决方案，后端渲染出完整的首屏的`dom`结构返回，前端拿到的内容包括首屏及完整`spa`结构，应用激活后依然按照`spa`方式运行\n\n![img](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1604e7cfad7431f99920e8ab833bc37~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n看完前端发展，我们再看看`Vue`官方对`SSR`的解释：\n\n> Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记\"激活\"为客户端上完全可交互的应用程序\n>\n> 服务器渲染的 Vue.js 应用程序也可以被认为是\"同构\"或\"通用\"，因为应用程序的大部分代码都可以在服务器和客户端上运行\n\n我们从上门解释得到以下结论：\n\n- `Vue SSR`是一个在`SPA`上进行改良的服务端渲染\n- 通过`Vue SSR`渲染的页面，需要在客户端激活才能实现交互\n- `Vue SSR`将包含两部分：服务端渲染的首屏，包含交互的`SPA`\n\n\n\n## 二、解决了什么\n\nSSR主要解决了以下两种问题：\n\n- seo：搜索引擎优先爬取页面`HTML`结构，使用`ssr`时，服务端已经生成了和业务想关联的`HTML`，有利于`seo`\n- 首屏呈现渲染：用户无需等待页面所有`js`加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端）\n\n但是使用`SSR`同样存在以下的缺点：\n\n- 复杂度：整个项目的复杂度\n\n- 库的支持性，代码兼容\n\n- 性能问题\n\n  - 每个请求都是`n`个实例的创建，不然会污染，消耗会变得很大\n\n  - 缓存 `node serve `、 `ngin`x判断当前用户有没有过期，如果没过期的话就缓存，用刚刚的结果。\n  - 降级：监控`cpu`、内存占用过多，就`spa`，返回单个的壳\n\n- 服务器负载变大，相对于前后端分离务器只需要提供静态资源来说，服务器负载更大，所以要慎重使用\n\n所以在我们选择是否使用`SSR`前，我们需要慎重问问自己这些问题：\n\n1. 需要`SEO`的页面是否只是少数几个，这些是否可以使用预渲染（Prerender SPA Plugin）实现\n2. 首屏的请求响应逻辑是否复杂，数据返回是否大量且缓慢\n\n## 三、如何实现\n\n对于同构开发，我们依然使用`webpack`打包，我们要解决两个问题：服务端首屏渲染和客户端激活\n\n这里需要生成一个服务器`bundle`文件用于服务端首屏渲染和一个客户端`bundle`文件用于客户端激活\n\n ![](https://static.vue-js.com/9dcd12c0-4986-11eb-85f6-6fac77c0c9b3.png)\n\n代码结构 除了两个不同入口之外，其他结构和之前`vue`应用完全相同\n\n```js\nsrc\n├── router\n├────── index.js # 路由声明\n├── store\n├────── index.js # 全局状态\n├── main.js # ⽤于创建vue实例\n├── entry-client.js # 客户端⼊⼝，⽤于静态内容“激活”\n└── entry-server.js # 服务端⼊⼝，⽤于⾸屏内容渲染\n```\n\n路由配置\n\n```js\nimport Vue from \"vue\";\nimport Router from \"vue-router\";\n\nVue.use(Router);\n//导出⼯⼚函数\n\nexport function createRouter() {\n    return new Router({\n        mode: 'history',\n        routes: [\n            // 客户端没有编译器，这⾥要写成渲染函数\n            { path: \"/\", component: { render: h => h('div', 'index page') } },\n            { path: \"/detail\", component: { render: h => h('div', 'detail page') } }\n        ]\n    });\n}\n```\n\n主文件main.js\n\n跟之前不同，主文件是负责创建`vue`实例的工厂，每次请求均会有独立的`vue`实例创建\n\n```js\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport { createRouter } from \"./router\";\n// 导出Vue实例⼯⼚函数，为每次请求创建独⽴实例\n// 上下⽂⽤于给vue实例传递参数\nexport function createApp(context) {\n    const router = createRouter();\n    const app = new Vue({\n        router,\n        context,\n        render: h => h(App)\n    });\n    return { app, router };\n}\n```\n\n编写服务端入口`src/entry-server.js`\n\n它的任务是创建`Vue`实例并根据传入`url`指定首屏\n\n```js\nimport { createApp } from \"./main\";\n// 返回⼀个函数，接收请求上下⽂，返回创建的vue实例\nexport default context => {\n    // 这⾥返回⼀个Promise，确保路由或组件准备就绪\n    return new Promise((resolve, reject) => {\n        const { app, router } = createApp(context);\n        // 跳转到⾸屏的地址\n        router.push(context.url);\n        // 路由就绪，返回结果\n        router.onReady(() => {\n            resolve(app);\n        }, reject);\n    });\n};\n```\n\n编写客户端入口`entry-client.js`\n\n客户端入口只需创建`vue`实例并执行挂载，这⼀步称为激活\n\n```js\nimport { createApp } from \"./main\";\n// 创建vue、router实例\nconst { app, router } = createApp();\n// 路由就绪，执⾏挂载\nrouter.onReady(() => {\n    app.$mount(\"#app\");\n});\n```\n\n对`webpack`进行配置\n\n安装依赖\n\n```js\nnpm install webpack-node-externals lodash.merge -D\n```\n\n对`vue.config.js`进行配置\n\n```js\n// 两个插件分别负责打包客户端和服务端\nconst VueSSRServerPlugin = require(\"vue-server-renderer/server-plugin\");\nconst VueSSRClientPlugin = require(\"vue-server-renderer/client-plugin\");\nconst nodeExternals = require(\"webpack-node-externals\");\nconst merge = require(\"lodash.merge\");\n// 根据传⼊环境变量决定⼊⼝⽂件和相应配置项\nconst TARGET_NODE = process.env.WEBPACK_TARGET === \"node\";\nconst target = TARGET_NODE ? \"server\" : \"client\";\nmodule.exports = {\n    css: {\n        extract: false\n    },\n    outputDir: './dist/'+target,\n    configureWebpack: () => ({\n        // 将 entry 指向应⽤程序的 server / client ⽂件\n        entry: `./src/entry-${target}.js`,\n        // 对 bundle renderer 提供 source map ⽀持\n        devtool: 'source-map',\n        // target设置为node使webpack以Node适⽤的⽅式处理动态导⼊，\n        // 并且还会在编译Vue组件时告知`vue-loader`输出⾯向服务器代码。\n        target: TARGET_NODE ? \"node\" : \"web\",\n        // 是否模拟node全局变量\n        node: TARGET_NODE ? undefined : false,\n        output: {\n            // 此处使⽤Node⻛格导出模块\n            libraryTarget: TARGET_NODE ? \"commonjs2\" : undefined\n        },\n        // https://webpack.js.org/configuration/externals/#function\n        // https://github.com/liady/webpack-node-externals\n        // 外置化应⽤程序依赖模块。可以使服务器构建速度更快，并⽣成较⼩的打包⽂件。\n        externals: TARGET_NODE\n        ? nodeExternals({\n            // 不要外置化webpack需要处理的依赖模块。\n            // 可以在这⾥添加更多的⽂件类型。例如，未处理 *.vue 原始⽂件，\n            // 还应该将修改`global`（例如polyfill）的依赖模块列⼊⽩名单\n            whitelist: [/\\.css$/]\n        })\n        : undefined,\n        optimization: {\n            splitChunks: undefined\n        },\n        // 这是将服务器的整个输出构建为单个 JSON ⽂件的插件。\n        // 服务端默认⽂件名为 `vue-ssr-server-bundle.json`\n        // 客户端默认⽂件名为 `vue-ssr-client-manifest.json`。\n        plugins: [TARGET_NODE ? new VueSSRServerPlugin() : new\n                  VueSSRClientPlugin()]\n    }),\n    chainWebpack: config => {\n        // cli4项⽬添加\n        if (TARGET_NODE) {\n            config.optimization.delete('splitChunks')\n        }\n\n        config.module\n            .rule(\"vue\")\n            .use(\"vue-loader\")\n            .tap(options => {\n            merge(options, {\n                optimizeSSR: false\n            });\n        });\n    }\n};\n```\n\n对脚本进行配置，安装依赖\n\n```js\nnpm i cross-env -D\n```\n\n定义创建脚本`package.json`\n\n```js\n\"scripts\": {\n \"build:client\": \"vue-cli-service build\",\n \"build:server\": \"cross-env WEBPACK_TARGET=node vue-cli-service build\",\n \"build\": \"npm run build:server && npm run build:client\"\n}\n```\n\n> 执行打包：npm run build\n\n最后修改宿主文件`/public/index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n        <title>Document</title>\n    </head>\n    <body>\n        <!--vue-ssr-outlet-->\n    </body>\n</html>\n```\n\n> <!--vue-ssr-outlet-->   是服务端渲染入口位置，注意不能为了好看而在前后加空格\n\n\n\n安装`vuex`\n\n```js\nnpm install -S vuex\n```\n\n创建`vuex`工厂函数\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex)\nexport function createStore () {\n    return new Vuex.Store({\n        state: {\n            count:108\n        },\n        mutations: {\n            add(state){\n                state.count += 1;\n            }\n        }\n    })\n}\n```\n\n在`main.js`文件中挂载`store`\n\n```js\nimport { createStore } from './store'\nexport function createApp (context) {\n    // 创建实例\n    const store = createStore()\n    const app = new Vue({\n        store, // 挂载\n        render: h => h(App)\n    })\n    return { app, router, store }\n}\n```\n\n服务器端渲染的是应用程序的\"快照\"，如果应用依赖于⼀些异步数据，那么在开始渲染之前，需要先预取和解析好这些数据\n\n在`store`进行一步数据获取\n\n```js\nexport function createStore() {\n    return new Vuex.Store({\n        mutations: {\n            // 加⼀个初始化\n            init(state, count) {\n                state.count = count;\n            },\n        },\n        actions: {\n            // 加⼀个异步请求count的action\n            getCount({ commit }) {\n                return new Promise(resolve => {\n                    setTimeout(() => {\n                        commit(\"init\", Math.random() * 100);\n                        resolve();\n                    }, 1000);\n                });\n            },\n        },\n    });\n}\n```\n\n组件中的数据预取逻辑\n\n```js\nexport default {\n    asyncData({ store, route }) { // 约定预取逻辑编写在预取钩⼦asyncData中\n        // 触发 action 后，返回 Promise 以便确定请求结果\n        return store.dispatch(\"getCount\");\n    }\n};\n```\n\n服务端数据预取，`entry-server.js`\n\n```js\nimport { createApp } from \"./app\";\nexport default context => {\n    return new Promise((resolve, reject) => {\n        // 拿出store和router实例\n        const { app, router, store } = createApp(context);\n        router.push(context.url);\n        router.onReady(() => {\n            // 获取匹配的路由组件数组\n            const matchedComponents = router.getMatchedComponents();\n\n            // 若⽆匹配则抛出异常\n            if (!matchedComponents.length) {\n                return reject({ code: 404 });\n            }\n\n            // 对所有匹配的路由组件调⽤可能存在的`asyncData()`\n            Promise.all(\n                matchedComponents.map(Component => {\n                    if (Component.asyncData) {\n                        return Component.asyncData({\n                            store,\n                            route: router.currentRoute,\n                        });\n                    }\n                }),\n            )\n                .then(() => {\n                // 所有预取钩⼦ resolve 后，\n                // store 已经填充⼊渲染应⽤所需状态\n                // 将状态附加到上下⽂，且 `template` 选项⽤于 renderer 时，\n                // 状态将⾃动序列化为 `window.__INITIAL_STATE__`，并注⼊ HTML\n                context.state = store.state;\n\n                resolve(app);\n            })\n                .catch(reject);\n        }, reject);\n    });\n};\n```\n\n客户端在挂载到应用程序之前，`store` 就应该获取到状态，`entry-client.js`\n\n```js\n// 导出store\nconst { app, router, store } = createApp();\n// 当使⽤ template 时，context.state 将作为 window.__INITIAL_STATE__ 状态⾃动嵌⼊到最终的 HTML \n// 在客户端挂载到应⽤程序之前，store 就应该获取到状态：\nif (window.__INITIAL_STATE__) {\n    store.replaceState(window.__INITIAL_STATE__);\n}\n```\n\n客户端数据预取处理，`main.js`\n\n```js\nVue.mixin({\n    beforeMount() {\n        const { asyncData } = this.$options;\n        if (asyncData) {\n            // 将获取数据操作分配给 promise\n            // 以便在组件中，我们可以在数据准备就绪后\n            // 通过运⾏ `this.dataPromise.then(...)` 来执⾏其他任务\n            this.dataPromise = asyncData({\n                store: this.$store,\n                route: this.$route,\n            });\n        }\n    },\n});\n```\n\n修改服务器启动文件\n\n```js\n// 获取⽂件路径\nconst resolve = dir => require('path').resolve(__dirname, dir)\n// 第 1 步：开放dist/client⽬录，关闭默认下载index⻚的选项，不然到不了后⾯路由\napp.use(express.static(resolve('../dist/client'), {index: false}))\n// 第 2 步：获得⼀个createBundleRenderer\nconst { createBundleRenderer } = require(\"vue-server-renderer\");\n// 第 3 步：服务端打包⽂件地址\nconst bundle = resolve(\"../dist/server/vue-ssr-server-bundle.json\");\n// 第 4 步：创建渲染器\nconst renderer = createBundleRenderer(bundle, {\n    runInNewContext: false, // https://ssr.vuejs.org/zh/api/#runinnewcontext\n    template: require('fs').readFileSync(resolve(\"../public/index.html\"), \"utf8\"), // 宿主⽂件\n    clientManifest: require(resolve(\"../dist/client/vue-ssr-clientmanifest.json\")) // 客户端清单\n});\napp.get('*', async (req,res)=>{\n    // 设置url和title两个重要参数\n    const context = {\n        title:'ssr test',\n        url:req.url\n    }\n    const html = await renderer.renderToString(context);\n    res.send(html)\n})\n```\n\n\n\n### 小结\n\n- 使用`ssr`不存在单例模式，每次用户请求都会创建一个新的`vue`实例\n- 实现`ssr`需要实现服务端首屏渲染和客户端激活\n- 服务端异步获取数据`asyncData`可以分为首屏异步获取和切换组件获取\n  - 首屏异步获取数据，在服务端预渲染的时候就应该已经完成\n  - 切换组件通过`mixin`混入，在`beforeMount`钩子完成数据获取\n","level":3.5,"tagId":14}
{"_id":{"$oid":"61aa38533976eb00014e44bd"},"exerciseKey":"4bc2059f-c8c1-46f9-a768-0e43f8a06665","category":"QA","renderType":"md","title":"什么是点击劫持？如何防范点击劫持？","desc":null,"options":null,"explanation":"点击劫持是一种视觉欺骗的攻击手段，攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。\n\n我们可以在 http 相应头中设置 X-FRAME-OPTIONS 来防御用 iframe 嵌套的点击劫持攻击。通过不同的值，可以规定页面在特\n定的一些情况才能作为 iframe 来使用。","level":1,"tagId":21}
{"_id":{"$oid":"61aa3855cd02c30001dd2215"},"exerciseKey":"51f3a49c-32aa-432a-bc14-eaba466d9d12","category":"QA","renderType":"md","title":"说说Git 中 HEAD、工作树和索引之间的区别？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/2de056a0-fa40-11eb-991d-334fd31f0201.png)\n\n## 一、HEAD\n\n在`git`中，可以存在很多分支，其本质上是一个指向`commit`对象的可变指针，而`Head`是一个特别的指针，是一个指向你正在工作中的本地分支的指针\n\n简单来讲，就是你现在在哪儿，HEAD 就指向哪儿\n\n例如当前我们处于`master`分支，所以`HEAD`这个指针指向了`master`分支指针\n\n ![](https://static.vue-js.com/36cb0da0-fa40-11eb-991d-334fd31f0201.png)\n\n然后通过调用`git checkout test`切换到`test`分支，那么`HEAD`则指向`test`分支，如下图：\n\n ![](https://static.vue-js.com/3e86ba80-fa40-11eb-991d-334fd31f0201.png)\n\n但我们在`test`分支再一次`commit`信息的时候，`HEAD`指针仍然指向了`test`分支指针，而`test`分支指针已经指向了最新创建的提交，如下图：\n\n ![](https://static.vue-js.com/439839b0-fa66-11eb-991d-334fd31f0201.png)\n\n这个`HEAD`存储的位置就在`.git/HEAD`目录中，查看信息可以看到`HEAD`指向了另一个文件\n\n```cmd\n$ cat .git/HEAD\nref: refs/heads/master\n\n$ cat .git/refs/heads/master\n7406a10efcc169bbab17827aeda189aa20376f7f\n```\n\n这个文件的内容是一串哈希码，而这个哈希码正是`master`分支上最新的提交所对应的哈希码\n\n所以，当我们切换分支的时候，`HEAD`指针通常指向我们所在的分支，当我们在某个分支上创建新的提交时，分支指针总是会指向当前分支的最新提交\n\n所以，HEAD指针 ——–> 分支指针 ——–> 最新提交\n\n\n\n## 二、工作树和索引\n\n在`Git`管理下，大家实际操作的目录被称为工作树，也就是工作区域\n\n在数据库和工作树之间有索引，索引是为了向数据库提交作准备的区域，也被称为暂存区域\n\n ![](https://static.vue-js.com/46e5ac40-fa40-11eb-bc6f-3f06e1491664.png)\n\n`Git`在执行提交的时候，不是直接将工作树的状态保存到数据库，而是将设置在中间索引区域的状态保存到数据库\n\n因此，要提交文件，首先需要把文件加入到索引区域中。\n\n所以，凭借中间的索引，可以避免工作树中不必要的文件提交，还可以将文件修改内容的一部分加入索引区域并提交\n\n\n\n## 三、区别\n\n从所在的位置来看：\n\n- HEAD 指针通常指向我们所在的分支，当我们在某个分支上创建新的提交时，分支指针总是会指向当前分支的最新提交\n\n- 工作树是查看和编辑的（源）文件的实际内容\n\n- 索引是放置你想要提交给 git仓库文件的地方，如工作树的代码通过 git add 则添加到 git 索引中，通过git commit 则将索引区域的文件提交到 git 仓库中\n","level":3,"tagId":29}
{"_id":{"$oid":"61aa3856cd02c30001dd2219"},"exerciseKey":"54538af6-dc63-4f34-a9c9-0d76482e5558","category":"QA","renderType":"md","title":"“严格模式”是什么？","desc":null,"options":null,"explanation":"除了正常运行模式，ECMAscript 5添加了第二种运行模式：\"严格模式\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n\n设立\"严格模式\"的目的，主要有以下几个：\n\n```\n- 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n- 消除代码运行的一些不安全之处，保证代码运行的安全；\n- 提高编译器效率，增加运行速度；\n- 为未来新版本的Javascript做好铺垫。\n```\n\n\"严格模式\"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。\n\n另一方面，同样的代码，在\"严格模式\"中，可能会有不一样的运行结果；一些在\"正常模式\"下可以运行的语句，在\"严格模式\"下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。","level":1,"tagId":10}
{"_id":{"$oid":"61aa38590f30890001ab80df"},"exerciseKey":"5f152230-4bd8-4ae4-a44b-965bba8da8df","category":"QA","renderType":"md","title":"浏览器乱码的原因是什么？如何解决？","desc":null,"options":null,"explanation":"## 产生乱码的原因：\n\n* 网页源代码是gbk的编码，而内容中的中文字是utf-8编码的，这样浏览器打开即会出现html乱码。反之也会出现乱码；\n* html网页编码是gbk，而程序从数据库中调出呈现是utf-8编码的内容也会造成编码乱码；\n* 浏览器不能自动检测网页编码，造成网页乱码。\n\n## 解决办法\n\n* 使用软件进行编辑HTML网页内容；\n* 如果网页设置编码是gbk，而数据库储存数据编码格式是UTF-8，此时需要程序查询数据库数据显示数据前进程序转码；\n* 如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换；\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa385c291c0100017ee1fa"},"exerciseKey":"6a7426e0-2423-42c7-aa9f-55a67290b8db","category":"QA","renderType":"md","title":"怎么使用 git 将多次提交压缩成一次提交？","desc":null,"options":null,"explanation":"在使用 Git 作为版本控制的时候，我们可能会由于各种各样的原因提交了许多临时的 commit，而这些 commit 拼接起来才是完整的任务。那么我们为了避免太多的 commit 而造成版本控制的混乱，通常我们推荐将这些 commit 合并成一个。\n\n* 查看提交历史，git log\n\n首先你要知道自己想合并的是哪几个提交，可以使用git log命令来查看提交历史，假如最近4条历史如下：\n\n```\ncommit 3ca6ec340edc66df13423f36f52919dfa3......\n\ncommit 1b4056686d1b494a5c86757f9eaed844......\n\ncommit 53f244ac8730d33b353bee3b24210b07......\n\ncommit 3a4226b4a0b6fa68783b07f1cee7b688.......\n```\n\n历史记录是按照时间排序的，时间近的排在前面。\n\n* git rebase\n\n想要合并1-3条，有两个方法：\n\n1.从HEAD版本开始往过去数3个版本\n```\ngit rebase -i HEAD~3\n```\n\n2.指名要合并的版本之前的版本号\n```\ngit rebase -i 3a4226b\n```\n请注意3a4226b这个版本是不参与合并的，可以把它当做一个坐标\n\n* 选取要合并的提交\n\n1.执行了rebase命令之后，会弹出一个窗口，头几行如下：\n```\npick 3ca6ec3   '注释**********'\n\npick 1b40566   '注释*********'\n\npick 53f244a   '注释**********'\n```\n\n2.将pick改为squash或者s,之后保存并关闭文本编辑窗口即可。改完之后文本内容如下：\n\n```\npick 3ca6ec3   '注释**********'\n\ns 1b40566   '注释*********'\n\ns 53f244a   '注释**********'\n```\n\n3.然后保存退出，Git会压缩提交历史，如果有冲突，需要修改，修改的时候要注意，保留最新的历史，不然我们的修改就丢弃了。修改以后要记得敲下面的命令：\n```\ngit add .  \n\ngit rebase --continue  \n```\n\n如果你想放弃这次压缩的话，执行以下命令：\n\n```\ngit rebase --abort  \n```\n\n4.如果没有冲突，或者冲突已经解决，则会出现如下的编辑窗口：\n```\n# This is a combination of 4 commits.  \n#The first commit’s message is:  \n注释......\n# The 2nd commit’s message is:  \n注释......\n# The 3rd commit’s message is:  \n注释......\n# Please enter the commit message for your changes. Lines starting # with ‘#’ will be ignored, and an empty message aborts the commit.\n```\n\n5.输入wq保存并推出, 再次输入git log查看 commit 历史信息，你会发现这两个 commit 已经合并了。","level":3,"tagId":29}
{"_id":{"$oid":"61aa385e91a75000018d2cef"},"exerciseKey":"71637418-9f70-4504-9eed-ab1f3d6c702d","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst colorConfig = {\n  red: true,\n  blue: false,\n  green: true,\n  black: true,\n  yellow: false,\n}\n\nconst colors = [\"pink\", \"red\", \"blue\"]\n\nconsole.log(colorConfig.colors[1])\n```","options":"{\"options\":[\"true\",\"false\",\"undefined\",\"TypeError\"],\"isMulti\":false,\"answer\":[3]}","explanation":"在JavaScript中，我们有两种访问对象属性的方法：括号表示法或点表示法。 在此示例中，我们使用点表示法（`colorConfig.colors`）代替括号表示法（`colorConfig [“ colors”]`）。\n使用点表示法，JavaScript会尝试使用该确切名称在对象上查找属性。 在此示例中，JavaScript尝试在colorconfig对象上找到名为colors的属性。 没有名为“colors”的属性，因此返回“undefined”。\n然后，我们尝试使用`[1]`访问第一个元素的值。 我们无法对未定义的值执行此操作，因此会抛出`Cannot read property '1' of undefined`。\nJavaScript解释（或取消装箱）语句。 当我们使用方括号表示法时，它会看到第一个左方括号`[`并一直进行下去，直到找到右方括号`]`。 只有这样，它才会评估该语句。 如果我们使用了colorConfig [colors [1]]，它将返回colorConfig对象上red属性的值。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3860cd02c30001dd2268"},"exerciseKey":"758b3c03-bac2-4d4f-a900-63f478a1e770","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nasync function* range(start, end) {\n\tfor (let i = start; i <= end; i++) {\n\t\tyield Promise.resolve(i);\n\t}\n}\n\n(async () => {\n\tconst gen = range(1, 3);\n\tfor await (const item of gen) {\n\t\tconsole.log(item);\n\t}\n})();\n```","options":"{\"options\":[\"Promise {1} Promise {2} Promise {3}\",\"Promise {<pending>} Promise {<pending>} Promise {<pending>}\",\"1 2 3\",\"undefined undefined undefined\"],\"isMulti\":false,\"answer\":[2]}","explanation":"我们给 函数range 传递： `Promise{1}`, `Promise{2}`, `Promise{3}`，Generator 函数 `range` 返回一个全是 async object promise 数组。我们将 async object 赋值给变量 `gen`，之后我们使用`for await ... of` 进行循环遍历。我们将返回的 Promise 实例赋值给 `item`： 第一个返回 `Promise{1}`， 第二个返回 `Promise{2}`，之后是 `Promise{3}`。因为我们正 _awaiting_ `item` 的值，resolved 状态的 promsie，promise数组的resolved _值_ 以此为： `1`，`2`，`3`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa383e85c5f70001542ea1"},"exerciseKey":"01c20a11-d5c8-4e32-bbb2-a8d3a5da1961","category":"QA","renderType":"md","title":"如何将 unknown 类型指定为一个更具体的类型？","desc":null,"options":null,"explanation":"* 使用 typeof 进行类型判断（这些缩小类型范围的技术都有助于TS基于控制流程下的类型分析）\n```ts\n  function unknownToString(value: unknown): string {\n    if (typeof value === \"string\") {\n     return value;\n    }\n  \n    return String(value);\n  }\n```\n\n* 对 unknown 类型使用类型断言\n\n要强制编译器信任类型为 unknown 的值为给定类型，则可以使用类型断言：\n\n```ts\n  const value: unknown = \"Hello World\";\n  const foo: string = value; // Error\n  const bar: string = value as string; // OK\n```\n\n断言错了时语法能通过检测，但是运行的时候就会报错了！\n\n```ts\n  const value: unknown = \"Hello World\";\n\n  const bar: number = value as number; // runtime Error\n```","level":2,"tagId":19}
{"_id":{"$oid":"61aa384239bf10000191c916"},"exerciseKey":"1098e46f-224f-4edb-89d2-b5ca0c5cfe68","category":"QA","renderType":"md","title":"说说对 TypeScript 中命名空间与模块的理解？区别？","desc":null,"options":null,"explanation":"## 一、模块\n\n`TypeScript` 与` ECMAScript` 2015 一样，任何包含顶级 `import` 或者 `export` 的文件都被当成一个模块\n\n相反地，如果一个文件不带有顶级的`import`或者`export`声明，那么它的内容被视为全局可见的\n\n例如我们在在一个 `TypeScript` 工程下建立一个文件 `1.ts`，声明一个变量`a`，如下：\n\n```ts\nconst a = 1\n```\n\n然后在另一个文件同样声明一个变量`a`，这时候会出现错误信息\n\n ![](https://static.vue-js.com/a239d970-137e-11ec-a752-75723a64e8f5.png)\n\n提示重复声明`a`变量，但是所处的空间是全局的\n\n如果需要解决这个问题，则通过`import`或者`export`引入模块系统即可，如下：\n\n```ts\nconst a = 10;\n\nexport default a\n```\n\n在`typescript`中，`export`关键字可以导出变量或者类型，用法与`es6`模块一致，如下：\n\n```ts\nexport const a = 1\nexport type Person = {\n    name: String\n}\n```\n\n通过`import` 引入模块，如下：\n\n```ts\nimport { a, Person } from './export';\n```\n\n\n\n## 二、命名空间\n\n命名空间一个最明确的目的就是解决重名问题\n\n命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的\n\n这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中\n\n`TypeScript` 中命名空间使用 `namespace` 来定义，语法格式如下：\n\n```ts\nnamespace SomeNameSpaceName {\n   export interface ISomeInterfaceName {      }\n   export class SomeClassName {      }\n}\n```\n\n以上定义了一个命名空间 `SomeNameSpaceName`，如果我们需要在外部可以调用 `SomeNameSpaceName` 中的类和接口，则需要在类和接口添加 `export` 关键字\n\n使用方式如下：\n\n```ts\nSomeNameSpaceName.SomeClassName\n```\n\n命名空间本质上是一个对象，作用是将一系列相关的全局变量组织到一个对象的属性，如下：\n\n```ts\nnamespace Letter {\n  export let a = 1;\n  export let b = 2;\n  export let c = 3;\n  // ...\n  export let z = 26;\n}\n```\n\n编译成`js`如下：\n\n```js\nvar Letter;\n(function (Letter) {\n    Letter.a = 1;\n    Letter.b = 2;\n    Letter.c = 3;\n    // ...\n    Letter.z = 26;\n})(Letter || (Letter = {}));\n```\n\n\n\n\n\n## 三、区别\n\n- 命名空间是位于全局命名空间下的一个普通的带有名字的  JavaScript  对象，使用起来十分容易。但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中\n\n- 像命名空间一样，模块可以包含代码和声明。 不同的是模块可以声明它的依赖\n\n- 在正常的TS项目开发过程中并不建议用命名空间，但通常在通过 d.ts 文件标记 js 库类型的时候使用命名空间，主要作用是给编译器编写代码的时候参考使用\n\n","level":1,"tagId":19}
{"_id":{"$oid":"61aa3842c2d0220001c96401"},"exerciseKey":"1176d873-74da-4e0d-87b9-034c1287488a","category":"QA","renderType":"html","title":"网络劫持","desc":"<p></p>","options":null,"explanation":"<ul><li><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\">DNS劫持（涉嫌违法）：修改运行商的 DNS 记录，重定向到其他网站。DNS 劫持是违法的行为，目前 DNS 劫持已被监管，现在很少见 DNS 劫持</span></span></li><li><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\">HTTP劫持：前提有 HTTP 请求。因 HTTP 是明文传输，运营商便可借机修改 HTTP 响应内容（如加广告）。</span></span></li></ul><p><strong><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\">预防方案</span></span></strong></p><p></p><p> <span style=\"color:#24292e\"><span style=\"background-color:#ffffff\">全站 HTTPS</span></span></p>","level":2.5,"tagId":21}
{"_id":{"$oid":"61aa3846796412000191739e"},"exerciseKey":"1db9414f-b160-4cf6-9a3c-32d8b7acb4ff","category":"QA","renderType":"md","title":"说说你对webpack的理解？解决了什么问题？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/898ed570-a578-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、背景\n\n`Webpack` 最初的目标是实现前端项目的模块化，旨在更高效地管理和维护项目中的每一个资源\n\n#### 模块化\n\n最早的时候，我们会通过文件划分的形式实现模块化，也就是将每个功能及其相关状态数据各自单独放到不同的` JS` 文件中\n\n约定每个文件是一个独立的模块，然后再将这些`js`文件引入到页面，一个`script`标签对应一个模块，然后调用模块化的成员\n\n```html\n<script src=\"module-a.js\"></script>\n<script src=\"module-b.js\"></script>\n```\n\n但这种模块弊端十分的明显，模块都是在全局中工作，大量模块成员污染了环境，模块与模块之间并没有依赖关系、维护困难、没有私有空间等问题\n\n项目一旦变大，上述问题会尤其明显\n\n随后，就出现了命名空间方式，规定每个模块只暴露一个全局对象，然后模块的内容都挂载到这个对象中\n\n```js\nwindow.moduleA = {\n  method1: function () {\n    console.log('moduleA#method1')\n  }\n}\n```\n\n这种方式也并没有解决第一种方式的依赖等问题\n\n再后来，我们使用立即执行函数为模块提供私有空间，通过参数的形式作为依赖声明，如下\n\n```js\n// module-a.js\n(function ($) {\n  var name = 'module-a'\n\n  function method1 () {\n    console.log(name + '#method1')\n    $('body').animate({ margin: '200px' })\n  }\n    \n  window.moduleA = {\n    method1: method1\n  }\n})(jQuery)\n```\n\n上述的方式都是早期解决模块的方式，但是仍然存在一些没有解决的问题。例如，我们是用过`script`标签在页面引入这些模块的，这些模块的加载并不受代码的控制，时间一久维护起来也十分的麻烦\n\n理想的解决方式是，在页面中引入一个` JS `入口文件，其余用到的模块可以通过代码控制，按需加载进来\n\n除了模块加载的问题以外，还需要规定模块化的规范，如今流行的则是`CommonJS `、`ES Modules`\n\n\n## 二、问题\n\n从后端渲染的`JSP`、`PHP`，到前端原生`JavaScript`，再到`jQuery`开发，再到目前的三大框架`Vue`、`React`、`Angular`\n\n开发方式，也从`javascript`到后面的`es5`、`es6、7、8、9、10`，再到`typescript`，包括编写`CSS`的预处理器`less`、`scss`等\n\n现代前端开发已经变得十分的复杂，所以我们开发过程中会遇到如下的问题：\n\n- 需要通过模块化的方式来开发\n- 使用一些高级的特性来加快我们的开发效率或者安全性，比如通过ES6+、TypeScript开发脚本逻辑，通过sass、less等方式来编写css样式代码\n- 监听文件的变化来并且反映到浏览器上，提高开发的效率\n- JavaScript 代码需要模块化，HTML 和 CSS 这些资源文件也会面临需要被模块化的问题\n- 开发完成后我们还需要将代码进行压缩、合并以及其他相关的优化\n\n而`webpack`恰巧可以解决以上问题\n\n\n## 三、是什么\n\n`webpack` 是一个用于现代` JavaScript `应用程序的静态模块打包工具\n\n- 静态模块\n\n这里的静态模块指的是开发阶段，可以被 `webpack` 直接引用的资源（可以直接被获取打包进`bundle.js`的资源）\n\n当 `webpack `处理应用程序时，它会在内部构建一个依赖图，此依赖图对应映射到项目所需的每个模块（不再局限`js`文件），并生成一个或多个 `bundle`\n\n ![](https://static.vue-js.com/9ce194a0-a578-11eb-85f6-6fac77c0c9b3.png)\n\n#### `webpack`的能力：\n\n**编译代码能力**，提高效率，解决浏览器兼容问题\n![](https://static.vue-js.com/c5c2d360-a592-11eb-ab90-d9ae814b240d.png)\n**模块整合能力**，提高性能，可维护性，解决浏览器频繁请求文件的问题\n![](https://static.vue-js.com/d306d260-a592-11eb-ab90-d9ae814b240d.png)\n**万物皆可模块能力**，项目维护性增强，支持不同种类的前端模块类型，统一的模块化方案，所有资源文件的加载都可以通过代码控制\n![](https://static.vue-js.com/e3c5a040-a592-11eb-ab90-d9ae814b240d.png)\n","level":1,"tagId":28}
{"_id":{"$oid":"61aa38470f30890001ab8053"},"exerciseKey":"22408f82-1fd7-4d7d-a24d-7bb9cad2aee3","category":"QA","renderType":"md","title":"babel 和 babel ployfill 有什么关系？","desc":null,"options":null,"explanation":"* 先来理解下 babel 到底是做什么的？\n\n简单来讲，babel解决语法层面的问题。用于将ES6+的高级语法转为ES5。\n\n* babel polyfill 又是做什么的？\n\n如果要解决API层面的问题，需要使用垫片。比如常见的有babel-polyfill、babel-runtime 和 babel-plugin-transform-runtime。\n","level":3,"tagId":29}
{"_id":{"$oid":"61aa3849ff0573000165b229"},"exerciseKey":"27491e6c-d92d-4d41-9bff-4781665945df","category":"QA","renderType":"md","title":"0.1+0.2为什么不等于0.3？","desc":null,"options":null,"explanation":"0.1和0.2在转换成二进制后会无限循环，由于标准位数的限制后面多余的位数会被截掉，此时就已经出现了精度的损失，相加后因浮点数小数位的限制而截断的二进制数字在转换为十进制就会变成 0.30000000000000004。","level":2,"tagId":10}
{"_id":{"$oid":"61aa38493dd7f70001832ecd"},"exerciseKey":"28305428-953c-4daa-9b4e-f3d01b694017","category":"QA","renderType":"md","title":"说说你对slot的理解？slot使用场景有哪些？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/141ca660-3dbc-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、slot是什么\n\n在HTML中 `slot` 元素 ，作为 `Web Components` 技术套件的一部分，是Web组件内的一个占位符\n\n该占位符可以在后期使用自己的标记语言填充\n\n举个栗子\n```html\n<template id=\"element-details-template\">\n  <slot name=\"element-name\">Slot template</slot>\n</template>\n<element-details>\n  <span slot=\"element-name\">1</span>\n</element-details>\n<element-details>\n  <span slot=\"element-name\">2</span>\n</element-details>\n```\n`template`不会展示到页面中，需要用先获取它的引用，然后添加到`DOM`中，\n\n```js\ncustomElements.define('element-details',\n  class extends HTMLElement {\n    constructor() {\n      super();\n      const template = document\n        .getElementById('element-details-template')\n        .content;\n      const shadowRoot = this.attachShadow({mode: 'open'})\n        .appendChild(template.cloneNode(true));\n  }\n})\n```\n\n在`Vue`中的概念也是如此\n\n`Slot` 艺名插槽，花名“占坑”，我们可以理解为`solt`在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中`slot`位置），作为承载分发内容的出口\n\n可以将其类比为插卡式的FC游戏机，游戏机暴露卡槽（插槽）让用户插入不同的游戏磁条（自定义内容）\n\n放张图感受一下\n![](https://static.vue-js.com/63c0dff0-3dbd-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 二、使用场景\n\n通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理\n\n如果父组件在使用到一个复用组件的时候，获取这个组件在不同的地方有少量的更改，如果去重写组件是一件不明智的事情\n\n通过`slot`插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用\n\n比如布局组件、表格列、下拉选、弹框显示内容等\n\n## 三、分类\n\n`slot`可以分来以下三种：\n\n- 默认插槽\n- 具名插槽\n- 作用域插槽\n\n\n\n### 默认插槽\n\n子组件用`<slot>`标签来确定渲染的位置，标签里面可以放`DOM`结构，当父组件使用的时候没有往插槽传入内容，标签内`DOM`结构就会显示在页面\n\n父组件在使用的时候，直接在子组件的标签内写入内容即可\n\n子组件`Child.vue`\n\n```js\n<template>\n    <slot>\n      <p>插槽后备的内容</p>\n    </slot>\n</template>\n```\n\n父组件\n\n```js\n<Child>\n  <div>默认插槽</div>  \n</Child>\n```\n\n\n\n### 具名插槽\n\n子组件用`name`属性来表示插槽的名字，不传为默认插槽\n\n父组件中在使用时在默认插槽的基础上加上`slot`属性，值为子组件插槽`name`属性值\n\n子组件`Child.vue`\n\n```js\n<template>\n    <slot>插槽后备的内容</slot>\n  <slot name=\"content\">插槽后备的内容</slot>\n</template>\n```\n\n父组件\n\n```js\n<child>\n    <template v-slot:default>具名插槽</template>\n    <!-- 具名插槽⽤插槽名做参数 -->\n    <template v-slot:content>内容...</template>\n</child>\n```\n\n\n\n### 作用域插槽\n\n子组件在作用域上绑定属性来将子组件的信息传给父组件使用，这些属性会被挂在父组件`v-slot`接受的对象上\n\n父组件中在使用时通过`v-slot:`（简写：#）获取子组件的信息，在内容中使用\n\n子组件`Child.vue`\n\n```js\n<template> \n  <slot name=\"footer\" testProps=\"子组件的值\">\n          <h3>没传footer插槽</h3>\n    </slot>\n</template>\n```\n\n父组件\n\n```js\n<child> \n    <!-- 把v-slot的值指定为作⽤域上下⽂对象 -->\n    <template v-slot:default=\"slotProps\">\n      来⾃⼦组件数据：{{slotProps.testProps}}\n    </template>\n  <template #default=\"slotProps\">\n      来⾃⼦组件数据：{{slotProps.testProps}}\n    </template>\n</child>\n```\n\n\n\n### 小结：\n\n- `v-slot`属性只能在`<template>`上使用，但在只有默认插槽时可以在组件标签上使用\n- 默认插槽名为`default`，可以省略default直接写`v-slot`\n- 缩写为`#`时不能不写参数，写成`#default`\n- 可以通过解构获取`v-slot={user}`，还可以重命名`v-slot=\"{user: newName}\"`和定义默认值`v-slot=\"{user = '默认值'}\"`\n\n\n\n## 四、原理分析\n\n`slot`本质上是返回`VNode`的函数，一般情况下，`Vue`中的组件要渲染到页面上需要经过`template -> render function -> VNode -> DOM` 过程，这里看看`slot`如何实现：\n\n编写一个`buttonCounter`组件，使用匿名插槽\n\n```js\nVue.component('button-counter', {\n  template: '<div> <slot>我是默认内容</slot></div>'\n})\n```\n\n使用该组件\n\n```js\nnew Vue({\n    el: '#app',\n    template: '<button-counter><span>我是slot传入内容</span></button-counter>',\n    components:{buttonCounter}\n})\n```\n\n获取`buttonCounter`组件渲染函数\n\n```js\n(function anonymous(\n) {\nwith(this){return _c('div',[_t(\"default\",[_v(\"我是默认内容\")])],2)}\n})\n```\n\n`_v`表示穿件普通文本节点，`_t`表示渲染插槽的函数\n\n渲染插槽函数`renderSlot`（做了简化）\n\n```js\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  // 得到渲染插槽内容的函数    \n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  // 如果存在插槽渲染函数，则执行插槽渲染函数，生成nodes节点返回\n  // 否则使用默认值\n  nodes = scopedSlotFn(props) || fallback;\n  return nodes;\n}\n```\n\n`name`属性表示定义插槽的名字，默认值为`default`，`fallback`表示子组件中的`slot`节点的默认值\n\n关于`this.$scopredSlots`是什么，我们可以先看看`vm.slot`\n\n```js\nfunction initRender (vm) {\n  ...\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  ...\n}\n```\n\n`resolveSlots`函数会对`children`节点做归类和过滤处理，返回`slots`\n\n```js\nfunction resolveSlots (\n    children,\n    context\n  ) {\n    if (!children || !children.length) {\n      return {}\n    }\n    var slots = {};\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var data = child.data;\n      // remove slot attribute if the node is resolved as a Vue slot node\n      if (data && data.attrs && data.attrs.slot) {\n        delete data.attrs.slot;\n      }\n      // named slots should only be respected if the vnode was rendered in the\n      // same context.\n      if ((child.context === context || child.fnContext === context) &&\n        data && data.slot != null\n      ) {\n        // 如果slot存在(slot=\"header\") 则拿对应的值作为key\n        var name = data.slot;\n        var slot = (slots[name] || (slots[name] = []));\n        // 如果是tempalte元素 则把template的children添加进数组中，这也就是为什么你写的template标签并不会渲染成另一个标签到页面\n        if (child.tag === 'template') {\n          slot.push.apply(slot, child.children || []);\n        } else {\n          slot.push(child);\n        }\n      } else {\n        // 如果没有就默认是default\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n    // ignore slots that contains only whitespace\n    for (var name$1 in slots) {\n      if (slots[name$1].every(isWhitespace)) {\n        delete slots[name$1];\n      }\n    }\n    return slots\n}\n```\n\n`_render`渲染函数通过`normalizeScopedSlots`得到`vm.$scopedSlots`\n\n```js\nvm.$scopedSlots = normalizeScopedSlots(\n  _parentVnode.data.scopedSlots,\n  vm.$slots,\n  vm.$scopedSlots\n);\n```\n\n作用域插槽中父组件能够得到子组件的值是因为在`renderSlot`的时候执行会传入`props`，也就是上述`_t`第三个参数，父组件则能够得到子组件传递过来的值\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa384dc2d0220001c96445"},"exerciseKey":"3476a4fe-f6a3-4a70-a364-edef0bb45fa8","category":"Choice","renderType":"md","title":"如何能打印出 console.log 语句后注释掉的值？","desc":"```javascript\nfunction* startGame() {\n  const answer = yield \"Do you love JavaScript?\";\n  if (answer !== \"Yes\") {\n    return \"Oh wow... Guess we're gone here\";\n  }\n  return \"JavaScript loves you back ❤️\";\n}\n\nconst game = startGame();\nconsole.log(/* 1 */); // Do you love JavaScript?\nconsole.log(/* 2 */); // JavaScript loves you back ❤️\n```","options":"{\"options\":[\"game.next(\\\"Yes\\\").value and game.next().value\",\"game.next.value(\\\"Yes\\\") and game.next.value()\",\"game.next().value and game.next(\\\"Yes\\\").value\",\"game.next.value() and game.next.value(\\\"Yes\\\")\"],\"isMulti\":false,\"answer\":[2]}","explanation":"`generator`函数在遇到`yield`关键字时会“暂停”其执行。 首先，我们需要让函数产生字符串`Do you love JavaScript?`，这可以通过调用`game.next().value`来完成。上述函数的第一行就有一个`yield`关键字，那么运行立即停止了，`yield`表达式本身没有返回值，或者说总是返回`undefined`, 这意味着此时变量 `答案` 为`undefined`\n`next`方法可以带一个参数，该参数会被当作上一个 `yield` 表达式的返回值。当我们调用`game.next(\"Yes\").value`时，先前的 `yield` 的返回值将被替换为传递给`next()`函数的参数`\"Yes\"`。此时变量 `答案` 被赋值为 `\"Yes\"`，`if`语句返回`false`，所以`JavaScript loves you back ❤️`被打印。","level":1,"tagId":32}
{"_id":{"$oid":"61aa384eb804f8000122aa25"},"exerciseKey":"3805f290-f20b-4ded-8805-e963ed7f243e","category":"QA","renderType":"md","title":"说说对 Node 中的 process 的理解？有哪些常用方法？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/4f7866b0-c2b2-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n`process` 对象是一个全局变量，提供了有关当前 `Node.js `进程的信息并对其进行控制，作为一个全局变量\n\n我们都知道，进程计算机系统进行资源分配和调度的基本单位，是操作系统结构的基础，是线程的容器\n\n当我们启动一个`js`文件，实际就是开启了一个服务进程，每个进程都拥有自己的独立空间地址、数据栈，像另一个进程无法访问当前进程的变量、数据结构，只有数据通信后，进程之间才可以数据共享\n\n由于`JavaScript`是一个单线程语言，所以通过`node xxx`启动一个文件后，只有一条主线程\n\n\n\n\n\n## 二、属性与方法\n\n关于`process`常见的属性有如下：\n\n- process.env：环境变量，例如通过 `process.env.NODE_ENV 获取不同环境项目配置信息\n- process.nextTick：这个在谈及 `EventLoop` 时经常为会提到\n- process.pid：获取当前进程id\n- process.ppid：当前进程对应的父进程\n- process.cwd()：获取当前进程工作目录，\n- process.platform：获取当前进程运行的操作系统平台\n- process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值\n- 进程事件： process.on(‘uncaughtException’,cb) 捕获异常信息、 process.on(‘exit’,cb）进程推出监听\n- 三个标准流： process.stdout 标准输出、 process.stdin 标准输入、 process.stderr 标准错误输出\n- process.title 指定进程名称，有的时候需要给进程指定一个名称\n\n\n\n下面再稍微介绍下某些方法的使用：\n\n### process.cwd()\n\n返回当前 `Node `进程执行的目录\n\n一个` Node` 模块 `A` 通过 NPM 发布，项目 `B` 中使用了模块 `A`。在 `A` 中需要操作 `B` 项目下的文件时，就可以用 `process.cwd()` 来获取 `B` 项目的路径\n\n\n\n### process.argv\n\n在终端通过 Node 执行命令的时候，通过 `process.argv` 可以获取传入的命令行参数，返回值是一个数组：\n\n- 0: Node 路径（一般用不到，直接忽略）\n- 1: 被执行的 JS 文件路径（一般用不到，直接忽略）\n- 2~n: 真实传入命令的参数\n\n所以，我们只要从 `process.argv[2]` 开始获取就好了\n\n```js\nconst args = process.argv.slice(2);\n```\n\n\n\n### process.env\n\n返回一个对象，存储当前环境相关的所有信息，一般很少直接用到。\n\n一般我们会在 `process.env` 上挂载一些变量标识当前的环境。比如最常见的用 `process.env.NODE_ENV` 区分 `development` 和 `production`\n\n在 `vue-cli` 的源码中也经常会看到 `process.env.VUE_CLI_DEBUG` 标识当前是不是 `DEBUG` 模式\n\n\n\n### process.nextTick()\n\n我们知道`NodeJs`是基于事件轮询，在这个过程中，同一时间只会处理一件事情\n\n在这种处理模式下，`process.nextTick()`就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行\n\n例如下面例子将一个`foo`函数在下一个时间点调用\n\n```js\nfunction foo() {\n    console.error('foo');\n}\n\nprocess.nextTick(foo);\nconsole.error('bar');\n```\n\n输出结果为`bar`、`foo`\n\n虽然下述方式也能实现同样效果：\n\n```js\nsetTimeout(foo, 0);\nconsole.log('bar');\n```\n\n两者区别在于：\n\n- process.nextTick()会在这一次event loop的call stack清空后（下一次event loop开始前）再调用callback\n- setTimeout()是并不知道什么时候call stack清空的，所以何时调用callback函数是不确定的\n","level":2,"tagId":18}
{"_id":{"$oid":"61aa384eff0573000165b250"},"exerciseKey":"3928ae37-e2f5-49ba-bfc1-7076ebc049f3","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nconst a = {}\nconst b = { key: 'b' }\nconst c = { key: 'c' }\n\na[b] = 123\na[c] = 456\n\nconsole.log(a[b])\n```","options":"{\"options\":[\"123\",\"456\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"对象的键被自动转换为字符串。我们试图将一个对象 `b` 设置为对象 `a` 的键，且相应的值为 `123`。\n然而，当字符串化一个对象时，它会变成 `\"[object Object]\"`。因此这里说的是，`a[\"[object Object]\"] = 123`。然后，我们再一次做了同样的事情，`c` 是另外一个对象，这里也有隐式字符串化，于是，`a[\"[object Object]\"] = 456`。\n然后，我们打印 `a[b]`，也就是 `a[\"[object Object]\"]`。之前刚设置为 `456`，因此返回的是 `456`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384fb804f8000122aa2d"},"exerciseKey":"394752d7-88aa-4512-bd7e-91711a3904b7","category":"QA","renderType":"md","title":"mete标签中的viewport 有什么用？","desc":null,"options":null,"explanation":"## 什么是 Viewport?\n\nviewport 是用户网页的可视区域。\n\nviewport 翻译为中文可以叫做\"视区\"。\n\n手机浏览器是把页面放在一个虚拟的\"窗口\"（viewport）中，通常这个虚拟的\"窗口\"（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。\n\n## 设置 Viewport\n\n一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下：\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n* width：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。\n* height：和 width 相对应，指定高度。\n* initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。\n* maximum-scale：允许用户缩放到的最大比例。\n* minimum-scale：允许用户缩放到的最小比例。\n* user-scalable：用户是否可以手动缩放。","level":2,"tagId":12}
{"_id":{"$oid":"61aa384f8e97d900018086c9"},"exerciseKey":"3bdbc545-1273-41a8-b93f-cb642dae0ada","category":"QA","renderType":"md","title":"如何在TypeScript中实现继承？","desc":null,"options":null,"explanation":"继承是一种从另一个类获取一个类的属性和行为的机制。它是OOPs语言的一个重要方面，并且具有从现有类创建新类的能力，继承成员的类称为基类，继承这些成员的类称为派生类。\n\n继承可以通过使用extend关键字来实现。我们可以通过下面的例子来理解它。\n```\nclass Shape {     \n   Area:number     \n   constructor(area:number) {     \n      this.Area = area    \n   }     \n}     \nclass Circle extends Shape {     \n   display():void {     \n      console.log(\"圆的面积: \"+this.Area)     \n   }     \n}    \nvar obj = new Circle(320);     \nobj.display()  \n```\n","level":2.5,"tagId":19}
{"_id":{"$oid":"61aa38533d5f3a0001af5578"},"exerciseKey":"483e37bb-b761-4231-82e8-4f6345a6df78","category":"QA","renderType":"md","title":"说说你对BOM的理解，以及常见的BOM对象有哪些？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/3e191c40-8089-11eb-85f6-6fac77c0c9b3.png)\r\n## 一、是什么\r\n\r\n`BOM` (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象\r\n\r\n其作用就是跟浏览器做一些交互效果,比如如何进行页面的后退，前进，刷新，浏览器的窗口发生变化，滚动条的滚动，以及获取客户的一些信息如：浏览器品牌版本，屏幕分辨率\r\n\r\n浏览器的全部内容可以看成`DOM`，整个浏览器可以看成`BOM`。区别如下：\r\n\r\n![](https://static.vue-js.com/482f33e0-8089-11eb-85f6-6fac77c0c9b3.png)\r\n## 二、window\r\n\r\n`Bom`的核心对象是`window`，它表示浏览器的一个实例\r\n\r\n在浏览器中，`window`对象有双重角色，即是浏览器窗口的一个接口，又是全局对象\r\n\r\n因此所有在全局作用域中声明的变量、函数都会变成`window`对象的属性和方法\r\n\r\n```js\r\nvar name = 'js每日一题';\r\nfunction lookName(){\r\n  alert(this.name);\r\n}\r\n\r\nconsole.log(window.name);  //js每日一题\r\nlookName();                //js每日一题\r\nwindow.lookName();         //js每日一题\r\n```\r\n\r\n关于窗口控制方法如下：\r\n\r\n- `moveBy(x,y)`：从当前位置水平移动窗体x个像素，垂直移动窗体y个像素，x为负数，将向左移动窗体，y为负数，将向上移动窗体\r\n- `moveTo(x,y)`：移动窗体左上角到相对于屏幕左上角的(x,y)点\r\n- `resizeBy(w,h)`：相对窗体当前的大小，宽度调整w个像素，高度调整h个像素。如果参数为负值，将缩小窗体，反之扩大窗体\r\n- `resizeTo(w,h)`：把窗体宽度调整为w个像素，高度调整为h个像素\r\n- `scrollTo(x,y)`：如果有滚动条，将横向滚动条移动到相对于窗体宽度为x个像素的位置，将纵向滚动条移动到相对于窗体高度为y个像素的位置\r\n- `scrollBy(x,y)`： 如果有滚动条，将横向滚动条向左移动x个像素，将纵向滚动条向下移动y个像素\r\n\r\n `window.open()` 既可以导航到一个特定的`url`，也可以打开一个新的浏览器窗口\r\n\r\n如果 `window.open()` 传递了第二个参数，且该参数是已有窗口或者框架的名称，那么就会在目标窗口加载第一个参数指定的URL\r\n\r\n```js\r\nwindow.open('htttp://www.vue3js.cn','topFrame')\r\n==> < a href=\" \" target=\"topFrame\"></ a>\r\n```\r\n\r\n`window.open()` 会返回新窗口的引用，也就是新窗口的 `window` 对象\r\n\r\n```js\r\nconst myWin = window.open('http://www.vue3js.cn','myWin')\r\n```\r\n\r\n`window.close()` 仅用于通过 `window.open()` 打开的窗口\r\n\r\n新创建的 `window` 对象有一个 `opener` 属性，该属性指向打开他的原始窗口对象\r\n\r\n\r\n## 三、location\r\n\r\n`url`地址如下：\r\n\r\n```js\r\nhttp://foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents\r\n```\r\n\r\n`location`属性描述如下：\r\n\r\n| 属性名   | 例子                                                   | 说明                                |\r\n| -------- | ------------------------------------------------------ | ----------------------------------- |\r\n| hash     | \"#contents\"                                            | utl中#后面的字符，没有则返回空串    |\r\n| host     | www.wrox.com:80                                        | 服务器名称和端口号                  |\r\n| hostname | www.wrox.com                                           | 域名，不带端口号                    |\r\n| href     | http://www.wrox.com:80/WileyCDA/?q=javascript#contents | 完整url                             |\r\n| pathname | \"/WileyCDA/\"                                           | 服务器下面的文件路径                |\r\n| port     | 80                                                     | url的端口号，没有则为空             |\r\n| protocol | http:                                                  | 使用的协议                          |\r\n| search   | ?q=javascript                                          | url的查询字符串，通常为？后面的内容 |\r\n\r\n除了 `hash `之外，只要修改` location `的一个属性，就会导致页面重新加载新` URL`\r\n\r\n`location.reload()`，此方法可以重新刷新当前页面。这个方法会根据最有效的方式刷新页面，如果页面自上一次请求以来没有改变过，页面就会从浏览器缓存中重新加载\r\n\r\n如果要强制从服务器中重新加载，传递一个参数`true`即可\r\n\r\n## 四、navigator\r\n\r\n`navigator` 对象主要用来获取浏览器的属性，区分浏览器类型。属性较多，且兼容性比较复杂\r\n\r\n下表列出了`navigator`对象接口定义的属性和方法：\r\n\r\n ![](https://static.vue-js.com/6797ab40-8089-11eb-ab90-d9ae814b240d.png)\r\n\r\n ![](https://static.vue-js.com/74096620-8089-11eb-ab90-d9ae814b240d.png)\r\n\r\n\r\n\r\n## 五、screen\r\n\r\n保存的纯粹是客户端能力信息，也就是浏览器窗口外面的客户端显示器的信息，比如像素宽度和像素高度\r\n\r\n ![](https://static.vue-js.com/7d6b21e0-8089-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n\r\n\r\n## 六、history\r\n\r\n`history`对象主要用来操作浏览器`URL`的历史记录，可以通过参数向前，向后，或者向指定`URL`跳转\r\n\r\n常用的属性如下：\r\n\r\n- `history.go()`\r\n\r\n接收一个整数数字或者字符串参数：向最近的一个记录中包含指定字符串的页面跳转，\r\n\r\n```js\r\nhistory.go('maixaofei.com')\r\n```\r\n\r\n当参数为整数数字的时候，正数表示向前跳转指定的页面，负数为向后跳转指定的页面\r\n\r\n```js\r\nhistory.go(3) //向前跳转三个记录\r\nhistory.go(-1) //向后跳转一个记录\r\n```\r\n\r\n- `history.forward()`：向前跳转一个页面\r\n- `history.back()`：向后跳转一个页面\r\n- `history.length`：获取历史记录数\r\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa3855cd02c30001dd2217"},"exerciseKey":"53a6d5df-e7b0-4f11-a1ee-c55fd1f1f8c2","category":"QA","renderType":"md","title":"如何实现jwt鉴权机制？说说你的思路","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/efff62b0-cd88-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、是什么\n\nJWT（JSON Web Token），本质就是一个字符串书写规范，如下图，作用是用来在用户和服务器之间传递安全可靠的信息\n\n![](https://static.vue-js.com/052904c0-cd89-11eb-ab90-d9ae814b240d.png)\n\n在目前前后端分离的开发过程中，使用`token`鉴权机制用于身份验证是最常见的方案，流程如下：\n\n- 服务器当验证用户账号和密码正确的时候，给用户颁发一个令牌，这个令牌作为后续用户访问一些接口的凭证\n- 后续访问会根据这个令牌判断用户时候有权限进行访问\n\n`Token`，分成了三部分，头部（Header）、载荷（Payload）、签名（Signature），并以`.`进行拼接。其中头部和载荷都是以`JSON`格式存放数据，只是进行了编码\n\n ![](https://static.vue-js.com/1175f990-cd89-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n### header\n\n每个JWT都会带有头部信息，这里主要声明使用的算法。声明算法的字段名为`alg`，同时还有一个`typ`的字段，默认`JWT`即可。以下示例中算法为HS256\n\n```json\n{  \"alg\": \"HS256\",  \"typ\": \"JWT\" } \n```\n\n因为JWT是字符串，所以我们还需要对以上内容进行Base64编码，编码后字符串如下：\n\n```tex\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9        \n```\n\n\n\n### payload\n\n载荷即消息体，这里会存放实际的内容，也就是`Token`的数据声明，例如用户的`id`和`name`，默认情况下也会携带令牌的签发时间`iat`，通过还可以设置过期时间，如下：\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n```\n\n同样进行Base64编码后，字符串如下：\n\n```tex\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n```\n\n\n\n### Signature\n\n签名是对头部和载荷内容进行签名，一般情况，设置一个`secretKey`，对前两个的结果进行`HMACSHA25`算法，公式如下：\n\n```js\nSignature = HMACSHA256(base64Url(header)+.+base64Url(payload),secretKey)\n```\n\n一旦前面两部分数据被篡改，只要服务器加密用的密钥没有泄露，得到的签名肯定和之前的签名不一致\n\n\n\n## 二、如何实现\n\n`Token`的使用分成了两部分：\n\n- 生成token：登录成功的时候，颁发token\n- 验证token：访问某些资源或者接口时，验证token\n\n\n\n### 生成 token\n\n借助第三方库`jsonwebtoken`，通过`jsonwebtoken` 的 `sign` 方法生成一个 `token`：\n\n- 第一个参数指的是 Payload\n\n- 第二个是秘钥，服务端特有\n\n- 第三个参数是 option，可以定义 token 过期时间\n\n```js\nconst crypto = require(\"crypto\"),\n  jwt = require(\"jsonwebtoken\");\n// TODO:使用数据库\n// 这里应该是用数据库存储，这里只是演示用\nlet userList = [];\n\nclass UserController {\n  // 用户登录\n  static async login(ctx) {\n    const data = ctx.request.body;\n    if (!data.name || !data.password) {\n      return ctx.body = {\n        code: \"000002\", \n        message: \"参数不合法\"\n      }\n    }\n    const result = userList.find(item => item.name === data.name && item.password === crypto.createHash('md5').update(data.password).digest('hex'))\n    if (result) {\n      // 生成token\n      const token = jwt.sign(  \n        {\n          name: result.name\n        },\n        \"test_token\", // secret\n        { expiresIn: 60 * 60 } // 过期时间：60 * 60 s\n      );\n      return ctx.body = {\n        code: \"0\",\n        message: \"登录成功\",\n        data: {\n          token\n        }\n      };\n    } else {\n      return ctx.body = {\n        code: \"000002\",\n        message: \"用户名或密码错误\"\n      };\n    }\n  }\n}\n\nmodule.exports = UserController;\n```\n\n在前端接收到`token`后，一般情况会通过`localStorage`进行缓存，然后将`token`放到`HTTP `请求头`Authorization` 中，关于`Authorization` 的设置，前面要加上 Bearer ，注意后面带有空格\n\n```js\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  config.headers.common['Authorization'] = 'Bearer ' + token; // 留意这里的 Authorization\n  return config;\n})\n```\n\n\n\n### 校验token\n\n使用 `koa-jwt` 中间件进行验证，方式比较简单\n\n```js\n/ 注意：放在路由前面\napp.use(koajwt({\n  secret: 'test_token'\n}).unless({ // 配置白名单\n  path: [/\\/api\\/register/, /\\/api\\/login/]\n}))\n```\n\n- secret 必须和 sign 时候保持一致\n- 可以通过 unless 配置接口白名单，也就是哪些 URL 可以不用经过校验，像登陆/注册都可以不用校验\n- 校验的中间件需要放在需要校验的路由前面，无法对前面的 URL 进行校验\n\n获取`token`用户的信息方法如下：\n\n```js\nrouter.get('/api/userInfo',async (ctx,next) =>{    const authorization =  ctx.header.authorization // 获取jwt    const token = authorization.replace('Beraer ','')    const result = jwt.verify(token,'test_token')    ctx.body = result\n```\n\n\n\n注意：上述的`HMA256`加密算法为单秘钥的形式，一旦泄露后果非常的危险\n\n在分布式系统中，每个子系统都要获取到秘钥，那么这个子系统根据该秘钥可以发布和验证令牌，但有些服务器只需要验证令牌\n\n这时候可以采用非对称加密，利用私钥发布令牌，公钥验证令牌，加密算法可以选择`RS256`\n\n\n## 三、优缺点\n\n优点：\n\n- json具有通用性，所以可以跨语言\n- 组成简单，字节占用小，便于传输\n- 服务端无需保存会话信息，很容易进行水平扩展\n- 一处生成，多处使用，可以在分布式系统中，解决单点登录问题\n- 可防护CSRF攻击\n\n缺点：\n\n- payload部分仅仅是进行简单编码，所以只能用于存储逻辑必需的非敏感信息\n- 需要保护好加密密钥，一旦泄露后果不堪设想\n- 为避免token被劫持，最好使用https协议\n\n","level":3.5,"tagId":18}
{"_id":{"$oid":"61aa38568e97d900018086ef"},"exerciseKey":"5570174b-5bd1-4e00-a9cf-49f6ae227758","category":"QA","renderType":"md","title":"canvas在标签上设置宽高，与在style中设置宽高有什么区别？","desc":null,"options":null,"explanation":"canvas标签的width和height是画布实际宽度和高度，绘制的图形都是在这个上面。\n\n而style的width和height是canvas在浏览器中被渲染的高度和宽度。\n\n如果canvas的width和height没指定或值不正确，就被设置成默认值。","level":1,"tagId":12}
{"_id":{"$oid":"61aa38560f30890001ab80c8"},"exerciseKey":"56056900-f049-488c-a973-9788cc708e7b","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst add = () => {\n  const cache = {};\n  return num => {\n    if (num in cache) {\n      return `From cache! ${cache[num]}`;\n    } else {\n      const result = num + 10;\n      cache[num] = result;\n      return `Calculated! ${result}`;\n    }\n  };\n};\n\nconst addFunction = add();\nconsole.log(addFunction(10));\nconsole.log(addFunction(10));\nconsole.log(addFunction(5 * 2));\n```","options":"{\"options\":[\"Calculated! 20 Calculated! 20 Calculated! 20\",\"Calculated! 20 From cache! 20 Calculated! 20\",\"Calculated! 20 From cache! 20 From cache! 20\",\"Calculated! 20 From cache! 20 Error\"],\"isMulti\":false,\"answer\":[2]}","explanation":"`add`函数是一个记忆函数。 通过记忆化，我们可以缓存函数的结果，以加快其执行速度。上述情况，我们创建一个`cache`对象，用于存储先前返回过的值。\n如果我们使用相同的参数多次调用`addFunction`函数，它首先检查缓存中是否已有该值，如果有，则返回缓存值，这将节省执行时间。如果没有，那么它将计算该值，并存储在缓存中。\n我们用相同的值三次调用了`addFunction`函数：\n在第一次调用，`num`等于`10`时函数的值尚未缓存，if语句`num in cache`返回`false`，else块的代码被执行：`Calculated! 20`，并且其结果被添加到缓存对象，`cache`现在看起来像`{10：20}`。\n第二次，`cache`对象包含`10`的返回值。 if语句 `num in cache` 返回`true`，`From cache! 20`被打印。\n第三次，我们将`5 * 2`(值为10)传递给函数。 `cache`对象包含`10`的返回值。 if语句 `num in cache` 返回`true`，`From cache! 20`被打印。","level":1.5,"tagId":32}
{"_id":{"$oid":"61aa38588e97d900018086fe"},"exerciseKey":"59da2c47-26e6-46d9-86ad-d76d75006f29","category":"QA","renderType":"md","title":"TypeScript中的 Declare 关键字有什么用？","desc":null,"options":null,"explanation":"JavaScript库或框架没有TypeScript声明文件。 但是，如果要在TypeScript文件中使用它们而没有任何编译错误，则必须使用declare关键字。 declare关键字用于环境声明和您要定义可能在其他位置存在的变量的方法。\n\n如果要在我们的TypeScript代码中使用该库，则可以使用以下代码：\n\n```typescript\ndeclare var myLibrary;\n```\n\nTypeScript运行时会将myLibrary变量分配为 any。\n\n","level":1,"tagId":19}
{"_id":{"$oid":"61aa3859291c0100017ee1e5"},"exerciseKey":"5def10e9-7825-4bd4-a76e-6d7eb555a2ce","category":"QA","renderType":"md","title":"简单描述从输入网址到页面显示的过程","desc":null,"options":null,"explanation":"很多大公司面试喜欢问这样一道面试题，输入URL到看见页面发生了什么？\n\n简单来说，共有以下几个过程：\n\n* DNS解析\n* 发起TCP连接\n* 发送HTTP请求\n* 服务器处理请求并返回HTTP报文\n* 浏览器解析渲染页面\n* 连接结束\n\n下面我们来看看具体的细节。\n\n## DNS解析\n\nDNS解析实际上就是寻找你所需要的资源的过程。假设你输入www.baidu.com，而这个网址并不是百度的真实地址，互联网中每一台机器都有唯一标识的IP地址，这个才是关键，但是它不好记，乱七八糟一串数字谁记得住啊，所以就需要一个网址和IP地址的转换，也就是DNS解析。\n\nDNS解析其实是一个递归的过程。\n\n输入www.google.com网址后，首先在本地的域名服务器中查找，没找到去根域名服务器查找，没有再去com顶级域名服务器查找，，如此的类推下去，直到找到IP地址，然后把它记录在本地，供下次使用。大致过程就是.-> .com ->google.com. -> www.google.com.。 (最后这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上)\n\n### DNS优化\n\n既然已经懂得了解析的具体过程，我们可以看到上述一共经过了N个过程，每个过程有一定的消耗和时间的等待，因此我们得想办法解决一下这个问题！\n\n* DNS缓存\n\nDNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种: 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。\n\n* DNS负载均衡\n\n比如访问baidu.com的时候，每次响应的并非是同一个服务器（IP地址不同），一般大公司都有成百上千台服务器来支撑访问。DNS可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡。\n\n## 发起TCP连接\n\nTCP提供一种可靠的传输，这个过程涉及到三次握手，四次挥手。\n\n### 三次握手\n\n![三次握手示意图](https://i.loli.net/2021/07/04/aG5WH4zdPXQnwpf.png)\n\n* 第一次握手：\n\n客户端发送syn包(Seq=x)到服务器，并进入SYN_SEND状态，等待服务器确认；\n\n* 第二次握手：\n\n服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（Seq=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n* 第三次握手：\n\n客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\n\n握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。\n\n### 四次挥手\n\n数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，假设客户端主动关闭，服务器被动关闭。\n\n![四次挥手示意图](https://i.loli.net/2021/07/04/96LM2FZmOhRUxbP.png)\n\n* 第一次挥手：\n\n客户端发送一个FIN，用来关闭客户端到服务器的数据传送，也就是客户端告诉服务器：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，客户端依然会重发这些数据)，但是，此时客户端还可以接受数据。\n\nFIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。\n\n* 第二次挥手：\n\n服务器收到FIN包后，发送一个ACK给对方并且带上自己的序列号seq，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。\n\n此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\n\n* 第三次挥手：\n\n服务器发送一个FIN，用来关闭服务器到客户端的数据传送，也就是告诉客户端，我的数据也发送完了，不会再给你发数据了。由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n\n* 第四次挥手：\n\n主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。\n\n服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。\n\n至此，完成四次挥手。\n\n## 发送HTTP请求\n\n发送HTTP请求，就是构建HTTP请求报文，并通过TCP协议，发送到服务器指定端口。\n\n请求报文由`请求行`，`请求报头`，`请求正文`组成。\n\n## 服务器处理请求并返回HTTP报文\n\n对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，比如Tomcat, Nginx和Apache等Web服务器。\n\nHTTP报文也分成三段：`状态码`，`响应报头`和`响应报文`。\n\n## 浏览器解析渲染页面\n\n![渲染页面的过程](https://i.loli.net/2021/07/04/kK39pXjgDdJ75Ux.png)\n\n这个图就是Webkit解析渲染页面的过程。\n\n* 解析HTML形成DOM树\n* 解析CSS形成CSSOM 树\n* 合并DOM树和CSSOM树形成渲染树\n* 浏览器开始渲染并绘制页面\n\n\n\n\n\n\n\n\n\n\n\n","level":4,"tagId":16}
{"_id":{"$oid":"61aa385a39bf10000191c9c4"},"exerciseKey":"61b47ff6-9c4d-4fa2-b126-dc5ffff3e7c6","category":"QA","renderType":"md","title":"简述 html 页面渲染过程","desc":null,"options":null,"explanation":"整个渲染过程其实就是将URL对应的各种资源，通过浏览器渲染引擎的解析，输出可视化的图像。\n\n## 基本概念\n\n* HTML解释器：解释HTML语言的解释器，本质是将HTML文本解释成DOM树（文档对象模型）。\n* CSS解释器：解释样式表的解释器，其作用是将DOM中的各个元素对象加上样式信息，从而为计算最后结果的布局提供依据。\n* 布局：将DOM和css样式信息结合起来，计算它们的大小位置等布局信息，形成一个能够表示这所有信息的内部表示模型即渲染树。\n* JavaScript引擎：JavaScript可以修改网页的内容，也能修改CSS的信息，JavaScript引擎解释JavaScript代码并把代码的逻辑和对DOM和CSS的改动信息应用到布局中去，从而改变渲染的结果。\n\n## 基本过程\n\n* 1.解析HTML文件，创建DOM树\n\n浏览器解析html源码，然后创建一个 DOM树。并行请求 css/image/js在DOM树中，每一个HTML标签都有一个对应的节点，并且每一个文本也都会有一个对应的文本节点。DOM树的根节点就是 documentElement，对应的是html标签。\n\n* 2.解析CSS,形成CSS对象模型\n\n浏览器解析CSS代码，计算出最终的样式数据。构建CSSOM树。对CSS代码中非法的语法它会直接忽略掉。解析CSS的时候会按照如下顺序来定义优先级：\n\n> 浏览器默认设置 < 用户设置 < 外链样式 < 内联样式 < html中的style。\n\n* 3.将CSS与DOM合并，构建渲染树（renderingtree）\n\nDOM Tree + CSSOM –> 渲染树（rendering tree）。渲染树和DOM树有点像，但是是有区别的。DOM树完全和html标签一一对应，但是渲染树会忽略掉不需要渲染的元素，比如head、display:none的元素等。而且一大段文本中的每一个行在渲染树中都是独立的一个节点。渲染树中的每一个节点都存储有对应的css属性。\n\n* 4.布局和绘制\n\n一旦渲染树创建好了，浏览器就可以根据渲染树直接把页面绘制到屏幕上。\n\n以上四个步骤并不是一次性顺序完成的。如果DOM或者CSSOM被修改，以上过程会被重复执行。实际上，CSS和JavaScript往往会多次修改DOM或者CSSOM。\n\n### Repaint(重绘)\n\n重绘是改变不影响元素在网页中的位置的元素样式时，譬如background-color(背景色)， border-color(边框色)，visibility(可见性)，浏览器会根据元素的新属性重新绘制一次(这就是重绘，或者说重新构造样式)，使元素呈现新的外观。\n\n重绘不会带来重新布局，所以并不一定伴随重排。\n\n### Reflow（重排）\n\n渲染对象在创建完成并添加到渲染树时，并不包含位置和大小信息。计算这些值的过程称为布局或重排。\n\n\"重绘\"不一定需要\"重排\"，比如改变某个网页元素的颜色，就只会触发\"重绘\"，不会触发\"重排\"，因为布局没有改变。\n\n但是，\"重排\"必然导致\"重绘\"，比如改变一个网页元素的位置，就会同时触发\"重排\"和\"重绘\"，因为布局改变了。\n\n\n## 引申问题：浏览器如何优化渲染？\n\n* 将多次改变样式属性的操作合并成一次操作\n* 将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。\n* 由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。","level":3,"tagId":12}
{"_id":{"$oid":"61aa385ecd02c30001dd2257"},"exerciseKey":"70db8e81-b858-4f3a-8bf9-d2bd1eb142e2","category":"QA","renderType":"md","title":"你是怎么理解ES6中Proxy的？使用场景有哪些?","desc":null,"options":null,"explanation":"## 你是怎么理解ES6中Proxy的？使用场景?\n\n ![](https://static.vue-js.com/6f656e30-59f5-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 一、介绍\n\n**定义：** 用于定义基本操作的自定义行为\n\n**本质：** 修改的是程序默认形为，就形同于在编程语言层面上做修改，属于元编程`(meta programming)`\n\n元编程（Metaprogramming，又译超编程，是指某类计算机程序的编写，这类计算机程序编写或者操纵其它程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作\n\n一段代码来理解\n```bash\n#!/bin/bash\n# metaprogram\necho '#!/bin/bash' >program\nfor ((I=1; I<=1024; I++)) do\n    echo \"echo $I\" >>program\ndone\nchmod +x program\n```\n这段程序每执行一次能帮我们生成一个名为`program`的文件，文件内容为1024行`echo`，如果我们手动来写1024行代码，效率显然低效\n\n- 元编程优点：与手工编写全部代码相比，程序员可以获得更高的工作效率，或者给与程序更大的灵活度去处理新的情形而无需重新编译\n\n`Proxy` 亦是如此，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）\n\n\n## 二、用法\n\n`Proxy`为 构造函数，用来生成 `Proxy `实例\n\n```javascript\nvar proxy = new Proxy(target, handler)\n```\n\n### 参数\n\n`target`表示所要拦截的目标对象（任何类型的对象，包括原生数组，函数，甚至另一个代理））\n\n`handler`通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 `p` 的行为\n\n\n\n### handler解析\n\n关于`handler`拦截属性，有如下：\n\n- get(target,propKey,receiver)：拦截对象属性的读取\n- set(target,propKey,value,receiver)：拦截对象属性的设置\n- has(target,propKey)：拦截`propKey in proxy`的操作，返回一个布尔值\n- deleteProperty(target,propKey)：拦截`delete proxy[propKey]`的操作，返回一个布尔值\n- ownKeys(target)：拦截`Object.keys(proxy)`、`for...in`等循环，返回一个数组\n- getOwnPropertyDescriptor(target, propKey)：拦截`Object.getOwnPropertyDescriptor(proxy, propKey)`，返回属性的描述对象\n- defineProperty(target, propKey, propDesc)：拦截`Object.defineProperty(proxy, propKey, propDesc）`，返回一个布尔值\n- preventExtensions(target)：拦截`Object.preventExtensions(proxy)`，返回一个布尔值\n- getPrototypeOf(target)：拦截`Object.getPrototypeOf(proxy)`，返回一个对象\n- isExtensible(target)：拦截`Object.isExtensible(proxy)`，返回一个布尔值\n- setPrototypeOf(target, proto)：拦截`Object.setPrototypeOf(proxy, proto)`，返回一个布尔值\n- apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作\n- construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作\n\n\n\n\n\n### Reflect\n\n若需要在`Proxy`内部调用对象的默认行为，建议使用`Reflect`，其是`ES6`中操作对象而提供的新 `API`\n\n基本特点：\n\n- 只要`Proxy`对象具有的代理方法，`Reflect`对象全部具有，以静态方法的形式存在\n- 修改某些`Object`方法的返回结果，让其变得更合理（定义不存在属性行为的时候不报错而是返回`false`）\n- 让`Object`操作都变成函数行为      \n\n\n\n下面我们介绍`proxy`几种用法：\n\n### get()\n\n`get`接受三个参数，依次为目标对象、属性名和 `proxy` 实例本身，最后一个参数可选\n\n```javascript\nvar person = {\n  name: \"张三\"\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, propKey) {\n    return Reflect.get(target,propKey)\n  }\n});\n\nproxy.name // \"张三\"\n```\n\n`get`能够对数组增删改查进行拦截，下面是试下你数组读取负数的索引\n\n```js\nfunction createArray(...elements) {\n  let handler = {\n    get(target, propKey, receiver) {\n      let index = Number(propKey);\n      if (index < 0) {\n        propKey = String(target.length + index);\n      }\n      return Reflect.get(target, propKey, receiver);\n    }\n  };\n\n  let target = [];\n  target.push(...elements);\n  return new Proxy(target, handler);\n}\n\nlet arr = createArray('a', 'b', 'c');\narr[-1] // c\n```\n\n注意：如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则会报错\n\n```js\nconst target = Object.defineProperties({}, {\n  foo: {\n    value: 123,\n    writable: false,\n    configurable: false\n  },\n});\n\nconst handler = {\n  get(target, propKey) {\n    return 'abc';\n  }\n};\n\nconst proxy = new Proxy(target, handler);\n\nproxy.foo\n// TypeError: Invariant check failed\n```\n\n\n\n### set()\n\n`set`方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 `Proxy` 实例本身\n\n假定`Person`对象有一个`age`属性，该属性应该是一个不大于 200 的整数，那么可以使用`Proxy`保证`age`的属性值符合要求\n\n```js\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // 对于满足条件的 age 属性以及其他属性，直接保存\n    obj[prop] = value;\n  }\n};\n\nlet person = new Proxy({}, validator);\n\nperson.age = 100;\n\nperson.age // 100\nperson.age = 'young' // 报错\nperson.age = 300 // 报错\n```\n\n如果目标对象自身的某个属性，不可写且不可配置，那么`set`方法将不起作用\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, 'foo', {\n  value: 'bar',\n  writable: false,\n});\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = 'baz';\n  }\n};\n\nconst proxy = new Proxy(obj, handler);\nproxy.foo = 'baz';\nproxy.foo // \"bar\"\n```\n\n注意，严格模式下，`set`代理如果没有返回`true`，就会报错\n\n```javascript\n'use strict';\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    // 无论有没有下面这一行，都会报错\n    return false;\n  }\n};\nconst proxy = new Proxy({}, handler);\nproxy.foo = 'bar';\n// TypeError: 'set' on proxy: trap returned falsish for property 'foo'\n```\n\n\n\n### deleteProperty()\n\n`deleteProperty`方法用于拦截`delete`操作，如果这个方法抛出错误或者返回`false`，当前属性就无法被`delete`命令删除\n\n```javascript\nvar handler = {\n  deleteProperty (target, key) {\n    invariant(key, 'delete');\n    Reflect.deleteProperty(target,key)\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`无法删除私有属性`);\n  }\n}\n\nvar target = { _prop: 'foo' };\nvar proxy = new Proxy(target, handler);\ndelete proxy._prop\n// Error: 无法删除私有属性\n```\n\n注意，目标对象自身的不可配置（configurable）的属性，不能被`deleteProperty`方法删除，否则报错\n\n\n\n### 取消代理\n\n```\nProxy.revocable(target, handler);\n```\n\n## 三、使用场景\n\n`Proxy`其功能非常类似于设计模式中的代理模式，常用功能如下：\n\n- 拦截和监视外部对对象的访问\n- 降低函数或类的复杂度\n- 在复杂操作前对操作进行校验或对所需资源进行管理\n\n\n\n使用 `Proxy` 保障数据类型的准确性\n\n```js\nlet numericDataStore = { count: 0, amount: 1234, total: 14 };\nnumericDataStore = new Proxy(numericDataStore, {\n    set(target, key, value, proxy) {\n        if (typeof value !== 'number') {\n            throw Error(\"属性只能是number类型\");\n        }\n        return Reflect.set(target, key, value, proxy);\n    }\n});\n\nnumericDataStore.count = \"foo\"\n// Error: 属性只能是number类型\n\nnumericDataStore.count = 333\n// 赋值成功\n```\n\n声明了一个私有的 `apiKey`，便于 `api` 这个对象内部的方法调用，但不希望从外部也能够访问 `api._apiKey`\n\n```js\nlet api = {\n    _apiKey: '123abc456def',\n    getUsers: function(){ },\n    getUser: function(userId){ },\n    setUser: function(userId, config){ }\n};\nconst RESTRICTED = ['_apiKey'];\napi = new Proxy(api, {\n    get(target, key, proxy) {\n        if(RESTRICTED.indexOf(key) > -1) {\n            throw Error(`${key} 不可访问.`);\n        } return Reflect.get(target, key, proxy);\n    },\n    set(target, key, value, proxy) {\n        if(RESTRICTED.indexOf(key) > -1) {\n            throw Error(`${key} 不可修改`);\n        } return Reflect.get(target, key, value, proxy);\n    }\n});\n\nconsole.log(api._apiKey)\napi._apiKey = '987654321'\n// 上述都抛出错误\n```\n\n还能通过使用`Proxy`实现观察者模式\n\n观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行\n\n`observable`函数返回一个原始对象的 `Proxy` 代理，拦截赋值操作，触发充当观察者的各个函数\n\n```javascript\nconst queuedObservers = new Set();\n\nconst observe = fn => queuedObservers.add(fn);\nconst observable = obj => new Proxy(obj, {set});\n\nfunction set(target, key, value, receiver) {\n  const result = Reflect.set(target, key, value, receiver);\n  queuedObservers.forEach(observer => observer());\n  return result;\n}\n```\n\n观察者函数都放进`Set`集合，当修改`obj`的值，在会`set`函数中拦截，自动执行`Set`所有的观察者\n","level":3.5,"tagId":24}
{"_id":{"$oid":"61aa385f54ebf60001a1a3fd"},"exerciseKey":"71f4e5bf-6bfd-4220-985c-80d940f16766","category":"QA","renderType":"md","title":"TypeScript中的变量以及如何声明？","desc":null,"options":null,"explanation":"变量是内存中用于存储值的命名空间。\n\n在 TypeScript 中声明变量的类型语法在变量名称后包括一个冒号（:)，后跟其类型。 与 JavaScript 相似，我们使用var关键字声明变量。\n\n在Typescript中声明变量时，必须遵循某些规则：\n\n* 变量名称必须是字母或数字。\n* 不能以数字开头名称。\n* 除下划线（ _ ）和美元（ $ ）符号外，它不能包含空格和特殊字符。","level":1,"tagId":19}
{"_id":{"$oid":"61aa385f291c0100017ee213"},"exerciseKey":"72450c25-d5a3-4dbb-b86e-ff7cb02a4ec2","category":"QA","renderType":"md","title":"TCP 和 UDP的区别是什么？","desc":null,"options":null,"explanation":"## 它们分别是什么\n\nTCP/IP 中有两个具有代表性的传输层协议，分别是 TCP 和 UDP。\n\n* TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，当应用程序采用 TCP 发送消息时，虽然可以保证发送的顺序，但还是犹如没有任何间隔的数据流发送给接收端。TCP 为提供可靠性传输，实行“顺序控制”或“重发控制”机制。此外还具备“流控制（流量控制）”、“拥塞控制”、提高网络利用率等众多功能。\n* UDP 是不具有可靠性的数据报协议。细微的处理它会交给上层的应用去完成。在 UDP 的情况下，虽然可以确保发送消息的大小，却不能保证消息一定会到达。因此，应用有时会根据自己的需要进行重发处理。\n\nTCP 和 UDP 的优缺点无法简单地、绝对地去做比较：TCP 用于在传输层有必要实现可靠传输的情况；而在一方面，UDP 主要用于那些对高速传输和实时性有较高要求的通信或广播通信。TCP 和 UDP 应该根据应用的目的按需使用。\n\n## TCP\n\nTCP 与 UDP 的区别相当大。它充分地实现了数据传输时各种控制功能，可以进行丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。\n\n根据 TCP 的这些机制，在IP这种无连接的网络上也能够实现高可靠性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）。\n\n## UDP\n\nUDP不提供复杂的控制机制，利用 IP 提供面向无连接的通信服务。并且它是将应用程序发来的数据在收到的那一刻，立即按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况，UDP 也无法进行流量控制等避免网络拥塞行为。此外，传输途中出现丢包，UDP 也不负责重发。甚至当包的到达顺序出现乱序时也没有纠正的功能。如果需要以上的细节控制，不得不交由采用 UDP 的应用程序去处理。\n\nUDP 常用于以下几个方面：\n\n* 包总量较少的通信（DNS、SNMP等）；\n* 视频、音频等多媒体通信（即时通信）；\n* 限定于 LAN 等特定网络中的应用通信；\n* 广播通信（广播、多播）。\n\n## 小结TCP与UDP的区别：\n\n1、基于连接与无连接；\n\n2、对系统资源的要求（TCP较多，UDP少）；\n\n3、UDP程序结构较简单；\n\n4、流模式与数据报模式；\n\n5、TCP保证数据正确性，UDP可能丢包；\n\n6、TCP保证数据顺序，UDP不保证。\n\n","level":1,"tagId":16}
{"_id":{"$oid":"61aa385f3dd7f70001832f70"},"exerciseKey":"7375c380-9dd8-497e-9b74-e4cc0779532c","category":"QA","renderType":"md","title":"字符串解析问题\n","desc":"实现函数使得将str字符串中的{}内的变量替换，如果属性不存在保持原样（比如{a.d}）\n\n```js\nvar a = {\n\tb: 123,\n\tc: '456',\n\te: '789',\n}\nvar str=`a{a.b}aa{a.c}aa {a.d}aaaa`;\n// => 'a123aa456aa {a.d}aaaa'\n```","options":null,"explanation":"```js\nconst fn1 = (str, obj) => {\n\tlet res = '';\n    // 标志位，标志前面是否有{\n\tlet flag = false;\n\tlet start;\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] === '{') {\n\t\t\tflag = true;\n\t\t\tstart = i + 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (!flag) res += str[i];\n\t\telse {\n\t\t\tif (str[i] === '}') {\n\t\t\t\tflag = false;\n\t\t\t\tres += match(str.slice(start, i), obj);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n// 对象匹配操作\nconst match = (str, obj) => {\n\tconst keys = str.split('.').slice(1);\n\tlet index = 0;\n\tlet o = obj;\n\twhile (index < keys.length) {\n\t\tconst key = keys[index];\n\t\tif (!o[key]) {\n\t\t\treturn `{${str}}`;\n\t\t} else {\n\t\t\to = o[key];\n\t\t}\n\t\tindex++;\n\t}\n\treturn o;\n}\n\n```","level":3.5,"tagId":26}
{"_id":{"$oid":"61aa386134458700017f1cc4"},"exerciseKey":"79eaaf8e-f456-4527-847e-58bad43fd47a","category":"Choice","renderType":"md","title":"怎样能在 index.js 中调用 sum.js 中的 sum 方法？","desc":"```javascript\n// sum.js\nexport default function sum(x) {\n\treturn x + x;\n}\n\n// index.js\nimport * as sum from \"./sum\";\n```","options":"{\"options\":[\"sum(4)\",\"sum.sum(4)\",\"sum.default(4)\",\"默认导出不用 * 来导入，只能具名导出\"],\"isMulti\":false,\"answer\":[2]}","explanation":"使用符号 `*`，我们引入文件中的所有值，包括默认和具名。如果我们有以下文件：\n```javascript\n// info.js\nexport const name = \"Lydia\";\nexport const age = 21;\nexport default \"I love JavaScript\";\n// index.js\nimport * as info from \"./info\";\nconsole.log(info);\n```\n将会输出以下内容：\n```javascript\n{\n  default: \"I love JavaScript\",\n  name: \"Lydia\",\n  age: 21\n}\n```\n以 `sum` 为例，相当于以下形式引入值 `sum`：\n```javascript\n{ default: function sum(x) { return x + x } }\n```\n我们可以通过调用 `sum.default` 来调用该函数","level":1,"tagId":32}
{"_id":{"$oid":"61aa38630f30890001ab8131"},"exerciseKey":"7f41c072-39f8-4785-ad16-992bf7cacfb7","category":"QA","renderType":"md","title":"自定义指令是什么？有哪些应用场景？","desc":null,"options":null,"explanation":"\n\n  ![](https://static.vue-js.com/bd85a970-4345-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、什么是指令\n\n开始之前我们先学习一下指令系统这个词\n\n**指令系统**是计算机硬件的语言系统，也叫机器语言，它是系统程序员看到的计算机的主要属性。因此指令系统表征了计算机的基本功能决定了机器所要求的能力\n\n在`vue`中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统\n\n我们看到的`v- `开头的行内属性，都是指令，不同的指令可以完成或实现不同的功能\n\n除了核心功能默认内置的指令 (`v-model` 和 `v-show`)，`Vue` 也允许注册自定义指令\n\n指令使用的几种方式：\n\n```js\n//会实例化一个指令，但这个指令没有参数 \n`v-xxx`\n\n// -- 将值传到指令中\n`v-xxx=\"value\"`  \n\n// -- 将字符串传入到指令中，如`v-html=\"'<p>内容</p>'\"`\n`v-xxx=\"'string'\"` \n\n// -- 传参数（`arg`），如`v-bind:class=\"className\"`\n`v-xxx:arg=\"value\"` \n\n// -- 使用修饰符（`modifier`）\n`v-xxx:arg.modifier=\"value\"` \n```\n\n### 二、如何实现\n\n注册一个自定义指令有全局注册与局部注册\n\n全局注册注册主要是用过`Vue.directive`方法进行注册\n\n`Vue.directive`第一个参数是指令的名字（不需要写上`v-`前缀），第二个参数可以是对象数据，也可以是一个指令函数\n\n```js\n// 注册一个全局自定义指令 `v-focus`\nVue.directive('focus', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()  // 页面加载完成之后自动让输入框获取到焦点的小功能\n  }\n})\n```\n\n局部注册通过在组件`options`选项中设置`directive`属性\n\n```js\ndirectives: {\n  focus: {\n    // 指令的定义\n    inserted: function (el) {\n      el.focus() // 页面加载完成之后自动让输入框获取到焦点的小功能\n    }\n  }\n}\n```\n\n然后你可以在模板中任何元素上使用新的 `v-focus` property，如下：\n\n```js\n<input v-focus />\n```\n\n自定义指令也像组件那样存在钩子函数：\n\n- `bind`：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置\n- `inserted`：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)\n- `update`：所在组件的 `VNode` 更新时调用，但是可能发生在其子 `VNode` 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新\n\n- `componentUpdated`：指令所在组件的 `VNode` 及其子 `VNode` 全部更新后调用\n- `unbind`：只调用一次，指令与元素解绑时调用\n\n所有的钩子函数的参数都有以下：\n\n- `el`：指令所绑定的元素，可以用来直接操作 `DOM`\n- `binding`：一个对象，包含以下 `property`：\n    - `name`：指令名，不包括 `v-` 前缀。\n    - `value`：指令的绑定值，例如：`v-my-directive=\"1 + 1\"` 中，绑定值为 `2`。\n    - `oldValue`：指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n    - `expression`：字符串形式的指令表达式。例如 `v-my-directive=\"1 + 1\"` 中，表达式为 `\"1 + 1\"`。\n    - `arg`：传给指令的参数，可选。例如 `v-my-directive:foo` 中，参数为 `\"foo\"`。\n    - `modifiers`：一个包含修饰符的对象。例如：`v-my-directive.foo.bar` 中，修饰符对象为 `{ foo: true, bar: true }`\n- `vnode`：`Vue` 编译生成的虚拟节点\n- `oldVnode`：上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用\n\n> 除了 `el` 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 `dataset` 来进行\n\n举个例子：\n\n```html\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\n<script>\n    Vue.directive('demo', function (el, binding) {\n    console.log(binding.value.color) // \"white\"\n    console.log(binding.value.text)  // \"hello!\"\n    })\n</script>\n```\n\n\n\n## 三、应用场景\n\n使用自定义组件组件可以满足我们日常一些场景，这里给出几个自定义组件的案例：\n\n- 防抖\n- 图片懒加载\n- 一键 Copy的功能\n\n### 输入框防抖\n\n防抖这种情况设置一个`v-throttle`自定义指令来实现\n\n举个例子：\n\n```js\n// 1.设置v-throttle自定义指令\nVue.directive('throttle', {\n  bind: (el, binding) => {\n    let throttleTime = binding.value; // 防抖时间\n    if (!throttleTime) { // 用户若不设置防抖时间，则默认2s\n      throttleTime = 2000;\n    }\n    let cbFun;\n    el.addEventListener('click', event => {\n      if (!cbFun) { // 第一次执行\n        cbFun = setTimeout(() => {\n          cbFun = null;\n        }, throttleTime);\n      } else {\n        event && event.stopImmediatePropagation();\n      }\n    }, true);\n  },\n});\n// 2.为button标签设置v-throttle自定义指令\n<button @click=\"sayHello\" v-throttle>提交</button>\n```\n\n\n\n### 图片懒加载\n\n设置一个`v-lazy`自定义组件完成图片懒加载\n\n```js\nconst LazyLoad = {\n    // install方法\n    install(Vue,options){\n    \t  // 代替图片的loading图\n        let defaultSrc = options.default;\n        Vue.directive('lazy',{\n            bind(el,binding){\n                LazyLoad.init(el,binding.value,defaultSrc);\n            },\n            inserted(el){\n                // 兼容处理\n                if('IntersectionObserver' in window){\n                    LazyLoad.observe(el);\n                }else{\n                    LazyLoad.listenerScroll(el);\n                }\n                \n            },\n        })\n    },\n    // 初始化\n    init(el,val,def){\n        // data-src 储存真实src\n        el.setAttribute('data-src',val);\n        // 设置src为loading图\n        el.setAttribute('src',def);\n    },\n    // 利用IntersectionObserver监听el\n    observe(el){\n        let io = new IntersectionObserver(entries => {\n            let realSrc = el.dataset.src;\n            if(entries[0].isIntersecting){\n                if(realSrc){\n                    el.src = realSrc;\n                    el.removeAttribute('data-src');\n                }\n            }\n        });\n        io.observe(el);\n    },\n    // 监听scroll事件\n    listenerScroll(el){\n        let handler = LazyLoad.throttle(LazyLoad.load,300);\n        LazyLoad.load(el);\n        window.addEventListener('scroll',() => {\n            handler(el);\n        });\n    },\n    // 加载真实图片\n    load(el){\n        let windowHeight = document.documentElement.clientHeight\n        let elTop = el.getBoundingClientRect().top;\n        let elBtm = el.getBoundingClientRect().bottom;\n        let realSrc = el.dataset.src;\n        if(elTop - windowHeight<0&&elBtm > 0){\n            if(realSrc){\n                el.src = realSrc;\n                el.removeAttribute('data-src');\n            }\n        }\n    },\n    // 节流\n    throttle(fn,delay){\n        let timer; \n        let prevTime;\n        return function(...args){\n            let currTime = Date.now();\n            let context = this;\n            if(!prevTime) prevTime = currTime;\n            clearTimeout(timer);\n            \n            if(currTime - prevTime > delay){\n                prevTime = currTime;\n                fn.apply(context,args);\n                clearTimeout(timer);\n                return;\n            }\n\n            timer = setTimeout(function(){\n                prevTime = Date.now();\n                timer = null;\n                fn.apply(context,args);\n            },delay);\n        }\n    }\n\n}\nexport default LazyLoad;\n```\n\n\n\n### 一键 Copy的功能\n\n```js\nimport { Message } from 'ant-design-vue';\n\nconst vCopy = { //\n  /*\n    bind 钩子函数，第一次绑定时调用，可以在这里做初始化设置\n    el: 作用的 dom 对象\n    value: 传给指令的值，也就是我们要 copy 的值\n  */\n  bind(el, { value }) {\n    el.$value = value; // 用一个全局属性来存传进来的值，因为这个值在别的钩子函数里还会用到\n    el.handler = () => {\n      if (!el.$value) {\n      // 值为空的时候，给出提示，我这里的提示是用的 ant-design-vue 的提示，你们随意\n        Message.warning('无复制内容');\n        return;\n      }\n      // 动态创建 textarea 标签\n      const textarea = document.createElement('textarea');\n      // 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域\n      textarea.readOnly = 'readonly';\n      textarea.style.position = 'absolute';\n      textarea.style.left = '-9999px';\n      // 将要 copy 的值赋给 textarea 标签的 value 属性\n      textarea.value = el.$value;\n      // 将 textarea 插入到 body 中\n      document.body.appendChild(textarea);\n      // 选中值并复制\n      textarea.select();\n      // textarea.setSelectionRange(0, textarea.value.length);\n      const result = document.execCommand('Copy');\n      if (result) {\n        Message.success('复制成功');\n      }\n      document.body.removeChild(textarea);\n    };\n    // 绑定点击事件，就是所谓的一键 copy 啦\n    el.addEventListener('click', el.handler);\n  },\n  // 当传进来的值更新的时候触发\n  componentUpdated(el, { value }) {\n    el.$value = value;\n  },\n  // 指令与元素解绑的时候，移除事件绑定\n  unbind(el) {\n    el.removeEventListener('click', el.handler);\n  },\n};\n\nexport default vCopy;\n```\n\n关于自定义组件还有很多应用场景，如：拖拽指令、页面水印、权限校验等等应用场景\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa386391a75000018d2d0f"},"exerciseKey":"7f433ba8-03d7-4cab-b94b-535819249561","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconsole.log(Number(2) === Number(2))\nconsole.log(Boolean(false) === Boolean(false))\nconsole.log(Symbol('foo') === Symbol('foo'))\n```","options":"{\"options\":[\"true, true, false\",\"false, true, false\",\"true, false, true\",\"true, true, true\"],\"isMulti\":false,\"answer\":[0]}","explanation":"每个`Symbol`都是完全唯一的。传递给`Symbol`的参数只是给`Symbol`的一个描述。 `Symbol`的值不依赖于传递的参数。 当我们测试相等时，我们创建了两个全新的符号：第一个`Symbol（'foo'）`，第二个`Symbol（'foo'）`, 这两个值是唯一的，彼此不相等，因此返回`false`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386391a75000018d2d10"},"exerciseKey":"7f816cdc-b5e8-4939-9c85-004a4110210c","category":"QA","renderType":"md","title":"小程序 WXSS  与 CSS 的区别？","desc":null,"options":null,"explanation":"* `wxss` 背景图片只能引入外链，不能使用本地图片\n* 小程序样式使用 `@import` 引入 外联样式文件，地址为相对路径。\n* 尺寸单位为  `rpx` , `rpx` 是响应式像素,可以根据屏幕宽度进行自适应。","level":0.5,"tagId":23}
{"_id":{"$oid":"61aa386339bf10000191ca01"},"exerciseKey":"7fa82090-78a2-4445-a982-48ed95cb20c0","category":"QA","renderType":"md","title":"什么是防抖和节流，以及如何编码实现？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/912f1a10-8787-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n## 一、是什么\r\n\r\n本质上是优化高频率执行代码的一种手段\r\n\r\n如：浏览器的 `resize`、`scroll`、`keypress`、`mousemove` 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能\r\n\r\n为了优化体验，需要对这类事件进行调用次数的限制，对此我们就可以采用`throttle`（防抖）和`debounce`（节流）的方式来减少调用频率\r\n\r\n#### 定义\r\n\r\n- 节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效\r\n- 防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时\r\n\r\n一个经典的比喻:\r\n\r\n想象每天上班大厦底下的电梯。把电梯完成一次运送，类比为一次函数的执行和响应\r\n\r\n假设电梯有两种运行策略 `debounce` 和 `throttle`，超时设定为15秒，不考虑容量限制\r\n\r\n电梯第一个人进来后，15秒后准时运送一次，这是节流\r\n\r\n电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是防抖\r\n\r\n## 代码实现\r\n\r\n### 节流\r\n\r\n完成节流可以使用时间戳与定时器的写法\r\n\r\n使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行\r\n\r\n```js\r\nfunction throttled1(fn, delay = 500) {\r\n    let oldtime = Date.now()\r\n    return function (...args) {\r\n        let newtime = Date.now()\r\n        if (newtime - oldtime >= delay) {\r\n            fn.apply(null, args)\r\n            oldtime = Date.now()\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n使用定时器写法，`delay`毫秒后第一次执行，第二次事件停止触发后依然会再一次执行\r\n\r\n```js\r\nfunction throttled2(fn, delay = 500) {\r\n    let timer = null\r\n    return function (...args) {\r\n        if (!timer) {\r\n            timer = setTimeout(() => {\r\n                fn.apply(this, args)\r\n                timer = null\r\n            }, delay);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n可以将时间戳写法的特性与定时器写法的特性相结合，实现一个更加精确的节流。实现如下\r\n\r\n```js\r\nfunction throttled(fn, delay) {\r\n    let timer = null\r\n    let starttime = Date.now()\r\n    return function () {\r\n        let curTime = Date.now() // 当前时间\r\n        let remaining = delay - (curTime - starttime)  // 从上一次到现在，还剩下多少多余时间\r\n        let context = this\r\n        let args = arguments\r\n        clearTimeout(timer)\r\n        if (remaining <= 0) {\r\n            fn.apply(context, args)\r\n            starttime = Date.now()\r\n        } else {\r\n            timer = setTimeout(fn, remaining);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### 防抖\r\n\r\n简单版本的实现\r\n\r\n```js\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n\r\n    return function () {\r\n        let context = this; // 保存this指向\r\n        let args = arguments; // 拿到event对象\r\n\r\n        clearTimeout(timeout)\r\n        timeout = setTimeout(function(){\r\n            func.apply(context, args)\r\n        }, wait);\r\n    }\r\n}\r\n```\r\n\r\n防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：\r\n\r\n```js\r\nfunction debounce(func, wait, immediate) {\r\n\r\n    let timeout;\r\n\r\n    return function () {\r\n        let context = this;\r\n        let args = arguments;\r\n\r\n        if (timeout) clearTimeout(timeout); // timeout 不为null\r\n        if (immediate) {\r\n            let callNow = !timeout; // 第一次会立即执行，以后只有事件执行后才会再次触发\r\n            timeout = setTimeout(function () {\r\n                timeout = null;\r\n            }, wait)\r\n            if (callNow) {\r\n                func.apply(context, args)\r\n            }\r\n        }\r\n        else {\r\n            timeout = setTimeout(function () {\r\n                func.apply(context, args)\r\n            }, wait);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 二、区别\r\n\r\n相同点：\r\n\r\n- 都可以通过使用 `setTimeout` 实现\r\n- 目的都是，降低回调执行频率。节省计算资源\r\n\r\n不同点：\r\n\r\n- 函数防抖，在一段连续操作结束后，处理回调，利用`clearTimeout `和 `setTimeout`实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能\r\n- 函数防抖关注一定时间连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次\r\n\r\n例如，都设置时间频率为500ms，在2秒时间内，频繁触发函数，节流，每隔 500ms 就执行一次。防抖，则不管调动多少次方法，在2s后，只会执行一次\r\n\r\n如下图所示：\r\n\r\n ![](https://static.vue-js.com/a2c81b50-8787-11eb-ab90-d9ae814b240d.png)\r\n\r\n\r\n## 三、应用场景\r\n\r\n防抖在连续的事件，只需触发一次回调的场景有：\r\n\r\n- 搜索框搜索输入。只需用户最后一次输入完，再发送请求\r\n- 手机号、邮箱验证输入检测\r\n- 窗口大小`resize`。只需窗口调整完成后，计算窗口大小。防止重复渲染。\r\n\r\n节流在间隔一段时间执行一次回调的场景有：\r\n\r\n- 滚动加载，加载更多或滚到底部监听\r\n- 搜索框，搜索联想功能","level":2,"tagId":26}
{"_id":{"$oid":"61aa384134458700017f1bc5"},"exerciseKey":"0c12d28e-1d3d-4a8f-a796-51c8bdc50a18","category":"QA","renderType":"html","title":"Babel的原理是什么","desc":null,"options":null,"explanation":"<p style=\"text-align:start;text-indent:2em;\">babel 的转译过程分为三个阶段，这三步具体是：</p><ul><li>解析 Parse: 将代码解析生成抽象语法树( 即AST )，即词法分析与语法分析的过程</li><li>转换 Transform: 对于 AST 进行变换一系列的操作，babel 接受得到 AST 并通过 babel-traverse 对其进行遍历，在此过程中进行添加、更新及移除等操作</li><li>生成 Generate: 将变换后的 AST 再转换为 JS 代码, 使用到的模块是 babel-generator</li></ul>","level":1,"tagId":28}
{"_id":{"$oid":"61aa384154ebf60001a1a332"},"exerciseKey":"0d44a9d0-574d-4043-99a0-374df956d562","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nString.prototype.giveLydiaPizza = () => {\n  return 'Just give Lydia pizza already!'\n}\n\nconst name = 'Lydia'\n\nname.giveLydiaPizza()\n```","options":"{\"options\":[\"\\\"Just give Lydia pizza already!\\\"\",\"TypeError: not a function\",\"SyntaxError\",\"undefined\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`String` 是内置的构造函数，我们可以向它添加属性。我只是在它的原型中添加了一个方法。基本类型字符串被自动转换为字符串对象，由字符串原型函数生成。因此，所有 string(string 对象)都可以访问该方法！","level":1,"tagId":32}
{"_id":{"$oid":"61aa38430f30890001ab802e"},"exerciseKey":"12770dfd-79d2-4c0b-80e1-e19f3ab85c82","category":"QA","renderType":"md","title":"两个同级的相邻元素之间，有看不见的空白间隔，是什么原因引起的？有什么解决办法？","desc":null,"options":null,"explanation":"行框的排列会受到中间空白（回车空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。\n\n解决方法：\n\n* 相邻元素代码代码全部写在一排\n* 浮动元素，float:left;\n* 在父级元素中用font-size:0;","level":1,"tagId":11}
{"_id":{"$oid":"61aa38488e97d90001808687"},"exerciseKey":"23cebacc-48d3-4b48-9393-5c424afffab0","category":"QA","renderType":"md","title":"Unicode 和 UTF-8 之间有什么关系？","desc":null,"options":null,"explanation":"Unicode 是一种字符集合，现在可容纳 100 多万个字符。每个字符对应一个不同的 Unicode 编码，它只规定了符号的二进制代码，却没有规定这个二进制代码在计算机中如何编码传输。\n\nUTF-8 是一种对 Unicode 的编码方式，它是一种变长的编码方式，可以用 1~4 个字节来表示一个字符。\n","level":1,"tagId":30}
{"_id":{"$oid":"61aa38480f30890001ab8059"},"exerciseKey":"244fe47e-387f-4131-8d05-84de178c5692","category":"QA","renderType":"html","title":"常见的HTTP请求方法","desc":"<p></p>","options":null,"explanation":"<ul><li>GET: 向服务器获取数据</li><li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改。</li><li>PUT：上传文件，修改数据</li><li>DELETE：删除服务器上的对象</li><li>HEAD：获取报文首部，与GET相比，不返回报文主体部分</li><li>OPTIONS：询问支持的请求方法，用来跨域请求</li><li>TRACE：追踪 请求—响应 的传输路径</li><li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信</li></ul>","level":1,"tagId":16}
{"_id":{"$oid":"61aa384a54ebf60001a1a368"},"exerciseKey":"2acd6447-af1d-4430-837f-a468b6c76ffe","category":"QA","renderType":"md","title":"script 标签中， async 和 defer 两个属性有什么用途和区别？","desc":null,"options":null,"explanation":"在 HTML 中会遇到以下三类 script：\n\n```\n<script src='xxx'></script>\n<script src='xxx' async></script>\n<script src='xxx' defer></script>\n```\n\nscript标签用于加载脚本与执行脚本，直接使用script脚本时，html会按照顺序来加载并执行脚本，在脚本加载&执行的过程中，会阻塞后续的DOM渲染。\n\n比如现在大家习惯于在页面中引用各种第三方脚本，但如果第三方服务商出现了一些小问题，比如延迟之类的，就会使得页面白屏。\n\n针对上述情况，script标签提供了两种方式来解决问题，就是加入属性async以及defer，这两个属性使得script标签加载都不会阻塞DOM的渲染。\n\n```\ndefer：此布尔属性被设置为向浏览器指示脚本在文档被解析后执行。\nasync：设置此布尔属性，以指示浏览器如果可能的话，应异步执行脚本。\n```\n\n## defer\n\n如果script标签设置了defer属性，则浏览器会异步下载该文件并且不会影响后续DOM的渲染。\n\n如果有多个设置了defer属性的script标签存在，则会按照顺序执行所有的script，defer脚本会在文档渲染完毕后，DOMContentLoaded事件调用前执行。\n\n## async\n\nasync属性会使得script脚本异步的加载并在允许的情况下执行，而async的执行并不会按照script标签在页面中的顺序来执行，而是谁先加载完谁先执行。","level":2,"tagId":20}
{"_id":{"$oid":"61aa384ab804f8000122aa0e"},"exerciseKey":"2def1d2a-3f39-4d07-b61d-1ae6f0f66e7c","category":"Choice","renderType":"md","title":"当我们这么做时，会发生什么？","desc":"```javascript\nfunction bark() {\n  console.log('Woof!')\n}\n\nbark.animal = 'dog'\n```","options":"{\"options\":[\"正常运行!\",\"SyntaxError. 你不能通过这种方式给函数增加属性。\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[0]}","explanation":"这在 JavaScript 中是可以的，因为函数是对象！（除了基本类型之外其他都是对象）\n函数是一个特殊的对象。你写的这个代码其实不是一个实际的函数。函数是一个拥有属性的对象，并且属性也可被调用。","level":1,"tagId":32}
{"_id":{"$oid":"61aa384d3d5f3a0001af553d"},"exerciseKey":"343c64fa-f996-4d17-a20f-dec32f7b256b","category":"Choice","renderType":"md","title":"setInterval 方法的返回值是什么？","desc":"```javascript\nsetInterval(() => console.log('Hi'), 1000)\n```","options":"{\"options\":[\"一个唯一的id\",\"该方法指定的毫秒数\",\"传递的函数\",\"undefined\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`setInterval` 返回一个唯一的 id。此 id 可被用于 `clearInterval` 函数来取消定时。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa384f291c0100017ee192"},"exerciseKey":"394b6918-4c26-4e70-89b8-6bf1751f33ca","category":"QA","renderType":"md","title":"em/px/rem/vh/vw 这些单位有什么区别？","desc":"","options":null,"explanation":"![](https://static.vue-js.com/51b036e0-9131-11eb-85f6-6fac77c0c9b3.png)\n## 一、介绍\n\n传统的项目开发中，我们只会用到`px`、`%`、`em`这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性\n\n从`CSS3`开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了`rem`、`vh`、`vw`、`vm`等一些新的计量单位\n\n利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等\n\n## 二、单位\n\n在`css`单位中，可以分为长度单位、绝对单位，如下表所指示\n\n| CSS单位      |                                        |\n| ------------ | -------------------------------------- |\n| 相对长度单位 | em、ex、ch、rem、vw、vh、vmin、vmax、% |\n| 绝对长度单位 | cm、mm、in、px、pt、pc                 |\n\n这里我们主要讲述px、em、rem、vh、vw\n\n### px\n\npx，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中\n\n有些人会把`px`认为是相对长度，原因在于在移动端中存在设备像素比，`px`实际显示的大小是不确定\n\n这里之所以认为`px`为绝对单位，在于`px`的大小和元素的其他属性无关\n\n### em\n\nem是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（`1em = 16px`）\n\n为了简化 `font-size` 的换算，我们需要在` css `中的 `body` 选择器中声明` font-size `= `62.5%`，这就使 em 值变为 `16px*62.5% = 10px`\n\n这样 `12px = 1.2em`, `10px = 1em`, 也就是说只需要将你的原来的` px` 数值除以 10，然后换上 `em `作为单位就行了\n\n特点：\n\n- em 的值并不是固定的\n- em 会继承父级元素的字体大小\n- em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸\n- 任意浏览器的默认字体高都是 16px\n\n举个例子\n\n```html\n<div class=\"big\">\n    我是14px=1.4rem\n    <div class=\"small\">我是12px=1.2rem</div>\n</div>\n```\n\n样式为\n\n```css\n<style>\nhtml {font-size: 10px;  } /*  公式16px*62.5%=10px  */  \n.big{font-size: 1.4rem}\n.small{font-size: 1.2rem}\n</style>\n```\n\n这时候`.big`元素的`font-size`为14px，而`.small`元素的`font-size`为12px\n\n### rem\n\nrem，相对单位，相对的只是HTML根元素`font-size`的值\n\n同理，如果想要简化`font-size`的转化，我们可以在根元素`html`中加入`font-size: 62.5%`\n\n```css\nhtml {font-size: 62.5%;  } /*  公式16px*62.5%=10px  */ \n```\n\n这样页面中1rem=10px、1.2rem=12px、1.4rem=14px、1.6rem=16px;使得视觉、使用、书写都得到了极大的帮助\n\n特点：\n\n- rem单位可谓集相对大小和绝对大小的优点于一身\n- 和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸\n\n### vh、vw\n\nvw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，`vh`则为窗口的高度\n\n这里的窗口分成几种情况：\n\n- 在桌面端，指的是浏览器的可视区域\n- 移动端指的就是布局视口\n\n像`vw`、`vh`，比较容易混淆的一个单位是`%`，不过百分比宽泛的讲是相对于父元素：\n\n对于普通定位元素就是我们理解的父元素\n- 对于position: absolute;的元素是相对于已定位的父元素\n- 对于position: fixed;的元素是相对于 ViewPort（可视窗口）\n\n## 三、总结\n\n**px**：绝对单位，页面按精确像素展示\n\n**em**：相对单位，基准点为父节点字体的大小，如果自身定义了`font-size`按自身来计算，整个页面内`1em`不是一个固定的值\n\n**rem**：相对单位，可理解为`root em`, 相对根节点`html`的字体大小来计算\n\n**vh、vw**：主要用于页面视口大小布局，在页面布局上更加方便简单","level":2,"tagId":11}
{"_id":{"$oid":"61aa38543dd7f70001832f1d"},"exerciseKey":"4c9292a2-a801-48c4-8d22-10642613c6f4","category":"QA","renderType":"md","title":"实现JSONP","desc":null,"options":null,"explanation":"```js\nconst jsonp = ({ url, params, callbackName }) => {\n  const generateUrl = () => {\n    let dataSrc = '';\n    for (let key in params) {\n      if (Object.prototype.hasOwnProperty.call(params, key)) {\n        dataSrc += `${key}=${params[key]}&`;\n      }\n    }\n    dataSrc += `callback=${callbackName}`;\n    return `${url}?${dataSrc}`;\n  }\n  return new Promise((resolve, reject) => {\n    const scriptEle = document.createElement('script');\n    scriptEle.src = generateUrl();\n    document.body.appendChild(scriptEle);\n    window[callbackName] = data => {\n      resolve(data);\n      document.removeChild(scriptEle);\n    }\n  })\n}\n\n```","level":3.5,"tagId":26}
{"_id":{"$oid":"61aa38570d111e000103724d"},"exerciseKey":"594f4864-1932-4020-aec6-a2ae0fb16765","category":"QA","renderType":"md","title":"浏览器的垃圾回收机制有哪些？","desc":null,"options":null,"explanation":"JS会在创建变量时自动分配内存，在不使用的时候会自动周期性的释放内存，释放的过程就叫 \"垃圾回收\"。\n\n一方面自动分配内存减轻了开发者的负担，开发者不用过多的去关注内存使用，但是另一方面，正是因为因为是自动回收，所以如果不清楚回收的机制，会很容易造成混乱，而混乱就很容易造成\"内存泄漏\"。\n\n由于是自动回收，所以就存在一个 \"内存是否需要被回收的\" 的问题，但是这个问题的判定在程序中意味着无法通过某个算法去准确完整的解决，后面探讨的回收机制只能有限的去解决一般的问题。\n\n## 回收算法\n\n垃圾回收对是否需要回收的问题主要依赖于对变量的判定是否可访问，由此衍生出两种主要的回收算法：\n\n* 标记清理\n* 引用计数\n\n### 标记清理\n\n标记清理是js最常用的回收策略，2012年后所有浏览器都使用了这种策略，此后的对回收策略的改进也是基于这个策略的改进。其策略是：\n\n* 变量进入上下文，也可理解为作用域，会加上标记，证明其存在于该上下文；\n* 将所有在上下文中的变量以及上下文中被访问引用的变量标记去掉，表明这些变量活跃有用；\n* 在此之后再被加上标记的变量标记为准备删除的变量，因为上下文中的变量已经无法访问它们；\n* 执行内存清理，销毁带标记的所有非活跃值并回收之前被占用的内存；\n\n局限：\n\n* 由于是从根对象(全局对象)开始查找，对于那些无法从根对象查询到的对象都将被清除\n* 回收后会形成内存碎片，影响后面申请大的连续内存空间\n\n### 引用计数\n\n引用计数策略相对而言不常用，因为弊端较多。其思路是对每个值记录它被引用的次数，通过最后对次数的判断(引用数为0)来决定是否保留，具体的规则有：\n\n* 声明一个变量，赋予它一个引用值时，计数+1；\n* 同一个值被赋予另外一个变量时，引用+1；\n* 保存对该值引用的变量被其他值覆盖，引用-1；\n* 引用为0，回收内存；\n\n局限：\n\n最重要的问题就是，循环引用 的问题\n\n```js\nfunction refProblem () {\n    let a = new Object();\n    let b = new Object();\n    a.c = b;\n    b.c = a;  //互相引用\n}\n```\n\n根据之前提到的规则，两个都互相引用了，引用计数不为0，所以两个变量都无法回收。如果频繁的调用改函数，则会造成很严重的内存泄漏。\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa38593976eb00014e44ef"},"exerciseKey":"5f0460dc-84ca-425e-8629-7aec874d024c","category":"QA","renderType":"html","title":"静态资源完整性校验","desc":null,"options":null,"explanation":"<p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">使用 内容分发网络 (CDNs) 在多个站点之间共享脚本和样式表等文件可以提高站点性能并节省带宽。然而，使用CDN也存在风险，如果攻击者获得对 CDN 的控制权，则可以将任意恶意内容注入到 CDN 上的文件中 （或完全替换掉文件），因此可能潜在地攻击所有从该 CDN 获取文件的站点。</span></span></span></span></p><p><br/><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><span style=\"font-size:14ptpx\"><strong>预防方案</strong></span></span></span></span></p><p><br/><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">将使用 base64 编码过后的文件哈希值写入你所引用的 &lt;script&gt; 或 标签的 integrity 属性值中即可启用子资源完整性能。</span></span></span></span><br/><br/></p>","level":2.5,"tagId":21}
{"_id":{"$oid":"61aa385acd02c30001dd2232"},"exerciseKey":"5fd03a9b-274c-4ea1-be11-e9b042022693","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nconst name = \"Lydia\";\nage = 21;\n\nconsole.log(delete name);\nconsole.log(delete age);\n```","options":"{\"options\":[\"false, true\",\"\\\"Lydia\\\", 21\",\"true, true\",\"undefined, undefined\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`delete`操作符返回一个布尔值： `true`指删除成功，否则返回`false`. 但是通过 `var`, `const` 或 `let` 关键字声明的变量无法用 `delete` 操作符来删除。\n`name`变量由`const`关键字声明，所以删除不成功:返回 `false`. 而我们设定`age`等于`21`时,我们实际上添加了一个名为`age`的属性给全局对象。对象中的属性是可以删除的，全局对象也是如此，所以`delete age`返回`true`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa385a8e97d9000180870b"},"exerciseKey":"602703b0-63fc-4725-b5b1-e223b86a8443","category":"QA","renderType":"md","title":"app中常提到的webview是什么？","desc":null,"options":null,"explanation":"webview 用来展示网页的 view 组件，该组件是你运行自己的浏览器或者在你的线程中展示线上内容的基础。使用 webkit 渲染引擎来展示，并且支持前进后退等基于浏览历史，放大缩小，等更多功能。\n\n简单来说 WebView 是手机中内置了一款高性能 webkit 内核浏览器，在 SDK 中封装的一个组件。不过没有提供地址栏和导航栏，只是单纯的展示一个网页界面。\n\nwebview 可以简单理解为页面里的 iframe 。原生app与 webview 的交互可以简单看作是页面与页面内 iframe 页面进行的交互。就如页面与页面内的 iframe 共用一个 window 一样，原生与 webview 也共用了一套原生的方法。","level":2,"tagId":30}
{"_id":{"$oid":"61aa385bff0573000165b2a0"},"exerciseKey":"6515d22e-88eb-4a3f-9d02-2950cf35cb85","category":"QA","renderType":"md","title":"说说你在React项目是如何捕获错误的？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/8db1b5c0-f288-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n错误在我们日常编写代码是非常常见的\n\n举个例子，在`react`项目中去编写组件内`JavaScript`代码错误会导致 `React` 的内部状态被破坏，导致整个应用崩溃，这是不应该出现的现象\n\n作为一个框架，`react`也有自身对于错误的处理的解决方案\n\n\n## 二、如何做\n\n为了解决出现的错误导致整个应用崩溃的问题，`react16`引用了**错误边界**新的概念\n\n错误边界是一种 `React` 组件，这种组件可以捕获发生在其子组件树任何位置的 `JavaScript` 错误，并打印这些错误，同时展示降级 `UI`，而并不会渲染那些发生崩溃的子组件树\n\n错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误\n\n形成错误边界组件的两个条件：\n\n- 使用了  static getDerivedStateFromError()\n- 使用了 componentDidCatch()\n\n抛出错误后，请使用 `static getDerivedStateFromError()` 渲染备用 UI ，使用 `componentDidCatch()` 打印错误信息，如下：\n\n```jsx\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // 更新 state 使下一次渲染能够显示降级后的 UI\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // 你同样可以将错误日志上报给服务器\n    logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // 你可以自定义降级后的 UI 并渲染\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children; \n  }\n}\n```\n\n然后就可以把自身组件的作为错误边界的子组件，如下：\n\n```jsx\n<ErrorBoundary>\n  <MyWidget />\n</ErrorBoundary>\n```\n\n下面这些情况无法捕获到异常：\n\n- 事件处理\n- 异步代码\n- 服务端渲染\n- 自身抛出来的错误\n\n在`react 16`版本之后，会把渲染期间发生的所有错误打印到控制台\n\n除了错误信息和 JavaScript 栈外，React 16 还提供了组件栈追踪。现在你可以准确地查看发生在组件树内的错误信息：\n\n ![](https://static.vue-js.com/7b2b51d0-f289-11eb-ab90-d9ae814b240d.png)\n\n可以看到在错误信息下方文字中存在一个组件栈，便于我们追踪错误\n\n对于错误边界无法捕获的异常，如事件处理过程中发生问题并不会捕获到，是因为其不会在渲染期间触发，并不会导致渲染时候问题\n\n这种情况可以使用`js`的`try...catch...`语法，如下：\n\n```jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    try {\n      // 执行操作，如有错误则会抛出\n    } catch (error) {\n      this.setState({ error });\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return <h1>Caught an error.</h1>\n    }\n    return <button onClick={this.handleClick}>Click Me</button>\n  }\n}\n```\n\n\n除此之外还可以通过监听`onerror`事件\n\n```js\nwindow.addEventListener('error', function(event) { ... })\n```\n","level":3,"tagId":13}
{"_id":{"$oid":"61aa385d0d111e000103727f"},"exerciseKey":"6c221f8f-6a86-45f9-8141-59c21388c073","category":"QA","renderType":"md","title":"进程与线程有什么区别？","desc":null,"options":null,"explanation":"* 进程是系统进行资源分配和调度的一个独立单位\n* 线程是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位\n* 一个进程至少由一个线程组成。\n\n线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。","level":1,"tagId":30}
{"_id":{"$oid":"61aa385e81337a00011e05cc"},"exerciseKey":"6f210355-da14-479e-86bc-7602839e7f42","category":"QA","renderType":"md","title":"TypeScript中的方法重写是什么?","desc":null,"options":null,"explanation":"如果子类(子类)具有与父类中声明的相同的方法，则称为方法覆盖。换句话说，在派生类或子类中重新定义基类方法。\n\n方法重写的规则\n\n* 该方法必须具有与父类相同的名称\n* 该方法必须具有与父类相同的参数。\n* 必须有一个IS-A关系(继承)。\n\n例子\n```\nclass NewPrinter extends Printer {  \n    doPrint(): any {  \n        super.doPrint();  \n        console.log(\"Called Child class.\");  \n    }  \n    doInkJetPrint(): any {  \n        console.log(\"Called doInkJetPrint().\");  \n    }  \n}  \nlet printer: new () => NewPrinter;  \nprinter.doPrint();  \nprinter.doInkJetPrint();  \n```","level":3,"tagId":19}
{"_id":{"$oid":"61aa385f0f30890001ab8111"},"exerciseKey":"71f7613a-3703-4c0c-85c3-d8ad31fac232","category":"QA","renderType":"md","title":"箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？","desc":null,"options":null,"explanation":"## 什么是箭头函数？\n\nES6中允许使用箭头=>来定义箭头函数，具体语法，我们来看一个简单的例子：\n\n```js\n// 箭头函数\nlet fun = (name) => {\n    // 函数体\n    return `Hello ${name} !`;\n};\n\n// 等同于\nlet fun = function (name) {\n    // 函数体\n    return `Hello ${name} !`;\n};\n```\n\n可以看出，定义箭头函在数语法上要比普通函数简洁得多。箭头函数省去了function关键字，采用箭头=>来定义函数。函数的参数放在=>前面的括号中，函数体跟在=>后的花括号中。\n\n## 箭头函数与普通函数的区别\n\n1、语法更加简洁、清晰\n\n从上面的基本语法示例中可以看出，箭头函数的定义要比普通函数定义简洁、清晰得多，很快捷。\n\n2、箭头函数不会创建自己的this（重要！！深入理解！！）\n\n我们先来看看MDN上对箭头函数this的解释。\n\n> 箭头函数不会创建自己的this，所以它没有自己的this，它只会从自己的作用域链的上一层继承this。\n\n箭头函数没有自己的this，它会捕获自己在定义时（注意，是定义时，不是调用时）所处的外层执行环境的this，并继承这个this值。所以，箭头函数中this的指向在它被定义的时候就已经确定了，之后永远不会改变。\n\n3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\n\n上面的例子，就完全可以说明箭头函数继承而来的this指向永远不变。对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。\n\n4、.call()/.apply()/.bind()无法改变箭头函数中this的指向\n\n.call()/.apply()/.bind()方法可以用来动态修改函数执行时this的指向，但由于箭头函数的this定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数this的指向，虽然这么做代码不会报错。\n\n5、箭头函数不能作为构造函数使用\n\n我们先了解一下构造函数的new都做了些什么？简单来说，分为四步： \n\n① JS内部首先会先生成一个对象； \n② 再把函数中的this指向该对象；\n③ 然后执行构造函数中的语句；\n④ 最终返回该对象实例。\n\n但是！！因为箭头函数没有自己的this，它的this其实是继承了外层执行环境中的this，且this指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用new调用时会报错！\n\n6、箭头函数没有自己的arguments\n\n箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。\n\n7、箭头函数没有原型prototype\n\n```js\nlet sayHi = () => {\n    console.log('Hello World !')\n};\nconsole.log(sayHi.prototype); // undefined\n```\n\n8、箭头函数不能用作Generator函数，不能使用yeild关键字\n\n","level":3,"tagId":24}
{"_id":{"$oid":"61aa385f91a75000018d2cf3"},"exerciseKey":"72489e71-cf2d-4c98-8fd3-d43f7bfe217e","category":"QA","renderType":"md","title":"TypeScript中有哪些声明变量的方式？","desc":null,"options":null,"explanation":"声明变量有四种方法：\n\n```typescript\n// 声明类型和值，Declaring type and value in a single statement\nvar [identifier] : [type-annotation] = value; \n\n// 只声明类型，Declaring type without value\nvar [identifier] : [type-annotation]; \n\n// 只声明值，Declaring its value without type\nvar [identifier] = value; \n\n// 声明变量无类型和值，Declaring without value and type\nvar [identifier]; \n```","level":1,"tagId":19}
{"_id":{"$oid":"61aa3860291c0100017ee218"},"exerciseKey":"73f7c98b-68fd-455b-bc85-e94e1aa20ac1","category":"QA","renderType":"md","title":"什么是CDN？","desc":null,"options":null,"explanation":"CDN的全称是Content Delivery Network，即内容分发网络。\n\nCDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。\n\nCDN的关键技术主要有内容存储和分发技术。","level":1,"tagId":16}
{"_id":{"$oid":"61aa3860291c0100017ee219"},"exerciseKey":"748b2bec-7e35-4d5b-81e1-c6fb29f00464","category":"QA","renderType":"html","title":"HTTPS 降级","desc":"<p></p>","options":null,"explanation":"<p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">黑客可以利用SSL Stripping这种攻击手段，强制让HTTPS降级回HTTP，从而继续进行中间人攻击。</span></span></span></span></p><p><br/><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><span style=\"font-size:14ptpx\">预防方案：</span></span></span></span></p><p><br/><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">使用HSTS（HTTP Strict Transport Security），它通过下面这个HTTP Header以及一个预加载的清单，来告知浏览器和网站进行通信的时候强制性的使用HTTPS，而不是通过明文的HTTP进行通信。这里的“强制性”表现为浏览器无论在何种情况下都直接向务器端发起HTTPS请求，而不再像以往那样从HTTP跳转到HTTPS。另外，当遇到证书或者链接不安全的时候，则首先警告用户，并且不再让用户选择是否继续进行不安全的通信。</span></span></span></span></p>","level":2.5,"tagId":21}
{"_id":{"$oid":"61aa386134458700017f1cc2"},"exerciseKey":"7830d575-2143-47c3-b938-2f9448a7465e","category":"QA","renderType":"md","title":"React Fiber是什么？","desc":null,"options":null,"explanation":"## Fiber 出现的背景\n\n首先要知道的是，JavaScript 引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待。\n\n在这样的机制下，如果 JavaScript 线程长时间地占用了主线程，那么渲染层面的更新就不得不长时间地等待，界面长时间不更新，会导致页面响应度变差，用户可能会感觉到卡顿。\n\n而这正是 React 15 的 Stack Reconciler 所面临的问题，即是 JavaScript 对主线程的超时占用问题。Stack Reconciler 是一个同步的递归过程，使用的是 JavaScript 引擎自身的函数调用栈，它会一直执行到栈空为止，所以当 React 在渲染组件时，从开始到渲染完成整个过程是一气呵成的。如果渲染的组件比较庞大，js 执行会占据主线程较长时间，会导致页面响应度变差。\n\n而且所有的任务都是按照先后顺序，没有区分优先级，这样就会导致优先级比较高的任务无法被优先执行。\n\n## Fiber 是什么\n\nFiber 的中文翻译叫纤程，与进程、线程同为程序执行过程，Fiber 就是比线程还要纤细的一个过程。纤程意在对渲染过程实现进行更加精细的控制。\n\n从架构角度来看，Fiber 是对 React 核心算法（即调和过程）的重写。\n\n从编码角度来看，Fiber 是 React 内部所定义的一种数据结构，它是 Fiber 树结构的节点单位，也就是 React 16 新架构下的\"虚拟 DOM\"。\n\n一个 fiber 就是一个 JavaScript 对象，Fiber 的数据结构如下：\n\n```\ntype Fiber = {\n  // 用于标记fiber的WorkTag类型，主要表示当前fiber代表的组件类型如FunctionComponent、ClassComponent等\n  tag: WorkTag,\n  // ReactElement里面的key\n  key: null | string,\n  // ReactElement.type，调用`createElement`的第一个参数\n  elementType: any,\n  // The resolved function/class/ associated with this fiber.\n  // 表示当前代表的节点类型\n  type: any,\n  // 表示当前FiberNode对应的element组件实例\n  stateNode: any,\n\n  // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回\n  return: Fiber | null,\n  // 指向自己的第一个子节点\n  child: Fiber | null,\n  // 指向自己的兄弟结构，兄弟节点的return指向同一个父节点\n  sibling: Fiber | null,\n  index: number,\n\n  ref: null | (((handle: mixed) => void) & { _stringRef: ?string }) | RefObject,\n\n  // 当前处理过程中的组件props对象\n  pendingProps: any,\n  // 上一次渲染完成之后的props\n  memoizedProps: any,\n\n  // 该Fiber对应的组件产生的Update会存放在这个队列里面\n  updateQueue: UpdateQueue<any> | null,\n\n  // 上一次渲染的时候的state\n  memoizedState: any,\n\n  // 一个列表，存放这个Fiber依赖的context\n  firstContextDependency: ContextDependency<mixed> | null,\n\n  mode: TypeOfMode,\n\n  // Effect\n  // 用来记录Side Effect\n  effectTag: SideEffectTag,\n\n  // 单链表用来快速查找下一个side effect\n  nextEffect: Fiber | null,\n\n  // 子树中第一个side effect\n  firstEffect: Fiber | null,\n  // 子树中最后一个side effect\n  lastEffect: Fiber | null,\n\n  // 代表任务在未来的哪个时间点应该被完成，之后版本改名为 lanes\n  expirationTime: ExpirationTime,\n\n  // 快速确定子树中是否有不在等待的变化\n  childExpirationTime: ExpirationTime,\n\n  // fiber的版本池，即记录fiber更新过程，便于恢复\n  alternate: Fiber | null,\n}\n```\n\n## Fiber 如何解决问题的\n\nFiber 把一个渲染任务分解为多个渲染任务，而不是一次性完成，把每一个分割得很细的任务视作一个\"执行单元\"，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去，故任务会被分散到多个帧里面，中间可以返回至主进程控制执行其他任务，最终实现更流畅的用户体验。\n\n即是实现了\"增量渲染\"，实现了可中断与恢复，恢复后也可以复用之前的中间状态，并给不同的任务赋予不同的优先级，其中每个任务更新单元为 React Element 对应的 Fiber 节点。\n\n## Fiber 实现原理\n\n实现的方式是requestIdleCallback这一 API，但 React 团队 polyfill 了这个 API，使其对比原生的浏览器兼容性更好且拓展了特性。\n\n> window.requestIdleCallback()方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间 timeout，则有可能为了在超时前执行函数而打乱执行顺序。\n\nrequestIdleCallback回调的执行的前提条件是当前浏览器处于空闲状态。\n\n即requestIdleCallback的作用是在浏览器一帧的剩余空闲时间内执行优先度相对较低的任务。首先 React 中任务切割为多个步骤，分批完成。在完成一部分任务之后，将控制权交回给浏览器，让浏览器有时间再进行页面的渲染。等浏览器忙完之后有剩余时间，再继续之前 React 未完成的任务，是一种合作式调度。\n\n简而言之，由浏览器给我们分配执行时间片，我们要按照约定在这个时间内执行完毕，并将控制权还给浏览器。\n\nReact 16 的Reconciler基于 Fiber 节点实现，被称为 Fiber Reconciler。\n\n作为静态的数据结构来说，每个 Fiber 节点对应一个 React element，保存了该组件的类型（函数组件/类组件/原生组件等等）、对应的 DOM 节点等信息。\n\n作为动态的工作单元来说，每个 Fiber 节点保存了本次更新中该组件改变的状态、要执行的工作。\n\n每个 Fiber 节点有个对应的 React element，多个 Fiber 节点是如何连接形成树呢？靠如下三个属性：\n\n```js\n// 指向父级Fiber节点\nthis.return = null\n// 指向子Fiber节点\nthis.child = null\n// 指向右边第一个兄弟Fiber节点\nthis.sibling = null\n```\n\n\n\n","level":4,"tagId":13}
{"_id":{"$oid":"61aa3864b804f8000122aaac"},"exerciseKey":"82a3da79-23fb-42be-8f4b-9d52fc595954","category":"QA","renderType":"md","title":"JavaScript中的事件模型有哪些","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/32a182f0-74cf-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n## 一、事件与事件流\r\n\r\n`javascript`中的事件，可以理解就是在`HTML`文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等\r\n\r\n由于`DOM`是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念\r\n\r\n事件流都会经历三个阶段：\r\n\r\n- 事件捕获阶段(capture phase)\r\n- 处于目标阶段(target phase)\r\n- 事件冒泡阶段(bubbling phase)\r\n\r\n ![](https://static.vue-js.com/3e9a6450-74cf-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n事件冒泡是一种从下往上的传播方式，由最具体的元素（触发节点）然后逐渐向上传播到最不具体的那个节点，也就是`DOM`中最高层的父节点\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Event Bubbling</title>\r\n    </head>\r\n    <body>\r\n        <button id=\"clickMe\">Click Me</button>\r\n    </body>\r\n</html>\r\n```\r\n\r\n然后，我们给`button`和它的父元素，加入点击事件\r\n\r\n```js\r\nvar button = document.getElementById('clickMe');\r\n\r\nbutton.onclick = function() {\r\n  console.log('1.Button');\r\n};\r\ndocument.body.onclick = function() {\r\n  console.log('2.body');\r\n};\r\ndocument.onclick = function() {\r\n  console.log('3.document');\r\n};\r\nwindow.onclick = function() {\r\n  console.log('4.window');\r\n};\r\n```\r\n\r\n点击按钮，输出如下\r\n\r\n```js\r\n1.button\r\n2.body\r\n3.document\r\n4.window\r\n```\r\n\r\n点击事件首先在`button`元素上发生，然后逐级向上传播\r\n\r\n事件捕获与事件冒泡相反，事件最开始由不太具体的节点最早接受事件, 而最具体的节点（触发节点）最后接受事件\r\n\r\n\r\n\r\n## 二、事件模型\r\n\r\n事件模型可以分为三种：\r\n\r\n- 原始事件模型（DOM0级）\r\n- 标准事件模型（DOM2级）\r\n- IE事件模型（基本不用）\r\n\r\n\r\n\r\n### 原始事件模型\r\n\r\n事件绑定监听函数比较简单, 有两种方式：\r\n\r\n- HTML代码中直接绑定\r\n\r\n```js\r\n<input type=\"button\" onclick=\"fun()\">\r\n```\r\n\r\n- 通过`JS`代码绑定\r\n\r\n```js\r\nvar btn = document.getElementById('.btn');\r\nbtn.onclick = fun;\r\n```\r\n\r\n#### 特性\r\n\r\n- 绑定速度快\r\n\r\n`DOM0`级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行\r\n\r\n- 只支持冒泡，不支持捕获\r\n\r\n- 同一个类型的事件只能绑定一次\r\n\r\n```js\r\n<input type=\"button\" id=\"btn\" onclick=\"fun1()\">\r\n\r\nvar btn = document.getElementById('.btn');\r\nbtn.onclick = fun2;\r\n```\r\n\r\n如上，当希望为同一个元素绑定多个同类型事件的时候（上面的这个`btn`元素绑定2个点击事件），是不被允许的，后绑定的事件会覆盖之前的事件\r\n\r\n删除 `DOM0` 级事件处理程序只要将对应事件属性置为`null`即可\r\n\r\n```js\r\nbtn.onclick = null;\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 标准事件模型\r\n\r\n在该事件模型中，一次事件共有三个过程:\r\n\r\n- 事件捕获阶段：事件从`document`一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行\r\n- 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数\r\n- 事件冒泡阶段：事件从目标元素冒泡到`document`, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行\r\n\r\n事件绑定监听函数的方式如下:\r\n\r\n```\r\naddEventListener(eventType, handler, useCapture)\r\n```\r\n\r\n事件移除监听函数的方式如下:\r\n\r\n```\r\nremoveEventListener(eventType, handler, useCapture)\r\n```\r\n\r\n参数如下：\r\n\r\n- `eventType`指定事件类型(不要加on)\r\n- `handler`是事件处理函数\r\n- `useCapture`是一个`boolean`用于指定是否在捕获阶段进行处理，一般设置为`false`与IE浏览器保持一致\r\n\r\n举个例子：\r\n\r\n```js\r\nvar btn = document.getElementById('.btn');\r\nbtn.addEventListener(‘click’, showMessage, false);\r\nbtn.removeEventListener(‘click’, showMessage, false);\r\n```\r\n\r\n#### 特性\r\n\r\n- 可以在一个`DOM`元素上绑定多个事件处理器，各自并不会冲突\r\n\r\n```js\r\nbtn.addEventListener(‘click’, showMessage1, false);\r\nbtn.addEventListener(‘click’, showMessage2, false);\r\nbtn.addEventListener(‘click’, showMessage3, false);\r\n```\r\n\r\n- 执行时机\r\n\r\n当第三个参数(`useCapture`)设置为`true`就在捕获过程中执行，反之在冒泡过程中执行处理函数\r\n\r\n下面举个例子：\r\n\r\n```js\r\n<div id='div'>\r\n    <p id='p'>\r\n        <span id='span'>Click Me!</span>\r\n    </p >\r\n</div>\r\n```\r\n\r\n设置点击事件\r\n\r\n```js\r\nvar div = document.getElementById('div');\r\nvar p = document.getElementById('p');\r\n\r\nfunction onClickFn (event) {\r\n    var tagName = event.currentTarget.tagName;\r\n    var phase = event.eventPhase;\r\n    console.log(tagName, phase);\r\n}\r\n\r\ndiv.addEventListener('click', onClickFn, false);\r\np.addEventListener('click', onClickFn, false);\r\n```\r\n\r\n上述使用了`eventPhase`，返回一个代表当前执行阶段的整数值。1为捕获阶段、2为事件对象触发阶段、3为冒泡阶段\r\n\r\n点击`Click Me!`，输出如下\r\n\r\n```js\r\nP 3\r\nDIV 3\r\n```\r\n\r\n可以看到，`p`和`div`都是在冒泡阶段响应了事件，由于冒泡的特性，裹在里层的`p`率先做出响应\r\n\r\n如果把第三个参数都改为`true`\r\n\r\n```js\r\ndiv.addEventListener('click', onClickFn, true);\r\np.addEventListener('click', onClickFn, true);\r\n```\r\n\r\n输出如下\r\n\r\n```js\r\nDIV 1\r\nP 1\r\n```\r\n\r\n两者都是在捕获阶段响应事件，所以`div`比`p`标签先做出响应\r\n\r\n\r\n\r\n### IE事件模型\r\n\r\nIE事件模型共有两个过程:\r\n\r\n- 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。\r\n- 事件冒泡阶段：事件从目标元素冒泡到`document`, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行\r\n\r\n事件绑定监听函数的方式如下:\r\n\r\n```\r\nattachEvent(eventType, handler)\r\n```\r\n\r\n事件移除监听函数的方式如下:\r\n\r\n```\r\ndetachEvent(eventType, handler)\r\n```\r\n\r\n举个例子：\r\n\r\n```js\r\nvar btn = document.getElementById('.btn');\r\nbtn.attachEvent(‘onclick’, showMessage);\r\nbtn.detachEvent(‘onclick’, showMessage);\r\n```","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa3864bdfab500012c84b5"},"exerciseKey":"828350f9-b3d1-4593-8306-e5bc567b5c28","category":"QA","renderType":"md","title":"谈谈对 window.requestAnimationFrame 的理解","desc":null,"options":null,"explanation":"window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。\n\n与setTimeout相比，requestAnimationFrame最大的优势是由系统来决定回调函数的执行时机。具体一点讲，如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。\n\n这个API的调用很简单，如下所示：\n\n```javascript\nconst element = document.getElementById('some-element-you-want-to-animate');\nlet start;\n\nfunction step(timestamp) {\n  if (start === undefined)\n    start = timestamp;\n  const elapsed = timestamp - start;\n\n  //这里使用`Math.min()`确保元素刚好停在200px的位置。\n  element.style.transform = 'translateX(' + Math.min(0.1 * elapsed, 200) + 'px)';\n\n  if (elapsed < 2000) { // 在两秒后停止动画\n    window.requestAnimationFrame(step);\n  }\n}\n\nwindow.requestAnimationFrame(step);\n```\n\n除此之外，requestAnimationFrame还有以下两个优势：\n\n* CPU节能：使用setTimeout实现的动画，当页面被隐藏或最小化时，setTimeout 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而requestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统步伐走的requestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。\n* 函数节流：在高频率事件(resize,scroll等)中，为了防止在一个刷新间隔内发生多次函数执行，使用requestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销。一个刷新间隔内函数执行多次时没有意义的，因为显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。","level":3,"tagId":20}
{"_id":{"$oid":"61aa38643976eb00014e4541"},"exerciseKey":"82a008f4-a9a4-4af6-aa6f-ec9d3b026487","category":"QA","renderType":"md","title":"'1'.toString()为什么不会报错？","desc":null,"options":null,"explanation":"其实在这个语句运行的过程中做了这样几件事情：\n\n```js\nvar s = new Object('1');\ns.toString();\ns = null;\n```\n\n* 第一步: 创建Object类实例。注意为什么不是String ？ 由于Symbol和BigInt的出现，对它们调用new都会报错，目前ES6规范也不建议用new来创建基本类型的包装类。\n* 第二步: 调用实例方法。\n* 第三步: 执行完方法立即销毁这个实例。\n\n整个过程体现了 `基本包装类型` 的性质，而基本包装类型恰恰属于基本数据类型，包括Boolean, Number和String。","level":1,"tagId":10}
{"_id":{"$oid":"61aa386434458700017f1cd8"},"exerciseKey":"8318d81a-7336-466e-9761-cbd175ccfd2c","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst set = new Set()\n\nset.add(1)\nset.add(\"Lydia\")\nset.add({ name: \"Lydia\" })\n\nfor (let item of set) {\n  console.log(item + 2)\n}\n```","options":"{\"options\":[\"3, NaN, NaN\",\"3, 7, NaN\",\"3, Lydia2, [Object object]2\",\"\\\"12\\\", Lydia2, [Object object]2\"],\"isMulti\":false,\"answer\":[2]}","explanation":"“+”运算符不仅用于添加数值，还可以使用它来连接字符串。 每当JavaScript引擎发现一个或多个值不是数字时，就会将数字强制为字符串。 \n第一个是数字1。 1 + 2返回数字3。\n但是，第二个是字符串“Lydia”。 “Lydia”是一个字符串，2是一个数字：2被强制转换为字符串。 “Lydia”和“2”被连接起来，产生字符串“Lydia2”。\n`{name：“ Lydia”}`是一个对象。 数字和对象都不是字符串，因此将二者都字符串化。 每当我们对常规对象进行字符串化时，它就会变成`[Object object]`。 与“2”串联的“ [Object object]”成为“[Object object]2”。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38643976eb00014e4544"},"exerciseKey":"8313f0e7-db8e-4ecd-bf57-099dca7656fb","category":"Choice","renderType":"md","title":"向对象 person 添加什么时，可以通过执行 [...person] 获得类似 [\"Lydia Hallie\", 21] 的输出？","desc":"```javascript\nconst person = {\n  name: \"Lydia Hallie\",\n  age: 21\n}\n\n[...person] // [\"Lydia Hallie\", 21]\n```","options":"{\"options\":[\"不需要，对象默认就是可迭代的\",\"*[Symbol.iterator]() { for (let x in this) yield* this[x] }\",\"*[Symbol.iterator]() { for (let x in this) yield* Object.values(this) }\",\"*[Symbol.iterator]() { for (let x in this) yield this }\"],\"isMulti\":false,\"answer\":[2]}","explanation":"对象默认并不是可迭代的。如果迭代规则被定义，则一个对象是可迭代的（An iterable is an iterable if the iterator protocol is present）。我们可以通过添加迭代器symbol `[Symbol.iterator]` 来定义迭代规则，其返回一个 generator 对象，比如说构建一个 generator 函数 `*[Symbol.iterator]() {}`。如果我们想要返回数组 `[\"Lydia Hallie\", 21]`: `yield* Object.values(this)`，这个 generator 函数一定要 yield 对象 `person` 的`Object.values`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38658e97d90001808757"},"exerciseKey":"833fba72-1614-4502-adc3-1f5593ae6560","category":"QA","renderType":"md","title":"如何实现浏览器内多个标签页之间的通信？","desc":null,"options":null,"explanation":"可以通过调用localstorge、cookies等本地存储方式。","level":1,"tagId":12}
{"_id":{"$oid":"61aa386581337a00011e0607"},"exerciseKey":"83b73455-d22c-43ac-844d-d92c5ac6b662","category":"QA","renderType":"md","title":"js对象中，可枚举性（enumerable）是什么？","desc":null,"options":null,"explanation":"可枚举性（enumerable）用来控制所描述的属性，是否将被包括在for...in循环之中（除非属性名是一个Symbol）。具体来说，如果一个属性的enumerable为false，下面三个操作不会取到该属性。\n\n* for..in循环\n* Object.keys方法\n* JSON.stringify方法\n\n```javascript\nvar o = { a: 1, b: 2 };\n\no.c = 3;\nObject.defineProperty(o, \"d\", {\n  value: 4,\n  enumerable: false,\n});\n\no.d;\n// 4\n\nfor (var key in o) console.log(o[key]);\n// 1\n// 2\n// 3\n\nObject.keys(o); // [\"a\", \"b\", \"c\"]\n\nJSON.stringify(o); // => \"{a:1,b:2,c:3}\"\n```\n\n上面代码中，d属性的enumerable为false，所以一般的遍历操作都无法获取该属性，使得它有点像“秘密”属性，但还是可以直接获取它的值。\n\n至于for...in循环和Object.keys方法的区别，在于前者包括对象继承自原型对象的属性，而后者只包括对象本身的属性。如果需要获取对象自身的所有属性，不管enumerable的值，可以使用Object.getOwnPropertyNames方法。\n\n可枚举属性是指那些内部 “可枚举” 标志设置为 true 的属性。对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true。但是对于通过 Object.defineProperty 等定义的属性，该标识值默认为 false。","level":3,"tagId":10}
{"_id":{"$oid":"61aa386581337a00011e060a"},"exerciseKey":"8454a7ca-e1c0-4f25-abc3-4c8528593056","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nlet newList = [1, 2, 3].push(4)\n\nconsole.log(newList.push(5))\n```","options":"{\"options\":[\"[1, 2, 3, 4, 5]\",\"[1, 2, 3, 5]\",\"[1, 2, 3, 4]\",\"Error\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`.push`方法返回数组的长度，而不是数组本身！ 通过将`newList`设置为`[1,2,3].push(4)`，实际上`newList`等于数组的新长度：`4`。\n然后，尝试在`newList`上使用`.push`方法。 由于`newList`是数值`4`，抛出TypeError。","level":1,"tagId":32}
{"_id":{"$oid":"61aa3865b804f8000122aab0"},"exerciseKey":"849fda3c-2d6b-4192-8ea3-d8bc23541599","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst promise1 = Promise.resolve('First')\nconst promise2 = Promise.resolve('Second')\nconst promise3 = Promise.reject('Third')\nconst promise4 = Promise.resolve('Fourth')\n\nconst runPromises = async () => {\n\tconst res1 = await Promise.all([promise1, promise2])\n\tconst res2  = await Promise.all([promise3, promise4])\n\treturn [res1, res2]\n}\n\nrunPromises()\n\t.then(res => console.log(res))\n\t.catch(err => console.log(err))\n```","options":"{\"options\":[\"[['First', 'Second'], ['Fourth']]\",\"[['First', 'Second'], ['Third', 'Fourth']]\",\"[['First', 'Second']]\",\"'Third'\"],\"isMulti\":false,\"answer\":[3]}","explanation":" `Promise.all` 方法可以并行式运行promise。如果其中一个promise失败了，`Promise.all` 方法会带上被reject的promise的值_rejects_。在这个例子中， `promise3` 带着 `\"Third\"` 值reject。我们在调用 `runPromises` 时在 `runPromises` 函数内部的 `catch` 方法去捕获任意error从而捕获到被reject的值。因为 `promise3` 带着 `\"Third\"` 被reject，所以只有 `\"Third\"` 打印。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3865796412000191747c"},"exerciseKey":"8688fc18-d0c2-4122-ac6f-ea86d8798d42","category":"QA","renderType":"md","title":"为什么Vue中的v-if和v-for不建议一起用?","desc":null,"options":null,"explanation":"\r\n ![](https://static.vue-js.com/e8764810-3acb-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n\r\n## 一、作用\r\n\r\n`v-if` 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 `true`值的时候被渲染\r\n\r\n`v-for` 指令基于一个数组来渲染一个列表。`v-for` 指令需要使用 `item in items` 形式的特殊语法，其中 `items` 是源数据数组或者对象，而 `item` 则是被迭代的数组元素的别名\r\n\r\n在 `v-for` 的时候，建议设置`key`值，并且保证每个`key`值是独一无二的，这便于`diff`算法进行优化\r\n\r\n两者在用法上\r\n\r\n```js\r\n<Modal v-if=\"isShow\" />\r\n\r\n<li v-for=\"item in items\" :key=\"item.id\">\r\n    {{ item.label }}\r\n</li>\r\n```\r\n\r\n## 二、优先级\r\n\r\n`v-if`与`v-for`都是`vue`模板系统中的指令\r\n\r\n在`vue`模板编译的时候，会将指令系统转化成可执行的`render`函数\r\n\r\n### 示例\r\n\r\n编写一个`p`标签，同时使用`v-if`与 `v-for`\r\n\r\n```html\r\n<div id=\"app\">\r\n    <p v-if=\"isShow\" v-for=\"item in items\">\r\n        {{ item.title }}\r\n    </p>\r\n</div>\r\n```\r\n\r\n创建`vue`实例，存放`isShow`与`items`数据\r\n\r\n```js\r\nconst app = new Vue({\r\n  el: \"#app\",\r\n  data() {\r\n    return {\r\n      items: [\r\n        { title: \"foo\" },\r\n        { title: \"baz\" }]\r\n    }\r\n  },\r\n  computed: {\r\n    isShow() {\r\n      return this.items && this.items.length > 0\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n模板指令的代码都会生成在`render`函数中，通过`app.$options.render`就能得到渲染函数\r\n\r\n```js\r\nƒ anonymous() {\r\n  with (this) { return \r\n    _c('div', { attrs: { \"id\": \"app\" } }, \r\n    _l((items), function (item) \r\n    { return (isShow) ? _c('p', [_v(\"\\n\" + _s(item.title) + \"\\n\")]) : _e() }), 0) }\r\n}\r\n```\r\n\r\n`_l`是`vue`的列表渲染函数，函数内部都会进行一次`if`判断\r\n\r\n初步得到结论：`v-for`优先级是比`v-if`高\r\n\r\n再将`v-for`与`v-if`置于不同标签\r\n\r\n```html\r\n<div id=\"app\">\r\n    <template v-if=\"isShow\">\r\n        <p v-for=\"item in items\">{{item.title}}</p>\r\n    </template>\r\n</div>\r\n```\r\n\r\n再输出下`render`函数\r\n\r\n```js\r\nƒ anonymous() {\r\n  with(this){return \r\n    _c('div',{attrs:{\"id\":\"app\"}},\r\n    [(isShow)?[_v(\"\\n\"),\r\n    _l((items),function(item){return _c('p',[_v(_s(item.title))])})]:_e()],2)}\r\n}\r\n```\r\n\r\n这时候我们可以看到，`v-for`与`v-if`作用在不同标签时候，是先进行判断，再进行列表的渲染\r\n\r\n我们再在查看下`vue`源码\r\n\r\n源码位置：` \\vue-dev\\src\\compiler\\codegen\\index.js`\r\n\r\n```js\r\nexport function genElement (el: ASTElement, state: CodegenState): string {\r\n  if (el.parent) {\r\n    el.pre = el.pre || el.parent.pre\r\n  }\r\n  if (el.staticRoot && !el.staticProcessed) {\r\n    return genStatic(el, state)\r\n  } else if (el.once && !el.onceProcessed) {\r\n    return genOnce(el, state)\r\n  } else if (el.for && !el.forProcessed) {\r\n    return genFor(el, state)\r\n  } else if (el.if && !el.ifProcessed) {\r\n    return genIf(el, state)\r\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\r\n    return genChildren(el, state) || 'void 0'\r\n  } else if (el.tag === 'slot') {\r\n    return genSlot(el, state)\r\n  } else {\r\n    // component or element\r\n    ...\r\n}\r\n```\r\n\r\n在进行`if`判断的时候，`v-for`是比`v-if`先进行判断\r\n\r\n最终结论：`v-for`优先级比`v-if`高\r\n\r\n## 三、注意事项\r\n\r\n1. 永远不要把 `v-if` 和 `v-for` 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）\r\n2. 如果避免出现这种情况，则在外层嵌套`template`（页面渲染不生成`dom`节点），在这一层进行v-if判断，然后在内部进行v-for循环\r\n\r\n```js\r\n<template v-if=\"isShow\">\r\n    <p v-for=\"item in items\">\r\n</template>\r\n```\r\n\r\n3. 如果条件出现在循环内部，可通过计算属性`computed`提前过滤掉那些不需要显示的项\r\n\r\n```js\r\ncomputed: {\r\n    items: function() {\r\n      return this.list.filter(function (item) {\r\n        return item.isShow\r\n      })\r\n    }\r\n}\r\n```","level":1,"tagId":14}
{"_id":{"$oid":"61aa386539bf10000191ca09"},"exerciseKey":"870c404a-b200-43c7-8955-922b39de704f","category":"QA","renderType":"md","title":"Vue3有了解过吗？能说说跟Vue2的区别吗？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/774b6950-5087-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、Vue3介绍\n\n关于`vue3`的重构背景，尤大是这样说的：\n\n「Vue 新版本的理念成型于 2018 年末，当时 Vue 2 的代码库已经有两岁半了。比起通用软件的生命周期来这好像也没那么久，但在这段时期，前端世界已经今昔非比了\n\n在我们更新（和重写）Vue 的主要版本时，主要考虑两点因素：首先是新的 JavaScript 语言特性在主流浏览器中的受支持水平；其次是当前代码库中随时间推移而逐渐暴露出来的一些设计和架构问题」\n\n简要就是：\n- 利用新的语言特性(es6)\n- 解决架构问题\n\n## 哪些变化\n ![](https://static.vue-js.com/9169a900-5087-11eb-85f6-6fac77c0c9b3.png)\n \n从上图中，我们可以概览`Vue3`的新特性，如下：\n\n- 速度更快\n- 体积减少\n- 更易维护\n- 更接近原生\n- 更易使用\n\n\n### 速度更快\n\n`vue3`相比`vue2`\n\n- 重写了虚拟`Dom`实现\n\n- 编译模板的优化\n\n- 更高效的组件初始化\n\n- `undate`性能提高1.3~2倍\n\n- `SSR`速度提高了2~3倍\n\n ![](https://static.vue-js.com/ac1d23d0-5087-11eb-ab90-d9ae814b240d.png)\n\n\n\n### 体积更小\n\n通过`webpack`的`tree-shaking`功能，可以将无用模块“剪辑”，仅打包需要的\n\n能够`tree-shaking`，有两大好处：\n\n- 对开发人员，能够对`vue`实现更多其他的功能，而不必担忧整体体积过大\n\n- 对使用者，打包出来的包体积变小了\n\n`vue`可以开发出更多其他的功能，而不必担忧`vue`打包出来的整体体积过多\n\n ![](https://static.vue-js.com/c01af010-5087-11eb-85f6-6fac77c0c9b3.png) \n\n\n\n### 更易维护\n\n#### compositon Api\n\n- 可与现有的`Options API`一起使用\n- 灵活的逻辑组合与复用\n- `Vue3`模块可以和其他框架搭配使用\n\n![](https://static.vue-js.com/c5c919b0-5087-11eb-ab90-d9ae814b240d.png) \n\n\n\n#### 更好的Typescript支持\n\n`VUE3`是基于`typescipt`编写的，可以享受到自动的类型定义提示\n\n![](https://static.vue-js.com/cc688120-5087-11eb-ab90-d9ae814b240d.png)\n\n#### 编译器重写\n\n![](https://static.vue-js.com/fcd33800-5087-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n### 更接近原生\n\n可以自定义渲染 API\n\n![](https://static.vue-js.com/0c7d88a0-5088-11eb-ab90-d9ae814b240d.png)\n\n\n\n### 更易使用\n\n响应式 `Api` 暴露出来\n\n![](https://static.vue-js.com/26070260-5088-11eb-ab90-d9ae814b240d.png)\n\n轻松识别组件重新渲染原因\n\n![](https://static.vue-js.com/43b2fcb0-5088-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 二、Vue3新增特性\n\nVue 3 中需要关注的一些新功能包括：\n\n- framents\n- Teleport\n- composition Api\n- createRenderer\n\n\n\n### framents\n\n在 `Vue3.x` 中，组件现在支持有多个根节点\n\n```js\n<!-- Layout.vue -->\n<template>\n  <header>...</header>\n  <main v-bind=\"$attrs\">...</main>\n  <footer>...</footer>\n</template>\n```\n\n\n\n### Teleport\n\n`Teleport` 是一种能够将我们的模板移动到 `DOM` 中 `Vue app` 之外的其他位置的技术，就有点像哆啦A梦的“任意门”\n\n在`vue2`中，像 `modals`,`toast` 等这样的元素，如果我们嵌套在 `Vue` 的某个组件内部，那么处理嵌套组件的定位、`z-index` 和样式就会变得很困难\n\n通过`Teleport`，我们可以在组件的逻辑位置写模板代码，然后在 `Vue` 应用范围之外渲染它\n\n```html\n<button @click=\"showToast\" class=\"btn\">打开 toast</button>\n<!-- to 属性就是目标位置 -->\n<teleport to=\"#teleport-target\">\n    <div v-if=\"visible\" class=\"toast-wrap\">\n        <div class=\"toast-msg\">我是一个 Toast 文案</div>\n    </div>\n</teleport>\n```\n\n\n\n### createRenderer\n\n通过`createRenderer`，我们能够构建自定义渲染器，我们能够将 `vue` 的开发模型扩展到其他平台\n\n我们可以将其生成在`canvas`画布上\n\n![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da4437845ec54eb3829313c92fc81afe~tplv-k3u1fbpfcp-watermark.image)\n\n\n\n关于`createRenderer`，我们了解下基本使用，就不展开讲述了\n\n```js\nimport { createRenderer } from '@vue/runtime-core'\n\nconst { render, createApp } = createRenderer({\n  patchProp,\n  insert,\n  remove,\n  createElement,\n  // ...\n})\n\nexport { render, createApp }\n\nexport * from '@vue/runtime-core'\n```\n\n\n\n### composition Api\n\ncomposition Api，也就是组合式`api`，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理\n\n ![](https://static.vue-js.com/5e0bfb70-5088-11eb-ab90-d9ae814b240d.png)\n\n关于`compositon api`的使用，这里以下图展开\n\n![](https://static.vue-js.com/6f67a590-5088-11eb-85f6-6fac77c0c9b3.png)\n\n简单使用:\n\n```js\nexport default {\n    setup() {\n        const count = ref(0)\n        const double = computed(() => count.value * 2)\n        function increment() {\n            count.value++\n        }\n        onMounted(() => console.log('component mounted!'))\n        return {\n            count,\n            double,\n            increment\n        }\n    }\n}\n```\n\n\n\n### 三、非兼容变更\n\n### Global API\n\n- 全局 `Vue API` 已更改为使用应用程序实例\n- 全局和内部 `API` 已经被重构为可 `tree-shakable`\n\n### 模板指令\n\n- 组件上 `v-model` 用法已更改\n- `<template v-for>`和 非 `v-for`节点上`key`用法已更改\n- 在同一元素上使用的 `v-if` 和 `v-for` 优先级已更改\n- `v-bind=\"object\"` 现在排序敏感\n- `v-for` 中的 `ref` 不再注册 `ref` 数组\n\n### 组件\n\n- 只能使用普通函数创建功能组件\n- `functional` 属性在单文件组件 `(SFC) `\n- 异步组件现在需要 `defineAsyncComponent` 方法来创建\n\n### 渲染函数\n\n- 渲染函数` API `改变\n- `$scopedSlots` property 已删除，所有插槽都通过 `$slots` 作为函数暴露\n- 自定义指令 API 已更改为与组件生命周期一致\n- 一些转换 `class` 被重命名了：\n  - `v-enter` -> `v-enter-from`\n  - `v-leave` -> `v-leave-from`\n- 组件 `watch` 选项和实例方法 `$watch`不再支持点分隔字符串路径，请改用计算函数作为参数\n- 在 `Vue 2.x` 中，应用根容器的 `outerHTML` 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。`VUE3.x` 现在使用应用程序容器的 `innerHTML`。\n\n### 其他小改变\n\n- `destroyed` 生命周期选项被重命名为 `unmounted`\n- `beforeDestroy` 生命周期选项被重命名为 `beforeUnmount`\n- `[prop default`工厂函数不再有权访问 `this` 是上下文\n- 自定义指令 API 已更改为与组件生命周期一致\n- `data` 应始终声明为函数\n- 来自 `mixin` 的 `data` 选项现在可简单地合并\n- `attribute` 强制策略已更改\n- 一些过渡 `class` 被重命名\n- 组建 watch 选项和实例方法 `$watch`不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。\n- `<template>` 没有特殊指令的标记 (`v-if/else-if/else`、`v-for` 或 `v-slot`) 现在被视为普通元素，并将生成原生的 `<template>` 元素，而不是渲染其内部内容。\n- 在` Vue 2.x` 中，应用根容器的 `outerHTML` 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。`Vue 3.x` 现在使用应用容器的 `innerHTML`，这意味着容器本身不再被视为模板的一部分。\n\n### 移除 API\n\n- `keyCode` 支持作为 `v-on` 的修饰符\n- `$on`，`$off `和` $once` 实例方法\n- 过滤`filter`\n- 内联模板 `attribute`\n- `$destroy` 实例方法。用户不应再手动管理单个` Vue` 组件的生命周期。\n\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa386585c5f70001542fc0"},"exerciseKey":"8740bcd2-4a52-4c22-aed1-d573eb42dfa9","category":"QA","renderType":"md","title":"HTTPS 为什么是安全的？","desc":null,"options":null,"explanation":"以一个故事来学习 HTTPS：\n\n来自中国的张大胖和位于米国的 Bill 进行通信。\n\n由于张大胖和 Bill 都是使用 HTTP 进行通信，HTTP 是明文的，所以他们的聊天都是可被窥视的。于是，二人准备想要改变现状，所以 HTTPS 首先要解决的问题就是要保证传输的内容只有这两个人能看懂。\n\n## plan1：使用对称密钥\n\n![image.png](https://i.loli.net/2021/07/11/5FOMb9BLijPyRhg.png)\n\n两人商量了一下，可以使用对称密钥进行加密。（对称密钥也就是加密和解密使用的是同一个密钥）\n\n但是问题又来了~既然网络是不安全的，那么最开始的时候怎么将这个对称密钥发送出去呢？如果对称密钥在发送的时候就已经被拦截，那么发送的信息还是会被篡改和窥视啊~~\n\n所以这种对称密钥的弊端就是，可能被中间人拦截，这样中间人就可以获取到了密钥，就可以对传输的信息就行窥视和篡改。\n\n## plan2：使用非对称密钥\n\n![image.png](https://i.loli.net/2021/07/11/9TludQbrq73onX5.png)\n\nRSA（非对称加密算法）：双方必须协商一对密钥，一个私钥一个公钥。用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据， 只有对应的私钥才能解密。\n\n![image.png](https://i.loli.net/2021/07/11/i4TLQavrhuDzmCy.png)\n\n这样的话 Bill 将自己的公钥给张大胖，张大胖发送的信息使用 Bill 的公钥加密，这样，只有 Bill 使用自己的私钥才能获取\n\n但是这样有个弊端：\n\n**RSA 算法很慢**\n\n所以为了解决这个问题，我们使用非对称密钥+对称密钥结合的方式\n\n## plan3：非对称密钥+对称密钥\n\n使用对称密钥的好处是速度比较快，使用非对称密钥的好处是可以使得传输的内容不能被破解，因为就算你拦截到了数据，但是没有 Bill 的私钥，也是不能破解内容的。就比如说你抢了一个保险柜，但是没有保险柜的钥匙也不能打开保险柜。\n\n所以我们要结合两者的优点。使用 RSA 的方法将加密算法的对称密钥发送过去，之后就可以使用使用这个密钥，利用对称密钥来通信了。就比如说我将钥匙放进了保险柜，然后将保险柜寄给对方。\n\n## 中间人攻击\n\n\n还有一个问题就是在使用非对称密钥的时候，首先需要将 Bill 的公钥给张大胖，那么在这个过程中，安全是没有保障的，中间人可以拦截到 Bill 的公钥，就可以对拦截到的公钥进行篡改。\n\n这也就是相当于我有手机号，虽然是公开的，谁都可以给我打电话，但是刚开始你并不知道我的手机号，我需要将我的手机号发给你，在我发给你我的手机号的时候，被中间人拦截了，然后将我正确的手机号换成了错误的手机号，比如：110，然后，你收到的就是错误的手机号：110，但是你自己还不知道你收到的是错的手机号，这时候，你要是给我打电话，就尴尬了~~\n\n## 确认身份 —— 数字证书\n\n所以以上的步骤都是可行的，只需要最后一点就可以了，要确定 Bill 给张大胖的公钥确实是 Bill。 的公钥，而不是别人的。（刚刚电话号码的那个例子，也就是说，需要确定我给你发的电话号码是我的，没有被修改的）\n\n那怎么确认 Bill 给张大胖的公钥确实是 Bill 的呢？\n\n这个时候就需要公证处的存在了。也就是说我需要先将我的电话号码到公证处去公证一下，然后我将电话号码传给你之后，你在将你收到的电话号码和公证处的比对下，就知道是不是我的了。\n\n对应到计算机世界，那就是数字签名\n\n![image.png](https://i.loli.net/2021/07/11/UPemOE5slTRMN19.png)\n\n数字签名也就是相当于公证处在公证书上盖章。\n\n![image.png](https://i.loli.net/2021/07/11/imeKGx1XPruf3nU.png)\n\n数字签名和原始信息合在一起称为数字证书，Bill 只需将数字证书发送给张大胖就可以了。\n\n在拿到数字证书之后，就用同样的Hash 算法， 再次生成消息摘要，然后用CA的公钥对数字签名解密， 得到CA创建的消息摘要， 两者一比，就知道有没有人篡改了！\n\n![image.png](https://i.loli.net/2021/07/11/Di3A1hUwVPO4JCZ.png)\n\n以上你全部看完并且理解了，那么对于 HTTPS 你也就大概有个了解了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n","level":4,"tagId":16}
{"_id":{"$oid":"61aa3865cd02c30001dd228a"},"exerciseKey":"8769cc70-a32f-4b69-893d-40e819dd6c5f","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconsole.log('❤️' === '❤️')\n```","options":"{\"options\":[\"true\",\"false\"],\"isMulti\":false,\"answer\":[0]}","explanation":"在内部，表情符号是unicode。 heat表情符号的unicode是`“ U + 2764 U + FE0F”`。 对于相同的表情符号，它们总是相同的，因此我们将两个相等的字符串相互比较，这将返回true。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3866bdfab500012c84c2"},"exerciseKey":"879ca17c-91e6-488d-a835-d89715f382c0","category":"QA","renderType":"html","title":"单例模式","desc":null,"options":null,"explanation":"<p><strong>1.什么是单例</strong><br/> </p><ul><li>保证一个类只有一个实例，并且提供一个访问该全局访问点</li></ul><p><strong> 2.那些地方用到了单例模式</strong><br/> </p><ol><li>网站的计数器，一般也是采用单例模式实现，否则难以同步。</li><li>应用程序的日志应用，一般都是单例模式实现，只有一个实例去操作才好，否则内容不好追加显示。</li><li>多线程的线程池的设计一般也是采用单例模式，因为线程池要方便对池中的线程进行控制</li><li>Windows的（任务管理器）就是很典型的单例模式，他不能打开俩个</li><li>windows的（回收站）也是典型的单例应用。在整个系统运行过程中，回收站只维护一个实例。</li></ol><p><strong> 3.单例优缺点</strong></p><p><br/> <strong>优点：</strong></p><ol><li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就防止其它对象对自己的实例化，确保所有的对象都访问一个实例</li><li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。</li><li>提供了对唯一实例的受控访问。</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，当需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。</li><li>避免对共享资源的多重占用。</li></ol><p> <strong>缺点：</strong></p><ol><li>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。</li><li>由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</li></ol><p><strong> </strong></p><p><strong> 5.单例创建方式</strong></p><p><br/> <strong>（主要使用懒汉和懒汉式）</strong><br/> </p><ol><li>饿汉式:类初始化时,会立即加载该对象，线程天生安全,调用效率高。</li><li>懒汉式: 类初始化时,不会初始化该对象,真正需要使用的时候才会创建该对象,具备懒加载功能。</li></ol><p> </p>","level":2.5,"tagId":27}
{"_id":{"$oid":"61aa38663976eb00014e4551"},"exerciseKey":"87af03ec-e30e-40fb-b193-b203d070c112","category":"QA","renderType":"md","title":"setTimeout 为什么不能保证能够及时执行？","desc":null,"options":null,"explanation":"![image.png](https://i.loli.net/2021/11/17/tJw8inv6lC52YQc.png)\n\n> 主线程从任务队列中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop。\n\nsetTimeout 并不能保证执行的时间，是否及时执行取决于 JavaScript 线程是拥挤还是空闲。\n\n浏览器的JS引擎遇到setTimeout，拿走之后不会立即放入异步队列，同步任务执行之后，timer模块会到设置时间之后放到异步队列中。js引擎发现同步队列中没有要执行的东西了，即运行栈空了就从异步队列中读取，然后放到运行栈中执行。所以setTimeout可能会多了等待线程的时间。\n\n这时setTimeout函数体就变成了运行栈中的执行任务，运行栈空了，再监听异步队列中有没有要执行的任务，如果有就继续执行，如此循环，就叫Event Loop。","level":1,"tagId":10}
{"_id":{"$oid":"61aa386691a75000018d2d1b"},"exerciseKey":"887a5434-989a-45c3-bf97-b6988394ece6","category":"QA","renderType":"md","title":"简述微信小程序原理？","desc":null,"options":null,"explanation":"* 小程序本质就是一个单页面应用，所有的页面渲染和事件处理，都在一个页面内进行，但又可以通过微信客户端调用原生的各种接口；\n* 它的架构，是数据驱动的架构模式，它的UI和数据是分离的，所有的页面更新，都需要通过对数据的更改来实现；\n* 它从技术讲和现有的前端开发差不多，采用JavaScript、WXML、WXSS三种技术进行开发；\n* 功能可分为webview和appService两个部分；\n* webview用来展现UI，appService有来处理业务逻辑、数据及接口调用；\n* 两个部分在两个进程中运行，通过系统层JSBridge实现通信，实现UI的渲染、事件的处理等。","level":4,"tagId":23}
{"_id":{"$oid":"61aa38663d5f3a0001af55fd"},"exerciseKey":"88f7458f-418d-4362-bafa-f3ed98083d02","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nconsole.log(typeof typeof 1)\n```","options":"{\"options\":[\"\\\"number\\\"\",\"\\\"string\\\"\",\"\\\"object\\\"\",\"\\\"undefined\\\"\"],\"isMulti\":false,\"answer\":[1]}","explanation":"`typeof 1` 返回 `\"number\"`。\n`typeof \"number\"` 返回 `\"string\"`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386654ebf60001a1a428"},"exerciseKey":"89865bbd-72ac-4866-b4f6-a24f9c594d07","category":"QA","renderType":"md","title":"你在React项目中是如何使用Redux的? 项目结构是如何划分的？","desc":null,"options":null,"explanation":"## 一、背景\n\n`redux`是用于数据状态管理，而`react`是一个视图层面的库\n\n如果将两者连接在一起，可以使用官方推荐`react-redux`库，其具有高效且灵活的特性\n\n`react-redux`将组件分成：\n\n- 容器组件：存在逻辑处理\n- UI 组件：只负责现显示和交互，内部不处理逻辑，状态由外部控制\n\n通过`redux`将整个应用状态存储到`store`中，组件可以派发`dispatch`行为`action`给`store`\n\n其他组件通过订阅`store`中的状态`state`来更新自身的视图\n\n\n## 二、如何做\n\n使用`react-redux`分成了两大核心：\n\n- Provider\n- connection\n\n### Provider\n\n在`redux`中存在一个`store`用于存储`state`，如果将这个`store`存放在顶层元素中，其他组件都被包裹在顶层元素之上\n\n那么所有的组件都能够受到`redux`的控制，都能够获取到`redux`中的数据\n\n使用方式如下：\n\n```js\n<Provider store = {store}>\n    <App />\n<Provider>\n```\n\n\n\n### connection\n\n`connect`方法将`store`上的`getState `和 `dispatch `包装成组件的`props`\n\n导入`conect`如下：\n\n```js\nimport { connect } from \"react-redux\";\n```\n\n用法如下：\n\n```js\nconnect(mapStateToProps, mapDispatchToProps)(MyComponent)\n```\n\n可以传递两个参数：\n\n- mapStateToProps\n\n- mapDispatchToProps\n\n\n\n### mapStateToProps\n\n把`redux`中的数据映射到`react`中的`props`中去\n\n如下：\n\n```jsx\nconst mapStateToProps = (state) => {\n    return {\n        // prop : state.xxx  | 意思是将state中的某个数据映射到props中\n        foo: state.bar\n    }\n}\n```\n\n组件内部就能够通过`props`获取到`store`中的数据\n\n```cons\nclass Foo extends Component {\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n         // 这样子渲染的其实就是state.bar的数据了\n            <div>this.props.foo</div>\n        )\n    }\n}\nFoo = connect()(Foo)\nexport default Foo\n```\n\n\n### mapDispatchToProps\n\n将`redux`中的`dispatch`映射到组件内部的`props`中\n\n```jsx\nconst mapDispatchToProps = (dispatch) => { // 默认传递参数就是dispatch\n  return {\n    onClick: () => {\n      dispatch({\n        type: 'increatment'\n      });\n    }\n  };\n}\n\n```\n\n```js\nclass Foo extends Component {\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n         \n             <button onClick = {this.props.onClick}>点击increase</button>\n        )\n    }\n}\nFoo = connect()(Foo);\nexport default Foo;\n```\n\n\n### 小结\n\n整体流程图大致如下所示：\n\n ![](https://static.vue-js.com/3e47db10-e7dc-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 三、项目结构\n\n可以根据项目具体情况进行选择，以下列出两种常见的组织结构\n\n#### 按角色组织（MVC）\n\n角色如下：\n\n- reducers \n- actions\n- components \n- containers \n\n参考如下：\n\n```js\nreducers/\n  todoReducer.js\n  filterReducer.js\nactions/\n  todoAction.js\n  filterActions.js\ncomponents/\n  todoList.js\n  todoItem.js\n  filter.js\ncontainers/\n  todoListContainer.js\n  todoItemContainer.js\n  filterContainer.js\n```\n\n#### 按功能组织\n\n使用`redux`使用功能组织项目，也就是把完成同一应用功能的代码放在一个目录下，一个应用功能包含多个角色的代码\n\n`Redux`中，不同的角色就是`reducer`、`actions`和视图，而应用功能对应的就是用户界面的交互模块\n\n参考如下：\n\n```js\ntodoList/\n  actions.js\n  actionTypes.js\n  index.js\n  reducer.js\n  views/\n    components.js\n    containers.js\nfilter/\n  actions.js\n  actionTypes.js\n  index.js\n  reducer.js\n  views/\n    components.js\n    container.js\n```\n\n每个功能模块对应一个目录，每个目录下包含同样的角色文件：\n\n- actionTypes.js 定义action类型\n- actions.js 定义action构造函数\n- reducer.js  定义这个功能模块如果响应actions.js定义的动作\n- views 包含功能模块中所有的React组件，包括展示组件和容器组件\n- index.js 把所有的角色导入，统一导出\n\n其中`index`模块用于导出对外的接口\n\n```js\nimport * as actions from './actions.js';\nimport reducer from './reducer.js';\nimport view from './views/container.js';\n\nexport { actions, reducer, view };\n```\n\n导入方法如下：\n\n```js\nimport { actions, reducer, view as TodoList } from './xxxx'\n```\n","level":2.5,"tagId":13}
{"_id":{"$oid":"61aa3866291c0100017ee24d"},"exerciseKey":"89dcd3da-6e76-4935-9232-ce96d2b801bb","category":"QA","renderType":"md","title":"为什么JavaScript是单线程？","desc":null,"options":null,"explanation":"JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。\n\nJavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？\n\n所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。\n\n为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。\n\n","level":1,"tagId":10}
{"_id":{"$oid":"61aa3866ff0573000165b2ef"},"exerciseKey":"89eda79c-6cfb-4593-86d3-69d9ce9eb43d","category":"QA","renderType":"md","title":"面试官：说说Loader和Plugin的区别？编写Loader，Plugin的思路？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/93042280-a894-11eb-ab90-d9ae814b240d.png)\n\n## 一、区别\n\n前面两节我们有提到`Loader`与`Plugin`对应的概念，先来回顾下\n\n- loader 是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中\n- plugin 赋予了 webpack 各种灵活的功能，例如打包优化、资源管理、环境变量注入等，目的是解决 loader 无法实现的其他事\n\n从整个运行时机上来看，如下图所示：\n\n![](https://static.vue-js.com/9a04ec40-a7c2-11eb-ab90-d9ae814b240d.png)\n\n可以看到，两者在运行时机上的区别：\n\n-  loader 运行在打包文件之前\n-  plugins 在整个编译周期都起作用\n\n在` Webpack` 运行的生命周期中会广播出许多事件，`Plugin` 可以监听这些事件，在合适的时机通过` Webpack `提供的 `API `改变输出结果\n\n对于`loader`，实质是一个转换器，将A文件进行编译形成B文件，操作的是文件，比如将`A.scss`或`A.less`转变为`B.css`，单纯的文件转换过程\n\n\n\n## 二、编写loader\n\n在编写 `loader` 前，我们首先需要了解 `loader` 的本质\n\n其本质为函数，函数中的 `this` 作为上下文会被 `webpack` 填充，因此我们不能将 `loader`设为一个箭头函数\n\n函数接受一个参数，为 `webpack` 传递给 `loader` 的文件源内容\n\n函数中 `this` 是由 `webpack` 提供的对象，能够获取当前 `loader` 所需要的各种信息\n\n函数中有异步操作或同步操作，异步操作通过 `this.callback` 返回，返回值要求为 `string` 或者 `Buffer`\n\n代码如下所示：\n\n```js\n// 导出一个函数，source为webpack传递给loader的文件源内容\nmodule.exports = function(source) {\n    const content = doSomeThing2JsString(source);\n    \n    // 如果 loader 配置了 options 对象，那么this.query将指向 options\n    const options = this.query;\n    \n    // 可以用作解析其他模块路径的上下文\n    console.log('this.context');\n    \n    /*\n     * this.callback 参数：\n     * error：Error | null，当 loader 出错时向外抛出一个 error\n     * content：String | Buffer，经过 loader 编译后需要导出的内容\n     * sourceMap：为方便调试生成的编译后内容的 source map\n     * ast：本次编译生成的 AST 静态语法树，之后执行的 loader 可以直接使用这个 AST，进而省去重复生成 AST 的过程\n     */\n    this.callback(null, content); // 异步\n    return content; // 同步\n}\n```\n\n一般在编写`loader`的过程中，保持功能单一，避免做多种功能\n\n如` less `文件转换成 `css `文件也不是一步到位，而是 `less-loader`、`css-loader`、` style-loader `几个 `loader `的链式调用才能完成转换\n\n\n\n## 三、编写plugin\n\n由于`webpack`基于发布订阅模式，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务\n\n在之前也了解过，`webpack`编译会创建两个核心对象：\n\n- compiler：包含了 webpack 环境的所有的配置信息，包括 options，loader 和 plugin，和 webpack 整个生命周期相关的钩子\n- compilation：作为 plugin 内置事件回调函数的参数，包含了当前的模块资源、编译生成资源、变化的文件以及被跟踪依赖的状态信息。当检测到一个文件变化，一次新的 Compilation 将被创建\n\n如果自己要实现`plugin`，也需要遵循一定的规范：\n\n- 插件必须是一个函数或者是一个包含 `apply` 方法的对象，这样才能访问`compiler`实例\n- 传给每个插件的 `compiler` 和 `compilation` 对象都是同一个引用，因此不建议修改\n- 异步的事件需要在插件处理完任务时调用回调函数通知 `Webpack` 进入下一个流程，不然会卡住\n\n\n\n实现`plugin`的模板如下：\n\n```js\nclass MyPlugin {\n    // Webpack 会调用 MyPlugin 实例的 apply 方法给插件实例传入 compiler 对象\n  apply (compiler) {\n    // 找到合适的事件钩子，实现自己的插件功能\n    compiler.hooks.emit.tap('MyPlugin', compilation => {\n        // compilation: 当前打包构建流程的上下文\n        console.log(compilation);\n        \n        // do something...\n    })\n  }\n}\n```\n\n在 `emit` 事件发生时，代表源文件的转换和组装已经完成，可以读取到最终将输出的资源、代码块、模块及其依赖，并且可以修改输出资源的内容\n","level":2,"tagId":28}
{"_id":{"$oid":"61aa3866b804f8000122aab9"},"exerciseKey":"8b42c23f-1293-425d-87c2-c662a33b4f70","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst config = {\n\tlanguages: [],\n\tset language(lang) {\n\t\treturn this.languages.push(lang);\n\t}\n};\n\nconsole.log(config.language);\n```","options":"{\"options\":[\"function language(lang) { this.languages.push(lang }\",\"0\",\"[]\",\"undefined\"],\"isMulti\":false,\"answer\":[3]}","explanation":"方法 `language` 是一个 `setter`。Setters 并不保存一个实际值，它们的使命在于 _修改_ 属性。当调用方法 `setter`， 返回 `undefined`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38673976eb00014e4557"},"exerciseKey":"8b62ba3f-fe82-4bd5-b1a3-057b668ef01f","category":"QA","renderType":"md","title":"实现 instanceof","desc":null,"options":null,"explanation":"instanceof运算符用于检测构造函数的prototype属性是否出现在某个实例对象的原型链上。\n\n\n```js\nconst myInstanceof = (left, right) => {\n  // 基本数据类型都返回false\n  if (typeof left !== 'object' || left === null) return false;\n  let proto = Object.getPrototypeOf(left);\n  while (true) {\n    if (proto === null) return false;\n    if (proto === right.prototype) return true;\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n\n```","level":2,"tagId":26}
{"_id":{"$oid":"61aa386785c5f70001542fd1"},"exerciseKey":"8ba67b8e-c23a-4919-b645-2757fc1e8be4","category":"QA","renderType":"md","title":"git pull 和 git fetch 有什么区别？","desc":null,"options":null,"explanation":"git pull 命令从中央存储库中提取特定分支的新更改或提交，并更新本地存储库中的目标分支。\n\ngit fetch 也用于相同的目的，但它的工作方式略有不同。当你执行 git fetch 时，它会从所需的分支中提取所有新提交，并将其存储在本地存储库中的新分支中。如果要在目标分支中反映这些更改，必须在 git fetch 之后执行git merge。只有在对目标分支和获取的分支进行合并后才会更新目标分支。为了方便起见，请记住以下等式：\n\n>git pull = git fetch + git merge","level":1,"tagId":29}
{"_id":{"$oid":"61aa386734458700017f1cef"},"exerciseKey":"8bfd0ee4-896b-4e7e-bf7f-234a54344dd7","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nfunction sum(num1, num2 = num1) {\n  console.log(num1 + num2)\n}\n\nsum(10)\n```","options":"{\"options\":[\"NaN\",\"20\",\"ReferenceError\",\"undefined\"],\"isMulti\":false,\"answer\":[1]}","explanation":"您可以将默认参数的值设置为函数的另一个参数，只要另一个参数定义在其之前即可。 我们将值`10`传递给`sum`函数。 如果`sum`函数只接收1个参数，则意味着没有传递`num2`的值，这种情况下，`num1`的值等于传递的值`10`。 `num2`的默认值是`num1`的值，即`10`。 ```num1 + num2```返回`20`。\n如果您尝试将默认参数的值设置为后面定义的参数，则可能导致参数的值尚未初始化，从而引发错误。比如：\n```js\nfunction test(m = n, n = 2) {\n\tconsole.log(m, n)\n}\ntest() // Uncaught ReferenceError: Cannot access 'n' before initialization\ntest(3) // 3 2\ntest(3, 4) // 3 4\n```","level":1,"tagId":32}
{"_id":{"$oid":"61aa386785c5f70001542fd3"},"exerciseKey":"8d375b34-4323-48a3-9d02-9419cbf08f4e","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nconst sum = eval('10*10+5')\n```","options":"{\"options\":[\"105\",\"\\\"105\\\"\",\"TypeError\",\"\\\"10*10+5\\\"\"],\"isMulti\":false,\"answer\":[0]}","explanation":"代码以字符串形式传递进来，`eval` 对其求值。如果它是一个表达式，就像本例中那样，它对表达式求值。表达式是 `10 * 10 + 5`。这将返回数字 `105`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38678e97d90001808766"},"exerciseKey":"8d391a9c-0573-4edd-bd5d-84b9af70bad5","category":"QA","renderType":"md","title":"bind、call、apply 有什么区别？如何实现一个bind?","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/a900e460-7be4-11eb-ab90-d9ae814b240d.png)\r\n\r\n\r\n\r\n## 一、作用\r\n\r\n`call `、`apply `、`bind `作用是改变函数执行时的上下文，简而言之就是改变函数运行时的`this`指向\r\n\r\n那么什么情况下需要改变`this`的指向呢？下面举个例子\r\n\r\n```js\r\nconst name=\"lucy\";\r\nconst obj={\r\n    name:\"martin\",\r\n    say:function () {\r\n        console.log(this.name);\r\n    }\r\n};\r\nobj.say(); //martin，this指向obj对象\r\nsetTimeout(obj.say,0); //lucy，this指向window对象\r\n```\r\n\r\n从上面可以看到，正常情况`say`方法输出`martin`\r\n\r\n但是我们把`say`放在`setTimeout`方法中，在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候`this`指向`window`，所以输出`luck`\r\n\r\n我们实际需要的是`this`指向`obj`对象，这时候就需要该改变`this`指向了\r\n\r\n```js\r\nsetTimeout(obj.say.bind(obj),0); //martin，this指向obj对象\r\n```\r\n\r\n\r\n\r\n## 二、区别\r\n\r\n下面再来看看`apply`、`call`、`bind`的使用\r\n\r\n### apply\r\n\r\n`apply`接受两个参数，第一个参数是`this`的指向，第二个参数是函数接受的参数，以数组的形式传入\r\n\r\n改变`this`指向后原函数会立即执行，且此方法只是临时改变`this`指向一次\r\n\r\n```js\r\nfunction fn(...args){\r\n    console.log(this,args);\r\n}\r\nlet obj = {\r\n    myname:\"张三\"\r\n}\r\n\r\nfn.apply(obj,[1,2]); // this会变成传入的obj，传入的参数必须是一个数组；\r\nfn(1,2) // this指向window\r\n```\r\n\r\n当第一个参数为`null`、`undefined`的时候，默认指向`window`(在浏览器中)\r\n\r\n```js\r\nfn.apply(null,[1,2]); // this指向window\r\nfn.apply(undefined,[1,2]); // this指向window\r\n```\r\n\r\n\r\n\r\n### call\r\n\r\n`call`方法的第一个参数也是`this`的指向，后面传入的是一个参数列表\r\n\r\n跟`apply`一样，改变`this`指向后原函数会立即执行，且此方法只是临时改变`this`指向一次\r\n\r\n```js\r\nfunction fn(...args){\r\n    console.log(this,args);\r\n}\r\nlet obj = {\r\n    myname:\"张三\"\r\n}\r\n\r\nfn.call(obj,1,2); // this会变成传入的obj，传入的参数必须是一个数组；\r\nfn(1,2) // this指向window\r\n```\r\n\r\n同样的，当第一个参数为`null`、`undefined`的时候，默认指向`window`(在浏览器中)\r\n\r\n```js\r\nfn.call(null,[1,2]); // this指向window\r\nfn.call(undefined,[1,2]); // this指向window\r\n```\r\n\r\n\r\n\r\n### bind\r\n\r\nbind方法和call很相似，第一参数也是`this`的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)\r\n\r\n改变`this`指向后不会立即执行，而是返回一个永久改变`this`指向的函数\r\n\r\n```js\r\nfunction fn(...args){\r\n    console.log(this,args);\r\n}\r\nlet obj = {\r\n    myname:\"张三\"\r\n}\r\n\r\nconst bindFn = fn.bind(obj); // this 也会变成传入的obj ，bind不是立即执行需要执行一次\r\nbindFn(1,2) // this指向obj\r\nfn(1,2) // this指向window\r\n```\r\n\r\n\r\n### 小结\r\n\r\n从上面可以看到，`apply`、`call`、`bind`三者的区别在于：\r\n\r\n- 三者都可以改变函数的`this`对象指向\r\n- 三者第一个参数都是`this`要指向的对象，如果如果没有这个参数或参数为`undefined`或`null`，则默认指向全局`window`\r\n- 三者都可以传参，但是`apply`是数组，而`call`是参数列表，且`apply`和`call`是一次性传入参数，而`bind`可以分为多次传入\r\n- `bind `是返回绑定this之后的函数，`apply `、`call` 则是立即执行 \r\n\r\n\r\n\r\n## 三、实现\r\n\r\n实现`bind`的步骤，我们可以分解成为三部分：\r\n\r\n- 修改`this`指向\r\n- 动态传递参数\r\n\r\n```js\r\n// 方式一：只在bind中传递函数参数\r\nfn.bind(obj,1,2)()\r\n\r\n// 方式二：在bind中传递函数参数，也在返回函数中传递参数\r\nfn.bind(obj,1)(2)\r\n```\r\n\r\n- 兼容`new`关键字\r\n\r\n整体实现代码如下：\r\n\r\n```js\r\nFunction.prototype.myBind = function (context) {\r\n    // 判断调用对象是否为函数\r\n    if (typeof this !== \"function\") {\r\n        throw new TypeError(\"Error\");\r\n    }\r\n\r\n    // 获取参数\r\n    const args = [...arguments].slice(1),\r\n          fn = this;\r\n\r\n    return function Fn() {\r\n\r\n        // 根据调用方式，传入不同绑定值\r\n        return fn.apply(this instanceof Fn ? new fn(...arguments) : context, args.concat(...arguments)); \r\n    }\r\n}\r\n```","level":2.5,"tagId":26}
{"_id":{"$oid":"61aa38673d5f3a0001af5605"},"exerciseKey":"8dad4e08-b8b7-4593-bb5e-8df4d4b14499","category":"QA","renderType":"md","title":"一台设备的dpr，是否是可变的？","desc":null,"options":null,"explanation":"`devicePixelRatio`，中文名称是设备像素比。这个概念在移动开发的时候会被特别关注，因为它关系到了整个画面的观感、布局甚至是清晰度。在JavaScript BOM中，它是window全局对象下的一个属性，它的定义如下：\n\n> dpr = 设备像素 / CSS像素\n\n也有文章把设备像素称为物理像素，把CSS像素称为独立像素（DIPs），但所指的都是同样概念：\n\n(1) 首先说设备像素。举手机的例子来说，设备像素也就是在手机广告上经常会看到的1920*1080像素或1280*720像素，也就是常说的分辨率为1080p或720p。它所指的是设备上有多少个能够显示一种特定颜色的最小区域，在任何设备中这个数值都是不会变的。\n\n(2) 再说CSS像素，它的一种更广义的叫法是独立像素。CSS像素是为web开发者所打造的，是在CSS和JavaScript中使用的一个抽象的层，我们在CSS中定义的width: 100px;、font-size: 16px;等属性都是指CSS像素。而相对于CSS像素，设备像素这个概念在前端中几乎用不上（除了screen.width/height）。\n\n那么，从定义来看，dpr的意义就是：在一个设备（的每个方向）上，每个CSS像素会被多少个实际的物理像素来显示。\n\n![image.png](https://i.loli.net/2021/08/15/nD9KeYyGqO6tk7b.png)\n\n上图中，一个蓝色方块代表一个设备像素，一个黄色方块代表一个CSS像素。我们可以通过这张图来理清dpr的概念：\n\n* 如图左，一个设备像素覆盖了多个CSS像素，dpr < 1，对应用户的缩小操作；\n* 如图右，一个CSS像素覆盖了多个设备像素，dpr > 1，对应用户的放大操作。\n\n由于**用户的缩放操作会改变dpr**，所以设备dpr是在默认缩放为100%的情况下定义的。\n\n","level":3,"tagId":12}
{"_id":{"$oid":"61aa386734458700017f1cf1"},"exerciseKey":"8e0a5da4-74f1-4dcd-9217-bc151cd93870","category":"QA","renderType":"md","title":"简单说下你对 HTTP2 的理解","desc":null,"options":null,"explanation":"## HTTP/1.1 存在的问题\n\n* TCP 连接数限制\n\n对于同一个域名，浏览器最多只能同时创建 6~8 个 TCP 连接 (不同浏览器不一样)。为了解决数量限制，出现了 域名分片 技术，其实就是资源分域，将资源放在不同域名下 (比如二级子域名下)，这样就可以针对不同域名创建连接并请求，以一种讨巧的方式突破限制，但是滥用此技术也会造成很多问题，比如每个 TCP 连接本身需要经过 DNS 查询、三步握手、慢启动等，还占用额外的 CPU 和内存，对于服务器来说过多连接也容易造成网络拥挤、交通阻塞等，对于移动端来说问题更明显。\n\n* 线头阻塞 (Head Of Line Blocking) 问题\n\n每个 TCP 连接同时只能处理一个请求 - 响应，浏览器按 FIFO 原则处理请求，如果上一个响应没返回，后续请求 - 响应都会受阻。为了解决此问题，出现了 管线化 - pipelining 技术，但是管线化存在诸多问题，比如第一个响应慢还是会阻塞后续响应、服务器为了按序返回相应需要缓存多个响应占用更多资源、浏览器中途断连重试服务器可能得重新处理多个请求、还有必须客户端 - 代理 - 服务器都支持管线化。\n\n* Header 内容多，而且每次请求 Header 不会变化太多，没有相应的压缩传输优化方案\n\n* 为了尽可能减少请求数，需要做合并文件、雪碧图、资源内联等优化工作，但是这无疑造成了单个请求内容变大延迟变高的问题，且内嵌的资源不能有效地使用缓存机制\n\n* 明文传输不安全\n\n## HTTP2 的优势\n\n### 二进制分帧层 (Binary Framing Layer)\n\n帧是数据传输的最小单位，以二进制传输代替原本的明文传输，原本的报文消息被划分为更小的数据帧。\n\n### 多路复用 (MultiPlexing)\n\n在一个 TCP 连接上，我们可以向对方不断发送帧，每帧的 stream identifier 的标明这一帧属于哪个流，然后在对方接收时，根据 stream identifier 拼接每个流的所有帧组成一整块数据。\n\n把 HTTP/1.1 每个请求都当作一个流，那么多个请求变成多个流，请求响应数据分成多个帧，不同流中的帧交错地发送给对方，这就是 HTTP/2 中的多路复用。\n\n流的概念实现了单连接上多请求 - 响应并行，解决了线头阻塞的问题，减少了 TCP 连接数量和 TCP 连接慢启动造成的问题\n所以 http2 对于同一域名只需要创建一个连接，而不是像 http/1.1 那样创建 6~8 个连接。\n\n### 服务端推送 (Server Push)\n\n浏览器发送一个请求，服务器主动向浏览器推送与这个请求相关的资源，这样浏览器就不用发起后续请求。\nServer-Push 主要是针对资源内联做出的优化，相较于 http/1.1 资源内联的优势:\n\n* 客户端可以缓存推送的资源\n* 客户端可以拒收推送过来的资源\n* 推送资源可以由不同页面共享\n* 服务器可以按照优先级推送资源\n\n### Header 压缩 (HPACK)\n\n使用 HPACK 算法来压缩首部内容\n\n### 应用层的重置连接\n\n对于 HTTP/1 来说，是通过设置 tcp segment 里的 reset flag 来通知对端关闭连接的。这种方式会直接断开连接，下次再发请求就必须重新建立连接。HTTP/2 引入 RST_STREAM 类型的 frame，可以在不断开连接的前提下取消某个 request 的 stream，表现更好。\n\n### 请求优先级设置\n\nHTTP/2 里的每个 stream 都可以设置依赖 (Dependency) 和权重，可以按依赖树分配优先级，解决了关键请求被阻塞的问题\n\n### 流量控制\n\n每个 http2 流都拥有自己的公示的流量窗口，它可以限制另一端发送数据。对于每个流来说，两端都必须告诉对方自己还有足够的空间来处理新的数据，而在该窗口被扩大前，另一端只被允许发送这么多数据。\n\n### HTTP/1 的几种优化可以弃用\n\n合并文件、内联资源、雪碧图、域名分片对于 HTTP/2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多\n\n\n\n","level":3.5,"tagId":16}
{"_id":{"$oid":"61aa38673dd7f70001832fa5"},"exerciseKey":"8edaa033-4005-41cc-a255-f175f6c4eb6b","category":"QA","renderType":"md","title":"[] == ![]结果是什么？","desc":null,"options":null,"explanation":"== 中，左右两边都需要转换为数字然后进行比较。\n\n[]转换为数字为0。\n\n![] 首先是转换为布尔值，由于[]作为一个引用类型转换为布尔值为true, 因此![]为false，进而在转换成数字，变为0。 0 == 0 ， 结果为true","level":2,"tagId":10}
{"_id":{"$oid":"61aa3867d00c060001bf1274"},"exerciseKey":"8ee26123-8081-423b-bb77-b45b500facbf","category":"QA","renderType":"md","title":"回文链表","desc":"请判断一个链表是否为回文链表。\n\n示例 1:\n```\n输入: 1->2\n输出: false\n```\n\n示例 2:\n```\n输入: 1->2->2->1\n输出: true\n```","options":null,"explanation":"## 方案一\n\n利用链表的后续遍历，使用函数调用栈作为后序遍历栈，来判断是否回文\n```javascript\nvar isPalindrome = function(head) {\n    let left = head;\n    function traverse(right) {\n        if (right == null) return true;\n        let res = traverse(right.next);\n        res = res && (right.val === left.val);\n        left = left.next;\n        return res;\n    }\n    return traverse(head);\n};\n```\n\n## 方案二\n\n通过快、慢指针找链表中点，然后反转链表，比较两个链表两侧是否相等，来判断是否是回文链表\n\n```javascript\nvar isPalindrome = function(head) {\n    // 反转 slower 链表\n    let right = reverse(findCenter(head));\n    let left = head;\n    // 开始比较\n    while (right != null) {\n        if (left.val !== right.val) {\n            return false;\n        }\n        left = left.next;\n        right = right.next;\n    }\n    return true;\n}\nfunction findCenter(head) {\n    let slower = head, faster = head;\n    while (faster && faster.next != null) {\n        slower = slower.next;\n        faster = faster.next.next;\n    }\n    // 如果 faster 不等于 null，说明是奇数个，slower 再移动一格\n    if (faster != null) {\n        slower = slower.next;\n    }\n    return slower;\n}\nfunction reverse(head) {\n    let prev = null, cur = head, nxt = head;\n    while (cur != null) {\n        nxt = cur.next;\n        cur.next = prev;\n        prev = cur;\n        cur = nxt;\n    }\n    return prev;\n}\n\n```\n\n\n","level":2,"tagId":31}
{"_id":{"$oid":"61aa38680f30890001ab814c"},"exerciseKey":"8f02af9e-ae19-40dd-896d-a568cca4b963","category":"QA","renderType":"md","title":"tsconfig.json文件有什么用？","desc":null,"options":null,"explanation":"tsconfig.json文件是JSON格式的文件。 \n\n在tsconfig.json文件中，可以指定不同的选项来告诉编译器如何编译当前项目。\n\n目录中包含tsconfig.json文件，表明该目录是TypeScript项目的根目录。\n\n\n```\n// 常用配置\n{\n  /*\n      tsconfig.json是ts编译器的配置文件，ts可以根据它的信息来对待吗进行编译 可以再tsconfig中写注释\n      include : 用来指定哪些文件需要被编译\n      exclude : 用来指定哪些文件不需要被编译 ：默认node_module\n      extends : 用来指定继承的配置文件\n      files   : 用来指定被编译的文件列表，只有编译少量文件才使用\n      compilerOptions : 编译器的选项是配置文件中非常重要也是非常复杂的配置选项\n  */\n  \"include\":[\n    // ** : 任意目录 ， * : 任意文件\n    \"./src/**/*\"\n  ],\n  \"exclude\": [\n    \"./src/hello/**/*\"\n  ],\n  // \"extends\": \"./configs/base\",\n  \"files\": [\n    \"1.ts\",\n    // \"2.ts\"\n  ],\n  \"compilerOptions\": {\n    // 用来指定 ES 版本 ESNext : 最新版。 'ES3', 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ESNext'\n    \"target\": \"ES2020\",\n    // 指定要使用模块化的规范 : 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6'/'ES2015', 'ES2020' or 'ESNext'\n    \"module\": \"ESNext\",\n    // 用来指定项目中要使用的库 'ES5', 'ES6', 'ES2015', 'ES7', 'ES2016', 'ES2017', 'ES2018', 'ESNext', 'DOM', 'DOM.Iterable',\n    //                          'WebWorker', 'ScriptHost', 'ES2015.Core', 'ES2015.Collection', 'ES2015.Generator', 'ES2015.Iterable', \n    //                          'ES2015.Promise', 'ES2015.Proxy', 'ES2015.Reflect', 'ES2015.Symbol', 'ES2015.Symbol.WellKnown', \n    //                          'ES2016.Array.Include', 'ES2017.object', 'ES2017.Intl', 'ES2017.SharedMemory', 'ES2017.String', \n    //                          'ES2017.TypedArrays', 'ES2018.Intl', 'ES2018.Promise', 'ES2018.RegExp', 'ESNext.AsyncIterable', \n    //                          'ESNext.Array', 'ESNext.Intl', 'ESNext.Symbol'\n    // 运行在浏览器中不用设置，运行在node或其他中才需要设置\n    // \"lib\":[]，\n    // 用来指定编译后文件的存放位置\n    \"outDir\":\"./dist\",\n    // 将代码合并为一个文件,设置之后所有的全局作用域中的代码会合并到同一个文件中 但是只能在  'amd' and 'system' 中才能使用\n    // \"outFile\": \"./dist/app.js\",\n    // 是否对js文件进行编译，默认false\n    \"allowJs\": false,\n    // 是否检查js代码是否符合语法规范，默认false\n    \"checkJs\": false,\n    // 是否移除注释，默认false\n    \"removeComments\":false,\n    // 是否不生成编译后文件，默认false\n    \"noEmit\": false,\n    // 当有错误时是否生成文件，默认false\n    \"noEmitOnError\": false,\n    // 是否生成sourceMap，默认false  这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。有了它，出错的时候，通过断点工具可以直接显示原始代码，而不是转换后的代码。\n    \"sourceMap\":false,\n\n    // 所有的严格检查的总开关，默认false\n    \"strict\": false,\n    // 编译后的文件是否开启严格模式，默认false\n    \"alwaysStrict\": false,\n    // 不允许隐式的any，默认false(允许)\n    \"noImplicitAny\": false,\n    // 不允许隐式的this，默认false(允许)\n    \"noImplicitThis\": false,\n    // 是否严格的检查空值，默认false 检查有可能为null的地方\n    \"strictNullChecks\": true,\n    // 是否严格检查bind、call和apply的参数列表，默认false  检查是否有多余参数\n    \"strictBindCallApply\":false,\n    // 是否严格检查函数的类型，\n    \"strictFunctionTypes\":false,\n    // 是否严格检查属性是否初始化，默认false\n    \"strictPropertyInitialization\":false,\n\n    // 是否检查switch语句包含正确的break，默认false\n    \"noFallthroughCasesInSwitch\":false,\n    // 检查函数没有隐式的返回值，默认false\n    \"noImplicitReturns\":false,\n    // 是否检查检查未使用的局部变量，默认false\n    \"noUnusedLocals\":false,\n    // 是否检查未使用的参数，默认false\n    \"noUnusedParameters\":false,\n\n    // 是否检查不可达代码报错，默认false   true，忽略不可达代码 false，不可达代码将引起错误\n    \"allowUnreachableCode\":false\n  }\n}\n```\n","level":2,"tagId":19}
{"_id":{"$oid":"61aa3868c2d0220001c964f5"},"exerciseKey":"9083d1ed-fedc-4aec-ba50-df836e983e55","category":"QA","renderType":"md","title":"CSS3新增了哪些特性？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/d58f6df0-9b5e-11eb-ab90-d9ae814b240d.png)\n\n\n## 一、是什么\n\n`css`，即层叠样式表（Cascading Style Sheets）的简称，是一种标记语言，由浏览器解释执行用来使页面变得更美观\n\n`css3`是`css`的最新标准，是向后兼容的，`CSS1/2 `的特性在` CSS3` 里都是可以使用的\n\n而` CSS3` 也增加了很多新特性，为开发带来了更佳的开发体验\n\n\n## 二、选择器\n\n`css3`中新增了一些选择器，主要为如下图所示：\n\n ![](https://static.vue-js.com/e368cf20-9b5e-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 三、新样式\n\n### 边框\n\n`css3`新增了三个边框属性，分别是：\n\n- border-radius：创建圆角边框\n- box-shadow：为元素添加阴影\n\n- border-image：使用图片来绘制边框\n\n\n\n#### box-shadow\n\n设置元素阴影，设置属性如下：\n\n- 水平阴影\n- 垂直阴影\n- 模糊距离(虚实)\n- 阴影尺寸(影子大小)\n- 阴影颜色\n- 内/外阴影\n\n其中水平阴影和垂直阴影是必须设置的\n\n\n### 背景\n\n新增了几个关于背景的属性，分别是`background-clip`、`background-origin`、`background-size`和`background-break`\n\n\n\n#### background-clip\n\n用于确定背景画区，有以下几种可能的属性：\n\n- background-clip: border-box; 背景从border开始显示\n- background-clip: padding-box; 背景从padding开始显示\n- background-clip: content-box; 背景显content区域开始显示\n- background-clip: no-clip; 默认属性，等同于border-box\n\n通常情况，背景都是覆盖整个元素的，利用这个属性可以设定背景颜色或图片的覆盖范围\n\n\n\n#### background-origin\n\n当我们设置背景图片时，图片是会以左上角对齐，但是是以`border`的左上角对齐还是以`padding`的左上角或者`content`的左上角对齐? `border-origin`正是用来设置这个的\n\n- background-origin: border-box; 从border开始计算background-position\n- background-origin: padding-box; 从padding开始计算background-position\n- background-origin: content-box; 从content开始计算background-position\n\n默认情况是`padding-box`，即以`padding`的左上角为原点\n\n\n\n#### background-size\n\nbackground-size属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性：\n\n- background-size: contain; 缩小图片以适合元素（维持像素长宽比）\n- background-size: cover; 扩展元素以填补元素（维持像素长宽比）\n- background-size: 100px 100px; 缩小图片至指定的大小\n- background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包 含元素的尺寸\n\n\n\n### background-break\n\n元素可以被分成几个独立的盒子（如使内联元素span跨越多行），`background-break` 属性用来控制背景怎样在这些不同的盒子中显示\n\n- background-break: continuous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样）\n- background-break: bounding-box; 把盒之间的距离计算在内；\n- background-break: each-box; 为每个盒子单独重绘背景\n\n\n\n### 文字\n\n### word-wrap\n\n语法：`word-wrap: normal|break-word`\n\n- normal：使用浏览器默认的换行\n- break-all：允许在单词内换行\n\n\n\n### text-overflow\n\n` text-overflow`设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择：\n\n- clip：修剪文本\n- ellipsis：显示省略符号来代表被修剪的文本\n\n\n\n### text-shadow\n\n`text-shadow`可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色\n\n\n\n### text-decoration\n\nCSS3里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置：\n\n- text-fill-color: 设置文字内部填充颜色\n\n- text-stroke-color: 设置文字边界填充颜色\n\n- text-stroke-width: 设置文字边界宽度\n\n\n\n### 颜色\n\n`css3`新增了新的颜色表示方式`rgba`与`hsla`\n\n- rgba分为两部分，rgb为颜色值，a为透明度\n- hala分为四部分，h为色相，s为饱和度，l为亮度，a为透明度\n\n\n\n## 四、transition 过渡\n\n`transition`属性可以被指定为一个或多个` CSS `属性的过渡效果，多个属性之间用逗号进行分隔，必须规定两项内容：\n\n- 过度效果\n- 持续时间\n\n语法如下：\n\n```css\ntransition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0)\n```\n\n上面为简写模式，也可以分开写各个属性\n\n```css\ntransition-property: width; \ntransition-duration: 1s;\ntransition-timing-function: linear;\ntransition-delay: 2s;\n```\n\n\n\n### 五、transform 转换\n\n`transform`属性允许你旋转，缩放，倾斜或平移给定元素\n\n`transform-origin`：转换元素的位置（围绕那个点进行转换），默认值为`(x,y,z):(50%,50%,0)`\n\n使用方式：\n\n- transform: translate(120px, 50%)：位移\n- transform: scale(2, 0.5)：缩放\n- transform: rotate(0.5turn)：旋转\n- transform: skew(30deg, 20deg)：倾斜\n\n\n\n### 六、animation 动画\n\n动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬\n\nanimation也有很多的属性\n\n- animation-name：动画名称\n- animation-duration：动画持续时间\n- animation-timing-function：动画时间函数\n- animation-delay：动画延迟时间\n- animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为infinite，意思是无限循环\n- animation-direction：动画执行方向\n- animation-paly-state：动画播放状态\n- animation-fill-mode：动画填充模式\n\n\n\n## 七、渐变\n\n颜色渐变是指在两个颜色之间平稳的过渡，`css3`渐变包括\n\n- linear-gradient：线性渐变\n\n> background-image: linear-gradient(direction, color-stop1, color-stop2, ...);\n\n- radial-gradient：径向渐变\n\n> linear-gradient(0deg, red, green); \n\n\n\n## 八、其他\n\n关于`css3`其他的新特性还包括`flex`弹性布局、`Grid`栅格布局，这两个布局在以前就已经讲过，这里就不再展示\n\n除此之外，还包括多列布局、媒体查询、混合模式等等......\n\n","level":0.5,"tagId":11}
{"_id":{"$oid":"61aa3868c2d0220001c964f6"},"exerciseKey":"90a39d35-309c-4699-a1f7-bd352899965b","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst member = new Person(\"Lydia\", \"Hallie\");\nPerson.getFullName = function () {\n  return `${this.firstName} ${this.lastName}`;\n}\n\nconsole.log(member.getFullName());\n```","options":"{\"options\":[\"TypeError\",\"SyntaxError\",\"Lydia Hallie\",\"undefined undefined\"],\"isMulti\":false,\"answer\":[0]}","explanation":"你不能像常规对象那样，给构造函数添加属性。如果你想一次性给所有实例添加特性，你应该使用原型。因此本例中，使用如下方式：\n```js\nPerson.prototype.getFullName = function () {\n  return `${this.firstName} ${this.lastName}`;\n}\n```\n这才会使 `member.getFullName()` 起作用。为什么这么做有益的？假设我们将这个方法添加到构造函数本身里。也许不是每个 `Person` 实例都需要这个方法。这将浪费大量内存空间，因为它们仍然具有该属性，这将占用每个实例的内存空间。相反，如果我们只将它添加到原型中，那么它只存在于内存中的一个位置，但是所有实例都可以访问它！","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386891a75000018d2d2a"},"exerciseKey":"90fb24f5-8333-44a9-b3b7-ef199eeaaaeb","category":"Choice","renderType":"md","title":"num的值是什么?","desc":"```javascript\nconst num = parseInt(\"7*6\", 10);\n```","options":"{\"options\":[\"42\",\"\\\"42\\\"\",\"7\",\"NaN\"],\"isMulti\":false,\"answer\":[2]}","explanation":"只返回了字符串中第一个字母. 设定了 _进制_ 后 (也就是第二个参数，指定需要解析的数字是什么进制: 十进制、十六机制、八进制、二进制等等……),`parseInt` 检查字符串中的字符是否合法. 一旦遇到一个在指定进制中不合法的字符后，立即停止解析并且忽略后面所有的字符。\n`*`就是不合法的数字字符。所以只解析到`\"7\"`，并将其解析为十进制的`7`. `num`的值即为`7`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3868d00c060001bf1276"},"exerciseKey":"918f3f51-70e0-4dc7-8865-558be6abd388","category":"QA","renderType":"md","title":"ESLint 是什么？","desc":null,"options":null,"explanation":"ESLint是一个用来识别 ECMAScript 并且按照规则给出报告的代码检测工具，使用它可以避免低级错误和统一代码的风格。如果每次在代码提交之前都进行一次eslint代码检查，就不会因为某个字段未定义为undefined或null这样的错误而导致服务崩溃，可以有效的控制项目代码的质量。\n\n在许多方面，它和 JSLint、JSHint 相似，除了少数的例外：\n\n* ESLint 使用 Espree 解析 JavaScript。\n* ESLint 使用 AST 去分析代码中的模式。\n* ESLint 是完全插件化的。每一个规则都是一个插件并且你可以在运行时添加更多的规则。\n","level":2,"tagId":29}
{"_id":{"$oid":"61aa38680d111e00010372ca"},"exerciseKey":"919bfdcc-3d20-469f-b789-f99cc15410fe","category":"QA","renderType":"md","title":"下面执行后输出什么？","desc":"```js\nfor(var i = 1; i <= 5; i ++){\n  setTimeout(function timer(){\n  \tconsole.log(i)\n  }, 0)\n}\n```","options":null,"explanation":"结论： 输出5个6。\n\n因为setTimeout为宏任务，由于JS中单线程eventLoop机制，在主线程同步任务执行完后才去执行宏任\n务，因此循环结束后setTimeout中的回调才依次执行，但输出i的时候当前作用域没有，往上一级再找，发现了i,此时循环已经结束，i变成了6。因此会全部输出6。","level":2,"tagId":10}
{"_id":{"$oid":"61aa3868b804f8000122aacb"},"exerciseKey":"91d69ce5-0958-4c4c-b181-ef99c58aa053","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction getFruit(fruits) {\n\tconsole.log(fruits?.[1]?.[1])\n}\n\ngetFruit([['🍊', '🍌'], ['🍍']])\ngetFruit()\ngetFruit([['🍍'], ['🍊', '🍌']])\n```","options":"{\"options\":[\"null, undefined, 🍌\",\"[], null, 🍌\",\"[], [], 🍌\",\"undefined, undefined, 🍌\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`?` 允许我们去选择性地访问对象内部更深层的嵌套属性。 我们尝试打印 `fruits` 数组索引值为 `1` 的子数组内部的索引值为 `1` 的元素。 如果在 `fruits` 数组索引值 为 `1` 的位置不存在元素，会直接返回 `undefined`。 如果 `fruits` 数组在索引值为 `1` 的位置存在元素，但是子数组在索引值为 `1` 的位置不存在元素，也会返回 `undefined`。\n首先，我们尝试打印 `[['🍊', '🍌'], ['🍍']]` 的子数组 `['🍍']` 的第2个元素。这个子数组只包含一个元素，也就意味着在索引值为 `1` 的位置不存在元素，所以返回的是 `undefined` 。\n其次，我们在没有传入任何参数调用了 `getFruits` 函数，也就意味着形参 `fruits` 的默认值为`undefined`。因为我们选择性地链接了 `fruits` 在索引值为 `1` 的元素，因为在索引值为 `1` 的位置不存在元素，因此返回的是 `undefined` 。\n最后，我们尝试打印 `['🍍'], ['🍊', '🍌']` 的子数组 `['🍊', '🍌']` 的第2个元素。子数组索引值为 `1`的位置为 `🍌` ，因此它被打印出了。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3868ff0573000165b2f8"},"exerciseKey":"9211a856-9131-4bb9-b7a3-e876bb528ee7","category":"QA","renderType":"html","title":"如何用webpack来优化前端性能","desc":null,"options":null,"explanation":"<p>用webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运行快速高效。<br/> </p><ul><li>压缩代码:删除多余的代码、注释、简化代码的写法等等方式。可以利用webpack的<code>UglifyJsPlugin</code>和<code>ParallelUglifyPlugin</code>来压缩JS文件， 利用<code>cssnano</code>（css-loader?minimize）来压缩css</li><li> </li><li>利用CDN加速: 在构建过程中，将引用的静态资源路径修改为CDN上对应的路径。可以利用webpack对于<code>output</code>参数和各loader的<code>publicPath</code>参数来修改资源路径</li><li>Tree Shaking: 将代码中永远不会走到的片段删除掉。可以通过在启动webpack时追加参数<code>--optimize-minimize</code>来实现</li><li>Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利用浏览器缓存</li><li>提取公共第三方库:  SplitChunksPlugin插件来进行公共模块抽取,利用浏览器缓存可以长期缓存这些无需频繁变动的公共代码</li></ul><p></p>","level":1.5,"tagId":28}
{"_id":{"$oid":"61aa38698e97d9000180876c"},"exerciseKey":"92af3054-e90c-4c0d-a5af-2a54b19931ab","category":"QA","renderType":"md","title":"小程序页面间有哪些传递数据的方法？","desc":null,"options":null,"explanation":"* 使用全局变量实现数据传递\n* 页面跳转或重定向时，使用url带参数传递数据\n* 使用组件模板 template传递参数\n* 使用缓存传递参数\n* 使用数据库传递数据","level":1,"tagId":23}
{"_id":{"$oid":"61aa386985c5f70001542fdd"},"exerciseKey":"92dd5aef-8f57-4e85-a877-30f46de54fc9","category":"QA","renderType":"md","title":"Typescript什么是方法重载？","desc":null,"options":null,"explanation":"如果子类或子类具有与父类中声明的方法相同的方法，则称为方法重写。 基本上，它在派生类或子类中重新定义了基类方法。\n\n方法覆盖规则：\n\n* 该方法必须与父类中的名称相同。\n* 它必须具有与父类相同的参数。\n* 必须存在IS-A关系或继承。\n","level":2,"tagId":19}
{"_id":{"$oid":"61aa38693d5f3a0001af560f"},"exerciseKey":"943c425e-0b59-4ef6-b22d-6596c19a962a","category":"Choice","renderType":"md","title":"哪些方法修改了原数组?","desc":"```javascript\nconst emojis = ['✨', '🥑', '😍']\n\nemojis.map(x => x + '✨')\nemojis.filter(x => x !== '🥑')\nemojis.find(x => x !== '🥑')\nemojis.reduce((acc, cur) => acc + '✨')\nemojis.slice(1, 2, '✨') \nemojis.splice(1, 2, '✨')\n```","options":"{\"options\":[\"All of them\",\"map reduce slice splice\",\"map slice splice\",\"splice\"],\"isMulti\":false,\"answer\":[3]}","explanation":"使用`splice`方法，我们通过删除，替换或添加元素来修改原始数组。 在这种情况下，我们从索引1中删除了2个元素（我们删除了`'🥑'`和`'😍'`），同时添加了✨emoji表情。\n`map`，`filter`和`slice`返回一个新数组，`find`返回一个元素，而`reduce`返回一个减小的值。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38693d5f3a0001af5613"},"exerciseKey":"947278fd-7485-4e8c-a704-83d48280e05a","category":"QA","renderType":"md","title":"web常见的攻击方式有哪些，以及如何进行防御？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/d0892930-8d1d-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\nWeb攻击（WebAttack）是针对用户上网行为或网站服务器等设备进行攻击的行为\n\n如植入恶意代码，修改网站权限，获取网站用户隐私信息等等\n\nWeb应用程序的安全性是任何基于Web业务的重要组成部分\n\n确保Web应用程序安全十分重要，即使是代码中很小的 bug 也有可能导致隐私信息被泄露\n\n站点安全就是为保护站点不受未授权的访问、使用、修改和破坏而采取的行为或实践\n\n我们常见的Web攻击方式有\n\n- XSS (Cross Site Scripting) 跨站脚本攻击\n- CSRF（Cross-site request forgery）跨站请求伪造\n- SQL注入攻击\n\n\n## 二、XSS\n\nXSS，跨站脚本攻击，允许攻击者将恶意代码植入到提供给其它用户使用的页面中\n\n`XSS`涉及到三方，即攻击者、客户端与`Web`应用\n\n`XSS`的攻击目标是为了盗取存储在客户端的`cookie`或者其他网站用于识别客户端身份的敏感信息。一旦获取到合法用户的信息后，攻击者甚至可以假冒合法用户与网站进行交互\n\n举个例子：\n\n一个搜索页面，根据`url`参数决定关键词的内容\n\n```html\n<input type=\"text\" value=\"<%= getParameter(\"keyword\") %>\">\n<button>搜索</button>\n<div>\n  您搜索的关键词是：<%= getParameter(\"keyword\") %>\n</div>\n```\n\n这里看似并没有问题，但是如果不按套路出牌呢？\n\n用户输入`\"><script>alert('XSS');</script>`，拼接到 HTML 中返回给浏览器。形成了如下的 HTML：\n\n```html\n<input type=\"text\" value=\"\"><script>alert('XSS');</script>\">\n<button>搜索</button>\n<div>\n  您搜索的关键词是：\"><script>alert('XSS');</script>\n</div>\n```\n\n浏览器无法分辨出 `<script>alert('XSS');</script>` 是恶意代码，因而将其执行，试想一下，如果是获取`cookie`发送对黑客服务器呢？\n\n根据攻击的来源，`XSS`攻击可以分成：\n\n- 存储型\n- 反射型\n- DOM 型\n\n\n\n### 存储型\n\n存储型 XSS 的攻击步骤：\n\n1. 攻击者将恶意代码提交到目标网站的数据库中\n2. 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器\n3. 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行\n4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作\n\n这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等\n\n\n\n### 反射型 XSS\n\n反射型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码\n2. 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器\n3. 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行\n4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作\n\n反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。\n\n反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。\n\n由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。\n\nPOST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见\n\n\n\n### DOM 型 XSS\n\nDOM 型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码\n2. 用户打开带有恶意代码的 URL\n3. 用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行\n4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作\n\nDOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞\n\n\n\n### XSS的预防\n\n通过前面介绍，看到`XSS`攻击的两大要素：\n\n- 攻击者提交而恶意代码\n- 浏览器执行恶意代码\n\n针对第一个要素，我们在用户输入的过程中，过滤掉用户输入的恶劣代码，然后提交给后端，但是如果攻击者绕开前端请求，直接构造请求就不能预防了\n\n而如果在后端写入数据库前，对输入进行过滤，然后把内容给前端，但是这个内容在不同地方就会有不同显示\n\n例如：\n\n一个正常的用户输入了 `5 < 7` 这个内容，在写入数据库前，被转义，变成了 `5 < 7`\n\n在客户端中，一旦经过了 `escapeHTML()`，客户端显示的内容就变成了乱码( `5 < 7` )\n\n在前端中，不同的位置所需的编码也不同。\n\n- 当 `5 < 7` 作为 HTML 拼接页面时，可以正常显示：\n\n```html\n<div title=\"comment\">5 &lt; 7</div>\n```\n\n- 当 `5 < 7` 通过 Ajax 返回，然后赋值给 JavaScript 的变量时，前端得到的字符串就是转义后的字符。这个内容不能直接用于 Vue 等模板的展示，也不能直接用于内容长度计算。不能用于标题、alert 等\n\n\n\n可以看到，过滤并非可靠的，下面就要通过防止浏览器执行恶意代码：\n\n在使用 `.innerHTML`、`.outerHTML`、`document.write()` 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 `.textContent`、`.setAttribute()` 等\n\n如果用 `Vue/React` 技术栈，并且不使用 `v-html`/`dangerouslySetInnerHTML` 功能，就在前端 `render` 阶段避免 `innerHTML`、`outerHTML` 的 XSS 隐患\n\nDOM 中的内联事件监听器，如 `location`、`onclick`、`onerror`、`onload`、`onmouseover` 等，`<a>` 标签的 `href` 属性，JavaScript 的 `eval()`、`setTimeout()`、`setInterval()` 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免\n\n```js\n<!-- 链接内包含恶意代码 -->\n< a href=\" \">1</ a>\n\n<script>\n// setTimeout()/setInterval() 中调用恶意代码\nsetTimeout(\"UNTRUSTED\")\nsetInterval(\"UNTRUSTED\")\n\n// location 调用恶意代码\nlocation.href = 'UNTRUSTED'\n\n// eval() 中调用恶意代码\neval(\"UNTRUSTED\")\n```\n\n\n\n\n\n## 三、CSRF\n\nCSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求\n\n利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目\n\n一个典型的CSRF攻击有着如下的流程：\n\n- 受害者登录a.com，并保留了登录凭证（Cookie）\n- 攻击者引诱受害者访问了b.com\n- b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie\n- a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求\n- a.com以受害者的名义执行了act=xx\n- 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作\n\n`csrf`可以通过`get`请求，即通过访问`img`的页面后，浏览器自动访问目标地址，发送请求\n\n同样，也可以设置一个自动提交的表单发送`post`请求，如下：\n\n```js\n<form action=\"http://bank.example/withdraw\" method=POST>\n    <input type=\"hidden\" name=\"account\" value=\"xiaoming\" />\n    <input type=\"hidden\" name=\"amount\" value=\"10000\" />\n    <input type=\"hidden\" name=\"for\" value=\"hacker\" />\n</form>\n<script> document.forms[0].submit(); </script> \n```\n\n访问该页面后，表单会自动提交，相当于模拟用户完成了一次`POST`操作\n\n还有一种为使用`a`标签的，需要用户点击链接才会触发\n\n访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作\n\n```html\n< a href=\"http://test.com/csrf/withdraw.php?amount=1000&for=hacker\" taget=\"_blank\">\n    重磅消息！！\n<a/>\n```\n\n\n\n### CSRF的特点\n\n- 攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生\n- 攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据\n- 整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”\n- 跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪\n\n\n\n### CSRF的预防  \n\nCSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性\n\n防止`csrf`常用方案如下：\n\n- 阻止不明外域的访问\n  - 同源检测\n  - Samesite Cookie\n- 提交时要求附加本域才能获取的信息\n  - CSRF Token\n  - 双重Cookie验证\n\n\n\n这里主要讲讲`token`这种形式，流程如下：\n\n- 用户打开页面的时候，服务器需要给这个用户生成一个Token\n- 对于GET请求，Token将附在请求地址之后。对于 POST 请求来说，要在 form 的最后加上\n\n```html\n<input type=”hidden” name=”csrftoken” value=”tokenvalue”/>\n```\n\n- 当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性\n\n\n\n## 四、SQL注入\n\nSql 注入攻击，是通过将恶意的 `Sql `查询或添加语句插入到应用的输入参数中，再在后台 `Sql `服务器上解析执行进行的攻击\n\n ![](https://static.vue-js.com/ead52fa0-8d1d-11eb-85f6-6fac77c0c9b3.png)\n\n流程如下所示：\n\n- 找出SQL漏洞的注入点\n\n- 判断数据库的类型以及版本\n- 猜解用户名和密码\n- 利用工具查找Web后台管理入口\n- 入侵和破坏\n\n预防方式如下：\n\n- 严格检查输入变量的类型和格式\n- 过滤和转义特殊字符\n- 对访问数据库的Web应用程序采用Web应用防火墙\n\n上述只是列举了常见的`web`攻击方式，实际开发过程中还会遇到很多安全问题，对于这些问题， 切记不可忽视\n\n","level":3,"tagId":21}
{"_id":{"$oid":"61aa386985c5f70001542fe0"},"exerciseKey":"95dd5690-238f-46ab-b232-6bff6520240a","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nconst numbers = [1, 2, 3]\nnumbers[10] = 11\nconsole.log(numbers)\n```","options":"{\"options\":[\"[1, 2, 3, 7 x null, 11]\",\"[1, 2, 3, 11]\",\"[1, 2, 3, 7 x empty, 11]\",\"SyntaxError\"],\"isMulti\":false,\"answer\":[2]}","explanation":"当你为数组设置超过数组长度的值的时候， JavaScript 会创建名为 \"empty slots\" 的东西。它们的值实际上是 `undefined`。你会看到以下场景：\n`[1, 2, 3, 7 x empty, 11]`\n这取决于你的运行环境（每个浏览器，以及 node 环境，都有可能不同）","level":1,"tagId":32}
{"_id":{"$oid":"61aa3869c2d0220001c964fd"},"exerciseKey":"9764b6d2-511b-40e3-9430-34b62711396c","category":"QA","renderType":"md","title":"说说对 CSS 预编语言的理解，以及它们之间的区别","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/81cca1c0-a42c-11eb-85f6-6fac77c0c9b3.png)\n\n\n## 一、是什么\n\n`Css` 作为一门标记性语言，语法相对简单，对使用者的要求较低，但同时也带来一些问题\n\n需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 `Css` 编写经验而很难写出组织良好且易于维护的 `Css` 代码\n\n`Css`预处理器便是针对上述问题的解决方案\n\n#### 预处理语言\n\n扩充了 `Css` 语言，增加了诸如变量、混合（mixin）、函数等功能，让 `Css` 更易维护、方便\n\n本质上，预处理是`Css`的超集\n\n包含一套自定义的语法及一个解析器，根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 `Css` 文件\n\n\n## 二、有哪些\n\n`Css`预编译语言在前端里面有三大优秀的预编处理器，分别是：\n\n- sass\n- less\n- stylus\n\n\n\n### sass\n\n2007 年诞生，最早也是最成熟的 `Css `预处理器，拥有 Ruby 社区的支持和 `Compass` 这一最强大的 `Css `框架，目前受 `LESS` 影响，已经进化到了全面兼容 `Css` 的 `Scss`\n\n文件后缀名为`.sass`与`scss`，可以严格按照 sass 的缩进方式省去大括号和分号\n\n### less\n\n2009年出现，受` SASS `的影响较大，但又使用 `Css` 的语法，让大部分开发者和设计师更容易上手，在 `Ruby `社区之外支持者远超过 `SASS`\n\n其缺点是比起 `SASS `来，可编程功能不够，不过优点是简单和兼容 `Css`，反过来也影响了 `SASS `演变到了` Scss` 的时代\n\n\n\n### stylus\n\n`Stylus `是一个`Css`的预处理框架，2010 年产生，来自 `Node.js `社区，主要用来给 `Node` 项目进行 `Css` 预处理支持\n\n所以` Stylus` 是一种新型语言，可以创建健壮的、动态的、富有表现力的` Css`。比较年轻，其本质上做的事情与` SASS/LESS `等类似\n\n\n\n\n\n## 三、区别\n\n虽然各种预处理器功能强大，但使用最多的，还是以下特性：\n\n- 变量（variables）\n- 作用域（scope）\n- 代码混合（ mixins）\n- 嵌套（nested rules）\n- 代码模块化（Modules）\n\n因此，下面就展开这些方面的区别\n\n\n\n### 基本使用\n\nless和scss\n\n```Css\n.box {\n  display: block;\n}\n```\n\nsass\n\n```Css\n.box\n  display: block\n```\n\nstylus\n\n```Css\n.box\n  display: block\n```\n\n\n\n\n\n### 嵌套\n\n三者的嵌套语法都是一致的，甚至连引用父级选择器的标记 & 也相同\n\n区别只是 Sass 和 Stylus 可以用没有大括号的方式书写\n\nless\n\n```Css\n.a {\n  &.b {\n    color: red;\n  }\n}\n```\n\n\n\n### 变量\n\n变量无疑为 Css 增加了一种有效的复用方式，减少了原来在 Css 中无法避免的重复「硬编码」\n\n`less`声明的变量必须以`@`开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号`:`分隔开\n\n```Css\n@red: #c00;\n\nstrong {\n  color: @red;\n}\n```\n\n`sass`声明的变量跟`less`十分的相似，只是变量名前面使用`@`开头\n\n```Css\n$red: #c00;\n\nstrong {\n  color: $red;\n}\n```\n\n`stylus`声明的变量没有任何的限定，可以使用`$`开头，结尾的分号`;`可有可无，但变量与变量值之间需要使用`=`\n\n在`stylus`中我们不建议使用`@`符号开头声明变量\n\n```Css\nred = #c00\n\nstrong\n  color: red\n```\n\n\n\n\n\n### 作用域\n\n`Css` 预编译器把变量赋予作用域，也就是存在生命周期。就像 `js `一样，它会先从局部作用域查找变量，依次向上级作用域查找\n\n`sass`中不存在全局变量\n\n```Css\n$color: black;\n.scoped {\n  $bg: blue;\n  $color: white;\n  color: $color;\n  background-color:$bg;\n}\n.unscoped {\n  color:$color;\n} \n```\n\n编译后\n\n```Css\n.scoped {\n  color:white;/*是白色*/\n  background-color:blue;\n}\n.unscoped {\n  color:white;/*白色（无全局变量概念）*/\n} \n```\n\n所以，在`sass`中最好不要定义相同的变量名\n\n\n\n`less`与`stylus`的作用域跟`javascript`十分的相似，首先会查找局部定义的变量，如果没有找到，会像冒泡一样，一级一级往下查找，直到根为止\n\n```Css\n@color: black;\n.scoped {\n  @bg: blue;\n  @color: white;\n  color: @color;\n  background-color:@bg;\n}\n.unscoped {\n  color:@color;\n} \n```\n\n编译后：\n\n```Css\n.scoped {\n  color:white;/*白色（调用了局部变量）*/\n  background-color:blue;\n}\n.unscoped {\n  color:black;/*黑色（调用了全局变量）*/\n} \n```\n\n\n\n\n\n### 混入\n\n混入（mixin）应该说是预处理器最精髓的功能之一了，简单点来说，`Mixins`可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用\n\n可以在`Mixins`中定义变量或者默认参数\n\n在`less`中，混合的用法是指将定义好的`ClassA`中引入另一个已经定义的`Class`，也能使用够传递参数，参数变量为`@`声明\n\n```Css\n.alert {\n  font-weight: 700;\n}\n\n.highlight(@color: red) {\n  font-size: 1.2em;\n  color: @color;\n}\n\n.heads-up {\n  .alert;\n  .highlight(red);\n}\n```\n\n编译后\n\n```Css\n.alert {\n  font-weight: 700;\n}\n.heads-up {\n  font-weight: 700;\n  font-size: 1.2em;\n  color: red;\n}\n```\n\n`Sass`声明`mixins`时需要使用`@mixinn`，后面紧跟`mixin`的名，也可以设置参数，参数名为变量`$`声明的形式\n\n```Css\n@mixin large-text {\n  font: {\n    family: Arial;\n    size: 20px;\n    weight: bold;\n  }\n  color: #ff0000;\n}\n\n.page-title {\n  @include large-text;\n  padding: 4px;\n  margin-top: 10px;\n}\n```\n\n`stylus`中的混合和前两款`Css`预处理器语言的混合略有不同，他可以不使用任何符号，就是直接声明`Mixins`名，然后在定义参数和默认值之间用等号（=）来连接\n\n```Css\nerror(borderWidth= 2px) {\n  border: borderWidth solid #F00;\n  color: #F00;\n}\n.generic-error {\n  padding: 20px;\n  margin: 4px;\n  error(); /* 调用error mixins */\n}\n.login-error {\n  left: 12px;\n  position: absolute;\n  top: 20px;\n  error(5px); /* 调用error mixins，并将参数$borderWidth的值指定为5px */\n} \n```\n\n\n\n\n\n### 代码模块化\n\n模块化就是将`Css`代码分成一个个模块\n\n`scss`、`less`、`stylus`三者的使用方法都如下所示\n\n```Css\n@import './common';\n@import './github-markdown';\n@import './mixin';\n@import './variables';\n```\n","level":3,"tagId":11}
{"_id":{"$oid":"61aa3869c2d0220001c964fe"},"exerciseKey":"9792c9df-e258-4faf-a4a4-9b3358241db8","category":"QA","renderType":"md","title":"如果一个列表有 100000 个数据，这个该怎么进行展示？","desc":null,"options":null,"explanation":"我们需要思考的问题：该处理是否必须同步完成？数据是否必须按顺序完成？\n\n解决办法：\n\n（1）将数据分页，利用分页的原理，每次服务器端只返回一定数目的数据，浏览器每次只对一部分进行加载。\n\n（2）使用懒加载的方法，每次加载一部分数据，其余数据当需要使用时再去加载。\n\n（3）使用数组分块技术，基本思路是为要处理的项目创建一个队列，然后设置定时器每过一段时间取出一部分数据，然后再使用定时器取出下一个要处理的项目进行处理，接着再设置另一个定时器。","level":1,"tagId":20}
{"_id":{"$oid":"61aa3869bdfab500012c84da"},"exerciseKey":"979c6688-b432-487d-81bb-7250ae59840a","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nconst obj = { 1: 'a', 2: 'b', 3: 'c' }\nconst set = new Set([1, 2, 3, 4, 5])\n\nobj.hasOwnProperty('1')\nobj.hasOwnProperty(1)\nset.has('1')\nset.has(1)\n```","options":"{\"options\":[\"false true false true\",\"false true true true\",\"true true false true\",\"true true true true\"],\"isMulti\":false,\"answer\":[2]}","explanation":"所有对象的键（不包括 Symbol）在底层都是字符串，即使你自己没有将其作为字符串输入。这就是为什么 `obj.hasOwnProperty('1')` 也返回 `true`。\n对于集合，它不是这样工作的。在我们的集合中没有 `'1'`：`set.has('1')` 返回 `false`。它有数字类型为 `1`，`set.has(1)` 返回 `true`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386954ebf60001a1a43e"},"exerciseKey":"99fc6f13-b239-4697-8b20-5fdb03702be6","category":"QA","renderType":"md","title":"React中的VM 一定会提高性能吗？","desc":null,"options":null,"explanation":"不一定，因为 VM 只是通过 diff 算法避免了一些不需要变更的 DOM 操作，最终还是要操作 DOM 的，并且 diff 的过程也是有成本的。\n\n对于某些场景，比如都是需要变更 DOM 的操作，因为 VM 还会有额外的 diff 算法的成本在里面，所以 VM 的方式并不会提高性能，甚至比原生 DOM 要慢。\n\n但是正如尤大大说的，这是一个性能 vs 可维护性的取舍。\n\n框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。\n\n没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。\n\n针对任何一个 benchmark，都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，出于可维护性的考虑，不可能在每一个地方都去做手动优化。","level":2,"tagId":13}
{"_id":{"$oid":"61aa386a91a75000018d2d32"},"exerciseKey":"9be3e346-ff10-44b3-b98d-057669a266c4","category":"Choice","renderType":"md","title":"以下代码的输出是什么？","desc":"```javascript\nfunction sum(a, b) {\n  return a + b\n}\n\nsum(1, '2')\n```","options":"{\"options\":[\"NaN\",\"TypeError\",\"\\\"12\\\"\",\"3\"],\"isMulti\":false,\"answer\":[2]}","explanation":"JavaScript 是一种**动态类型语言**：我们不指定某些变量的类型。值可以在你不知道的情况下自动转换成另一种类型，这种类型称为**隐式类型转换**（implicit type coercion）。**Coercion** 是指将一种类型转换为另一种类型。\n在本例中，JavaScript 将数字 `1` 转换为字符串，以便函数有意义并返回一个值。在数字类型（`1`）和字符串类型（`'2'`）相加时，该数字被视为字符串。我们可以连接字符串，比如 `\"Hello\" + \"World\"`，这里发生的是 `\"1\" + \"2\"`，它返回 `\"12\"`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa386aff0573000165b302"},"exerciseKey":"9caf3dd4-c7a3-44a1-98ee-37566a737c58","category":"QA","renderType":"html","title":"webpack有哪些常见的Plugin","desc":null,"options":null,"explanation":"<ul><li> define-plugin：定义环境变量</li><li> html-webpack-plugin：简化html文件创建</li><li> uglifyjs-webpack-plugin：通过<code>UglifyES</code>压缩<code>ES6</code>代码</li><li> webpack-parallel-uglify-plugin: 多核压缩,提高压缩速度</li><li> webpack-bundle-analyzer: 可视化webpack输出文件的体积</li><li> mini-css-extract-plugin: CSS提取到单独的文件中,支持按需加载<br/><br/></li></ul>","level":1,"tagId":28}
{"_id":{"$oid":"61aa386abdfab500012c84db"},"exerciseKey":"9cc69b35-a6f3-466a-8724-7b855b38a1a9","category":"QA","renderType":"md","title":"如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/f335d400-976e-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、背景\n\n在日常布局中，无论是两栏布局还是三栏布局，使用的频率都非常高\n\n### 两栏布局\n\n两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满，\n\n比如 `Ant Design` 文档，蓝色区域为主要内容布局容器，侧边栏为次要内容布局容器\n\n> 这里称宽度较小的列父元素为次要布局容器，宽度较大的列父元素为主要布局容器\n\n ![](https://static.vue-js.com/fcb8ac50-976e-11eb-85f6-6fac77c0c9b3.png)\n\n这种布局适用于内容上具有明显主次关系的网页\n\n\n\n### 三栏布局\n\n三栏布局按照左中右的顺序进行排列，通常中间列最宽，左右两列次之\n\n大家最常见的就是`github`：\n\n ![](https://static.vue-js.com/0bf016e0-976f-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 二、双栏布局\n\n双栏布局非常常见，往往是以一个定宽栏和一个自适应的栏并排展示存在\n\n实现思路也非常的简单：\n\n- 使用 float 左浮左边栏\n- 右边模块使用 margin-left 撑出内容块做内容展示\n- 为父级元素添加BFC，防止下方元素飞到上方内容\n\n代码如下：\n\n```html\n<style>\n    .box{\n        overflow: hidden; 添加BFC\n    }\n    .left {\n        float: left;\n        width: 200px;\n        background-color: gray;\n        height: 400px;\n    }\n    .right {\n        margin-left: 210px;\n        background-color: lightgray;\n        height: 200px;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n还有一种更为简单的使用则是采取：flex弹性布局\n\n\n\n### flex弹性布局\n\n```html\n<style>\n    .box{\n        display: flex;\n    }\n    .left {\n        width: 100px;\n    }\n    .right {\n        flex: 1;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n`flex`可以说是最好的方案了，代码少，使用简单\n\n注意的是，`flex`容器的一个默认属性值:`align-items: stretch;`\n\n这个属性导致了列等高的效果。 为了让两个盒子高度自动，需要设置: `align-items: flex-start`\n\n\n## 三、三栏布局\n\n实现三栏布局中间自适应的布局方式有：\n\n- 两边使用 float，中间使用 margin\n- 两边使用 absolute，中间使用 margin\n- 两边使用 float 和负 margin\n- display: table 实现\n- flex实现\n- grid网格布局\n\n\n\n### 两边使用 float，中间使用 margin\n\n需要将中间的内容放在`html`结构最后，否则右侧会臣在中间内容的下方\n\n实现代码如下：\n\n```html\n<style>\n    .wrap {\n        background: #eee;\n        overflow: hidden; <!-- 生成BFC，计算高度时考虑浮动的元素 -->\n        padding: 20px;\n        height: 200px;\n    }\n    .left {\n        width: 200px;\n        height: 200px;\n        float: left;\n        background: coral;\n    }\n    .right {\n        width: 120px;\n        height: 200px;\n        float: right;\n        background: lightblue;\n    }\n    .middle {\n        margin-left: 220px;\n        height: 200px;\n        background: lightpink;\n        margin-right: 140px;\n    }\n</style>\n<div class=\"wrap\">\n    <div class=\"left\">左侧</div>\n    <div class=\"right\">右侧</div>\n    <div class=\"middle\">中间</div>\n</div>\n```\n\n原理如下：\n\n- 两边固定宽度，中间宽度自适应。\n- 利用中间元素的margin值控制两边的间距\n- 宽度小于左右部分宽度之和时，右侧部分会被挤下去\n\n这种实现方式存在缺陷：\n\n- 主体内容是最后加载的。\n\n- 右边在主体内容之前，如果是响应式设计，不能简单的换行展示\n\n\n\n### 两边使用 absolute，中间使用 margin\n\n基于绝对定位的三栏布局：注意绝对定位的元素脱离文档流，相对于最近的已经定位的祖先元素进行定位。无需考虑HTML中结构的顺序\n\n```html\n<style>\n  .container {\n    position: relative;\n  }\n  \n  .left,\n  .right,\n  .main {\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n  }\n\n  .left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100px;\n    background: green;\n  }\n\n  .right {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100px;\n    background: green;\n  }\n\n  .main {\n    margin: 0 110px;\n    background: black;\n    color: white;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"left\">左边固定宽度</div>\n  <div class=\"right\">右边固定宽度</div>\n  <div class=\"main\">中间自适应</div>\n</div>\n```\n\n实现流程：\n\n- 左右两边使用绝对定位，固定在两侧。\n- 中间占满一行，但通过 margin和左右两边留出10px的间隔\n\n\n\n\n\n### 两边使用 float 和负 margin\n\n```html\n<style>\n  .left,\n  .right,\n  .main {\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n  }\n\n  .main-wrapper {\n    float: left;\n    width: 100%;\n  }\n\n  .main {\n    margin: 0 110px;\n    background: black;\n    color: white;\n  }\n\n  .left,\n  .right {\n    float: left;\n    width: 100px;\n    margin-left: -100%;\n    background: green;\n  }\n\n  .right {\n    margin-left: -100px; /* 同自身宽度 */\n  }\n</style>\n\n<div class=\"main-wrapper\">\n  <div class=\"main\">中间自适应</div>\n</div>\n<div class=\"left\">左边固定宽度</div>\n<div class=\"right\">右边固定宽度</div>\n```\n\n实现过程：\n\n- 中间使用了双层标签，外层是浮动的，以便左中右能在同一行展示\n- 左边通过使用负 margin-left:-100%，相当于中间的宽度，所以向上偏移到左侧\n- 右边通过使用负 margin-left:-100px，相当于自身宽度，所以向上偏移到最右侧\n\n \n\n缺点：\n\n- 增加了 .main-wrapper 一层，结构变复杂\n- 使用负 margin，调试也相对麻烦\n\n\n\n### 使用 display: table 实现\n\n`<table>` 标签用于展示行列数据，不适合用于布局。但是可以使用 `display: table` 来实现布局的效果\n\n```html\n<style>\n  .container {\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n  }\n\n  .left,\n  .right,\n  .main {\n    display: table-cell;\n  }\n\n  .left,\n  .right {\n    width: 100px;\n    background: green;\n  }\n\n  .main {\n    background: black;\n    color: white;\n    width: 100%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"left\">左边固定宽度</div>\n  <div class=\"main\">中间自适应</div>\n  <div class=\"right\">右边固定宽度</div>\n</div>\n```\n\n实现原理：\n\n- 层通过 display: table设置为表格，设置 table-layout: fixed`表示列宽自身宽度决定，而不是自动计算。\n- 内层的左中右通过 display: table-cell设置为表格单元。\n- 左右设置固定宽度，中间设置 width: 100% 填充剩下的宽度\n\n\n\n\n\n### 使用flex实现\n\n利用`flex`弹性布局，可以简单实现中间自适应\n\n代码如下：\n\n```html\n<style type=\"text/css\">\n    .wrap {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .left,\n    .right,\n    .middle {\n        height: 100px;\n    }\n\n    .left {\n        width: 200px;\n        background: coral;\n    }\n\n    .right {\n        width: 120px;\n        background: lightblue;\n    }\n\n    .middle {\n        background: #555;\n        width: 100%;\n        margin: 0 20px;\n    }\n</style>\n<div class=\"wrap\">\n    <div class=\"left\">左侧</div>\n    <div class=\"middle\">中间</div>\n    <div class=\"right\">右侧</div>\n</div>\n```\n\n实现过程：\n\n- 仅需将容器设置为`display:flex;`，\n- 盒内元素两端对其，将中间元素设置为`100%`宽度，或者设为`flex:1`，即可填充空白\n- 盒内元素的高度撑开容器的高度\n\n优点：\n\n- 结构简单直观\n- 可以结合 flex的其他功能实现更多效果，例如使用 order属性调整显示顺序，让主体内容优先加载，但展示在中间\n\n\n\n### grid网格布局\n\n代码如下：\n\n```html\n<style>\n    .wrap {\n        display: grid;\n        width: 100%;\n        grid-template-columns: 300px auto 300px;\n    }\n\n    .left,\n    .right,\n    .middle {\n        height: 100px;\n    }\n\n    .left {\n        background: coral;\n    }\n\n    .right {\n        width: 300px;\n        background: lightblue;\n    }\n\n    .middle {\n        background: #555;\n    }\n</style>\n<div class=\"wrap\">\n    <div class=\"left\">左侧</div>\n    <div class=\"middle\">中间</div>\n    <div class=\"right\">右侧</div>\n</div>\n```\n\n跟`flex`弹性布局一样的简单\n","level":0.5,"tagId":11}
{"_id":{"$oid":"61aa386a7964120001917499"},"exerciseKey":"9cf9cb30-8864-4823-bf2d-d30b5f079f45","category":"QA","renderType":"md","title":"ES6中函数新增了哪些扩展?","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/54a04a10-5569-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 一、参数\n\n`ES6`允许为函数的参数设置默认值\n\n```js\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nconsole.log('Hello') // Hello World\nconsole.log('Hello', 'China') // Hello China\nconsole.log('Hello', '') // Hello\n```\n\n函数的形参是默认声明的，不能使用`let`或`const`再次声明\n\n```js\nfunction foo(x = 5) {\n    let x = 1; // error\n    const x = 2; // error\n}\n```\n\n参数默认值可以与解构赋值的默认值结合起来使用\n\n```js\nfunction foo({x, y = 5}) {\n  console.log(x, y);\n}\n\nfoo({}) // undefined 5\nfoo({x: 1}) // 1 5\nfoo({x: 1, y: 2}) // 1 2\nfoo() // TypeError: Cannot read property 'x' of undefined\n```\n\n上面的`foo`函数，当参数为对象的时候才能进行解构，如果没有提供参数的时候，变量`x`和`y`就不会生成，从而报错，这里设置默认值避免\n\n```js\nfunction foo({x, y = 5} = {}) {\n  console.log(x, y);\n}\n\nfoo() // undefined 5\n```\n\n参数默认值应该是函数的尾参数，如果不是非尾部的参数设置默认值，实际上这个参数是没发省略的\n\n```javascript\nfunction f(x = 1, y) {\n  return [x, y];\n}\n\nf() // [1, undefined]\nf(2) // [2, undefined]\nf(, 1) // 报错\nf(undefined, 1) // [1, 1]\n```\n\n\n\n## 二、属性\n\n### 函数的length属性\n\n`length`将返回没有指定默认值的参数个数\n\n```js\n(function (a) {}).length // 1\n(function (a = 5) {}).length // 0\n(function (a, b, c = 5) {}).length // 2\n```\n\n`rest` 参数也不会计入`length`属性\n\n```js\n(function(...args) {}).length // 0\n```\n\n如果设置了默认值的参数不是尾参数，那么`length`属性也不再计入后面的参数了\n\n```js\n(function (a = 0, b, c) {}).length // 0\n(function (a, b = 1, c) {}).length // 1\n```\n\n\n\n### name属性\n\n返回该函数的函数名\n\n```js\nvar f = function () {};\n\n// ES5\nf.name // \"\"\n\n// ES6\nf.name // \"f\"\n```\n\n如果将一个具名函数赋值给一个变量，则 `name`属性都返回这个具名函数原本的名字\n\n```js\nconst bar = function baz() {};\nbar.name // \"baz\"\n```\n\n`Function`构造函数返回的函数实例，`name`属性的值为`anonymous`\n\n```javascript\n(new Function).name // \"anonymous\"\n```\n\n`bind`返回的函数，`name`属性值会加上`bound`前缀\n\n```javascript\nfunction foo() {};\nfoo.bind({}).name // \"bound foo\"\n\n(function(){}).bind({}).name // \"bound \"\n```\n\n\n\n## 三、作用域\n\n一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域\n\n等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的\n\n下面例子中，`y=x`会形成一个单独作用域，`x`没有被定义，所以指向全局变量`x`\n\n```js\nlet x = 1;\n\nfunction f(y = x) { \n  // 等同于 let y = x  \n  let x = 2; \n  console.log(y);\n}\n\nf() // 1\n```\n\n\n\n## 四、严格模式\n\n只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错\n\n```js\n// 报错\nfunction doSomething(a, b = a) {\n  'use strict';\n  // code\n}\n\n// 报错\nconst doSomething = function ({a, b}) {\n  'use strict';\n  // code\n};\n\n// 报错\nconst doSomething = (...a) => {\n  'use strict';\n  // code\n};\n\nconst obj = {\n  // 报错\n  doSomething({a, b}) {\n    'use strict';\n    // code\n  }\n};\n```\n\n\n\n## 五、箭头函数\n\n使用“箭头”（`=>`）定义函数\n\n```js\nvar f = v => v;\n\n// 等同于\nvar f = function (v) {\n  return v;\n};\n```\n\n如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分\n\n```js\nvar f = () => 5;\n// 等同于\nvar f = function () { return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n\n如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用`return`语句返回\n\n```js\nvar sum = (num1, num2) => { return num1 + num2; }\n```\n\n如果返回对象，需要加括号将对象包裹\n\n```js\nlet getTempItem = id => ({ id: id, name: \"Temp\" });\n```\n\n注意点：\n\n- 函数体内的`this`对象，就是定义时所在的对象，而不是使用时所在的对象\n- 不可以当作构造函数，也就是说，不可以使用`new`命令，否则会抛出一个错误\n- 不可以使用`arguments`对象，该对象在函数体内不存在。如果要用，可以用 `rest` 参数代替\n- 不可以使用`yield`命令，因此箭头函数不能用作 Generator 函数\n","level":1.5,"tagId":24}
{"_id":{"$oid":"61aa386a796412000191749f"},"exerciseKey":"9d9b80c8-3768-4bf3-96a6-b6c6bf7cb8c3","category":"QA","renderType":"md","title":"设备像素、css像素、设备独立像素、dpr、ppi 之间有什么区别？","desc":"","options":null,"explanation":" ![](https://static.vue-js.com/c4d9bfd0-91f2-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、背景\n\n在`css`中我们通常使用px作为单位，在PC浏览器中`css`的1个像素都是对应着电脑屏幕的1个物理像素\n\n这会造成一种错觉，我们会认为`css`中的像素就是设备的物理像素\n\n但实际情况却并非如此，`css`中的像素只是一个抽象的单位，在不同的设备或不同的环境中，`css`中的1px所代表的设备物理像素是不同的\n\n当我们做移动端开发时，同为1px的设置，在不同分辨率的移动设备上显示效果却有很大差异\n\n这背后就涉及了css像素、设备像素、设备独立像素、dpr、ppi的概念\n\n## 二、介绍\n\n### CSS像素\n\nCSS像素（css pixel, px）: 适用于web编程，在 CSS 中以 px 为后缀，是一个长度单位\n\n在 CSS 规范中，长度单位可以分为两类，绝对单位以及相对单位\n\npx是一个相对单位，相对的是设备像素（device pixel）\n\n一般情况，页面缩放比为1，1个CSS像素等于1个设备独立像素\n\n`CSS`像素又具有两个方面的相对性：\n\n- 在同一个设备上，每1个 CSS 像素所代表的设备像素是可以变化的（比如调整屏幕的分辨率）\n- 在不同的设备之间，每1个 CSS 像素所代表的设备像素是可以变化的（比如两个不同型号的手机）\n\n在页面进行缩放操作也会 引起`css`中`px`的变化，假设页面放大一倍，原来的 1px 的东西变成 2px，在实际宽度不变的情况下1px 变得跟原来的 2px 的长度（长宽）一样了（元素会占据更多的设备像素）\n\n假设原来需要 320px 才能填满的宽度现在只需要 160px\n\npx会受到下面的因素的影响而变化：\n\n- 每英寸像素（PPI）\n- 设备像素比（DPR）\n\n\n### 设备像素\n\n设备像素（device pixels），又称为物理像素\n\n指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的宽高，只是用于显示丰富色彩的一个“点”而已\n\n可以参考公园里的景观变色彩灯，一个彩灯(物理像素)由红、蓝、绿小灯组成，三盏小灯不同的亮度混合出各种色彩\n\n ![](https://static.vue-js.com/cffc6570-91f2-11eb-ab90-d9ae814b240d.png)\n\n从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，单位为`pt`\n\n\n\n### 设备独立像素\n\n设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了CSS像素\n\n在`javaScript`中可以通过`window.screen.width/ window.screen.height` 查看\n\n比如我们会说“电脑屏幕在 2560x1600分辨率下不适合玩游戏，我们把它调为 1440x900”，这里的“分辨率”（非严谨说法）指的就是设备独立像素\n\n一个设备独立像素里可能包含1个或者多个物理像素点，包含的越多则屏幕看起来越清晰\n\n至于为什么出现设备独立像素这种虚拟像素单位概念，下面举个例子：\n\niPhone 3GS 和 iPhone 4/4s 的尺寸都是 3.5 寸，但 iPhone 3GS 的分辨率是 320x480，iPhone 4/4s 的分辨率是 640x960\n\n这意味着，iPhone 3GS 有 320 个物理像素，iPhone 4/4s 有 640 个物理像素\n\n如果我们按照真实的物理像素进行布局，比如说我们按照 320 物理像素进行布局，到了 640 物理像素的手机上就会有一半的空白，为了避免这种问题，就产生了虚拟像素单位\n\n我们统一 iPhone 3GS 和 iPhone 4/4s 都是 320 个虚拟像素，只是在 iPhone 3GS 上，最终 1 个虚拟像素换算成 1 个物理像素，在 iphone 4s 中，1 个虚拟像素最终换算成 2 个物理像素\n\n至于 1 个虚拟像素被换算成几个物理像素，这个数值我们称之为设备像素比，也就是下面介绍的`dpr`\n\n\n### dpr\n\ndpr（device pixel ratio），设备像素比，代表设备独立像素到设备像素的转换关系，在`JavaScript`中可以通过 `window.devicePixelRatio` 获取\n\n计算公式如下：\n\n ![](https://static.vue-js.com/dd45e2b0-91f2-11eb-ab90-d9ae814b240d.png)\n\n当设备像素比为1:1时，使用1（1×1）个设备像素显示1个CSS像素\n\n当设备像素比为2:1时，使用4（2×2）个设备像素显示1个CSS像素\n\n当设备像素比为3:1时，使用9（3×3）个设备像素显示1个CSS像素\n\n如下图所示：\n\n![](https://static.vue-js.com/e63cceb0-91f2-11eb-ab90-d9ae814b240d.png)\n\n当`dpr`为3，那么`1px`的`CSS`像素宽度对应`3px`的物理像素的宽度，1px的`CSS`像素高度对应`3px`的物理像素高度\n\n\n\n### ppi\n\nppi （pixel per inch），每英寸像素，表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像\n\n计算公式如下：\n\n ![](https://static.vue-js.com/f734adf0-91f2-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 三、总结\n\n无缩放情况下，1个CSS像素等于1个设备独立像素\n\n设备像素由屏幕生产之后就不发生改变，而设备独立像素是一个虚拟单位会发生改变\n\nPC端中，1个设备独立像素 = 1个设备像素 （在100%，未缩放的情况下）\n\n在移动端中，标准屏幕（160ppi）下 1个设备独立像素 = 1个设备像素\n\n设备像素比（dpr） = 设备像素 / 设备独立像素\n\n每英寸像素（ppi），值越大，图像越清晰\n","level":1,"tagId":11}
{"_id":{"$oid":"61aa386a81337a00011e062b"},"exerciseKey":"9dc34a20-34be-4c0f-a401-71d936cf4958","category":"QA","renderType":"html","title":"webpack、rollup、parcel优劣","desc":null,"options":null,"explanation":"<ul><li>webpack适用于大型复杂的前端站点构建: webpack有强大的loader和插件生态,打包后的文件实际上就是一个立即执行函数，这个立即执行函数接收一个参数，这个参数是模块对象，键为各个模块的路径，值为模块内容。立即执行函数内部则处理模块之间的引用，执行模块等,这种情况更适合文件依赖复杂的应用开发.</li><li> rollup适用于基础库的打包，如vue、d3等: Rollup 就是将各个模块打包进一个文件中，并且通过 Tree-shaking 来删除无用的代码,可以最大程度上降低代码体积,但是rollup没有webpack如此多的的如代码分割、按需加载等高级功能，其更聚焦于库的打包，因此更适合库的开发.</li><li>parcel适用于简单的实验性项目: 他可以满足低门槛的快速看到效果,但是生态差、报错信息不够全面都是他的硬伤，除了一些玩具项目或者实验项目不建议使用<br/><br/></li></ul>","level":1,"tagId":28}
{"_id":{"$oid":"61aa386a8e97d9000180877e"},"exerciseKey":"9dc542a0-b323-4c7a-9199-f1f2678714cf","category":"QA","renderType":"md","title":"xml和json有什么区别？","desc":null,"options":null,"explanation":"## JSON\n\n> JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，它完全独立于语言。它基于JavaScript编程语言，易于理解和生成。\n\n示例：\n```json\n{\"Student\":[ \n    { \"Name\":\"Vivek\", \"age\":\"20\" }, \n    { \"Name\":\"Suraj\", \"age\":\"19\" }, \n    { \"Name\":\"John\", \"age\":\"21\" }, \n    { \"Name\":\"Peter\", \"age\":\"22\" } \n]}\n```\n\n## XML\n\nXML（可扩展标记语言）旨在传输数据，而不是显示数据。这是W3C的推荐。可扩展标记语言（XML）是一种标记语言，它定义了一组规则，用于以人类可读和机器可读的格式编码文档。XML的设计目标侧重于Internet上的简单性，通用性和可用性。它是一种文本数据格式，通过Unicode为不同的人类语言提供强大的支持。尽管XML的设计侧重于文档，但该语言被广泛用于表示任意数据结构，例如Web服务中使用的那些数据结构。\n\n示例：\n\n```xml\n<Students> \n    <Student> \n        <Name>Vivek</Name> <age>20</age> \n    </Student> \n    <Student> \n        <Name>Suraj</Name> <age>19</age> \n    </Student> \n    <Student> \n        <Name>John</Name> <age>21</age> \n    </Student> \n    <Student> \n        <Name>Peter</Name> <age>22</age> \n    </Student> \n</Students>\n```\n\n这两者都是自描述的，可以被许多编程语言解析和使用。\n\n## JSON和XML之间的区别\n\n以下是JSON和XML之间的一些区别：\n\n1、JSON是JavaScript Object Notation；XML是可扩展标记语言。\n\n2、JSON是基于JavaScript语言；XML源自SGML。\n\n3、JSON是一种表示对象的方式；XML是一种标记语言，使用标记结构来表示数据项。\n\n4、JSON不提供对命名空间的任何支持；XML支持名称空间。\n\n5、JSON支持数组；XML不支持数组。\n\n6、XML的文件相对难以阅读和解释；与XML相比，JSON的文件非常易于阅读。\n\n7、JSON不使用结束标记；XML有开始和结束标签。\n\n8、JSON的安全性较低；XML比JSON更安全。\n\n9、JSON不支持注释；XML支持注释。\n\n10、JSON仅支持UTF-8编码；XML支持各种编码。\n\n\n","level":1,"tagId":10}
{"_id":{"$oid":"61aa386a3976eb00014e4570"},"exerciseKey":"9ee51dac-67c2-4181-b9a6-18a10b2a8f95","category":"QA","renderType":"md","title":"说说Node中的EventEmitter? 如何实现一个EventEmitter?","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/16b10390-c83a-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n我们了解到，`Node `采用了事件驱动机制，而`EventEmitter `就是`Node`实现事件驱动的基础\n\n在`EventEmitter`的基础上，`Node `几乎所有的模块都继承了这个类，这些模块拥有了自己的事件，可以绑定／触发监听器，实现了异步操作\n\n`Node.js` 里面的许多对象都会分发事件，比如 fs.readStream 对象会在文件被打开的时候触发一个事件\n\n这些产生事件的对象都是 events.EventEmitter 的实例，这些对象有一个 eventEmitter.on() 函数，用于将一个或多个函数绑定到命名事件上\n\n\n## 二、使用方法\n\n`Node `的`events`模块只提供了一个`EventEmitter`类，这个类实现了`Node`异步事件驱动架构的基本模式——观察者模式\n\n在这种模式中，被观察者(主体)维护着一组其他对象派来(注册)的观察者，有新的对象对主体感兴趣就注册观察者，不感兴趣就取消订阅，主体有更新的话就依次通知观察者们\n\n基本代码如下所示：\n\n```js\nconst EventEmitter = require('events')\n\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter()\n\nfunction callback() {\n    console.log('触发了event事件！')\n}\nmyEmitter.on('event', callback)\nmyEmitter.emit('event')\nmyEmitter.removeListener('event', callback);\n```\n\n通过实例对象的`on`方法注册一个名为`event`的事件，通过`emit`方法触发该事件，而`removeListener`用于取消事件的监听\n\n关于其常见的方法如下：\n\n- emitter.addListener/on(eventName, listener) ：添加类型为 eventName 的监听事件到事件数组尾部\n- emitter.prependListener(eventName, listener)：添加类型为 eventName 的监听事件到事件数组头部  \n- emitter.emit(eventName[, ...args])：触发类型为 eventName 的监听事件 \n- emitter.removeListener/off(eventName, listener)：移除类型为 eventName 的监听事件   \n- emitter.once(eventName, listener)：添加类型为 eventName 的监听事件，以后只能执行一次并删除           \n- emitter.removeAllListeners([eventName])： 移除全部类型为 eventName 的监听事件\n\n\n\n## 三、实现过程\n\n通过上面的方法了解，`EventEmitter`是一个构造函数，内部存在一个包含所有事件的对象\n\n```js\nclass EventEmitter {\n    constructor() {\n        this.events = {};\n    }\n}\n```\n\n其中`events`存放的监听事件的函数的结构如下：\n\n```js\n{\n  \"event1\": [f1,f2,f3]，\n  \"event2\": [f4,f5]，\n  ...\n}\n```\n\n然后开始一步步实现实例方法，首先是`emit`，第一个参数为事件的类型，第二个参数开始为触发事件函数的参数，实现如下：\n\n```js\nemit(type, ...args) {\n    this.events[type].forEach((item) => {\n        Reflect.apply(item, this, args);\n    });\n}\n```\n\n当实现了`emit`方法之后，然后实现`on`、`addListener`、`prependListener`这三个实例方法，都是添加事件监听触发函数，实现也是大同小异\n\n```js\non(type, handler) {\n    if (!this.events[type]) {\n        this.events[type] = [];\n    }\n    this.events[type].push(handler);\n}\n\naddListener(type,handler){\n    this.on(type,handler)\n}\n\nprependListener(type, handler) {\n    if (!this.events[type]) {\n        this.events[type] = [];\n    }\n    this.events[type].unshift(handler);\n}\n```\n\n紧接着就是实现事件监听的方法`removeListener/on`\n\n```js\nremoveListener(type, handler) {\n    if (!this.events[type]) {\n        return;\n    }\n    this.events[type] = this.events[type].filter(item => item !== handler);\n}\n\noff(type,handler){\n    this.removeListener(type,handler)\n}\n```\n\n最后再来实现`once`方法， 再传入事件监听处理函数的时候进行封装，利用闭包的特性维护当前状态，通过`fired`属性值判断事件函数是否执行过\n\n```js\nonce(type, handler) {\n    this.on(type, this._onceWrap(type, handler, this));\n  }\n\n  _onceWrap(type, handler, target) {\n    const state = { fired: false, handler, type , target};\n    const wrapFn = this._onceWrapper.bind(state);\n    state.wrapFn = wrapFn;\n    return wrapFn;\n  }\n\n  _onceWrapper(...args) {\n    if (!this.fired) {\n      this.fired = true;\n      Reflect.apply(this.handler, this.target, args);\n      this.target.off(this.type, this.wrapFn);\n    }\n }\n```\n\n完整代码如下：\n\n```js\nclass EventEmitter {\n    constructor() {\n        this.events = {};\n    }\n\n    on(type, handler) {\n        if (!this.events[type]) {\n            this.events[type] = [];\n        }\n        this.events[type].push(handler);\n    }\n\n    addListener(type,handler){\n        this.on(type,handler)\n    }\n\n    prependListener(type, handler) {\n        if (!this.events[type]) {\n            this.events[type] = [];\n        }\n        this.events[type].unshift(handler);\n    }\n\n    removeListener(type, handler) {\n        if (!this.events[type]) {\n            return;\n        }\n        this.events[type] = this.events[type].filter(item => item !== handler);\n    }\n\n    off(type,handler){\n        this.removeListener(type,handler)\n    }\n\n    emit(type, ...args) {\n        this.events[type].forEach((item) => {\n            Reflect.apply(item, this, args);\n        });\n    }\n\n    once(type, handler) {\n        this.on(type, this._onceWrap(type, handler, this));\n    }\n\n    _onceWrap(type, handler, target) {\n        const state = { fired: false, handler, type , target};\n        const wrapFn = this._onceWrapper.bind(state);\n        state.wrapFn = wrapFn;\n        return wrapFn;\n    }\n\n    _onceWrapper(...args) {\n        if (!this.fired) {\n            this.fired = true;\n            Reflect.apply(this.handler, this.target, args);\n            this.target.off(this.type, this.wrapFn);\n        }\n    }\n}\n```\n","level":3,"tagId":18}
{"_id":{"$oid":"61aa386b39bf10000191ca28"},"exerciseKey":"9f19f171-7071-42e6-82d5-35b19bd83928","category":"QA","renderType":"md","title":"Vue3.0 性能提升主要是通过哪几方面体现的？","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/2aac1020-5ed0-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、编译阶段\n\n回顾`Vue2`，我们知道每个组件实例都对应一个 `watcher` 实例，它会在组件渲染的过程中把用到的数据`property`记录为依赖，当依赖发生改变，触发`setter`，则会通知`watcher`，从而使关联的组件重新渲染\n\n ![](https://static.vue-js.com/39066120-5ed0-11eb-85f6-6fac77c0c9b3.png)\n\n试想一下，一个组件结构如下图\n\n```html\n<template>\n    <div id=\"content\">\n        <p class=\"text\">静态文本</p>\n        <p class=\"text\">静态文本</p>\n        <p class=\"text\">{{ message }}</p>\n        <p class=\"text\">静态文本</p>\n        ...\n        <p class=\"text\">静态文本</p>\n    </div>\n</template>\n```\n\n可以看到，组件内部只有一个动态节点，剩余一堆都是静态节点，所以这里很多 `diff` 和遍历其实都是不需要的，造成性能浪费\n\n因此，`Vue3`在编译阶段，做了进一步优化。主要有如下：\n\n- diff算法优化\n- 静态提升\n- 事件监听缓存\n- SSR优化\n\n\n\n#### diff算法优化\n\n`vue3`在`diff`算法中相比`vue2`增加了静态标记\n\n关于这个静态标记，其作用是为了会发生变化的地方添加一个`flag`标记，下次发生变化的时候直接找该地方进行比较\n\n下图这里，已经标记静态节点的`p`标签在`diff`过程中则不会比较，把性能进一步提高\n\n ![](https://static.vue-js.com/c732e150-5c58-11eb-ab90-d9ae814b240d.png)\n\n关于静态类型枚举如下\n\n```js\nexport const enum PatchFlags {\n  TEXT = 1,// 动态的文本节点\n  CLASS = 1 << 1,  // 2 动态的 class\n  STYLE = 1 << 2,  // 4 动态的 style\n  PROPS = 1 << 3,  // 8 动态属性，不包括类名和样式\n  FULL_PROPS = 1 << 4,  // 16 动态 key，当 key 变化时需要完整的 diff 算法做比较\n  HYDRATE_EVENTS = 1 << 5,  // 32 表示带有事件监听器的节点\n  STABLE_FRAGMENT = 1 << 6,   // 64 一个不会改变子节点顺序的 Fragment\n  KEYED_FRAGMENT = 1 << 7, // 128 带有 key 属性的 Fragment\n  UNKEYED_FRAGMENT = 1 << 8, // 256 子节点没有 key 的 Fragment\n  NEED_PATCH = 1 << 9,   // 512\n  DYNAMIC_SLOTS = 1 << 10,  // 动态 solt\n  HOISTED = -1,  // 特殊标志是负整数表示永远不会用作 diff\n  BAIL = -2 // 一个特殊的标志，指代差异算法\n}\n```\n\n\n\n#### 静态提升\n\n`Vue3`中对不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用\n\n这样就免去了重复的创建节点，大型应用会受益于这个改动，免去了重复的创建操作，优化了运行时候的内存占用\n\n```js\n<span>你好</span>\n\n<div>{{ message }}</div>\n```\n\n没有做静态提升之前\n\n```js\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_Fragment, null, [\n    _createVNode(\"span\", null, \"你好\"),\n    _createVNode(\"div\", null, _toDisplayString(_ctx.message), 1 /* TEXT */)\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\n做了静态提升之后\n\n```js\nconst _hoisted_1 = /*#__PURE__*/_createVNode(\"span\", null, \"你好\", -1 /* HOISTED */)\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_Fragment, null, [\n    _hoisted_1,\n    _createVNode(\"div\", null, _toDisplayString(_ctx.message), 1 /* TEXT */)\n  ], 64 /* STABLE_FRAGMENT */))\n}\n\n// Check the console for the AST\n```\n\n静态内容`_hoisted_1`被放置在`render` 函数外，每次渲染的时候只要取 `_hoisted_1` 即可\n\n同时 `_hoisted_1` 被打上了 `PatchFlag` ，静态标记值为 -1 ，特殊标志是负整数表示永远不会用于 Diff\n\n\n\n#### 事件监听缓存\n\n默认情况下绑定事件行为会被视为动态绑定，所以每次都会去追踪它的变化\n\n```text\n<div>\n  <button @click = 'onClick'>点我</button>\n</div>\n```\n\n没开启事件监听器缓存\n\n```js\nexport const render = /*#__PURE__*/_withId(function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(\"div\", null, [\n    _createVNode(\"button\", { onClick: _ctx.onClick }, \"点我\", 8 /* PROPS */, [\"onClick\"])\n                                             // PROPS=1<<3,// 8 //动态属性，但不包含类名和样式\n  ]))\n})\n```\n\n开启事件侦听器缓存后\n\n```js\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(\"div\", null, [\n    _createVNode(\"button\", {\n      onClick: _cache[1] || (_cache[1] = (...args) => (_ctx.onClick(...args)))\n    }, \"点我\")\n  ]))\n}\n```\n\n上述发现开启了缓存后，没有了静态标记。也就是说下次`diff`算法的时候直接使用\n\n\n\n#### SSR优化\n\n当静态内容大到一定量级时候，会用`createStaticVNode`方法在客户端去生成一个static node，这些静态`node`，会被直接`innerHtml`，就不需要创建对象，然后根据对象渲染\n\n```js\ndiv>\n\t<div>\n\t\t<span>你好</span>\n\t</div>\n\t...  // 很多个静态属性\n\t<div>\n\t\t<span>{{ message }}</span>\n\t</div>\n</div>\n```\n\n编译后\n\n```js\nimport { mergeProps as _mergeProps } from \"vue\"\nimport { ssrRenderAttrs as _ssrRenderAttrs, ssrInterpolate as _ssrInterpolate } from \"@vue/server-renderer\"\n\nexport function ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {\n  const _cssVars = { style: { color: _ctx.color }}\n  _push(`<div${\n    _ssrRenderAttrs(_mergeProps(_attrs, _cssVars))\n  }><div><span>你好</span>...<div><span>你好</span><div><span>${\n    _ssrInterpolate(_ctx.message)\n  }</span></div></div>`)\n}\n```\n\n\n\n## 二、源码体积\n\n相比`Vue2`，`Vue3`整体体积变小了，除了移出一些不常用的API，再重要的是`Tree shanking`\n\n任何一个函数，如`ref`、`reavtived`、`computed`等，仅仅在用到的时候才打包，没用到的模块都被摇掉，打包的整体体积变小\n\n```js\nimport { computed, defineComponent, ref } from 'vue';\nexport default defineComponent({\n    setup(props, context) {\n        const age = ref(18)\n\n        let state = reactive({\n            name: 'test'\n        })\n\n        const readOnlyAge = computed(() => age.value++) // 19\n\n        return {\n            age,\n            state,\n            readOnlyAge\n        }\n    }\n});\n```\n\n\n\n## 三、响应式系统\n\n`vue2`中采用 `defineProperty`来劫持整个对象，然后进行深度遍历所有属性，给每个属性添加`getter`和`setter`，实现响应式\n\n`vue3`采用`proxy`重写了响应式系统，因为`proxy`可以对整个对象进行监听，所以不需要深度遍历\n\n- 可以监听动态属性的添加\n- 可以监听到数组的索引和数组`length`属性\n- 可以监听删除属性\n\n关于这两个 API 具体的不同，我们下篇文章会进行一个更加详细的介绍\n","level":3,"tagId":14}
{"_id":{"$oid":"61aa386b0d111e00010372d5"},"exerciseKey":"9f860d42-8504-4562-8b9a-4a415ba5782a","category":"QA","renderType":"md","title":"webSocket如何兼容低浏览器\n","desc":null,"options":null,"explanation":"* Adobe Flash Socket；\n* ActiveX HTMLFile (IE) ；\n* 基于 multipart 编码发送 XHR；\n* 基于长轮询的 XHR；","level":1,"tagId":12}
{"_id":{"$oid":"61aa386b91a75000018d2d39"},"exerciseKey":"a0544c68-4798-4f40-b233-bc3510170371","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst one = (false || {} || null)\nconst two = (null || false || \"\")\nconst three = ([] || 0 || true)\n\nconsole.log(one, two, three)\n```","options":"{\"options\":[\"false null []\",\"null \\\"\\\" true\",\"{} \\\"\\\" []\",\"null null true\"],\"isMulti\":false,\"answer\":[2]}","explanation":"使用`||`运算符，我们可以返回第一个真值。 如果所有值都是假值，则返回最后一个值。\n`（false || {} || null）`：空对象`{}`是一个真值。 这是第一个（也是唯一的）真值，它将被返回。`one`等于`{}`。\n`（null || false ||“”）`：所有值都是假值。 这意味着返回传递的值`\"\"`。 `two`等于`\"\"`。\n`（[] || 0 ||“”）`：空数组`[]`是一个真值。 这是第一个返回的真值。 `three`等于`[]`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386b81337a00011e062e"},"exerciseKey":"a0908792-bdd8-4de6-bb2e-3480a753c3d3","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nlet count = 0;\nconst nums = [0, 1, 2, 3];\n\nnums.forEach(num => {\n\tif (num) count += 1\n})\n\nconsole.log(count)\n```","options":"{\"options\":[\"1\",\"2\",\"3\",\"4\"],\"isMulti\":false,\"answer\":[2]}","explanation":"在 `forEach` 循环内部的 `if` 会判断 `num` 的值是truthy或者是falsy。因为 `nums` 数组的第一个数字是 `0`，一个falsy值， `if` 语句代码块不会被执行。`count` 仅仅在 `nums` 数组的其他3个数字 `1`，`2`，`3` 时加1。因为 `count` 执行了3次加 `1` 运算，所以 `count` 的值为 `3`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386b3976eb00014e4572"},"exerciseKey":"a09650c2-d9af-4f1a-ad05-8b33757cbca7","category":"QA","renderType":"md","title":"如何判断当前脚本运行在浏览器还是 node 环境中？","desc":null,"options":null,"explanation":"```js\nthis === window ? 'browser' : 'node';\n```\n\n通过判断 Global 对象是否为 window，如果不为 window，当前脚本没有运行在浏览器中。","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa386b3dd7f70001832fbf"},"exerciseKey":"a0c75651-7e44-437d-9f1f-38775698091b","category":"QA","renderType":"md","title":"Vue中的$nextTick有什么作用？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/76484d30-3aba-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、NextTick是什么\n\n官方对其的定义\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM\n\n什么意思呢？\n\n我们可以理解成，`Vue` 在更新 `DOM` 时是异步执行的。当数据发生变化，`Vue`将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新\n\n举例一下\n\n`Html`结构\n\n```html\n<div id=\"app\"> {{ message }} </div>\n```\n\n构建一个`vue`实例\n\n```js\nconst vm = new Vue({\n  el: '#app',\n  data: {\n    message: '原始值'\n  }\n})\n```\n\n修改`message`\n\n```js\nthis.message = '修改后的值1'\nthis.message = '修改后的值2'\nthis.message = '修改后的值3'\n```\n\n这时候想获取页面最新的`DOM`节点，却发现获取到的是旧值\n\n```js\nconsole.log(vm.$el.textContent) // 原始值\n```\n\n这是因为`message`数据在发现变化的时候，`vue`并不会立刻去更新`Dom`，而是将修改数据的操作放在了一个异步操作队列中\n\n如果我们一直修改相同数据，异步操作队列还会进行去重\n\n等待同一事件循环中的所有数据变化完成之后，会将队列中的事件拿来进行处理，进行`DOM`的更新\n\n#### 为什么要有nexttick\n\n举个例子\n```js\n{{num}}\nfor(let i=0; i<100000; i++){\n    num = i\n}\n```\n如果没有 `nextTick` 更新机制，那么 `num` 每次更新值都会触发视图更新(上面这段代码也就是会更新10万次视图)，有了`nextTick`机制，只需要更新一次，所以`nextTick`本质是一种优化策略\n\n## 二、使用场景\n\n如果想要在修改数据后立刻得到更新后的`DOM`结构，可以使用`Vue.nextTick()`\n\n第一个参数为：回调函数（可以获取最近的`DOM`结构）\n\n第二个参数为：执行函数上下文\n\n```js\n// 修改数据\nvm.message = '修改后的值'\n// DOM 还没有更新\nconsole.log(vm.$el.textContent) // 原始的值\nVue.nextTick(function () {\n  // DOM 更新了\n  console.log(vm.$el.textContent) // 修改后的值\n})\n```\n\n组件内使用 `vm.$nextTick()` 实例方法只需要通过`this.$nextTick()`，并且回调函数中的 `this` 将自动绑定到当前的 `Vue` 实例上\n\n```js\nthis.message = '修改后的值'\nconsole.log(this.$el.textContent) // => '原始的值'\nthis.$nextTick(function () {\n    console.log(this.$el.textContent) // => '修改后的值'\n})\n```\n\n`$nextTick()` 会返回一个 `Promise` 对象，可以是用`async/await`完成相同作用的事情\n\n```js\nthis.message = '修改后的值'\nconsole.log(this.$el.textContent) // => '原始的值'\nawait this.$nextTick()\nconsole.log(this.$el.textContent) // => '修改后的值'\n```\n\n## 三、实现原理\n\n\n\n源码位置：`/src/core/util/next-tick.js`\n\n`callbacks`也就是异步操作队列\n\n`callbacks`新增回调函数后又执行了`timerFunc`函数，`pending`是用来标识同一个时间只能执行一次\n\n```js\nexport function nextTick(cb?: Function, ctx?: Object) {\n  let _resolve;\n\n  // cb 回调函数会经统一处理压入 callbacks 数组\n  callbacks.push(() => {\n    if (cb) {\n      // 给 cb 回调函数执行加上了 try-catch 错误处理\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n\n  // 执行异步延迟函数 timerFunc\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n\n  // 当 nextTick 没有传入函数参数的时候，返回一个 Promise 化的调用\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve;\n    });\n  }\n}\n```\n\n`timerFunc`函数定义，这里是根据当前环境支持什么方法则确定调用哪个，分别有：\n\n`Promise.then`、`MutationObserver`、`setImmediate`、`setTimeout`\n\n通过上面任意一种方法，进行降级操作\n\n```js\nexport let isUsingMicroTask = false\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  //判断1：是否原生支持Promise\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  //判断2：是否原生支持MutationObserver\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  //判断3：是否原生支持setImmediate\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  //判断4：上面都不行，直接用setTimeout\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n\n无论是微任务还是宏任务，都会放到`flushCallbacks`使用\n\n这里将`callbacks`里面的函数复制一份，同时`callbacks`置空\n\n依次执行`callbacks`里面的函数\n\n```js\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n**小结：**\n\n1. 把回调函数放入callbacks等待执行\n2. 将执行函数放到微任务或者宏任务中\n3. 事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa386b3dd7f70001832fc0"},"exerciseKey":"a180397f-7b8e-421f-964e-ed97bdd57efd","category":"QA","renderType":"md","title":"CSS3新增伪类有那些？","desc":null,"options":null,"explanation":"* p:first-of-type 选择属于其父元素的首个元素\n* p:last-of-type 选择属于其父元素的最后元素\n* p:only-of-type 选择属于其父元素唯一的元素\n* p:only-child 选择属于其父元素的唯一子元素\n* p:nth-child(2) 选择属于其父元素的第二个子元素\n* :enabled :disabled 表单控件的禁用状态。\n* :checked 单选框或复选框被选中。\n\n","level":1,"tagId":11}
{"_id":{"$oid":"61aa386b3976eb00014e4575"},"exerciseKey":"a19c5526-dc2d-43ac-bda7-c4b2948839a4","category":"QA","renderType":"md","title":"虚拟DOM一定更快吗？","desc":null,"options":null,"explanation":"## 虚拟DOM／domDiff\n\n我们常说的虚拟DOM是通过JS对象模拟出来的DOM节点,domDiff是通过特定算法计算出来一次操作所带来的DOM变化。react和vue中都使用了虚拟DOM，我们借着react聊聊虚拟DOM。\n\nreact中涉及到虚拟DOM的代码主要分为以下三部分，其中核心是第二步的domDiff算法：\n\n* 把render中的JSX(或者createElement这个API)转化成虚拟DOM\n* 状态或属性改变后重新计算虚拟DOM并生成一个补丁对象(domDiff)\n* 通过这个补丁对象更新视图中的DOM节点\n\n## 虚拟DOM不一定更快\n\n干前端的都知道DOM操作是性能杀手，因为操作DOM会引起页面的回流或者重绘。相比起来，通过多一些预先计算来减少DOM的操作要划算的多。\n\n但是，“使用虚拟DOM会更快”这句话并不一定适用于所有场景。例如：一个页面就有一个按钮，点击一下，数字加一，那肯定是直接操作DOM更快。使用虚拟DOM无非白白增加了计算量和代码量。即使是复杂情况，浏览器也会对我们的DOM操作进行优化，大部分浏览器会根据我们操作的时间和次数进行批量处理，所以直接操作DOM也未必很慢。\n\n那么为什么现在的框架都使用虚拟DOM呢？因为使用虚拟DOM可以提高代码的性能下限，并极大的优化大量操作DOM时产生的性能损耗。同时这些框架也保证了，即使在少数虚拟DOM不太给力的场景下，性能也在我们接受的范围内。\n\n而且，我们之所以喜欢react、vue等使用了虚拟DOM框架，不光是因为他们快，还有很多其他更重要的原因。例如react对函数式编程的友好，vue优秀的开发体验等，目前社区也有好多比较这两个框架并打口水战的，我觉着还是在两个都懂的情况下多探究一下原理更有意义一些。\n","level":3,"tagId":14}
{"_id":{"$oid":"61aa386b3dd7f70001832fc4"},"exerciseKey":"a1c9963f-fb40-4d8a-aa47-e5cca8c885b7","category":"QA","renderType":"html","title":"CSRF攻击及防护","desc":null,"options":null,"explanation":"<ul><li>跨站点请求伪造（Cross-Site Request Forgeries），冒充用户发起请求（在用户不知情的情况下）， 完成一些违背用户意愿的事情（如修改用户信息，删初评论等）。</li></ul><p></p><ul><li><strong>1、可能造成危害：</strong><br/></li><ol><li>利用已通过认证的用户权限更新设定信息等；</li><li>利用已通过认证的用户权限购买商品；</li><li>利用已通过的用户权限在留言板上发表言论。</li></ol></ul><p></p><ul><li><strong>2、防御：</strong><br/></li><ol><li>验证码；强制用户必须与应用进行交互，才能完成最终请求。</li><li>尽量使用 post ，限制 get 使用；get 太容易被拿来做 csrf 攻击；</li><li>请求来源限制，此种方法成本最低，但是并不能保证 100% 有效，因为服务器并不是什么时候都能取到 Referer，而且低版本的浏览器存在伪造 Referer 的风险。</li><li>token 验证 CSRF 防御机制是公认最合适的方案。</li></ol></ul><p></p><ul><li><strong>使用token的原理：</strong><br/></li><ol><li>第一步：后端随机产生一个 token，把这个token 保存到 session 状态中；同时后端把这个token 交给前端页面；</li><li>第二步：前端页面提交请求时，把 token 加入到请求数据或者头信息中，一起传给后端；</li><li>后端验证前端传来的 token 与 session 是否一致，一致则合法，否则是非法请求。</li></ol></ul><p></p>","level":3,"tagId":21}
{"_id":{"$oid":"61aa386c3976eb00014e4579"},"exerciseKey":"a1d425f5-4d07-4ffc-865b-23fec635032c","category":"QA","renderType":"md","title":"grid网格布局是什么？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/4d73e3d0-9a94-11eb-85f6-6fac77c0c9b3.png)\n\n\n## 一、是什么\n\n`Grid` 布局即网格布局，是一个二维的布局方式，由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列\n\n擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系\n\n ![](https://static.vue-js.com/59680a40-9a94-11eb-85f6-6fac77c0c9b3.png)\n\n这与之前讲到的`flex`一维布局不相同\n\n设置`display:grid/inline-grid`的元素就是网格布局容器，这样就能出发浏览器渲染引擎的网格布局算法\n\n```js\n<div class=\"container\">\n    <div class=\"item item-1\">\n        <p class=\"sub-item\"></p >\n </div>\n    <div class=\"item item-2\"></div>\n    <div class=\"item item-3\"></div>\n</div> \n```\n\n上述代码实例中，`.container`元素就是网格布局容器，`.item`元素就是网格的项目，由于网格元素只能是容器的顶层子元素，所以`p`元素并不是网格元素\n\n这里提一下，网格线概念，有助于下面对`grid-column`系列属性的理解\n\n网格线，即划分网格的线，如下图所示：\n\n ![](https://static.vue-js.com/61be7080-9a94-11eb-ab90-d9ae814b240d.png)\n\n上图是一个 2 x 3 的网格，共有3根水平网格线和4根垂直网格线\n\n\n## 二、属性\n\n同样，`Grid` 布局属性可以分为两大类：\n\n- 容器属性，\n- 项目属性\n\n\n\n关于容器属性有如下：\n\n### display 属性\n\n文章开头讲到，在元素上设置`display：grid` 或 `display：inline-grid` 来创建一个网格容器\n\n- display：grid 则该容器是一个块级元素\n\n- display: inline-grid 则容器元素为行内元素\n\n\n\n### grid-template-columns 属性，grid-template-rows 属性\n\n`grid-template-columns` 属性设置列宽，`grid-template-rows` 属性设置行高\n\n```css\n.wrapper {\n  display: grid;\n  /*  声明了三列，宽度分别为 200px 200px 200px */\n  grid-template-columns: 200px 200px 200px;\n  grid-gap: 5px;\n  /*  声明了两行，行高分别为 50px 50px  */\n  grid-template-rows: 50px 50px;\n}\n```\n\n以上表示固定列宽为 200px 200px 200px，行高为 50px 50px\n\n上述代码可以看到重复写单元格宽高，通过使用`repeat()`函数，可以简写重复的值\n\n- 第一个参数是重复的次数\n- 第二个参数是重复的值\n\n所以上述代码可以简写成\n\n```css\n.wrapper {\n  display: grid;\n  grid-template-columns: repeat(3,200px);\n  grid-gap: 5px;\n  grid-template-rows:repeat(2,50px);\n}\n```\n\n除了上述的`repeact`关键字，还有：\n\n- auto-fill：示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格\n\n>`grid-template-columns: repeat(auto-fill, 200px)` 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素\n\n- fr：片段，为了方便表示比例关系\n\n>`grid-template-columns: 200px 1fr 2fr` 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3\n\n- minmax：产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中。第一个参数就是最小值，第二个参数就是最大值\n\n>`minmax(100px, 1fr)`表示列宽不小于`100px`，不大于`1fr`\n\n- auto：由浏览器自己决定长度\n\n>`grid-template-columns: 100px auto 100px` 表示第一第三列为 100px，中间由浏览器决定长度\n\n\n\n### grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性\n\n`grid-row-gap` 属性、`grid-column-gap` 属性分别设置行间距和列间距。`grid-gap` 属性是两者的简写形式\n\n`grid-row-gap: 10px` 表示行间距是 10px\n\n`grid-column-gap: 20px` 表示列间距是 20px\n\n`grid-gap: 10px 20px` 等同上述两个属性\n\n\n\n### grid-template-areas 属性\n\n用于定义区域，一个区域由一个或者多个单元格组成\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 100px 100px 100px;\n  grid-template-rows: 100px 100px 100px;\n  grid-template-areas: 'a b c'\n                       'd e f'\n                       'g h i';\n}\n```\n\n上面代码先划分出9个单元格，然后将其定名为`a`到`i`的九个区域，分别对应这九个单元格。\n\n多个单元格合并成一个区域的写法如下\n\n ```css\n grid-template-areas: 'a a a'\n                      'b b b'\n                      'c c c';\n ```\n\n上面代码将9个单元格分成`a`、`b`、`c`三个区域\n\n如果某些区域不需要利用，则使用\"点\"（`.`）表示\n\n\n\n### grid-auto-flow 属性\n\n划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。\n\n顺序就是由`grid-auto-flow`决定，默认为行，代表\"先行后列\"，即先填满第一行，再开始放入第二行\n\n ![](https://static.vue-js.com/70fb3240-9a94-11eb-ab90-d9ae814b240d.png)\n\n当修改成`column`后，放置变为如下：\n\n![](https://static.vue-js.com/7c26ffa0-9a94-11eb-ab90-d9ae814b240d.png)\n\n\n\n### justify-items 属性， align-items 属性， place-items 属性\n\n`justify-items` 属性设置单元格内容的水平位置（左中右），`align-items` 属性设置单元格的垂直位置（上中下）\n\n两者属性的值完成相同\n\n```css\n.container {\n  justify-items: start | end | center | stretch;\n  align-items: start | end | center | stretch;\n}\n```\n\n属性对应如下：\n\n- start：对齐单元格的起始边缘\n- end：对齐单元格的结束边缘\n- center：单元格内部居中\n- stretch：拉伸，占满单元格的整个宽度（默认值）\n\n`place-items`属性是`align-items`属性和`justify-items`属性的合并简写形式\n\n\n\n### justify-content 属性， align-content 属性， place-content 属性\n\n`justify-content`属性是整个内容区域在容器里面的水平位置（左中右），`align-content`属性是整个内容区域的垂直位置（上中下）\n\n```css\n.container {\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;\n  align-content: start | end | center | stretch | space-around | space-between | space-evenly;  \n}\n```\n\n两个属性的写法完全相同，都可以取下面这些值：\n\n- start - 对齐容器的起始边框\n- end - 对齐容器的结束边框\n- center - 容器内部居中\n\n ![](https://static.vue-js.com/9d1ec990-9a94-11eb-ab90-d9ae814b240d.png)\n\n- space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍\n\n- space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔\n\n- space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔\n\n- stretch - 项目大小没有指定时，拉伸占据整个网格容器\n\n ![](https://static.vue-js.com/a620b210-9a94-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n### grid-auto-columns 属性和 grid-auto-rows 属性\n\n有时候，一些项目的指定位置，在现有网格的外部，就会产生显示网格和隐式网格\n\n比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。超出的部分就是隐式网格\n\n而`grid-auto-rows`与`grid-auto-columns`就是专门用于指定隐式网格的宽高\n\n\n\n\n\n关于项目属性，有如下：\n\n\n### grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性\n\n指定网格项目所在的四个边框，分别定位在哪根网格线，从而指定项目的位置\n\n- grid-column-start 属性：左边框所在的垂直网格线\n- grid-column-end 属性：右边框所在的垂直网格线\n- grid-row-start 属性：上边框所在的水平网格线\n- grid-row-end 属性：下边框所在的水平网格线\n\n举个例子：\n\n```html\n<style>\n    #container{\n        display: grid;\n        grid-template-columns: 100px 100px 100px;\n        grid-template-rows: 100px 100px 100px;\n    }\n    .item-1 {\n        grid-column-start: 2;\n        grid-column-end: 4;\n    }\n</style>\n\n<div id=\"container\">\n    <div class=\"item item-1\">1</div>\n    <div class=\"item item-2\">2</div>\n    <div class=\"item item-3\">3</div>\n</div>\n```\n\n通过设置`grid-column`属性，指定1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线\n\n ![](https://static.vue-js.com/b7925530-9a94-11eb-ab90-d9ae814b240d.png)\n\n\n\n\n\n### grid-area 属性\n\n`grid-area` 属性指定项目放在哪一个区域\n\n```css\n.item-1 {\n  grid-area: e;\n}\n```\n\n意思为将1号项目位于`e`区域\n\n与上述讲到的`grid-template-areas`搭配使用\n\n\n\n### justify-self 属性、align-self 属性以及 place-self 属性\n\n`justify-self`属性设置单元格内容的水平位置（左中右），跟`justify-items`属性的用法完全一致，但只作用于单个项目。\n\n`align-self`属性设置单元格内容的垂直位置（上中下），跟`align-items`属性的用法完全一致，也是只作用于单个项目\n\n ```css\n .item {\n   justify-self: start | end | center | stretch;\n   align-self: start | end | center | stretch;\n }\n ```\n\n这两个属性都可以取下面四个值。\n\n - start：对齐单元格的起始边缘。\n  - end：对齐单元格的结束边缘。\n - center：单元格内部居中。\n - stretch：拉伸，占满单元格的整个宽度（默认值）\n\n\n\n## 三、应用场景\n\n文章开头就讲到，`Grid`是一个强大的布局，如一些常见的 CSS 布局，如居中，两列布局，三列布局等等是很容易实现的，在以前的文章中，也有使用`Grid`布局完成对应的功能\n\n关于兼容性问题，结果如下：\n\n ![](https://static.vue-js.com/c24a2b10-9a94-11eb-85f6-6fac77c0c9b3.png)\n\n总体兼容性还不错，但在 IE 10 以下不支持\n\n目前，`Grid`布局在手机端支持还不算太友好\n\n","level":2,"tagId":11}
{"_id":{"$oid":"61aa386c91a75000018d2d41"},"exerciseKey":"a24f7d09-79df-4468-af94-654e8cfd3288","category":"QA","renderType":"md","title":"typeof 是否能正确判断类型？","desc":null,"options":null,"explanation":"对于原始类型来说，除了 null 都可以调用typeof显示正确的类型。\n\n```js\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\n\n```\n\n但对于引用数据类型，除了函数之外，都会显示\"object\"。\n\n\n\n```js\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n\n```\n\n因此采用typeof判断对象数据类型是不合适的，采用instanceof会更好，instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true\n\n\n\n```js\n\nconst Person = function() {}\nconst p1 = new Person()\np1 instanceof Person // true\nvar str1 = 'hello world'\nstr1 instanceof String // false\nvar str2 = new String('hello world')\nstr2 instanceof String // true\n\n```","level":2,"tagId":10}
{"_id":{"$oid":"61aa386c3976eb00014e457b"},"exerciseKey":"a2580d1e-90e9-48bc-b93c-247425fb3e5f","category":"QA","renderType":"md","title":"说说如何借助webpack来优化前端性能？","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/15e1ace0-aee4-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、背景\n\n随着前端的项目逐渐扩大，必然会带来的一个问题就是性能\n\n尤其在大型复杂的项目中，前端业务可能因为一个小小的数据依赖，导致整个页面卡顿甚至奔溃\n\n一般项目在完成后，会通过`webpack`进行打包，利用`webpack`对前端项目性能优化是一个十分重要的环节\n\n\n\n## 二、如何优化\n\n\n\n通过`webpack`优化前端的手段有：\n\n- JS代码压缩\n- CSS代码压缩\n- Html文件代码压缩\n- 文件大小压缩\n- 图片压缩\n- Tree Shaking\n- 代码分离\n- 内联 chunk\n\n\n\n### JS代码压缩\n\n`terser`是一个`JavaScript`的解释、绞肉机、压缩机的工具集，可以帮助我们压缩、丑化我们的代码，让`bundle`更小\n\n在`production`模式下，`webpack` 默认就是使用 `TerserPlugin` 来处理我们的代码的。如果想要自定义配置它，配置方法如下：\n\n```js\nconst TerserPlugin = require('terser-webpack-plugin')\nmodule.exports = {\n    ...\n    optimization: {\n        minimize: true,\n        minimizer: [\n            new TerserPlugin({\n                parallel: true // 电脑cpu核数-1\n            })\n        ]\n    }\n}\n```\n\n属性介绍如下：\n\n-  extractComments：默认值为true，表示会将注释抽取到一个单独的文件中，开发阶段，我们可设置为 false ，不保留注释\n-  parallel：使用多进程并发运行提高构建的速度，默认值是true，并发运行的默认数量： os.cpus().length - 1\n-  terserOptions：设置我们的terser相关的配置：\n   - compress：设置压缩相关的选项，mangle：设置丑化相关的选项，可以直接设置为true\n   - mangle：设置丑化相关的选项，可以直接设置为true\n   - toplevel：底层变量是否进行转换\n   - keep_classnames：保留类的名称\n   - keep_fnames：保留函数的名称\n\n\n\n### CSS代码压缩\n\n`CSS`压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等\n\nCSS的压缩我们可以使用另外一个插件：`css-minimizer-webpack-plugin`\n\n```cmd\nnpm install css-minimizer-webpack-plugin -D\n```\n\n配置方法如下：\n\n```js\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')\nmodule.exports = {\n    // ...\n    optimization: {\n        minimize: true,\n        minimizer: [\n            new CssMinimizerPlugin({\n                parallel: true\n            })\n        ]\n    }\n}\n```\n\n\n\n\n\n### Html文件代码压缩\n\n使用`HtmlWebpackPlugin`插件来生成`HTML`的模板时候，通过配置属性`minify`进行`html`优化\n\n```js\nmodule.exports = {\n    ...\n    plugin:[\n        new HtmlwebpackPlugin({\n            ...\n            minify:{\n                minifyCSS:false, // 是否压缩css\n                collapseWhitespace:false, // 是否折叠空格\n                removeComments:true // 是否移除注释\n            }\n        })\n    ]\n}\n```\n\n设置了`minify`，实际会使用另一个插件`html-minifier-terser`\n\n\n\n### 文件大小压缩\n\n对文件的大小进行压缩，减少`http`传输过程中宽带的损耗\n\n```js\nnpm install compression-webpack-plugin -D\n```\n\n```js\nnew ComepressionPlugin({\n    test:/\\.(css|js)$/,  // 哪些文件需要压缩\n    threshold:500, // 设置文件多大开始压缩\n    minRatio:0.7, // 至少压缩的比例\n    algorithm:\"gzip\", // 采用的压缩算法\n})\n```\n\n\n\n\n\n### 图片压缩\n\n一般来说在打包之后，一些图片文件的大小是远远要比 `js` 或者 `css` 文件要来的大，所以图片压缩较为重要\n\n配置方法如下：\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /\\.(png|jpg|gif)$/,\n      use: [\n        {\n          loader: 'file-loader',\n          options: {\n            name: '[name]_[hash].[ext]',\n            outputPath: 'images/',\n          }\n        },\n        {\n          loader: 'image-webpack-loader',\n          options: {\n            // 压缩 jpeg 的配置\n            mozjpeg: {\n              progressive: true,\n              quality: 65\n            },\n            // 使用 imagemin**-optipng 压缩 png，enable: false 为关闭\n            optipng: {\n              enabled: false,\n            },\n            // 使用 imagemin-pngquant 压缩 png\n            pngquant: {\n              quality: '65-90',\n              speed: 4\n            },\n            // 压缩 gif 的配置\n            gifsicle: {\n              interlaced: false,\n            },\n            // 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式\n            webp: {\n              quality: 75\n            }\n          }\n        }\n      ]\n    },\n  ]\n} \n```\n\n\n\n\n\n### Tree Shaking\n\n`Tree Shaking` 是一个术语，在计算机中表示消除死代码，依赖于`ES Module`的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）\n\n在`webpack`实现`Trss shaking`有两种不同的方案：\n\n- usedExports：通过标记某些函数是否被使用，之后通过Terser来进行优化的\n- sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用\n\n两种不同的配置方案， 有不同的效果\n\n\n\n#### usedExports\n\n配置方法也很简单，只需要将`usedExports`设为`true`\n\n```js\nmodule.exports = {\n    ...\n    optimization:{\n        usedExports\n    }\n}\n```\n\n使用之后，没被用上的代码在`webpack`打包中会加入`unused harmony export mul`注释，用来告知 `Terser` 在优化时，可以删除掉这段代码\n\n 如下面`sum`函数没被用到，`webpack`打包会添加注释，`terser`在优化时，则将该函数去掉\n\n ![](https://static.vue-js.com/21b2e200-aee4-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n\n\n#### sideEffects\n\n`sideEffects`用于告知`webpack compiler`哪些模块时有副作用，配置方法是在`package.json`中设置`sideEffects`属性\n\n如果`sideEffects`设置为false，就是告知`webpack`可以安全的删除未用到的`exports`\n\n如果有些文件需要保留，可以设置为数组的形式\n\n```js\n\"sideEffecis\":[    \"./src/util/format.js\",    \"*.css\" // 所有的css文件]\n```\n\n\n\n上述都是关于`javascript`的`tree shaking`，`css`同样也能够实现`tree shaking`\n\n#### css tree shaking\n\n`css`进行`tree shaking`优化可以安装`PurgeCss`插件\n\n```cmd\nnpm install purgecss-plugin-webpack -D\n```\n\n```js\nconst PurgeCssPlugin = require('purgecss-webpack-plugin')module.exports = {    ...    plugins:[        new PurgeCssPlugin({            path:glob.sync(`${path.resolve('./src')}/**/*`), {nodir:true}// src里面的所有文件            satelist:function(){                return {                    standard:[\"html\"]                }            }        })    ]}\n```\n\n- paths：表示要检测哪些目录下的内容需要被分析，配合使用glob\n- 默认情况下，Purgecss会将我们的html标签的样式移除掉，如果我们希望保留，可以添加一个safelist的属性\n\n\n\n### 代码分离\n\n将代码分离到不同的`bundle`中，之后我们可以按需加载，或者并行加载这些文件\n\n默认情况下，所有的`JavaScript`代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，就会影响首页的加载速度\n\n代码分离可以分出出更小的`bundle`，以及控制资源加载优先级，提供代码的加载性能\n\n这里通过`splitChunksPlugin`来实现，该插件`webpack`已经默认安装和集成，只需要配置即可\n\n默认配置中，chunks仅仅针对于异步（async）请求，我们可以设置为initial或者all\n\n```js\nmodule.exports = {    ...    optimization:{        splitChunks:{            chunks:\"all\"        }    }}\n```\n\n`splitChunks`主要属性有如下：\n\n- Chunks，对同步代码还是异步代码进行处理\n- minSize： 拆分包的大小, 至少为minSize，如何包的大小不超过minSize，这个包不会拆分\n- maxSize： 将大于maxSize的包，拆分为不小于minSize的包\n- minChunks：被引入的次数，默认是1\n\n\n\n### 内联chunk\n\n可以通过`InlineChunkHtmlPlugin`插件将一些`chunk`的模块内联到`html`，如`runtime`的代码（对模块进行解析、加载、模块信息相关的代码），代码量并不大，但是必须加载的\n\n```js\nconst InlineChunkHtmlPlugin = require('react-dev-utils/InlineChunkHtmlPlugin')const HtmlWebpackPlugin = require('html-webpack-plugin')module.exports = {    ...    plugin:[        new InlineChunkHtmlPlugin(HtmlWebpackPlugin,[/runtime.+\\.js/]}\n```\n\n\n\n\n\n### 三、总结\n\n关于`webpack`对前端性能的优化，可以通过文件体积大小入手，其次还可通过分包的形式、减少http请求次数等方式，实现对前端性能的优化\n","level":2.5,"tagId":28}
{"_id":{"$oid":"61aa386c79641200019174a6"},"exerciseKey":"a30c0639-0784-4326-85b5-0fd73e90b988","category":"QA","renderType":"md","title":"说说你对函数式编程的理解，以及优缺点？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/ec0f6e80-8534-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n函数式编程是一种\"编程范式\"（programming paradigm），一种编写程序的方法论\n\n主要的编程范式有三种：命令式编程，声明式编程和函数式编程\n\n相比命令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而非设计一个复杂的执行过程\n\n举个例子，将数组每个元素进行平方操作，命令式编程与函数式编程如下\n\n```js\n// 命令式编程\nvar array = [0, 1, 2, 3]\nfor(let i = 0; i < array.length; i++) {\n    array[i] = Math.pow(array[i], 2)\n}\n\n// 函数式方式\n[0, 1, 2, 3].map(num => Math.pow(num, 2))\n```\n\n简单来讲，就是要把过程逻辑写成函数，定义好输入参数，只关心它的输出结果\n\n即是一种描述集合和集合之间的转换关系，输入通过函数都会返回有且只有一个输出值\n\n ![](https://static.vue-js.com/f9f83900-8534-11eb-85f6-6fac77c0c9b3.png)\n\n可以看到，函数实际上是一个关系，或者说是一种映射，而这种映射关系是可以组合的，一旦我们知道一个函数的输出类型可以匹配另一个函数的输入，那他们就可以进行组合\n\n\n## 二、概念\n\n### 纯函数\n\n函数式编程旨在尽可能的提高代码的无状态性和不变性。要做到这一点，就要学会使用无副作用的函数，也就是纯函数\n\n纯函数是对给定的输入返还相同输出的函数，并且要求你所有的数据都是不可变的，即纯函数=无状态+数据不可变\n\n ![](https://static.vue-js.com/04f50720-8535-11eb-ab90-d9ae814b240d.png)\n\n举一个简单的例子\n\n```js\nlet double = value=>value*2;\n```\n\n特性：\n\n- 函数内部传入指定的值，就会返回确定唯一的值\n- 不会造成超出作用域的变化，例如修改全局变量或引用传递的参数\n\n优势：\n\n- 使用纯函数，我们可以产生可测试的代码\n\n```js\ntest('double(2) 等于 4', () => {\n  expect(double(2)).toBe(4);\n})\n```\n\n- 不依赖外部环境计算，不会产生副作用，提高函数的复用性\n\n- 可读性更强 ，函数不管是否是纯函数  都会有一个语义化的名称，更便于阅读\n\n- 可以组装成复杂任务的可能性。符合模块化概念及单一职责原则\n\n\n\n### 高阶函数\n\n在我们的编程世界中，我们需要处理的其实也只有“数据”和“关系”，而关系就是函数\n\n编程工作也就是在找一种映射关系，一旦关系找到了，问题就解决了，剩下的事情，就是让数据流过这种关系，然后转换成另一个数据，如下图所示\n\n ![](https://static.vue-js.com/104af1c0-8535-11eb-ab90-d9ae814b240d.png)\n\n在这里，就是高阶函数的作用。高级函数，就是以函数作为输入或者输出的函数被称为高阶函数\n\n通过高阶函数抽象过程，注重结果，如下面例子\n\n```js\nconst forEach = function(arr,fn){\n    for(let i=0;i<arr.length;i++){\n        fn(arr[i]);\n    }\n}\nlet arr = [1,2,3];\nforEach(arr,(item)=>{\n    console.log(item);\n})\n```\n\n上面通过高阶函数 `forEach`来抽象循环如何做的逻辑，直接关注做了什么\n\n高阶函数存在缓存的特性，主要是利用闭包作用\n\n```js\nconst once = (fn)=>{\n    let done = false;\n    return function(){\n        if(!done){\n            fn.apply(this,fn);\n        }else{\n            console.log(\"该函数已经执行\");\n        }\n        done = true;\n    }\n}\n```\n\n### 柯里化\n\n柯里化是把一个多参数函数转化成一个嵌套的一元函数的过程\n\n一个二元函数如下：\n\n```js\nlet fn = (x,y)=>x+y;\n```\n\n转化成柯里化函数如下：\n\n```js\nconst curry = function(fn){\n    return function(x){\n        return function(y){\n            return fn(x,y);\n        }\n    }\n}\nlet myfn = curry(fn);\nconsole.log( myfn(1)(2) );\n```\n\n上面的`curry`函数只能处理二元情况，下面再来实现一个实现多参数的情况\n\n```js\n// 多参数柯里化；\nconst curry = function(fn){\n    return function curriedFn(...args){\n        if(args.length<fn.length){\n            return function(){\n                return curriedFn(...args.concat([...arguments]));\n            }\n        }\n        return fn(...args);\n    }\n}\nconst fn = (x,y,z,a)=>x+y+z+a;\nconst myfn = curry(fn);\nconsole.log(myfn(1)(2)(3)(1));\n```\n\n关于柯里化函数的意义如下：\n\n- 让纯函数更纯，每次接受一个参数，松散解耦\n- 惰性执行\n\n\n\n### 组合与管道\n\n组合函数，目的是将多个函数组合成一个函数\n\n举个简单的例子：\n\n```js\nfunction afn(a){\n    return a*2;\n}\nfunction bfn(b){\n    return b*3;\n}\nconst compose = (a,b)=>c=>a(b(c));\nlet myfn =  compose(afn,bfn);\nconsole.log( myfn(2));\n```\n\n可以看到`compose`实现一个简单的功能：形成了一个新的函数，而这个函数就是一条从 `bfn -> afn` 的流水线\n\n下面再来看看如何实现一个多函数组合：\n\n```js\nconst compose = (...fns)=>val=>fns.reverse().reduce((acc,fn)=>fn(acc),val);\n```\n\n`compose`执行是从右到左的。而管道函数，执行顺序是从左到右执行的\n\n```js\nconst pipe = (...fns)=>val=>fns.reduce((acc,fn)=>fn(acc),val);\n```\n\n组合函数与管道函数的意义在于：可以把很多小函数组合起来完成更复杂的逻辑\n\n## 三、优缺点\n\n#### 优点\n\n- 更好的管理状态：因为它的宗旨是无状态，或者说更少的状态，能最大化的减少这些未知、优化代码、减少出错情况\n\n- 更简单的复用：固定输入->固定输出，没有其他外部变量影响，并且无副作用。这样代码复用时，完全不需要考虑它的内部实现和外部影响\n\n- 更优雅的组合：往大的说，网页是由各个组件组成的。往小的说，一个函数也可能是由多个小函数组成的。更强的复用性，带来更强大的组合性\n\n- 隐性好处。减少代码量，提高维护性\n\n#### 缺点：\n\n- 性能：函数式编程相对于指令式编程，性能绝对是一个短板，因为它往往会对一个方法进行过度包装，从而产生上下文切换的性能开销\n\n- 资源占用：在 JS 中为了实现对象状态的不可变，往往会创建新的对象，因此，它对垃圾回收所产生的压力远远超过其他编程方式\n\n- 递归陷阱：在函数式编程中，为了实现迭代，通常会采用递归操作\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa386c39bf10000191ca31"},"exerciseKey":"a44172d8-ec2b-42f2-9efe-52af96e97ef8","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst [y] = numbers;\n\nconsole.log(y);\n```","options":"{\"options\":[\"[[1, 2, 3, 4, 5]]\",\"[1, 2, 3, 4, 5]\",\"1\",\"[1]\"],\"isMulti\":false,\"answer\":[2]}","explanation":"我们可以通过解构赋值来解析来自对象的数组或属性的值，比如说：\n```javascript\n[a, b] = [1, 2];\n```\n<img src=\"https://i.imgur.com/ADFpVop.png\" width=\"200\">\n`a`的值现在是`1`，`b`的值现在是`2`.而在题目中，我们是这么做的:\n```javascript\n[y] = [1, 2, 3, 4, 5];\n```\n<img src=\"https://i.imgur.com/NzGkMNk.png\" width=\"200\">\n也就是说，`y`等于数组的第一个值就是数字`1`.我们输出`y`， 返回`1`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa386cc2d0220001c96513"},"exerciseKey":"a493193e-48ff-4e9e-9e66-0bf55732db63","category":"QA","renderType":"md","title":"说说你对 Object.defineProperty 的理解","desc":null,"options":null,"explanation":"Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n该方法接受三个参数，第一个参数是 obj：要定义属性的对象，第二个参数是 prop：要定义或修改的属性的名称或 Symbol，第三个参数是 descriptor：要定义或修改的属性描述符。\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, \"property\", { value: 18 });\nconsole.log(obj.property); // 18\n```\n\n虽然我们可以直接添加属性和值，但是使用这种方式，我们能进行更多的配置。\n\n函数的第三个参数 descriptor 所表示的属性描述符有两种形式：数据描述符和存取描述符。数据描述符是一个具有值的属性，该值可以是可写的，也可以是不可写的。存取描述符是由 getter 函数和 setter 函数所描述的属性。一个描述符只能是这两者其中之一；不能同时是两者。\n\n这两种同时拥有下列两种键值：\n\n* configurable：是否可以删除目标属性或是否可以再次修改属性的特性（writable, configurable, enumerable）。设置为true可以被删除或可以重新设置特性；设置为false，不能被可以被删除或不可以重新设置特性。默认为false。\n* enumerable：当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。默认为 false。\n\n```javascript\nconst obj = { property: 24 };\nObject.defineProperty(obj, \"property\", { configurable: true });\ndelete obj[\"property\"]; // true\nobj; // {}\n// 改变状态\nconst obj = { property: 24 };\nObject.defineProperty(obj, \"property\", { configurable: false });\ndelete obj[\"property\"]; // false\nobj; // {'property': 24}\n```\n\n```javascript\nconst obj = { property1: 24, property2: 34, property3: 54 };\nObject.defineProperty(obj, \"property1\", { enumerable: true });\nfor (i in obj) {\n  console.log(i);\n}\n// property1\n// property2\n// property3\n// 改状态\n\nObject.defineProperty(obj, \"property1\", { enumerable: false });\nfor (i in obj) {\n  console.log(i);\n}\n// property2\n// property3\n\n```\n\n数据描述符还具有以下可选键值：\n\n* value：该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。\n* writable：当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符改变。默认为 false。\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, \"property1\", { value: 18 });\nobj; // {'property1': 18}\n```\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, \"property1\", { value: 18, writable: false });\nobj.property1 = 24;\nobj; // {'property1': 18}\n\n// 改变状态\nconst obj = {};\nObject.defineProperty(obj, \"property1\", { value: 18, writable: true });\nobj.property1 = 24;\nobj; // {'property1': 24}\n\n```\n\n存取描述符还具有以下可选键值：\n\n* get：属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的 this 并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。默认为 undefined。\n* set：属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。默认为 undefined。\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, \"property1\", {\n  get(value) {\n    return value;\n  },\n  set(newValue) {\n    value = newValue;\n  },\n});\n\n```\n\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa386c0f30890001ab816c"},"exerciseKey":"a4b9ded4-e430-4df9-8857-4d870e9c35cc","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction sayHi() {\n  console.log(name)\n  console.log(age)\n  var name = 'Lydia'\n  let age = 21\n}\n\nsayHi()\n```","options":"{\"options\":[\"Lydia 和 undefined\",\"Lydia 和 ReferenceError\",\"ReferenceError 和 21\",\"undefined 和 ReferenceError\"],\"isMulti\":false,\"answer\":[3]}","explanation":"在函数内部，我们首先通过 `var` 关键字声明了 `name` 变量。这意味着变量被提升了（内存空间在创建阶段就被设置好了），直到程序运行到定义变量位置之前默认值都是 `undefined`。因为当我们打印 `name` 变量时还没有执行到定义变量的位置，因此变量的值保持为 `undefined`。\n\n通过 `let` 和 `const` 关键字声明的变量也会提升，但是和 `var` 不同，它们**不会被初始化**。在我们声明（初始化）之前是不能访问它们的。这个行为被称之为暂时性死区。当我们试图在声明之前访问它们时，JavaScript 将会抛出一个 `ReferenceError` 错误。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386c3d5f3a0001af562e"},"exerciseKey":"a4bbb8e2-1333-460a-8127-87f04f83c5b8","category":"QA","renderType":"md","title":"前端项目中为什么要初始化CSS样式？","desc":null,"options":null,"explanation":"因为浏览器的兼容问题，不同浏览器对标签的默认值是不同的，如果没有对浏览器的CSS初始化，会造成相同页面在不同浏览器的显示存在差异。","level":1,"tagId":11}
{"_id":{"$oid":"61aa386c291c0100017ee26f"},"exerciseKey":"a4e2774a-6ac9-4fd4-a2b3-04d88538ad62","category":"QA","renderType":"md","title":"如何查找一篇英文文章中出现频率最高的单词？","desc":null,"options":null,"explanation":"```js\nfunction findMostWord(article) {\n  // 合法性判断\n  if (!article) return;\n\n  // 参数处理\n  article = article.trim().toLowerCase();\n\n  let wordList = article.match(/[a-z]+/g),\n    visited = [],\n    maxNum = 0,\n    maxWord = \"\";\n\n  article = \" \" + wordList.join(\"  \") + \" \";\n\n  // 遍历判断单词出现次数\n  wordList.forEach(function(item) {\n    if (visited.indexOf(item) < 0) {\n      let word = new RegExp(\" \" + item + \" \", \"g\"),\n        num = article.match(word).length;\n\n      if (num > maxNum) {\n        maxNum = num;\n        maxWord = item;\n      }\n    }\n  });\n\n  return maxWord + \"  \" + maxNum;\n}\n```","level":3,"tagId":26}
{"_id":{"$oid":"61aa386d0d111e00010372dc"},"exerciseKey":"a4eeac78-8db1-44df-ae79-a5adb65eb55b","category":"QA","renderType":"md","title":"两数相加","desc":"给你两个 **非空** 的链表，表示两个非负的整数。它们每位数字都是按照 **逆序** 的方式存储的，并且每个节点只能存储 **一位** 数字。\n\n请你将两个数相加，并以相同形式返回一个表示和的链表。\n\n你可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n* 示例 1：\n\n![image.png](https://i.loli.net/2021/09/05/68MQqU7exR4YzTr.png)\n\n```\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n```\n\n* 示例 2：\n\n```\n输入：l1 = [0], l2 = [0]\n输出：[0]\n```\n\n* 示例 3：\n\n```\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n```\n\n* 提示：\n\t* 每个链表中的节点数在范围 [1, 100] 内\n\t* 0 <= Node.val <= 9\n\t* 题目数据保证列表表示的数字不含前导零\n  \n```\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n```\n\n","options":null,"explanation":"## 思路与算法\n\n由于输入的两个链表都是**逆序**存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。\n\n我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。具体而言，如果当前两个链表处相应位置的数字为 n1,n2，进位值为 carry，则它们的和为 n1+n2+carry；其中，答案链表处相应位置的数字为 (n1+n2+carry) mod 10，而新的进位值为 \n (n1+n2+carry) / 10 。\n\n如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 00 。\n\n此外，如果链表遍历结束后，有 carry > 0，还需要在答案链表的后面附加一个节点，节点的值为 carry。\n\n## 代码\n\n```javascript\nvar addTwoNumbers = function(l1, l2) {\n    let head = null, tail = null;\n    let carry = 0;\n    while (l1 || l2) {\n        const n1 = l1 ? l1.val : 0;\n        const n2 = l2 ? l2.val : 0;\n        const sum = n1 + n2 + carry;\n        if (!head) {\n            head = tail = new ListNode(sum % 10);\n        } else {\n            tail.next = new ListNode(sum % 10);\n            tail = tail.next;\n        }\n        carry = Math.floor(sum / 10);\n        if (l1) {\n            l1 = l1.next;\n        }\n        if (l2) {\n            l2 = l2.next;\n        }\n    }\n    if (carry > 0) {\n        tail.next = new ListNode(carry);\n    }\n    return head;\n};\n```\n\n## 复杂度分析\n\n* 时间复杂度：O(max(m,n))，其中 m 和 n 分别为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要 O(1) 的时间。\n\n* 空间复杂度：O(1)。注意返回值不计入空间复杂度。\n\n","level":3,"tagId":31}
{"_id":{"$oid":"61aa386dff0573000165b31c"},"exerciseKey":"a5032eb9-6a53-4792-852f-3f9417631c47","category":"QA","renderType":"md","title":"SPA（单页应用）首屏加载速度慢怎么解决？","desc":null,"options":null,"explanation":" ![image.png](https://static.vue-js.com/24617c00-3acc-11eb-ab90-d9ae814b240d.png)\n\n\n## 一、什么是首屏加载\n\n首屏时间（First Contentful Paint），指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一定要全部渲染完成，但需要展示当前视窗需要的内容\n\n首屏加载可以说是用户体验中**最重要**的环节\n\n### 关于计算首屏时间\n利用`performance.timing`提供的数据：\n\n ![image.png](https://static.vue-js.com/2e2491a0-3acc-11eb-85f6-6fac77c0c9b3.png)\n\n通过`DOMContentLoad`或者`performance`来计算出首屏时间\n\n```js\n// 方案一：\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    console.log('first contentful painting');\n});\n// 方案二：\nperformance.getEntriesByName(\"first-contentful-paint\")[0].startTime\n\n// performance.getEntriesByName(\"first-contentful-paint\")[0]\n// 会返回一个 PerformancePaintTiming的实例，结构如下：\n{\n  name: \"first-contentful-paint\",\n  entryType: \"paint\",\n  startTime: 507.80000002123415,\n  duration: 0,\n};\n```\n\n## 二、加载慢的原因\n\n在页面渲染的过程，导致加载速度慢的因素可能如下：\n\n- 网络延时问题\n- 资源文件体积是否过大\n- 资源是否重复发送请求去加载了\n- 加载脚本的时候，渲染内容堵塞了\n\n\n\n## 三、解决方案\n\n常见的几种SPA首屏优化方式\n\n- 减小入口文件积\n- 静态资源本地缓存\n- UI框架按需加载\n- 图片资源的压缩\n- 组件重复打包\n- 开启GZip压缩\n- 使用SSR\n\n\n\n### 减小入口文件体积\n\n常用的手段是路由懒加载，把不同路由对应的组件分割成不同的代码块，待路由被请求的时候会单独打包路由，使得入口文件变小，加载速度大大增加\n\n ![image.png](https://static.vue-js.com/486cee90-3acc-11eb-ab90-d9ae814b240d.png)\n\n在`vue-router`配置路由的时候，采用动态加载路由的形式\n\n```js\nroutes:[ \n    path: 'Blogs',\n    name: 'ShowBlogs',\n    component: () => import('./components/ShowBlogs.vue')\n]\n```\n\n以函数的形式加载路由，这样就可以把各自的路由文件分别打包，只有在解析给定的路由时，才会加载路由组件\n\n\n\n### 静态资源本地缓存\n\n后端返回资源问题：\n\n- 采用`HTTP`缓存，设置`Cache-Control`，`Last-Modified`，`Etag`等响应头\n\n- 采用`Service Worker`离线缓存\n\n前端合理利用`localStorage`\n\n\n\n### UI框架按需加载\n\n在日常使用`UI`框架，例如`element-UI`、或者`antd`，我们经常性直接饮用整个`UI`库\n\n```js\nimport ElementUI from 'element-ui'\nVue.use(ElementUI)\n```\n\n但实际上我用到的组件只有按钮，分页，表格，输入与警告 所以我们要按需引用\n\n```js\nimport { Button, Input, Pagination, Table, TableColumn, MessageBox } from 'element-ui';\nVue.use(Button)\nVue.use(Input)\nVue.use(Pagination)\n```\n\n\n\n### 组件重复打包\n\n假设`A.js`文件是一个常用的库，现在有多个路由使用了`A.js`文件，这就造成了重复下载\n\n解决方案：在`webpack`的`config`文件中，修改`CommonsChunkPlugin`的配置\n\n```js\nminChunks: 3\n```\n\n`minChunks`为3表示会把使用3次及以上的包抽离出来，放进公共依赖文件，避免了重复加载组件\n\n\n\n### 图片资源的压缩\n\n图片资源虽然不在编码过程中，但它却是对页面性能影响最大的因素\n\n对于所有的图片资源，我们可以进行适当的压缩\n\n对页面上使用到的`icon`，可以使用在线字体图标，或者雪碧图，将众多小图标合并到同一张图上，用以减轻`http`请求压力。\n\n\n\n### 开启GZip压缩\n\n拆完包之后，我们再用`gzip`做一下压缩 安装`compression-webpack-plugin`\n\n```js\ncnmp i compression-webpack-plugin -D\n```\n\n在`vue.congig.js`中引入并修改`webpack`配置\n\n```js\nconst CompressionPlugin = require('compression-webpack-plugin')\n\nconfigureWebpack: (config) => {\n        if (process.env.NODE_ENV === 'production') {\n            // 为生产环境修改配置...\n            config.mode = 'production'\n            return {\n                plugins: [new CompressionPlugin({\n                    test: /\\.js$|\\.html$|\\.css/, //匹配文件名\n                    threshold: 10240, //对超过10k的数据进行压缩\n                    deleteOriginalAssets: false //是否删除原文件\n                })]\n            }\n        }\n```\n\n在服务器我们也要做相应的配置 如果发送请求的浏览器支持`gzip`，就发送给它`gzip`格式的文件 我的服务器是用`express`框架搭建的 只要安装一下`compression`就能使用\n\n```\nconst compression = require('compression')\napp.use(compression())  // 在其他中间件使用之前调用\n```\n\n\n\n### 使用SSR\n\nSSR（Server side ），也就是服务端渲染，组件或页面通过服务器生成html字符串，再发送到浏览器\n\n从头搭建一个服务端渲染是很复杂的，`vue`应用建议使用`Nuxt.js`实现服务端渲染\n\n\n\n### 小结：\n\n减少首屏渲染时间的方法有很多，总的来讲可以分成两大部分 ：资源加载优化 和 页面渲染优化\n\n下图是更为全面的首屏优化的方案\n\n ![image.png](https://static.vue-js.com/4fafe900-3acc-11eb-85f6-6fac77c0c9b3.png)\n\n\n大家可以根据自己项目的情况选择各种方式进行首屏渲染的优化\n\n","level":2,"tagId":20}
{"_id":{"$oid":"61aa386db804f8000122aaed"},"exerciseKey":"a5330a58-5be0-4f4f-8394-43392311ddaa","category":"QA","renderType":"md","title":"深拷贝浅拷贝有什么区别？怎么实现深拷贝？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/cdf952e0-69b8-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n## 一、数据类型存储\r\n\r\n前面文章我们讲到，`JavaScript`中存在两大数据类型：\r\n\r\n- 基本类型\r\n- 引用类型 \r\n\r\n基本类型数据保存在在栈内存中\r\n\r\n引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中\r\n\r\n\r\n\r\n## 二、浅拷贝\r\n\r\n浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝\r\n\r\n如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址\r\n\r\n即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址\r\n\r\n下面简单实现一个浅拷贝\r\n\r\n```js\r\nfunction shallowClone(obj) {\r\n    const newObj = {};\r\n    for(let prop in obj) {\r\n        if(obj.hasOwnProperty(prop)){\r\n            newObj[prop] = obj[prop];\r\n        }\r\n    }\r\n    return newObj;\r\n}\r\n```\r\n\r\n在`JavaScript`中，存在浅拷贝的现象有：\r\n\r\n- `Object.assign`\r\n- `Array.prototype.slice()`, `Array.prototype.concat()`\r\n- 使用拓展运算符实现的复制\r\n\r\n\r\n\r\n\r\n\r\n### Object.assign\r\n\r\n```js\r\nvar obj = {\r\n    age: 18,\r\n    nature: ['smart', 'good'],\r\n    names: {\r\n        name1: 'fx',\r\n        name2: 'xka'\r\n    },\r\n    love: function () {\r\n        console.log('fx is a great girl')\r\n    }\r\n}\r\nvar newObj = Object.assign({}, fxObj);\r\n```\r\n\r\n\r\n\r\n### slice()\r\n\r\n```js\r\nconst fxArr = [\"One\", \"Two\", \"Three\"]\r\nconst fxArrs = fxArr.slice(0)\r\nfxArrs[1] = \"love\";\r\nconsole.log(fxArr) // [\"One\", \"Two\", \"Three\"]\r\nconsole.log(fxArrs) // [\"One\", \"love\", \"Three\"]\r\n```\r\n\r\n\r\n\r\n### concat()\r\n\r\n```js\r\nconst fxArr = [\"One\", \"Two\", \"Three\"]\r\nconst fxArrs = fxArr.concat()\r\nfxArrs[1] = \"love\";\r\nconsole.log(fxArr) // [\"One\", \"Two\", \"Three\"]\r\nconsole.log(fxArrs) // [\"One\", \"love\", \"Three\"]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### 拓展运算符\r\n\r\n```js\r\nconst fxArr = [\"One\", \"Two\", \"Three\"]\r\nconst fxArrs = [...fxArr]\r\nfxArrs[1] = \"love\";\r\nconsole.log(fxArr) // [\"One\", \"Two\", \"Three\"]\r\nconsole.log(fxArrs) // [\"One\", \"love\", \"Three\"]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 三、深拷贝\r\n\r\n深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性\r\n\r\n常见的深拷贝方式有：\r\n\r\n- _.cloneDeep()\r\n\r\n- jQuery.extend()\r\n- JSON.stringify()\r\n- 手写循环递归\r\n\r\n\r\n\r\n### _.cloneDeep()\r\n\r\n```js\r\nconst _ = require('lodash');\r\nconst obj1 = {\r\n    a: 1,\r\n    b: { f: { g: 1 } },\r\n    c: [1, 2, 3]\r\n};\r\nconst obj2 = _.cloneDeep(obj1);\r\nconsole.log(obj1.b.f === obj2.b.f);// false\r\n```\r\n\r\n\r\n\r\n### jQuery.extend()\r\n\r\n```js\r\nconst $ = require('jquery');\r\nconst obj1 = {\r\n    a: 1,\r\n    b: { f: { g: 1 } },\r\n    c: [1, 2, 3]\r\n};\r\nconst obj2 = $.extend(true, {}, obj1);\r\nconsole.log(obj1.b.f === obj2.b.f); // false\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### JSON.stringify()\r\n\r\n```js\r\nconst obj2=JSON.parse(JSON.stringify(obj1));\r\n```\r\n\r\n但是这种方式存在弊端，会忽略`undefined`、`symbol`和`函数`\r\n\r\n```js\r\nconst obj = {\r\n    name: 'A',\r\n    name1: undefined,\r\n    name3: function() {},\r\n    name4:  Symbol('A')\r\n}\r\nconst obj2 = JSON.parse(JSON.stringify(obj));\r\nconsole.log(obj2); // {name: \"A\"}\r\n```\r\n\r\n\r\n\r\n### 循环递归\r\n\r\n```js\r\nfunction deepClone(obj, hash = new WeakMap()) {\r\n  if (obj === null) return obj; // 如果是null或者undefined我就不进行拷贝操作\r\n  if (obj instanceof Date) return new Date(obj);\r\n  if (obj instanceof RegExp) return new RegExp(obj);\r\n  // 可能是对象或者普通的值  如果是函数的话是不需要深拷贝\r\n  if (typeof obj !== \"object\") return obj;\r\n  // 是对象的话就要进行深拷贝\r\n  if (hash.get(obj)) return hash.get(obj);\r\n  let cloneObj = new obj.constructor();\r\n  // 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身\r\n  hash.set(obj, cloneObj);\r\n  for (let key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      // 实现一个递归拷贝\r\n      cloneObj[key] = deepClone(obj[key], hash);\r\n    }\r\n  }\r\n  return cloneObj;\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## 四、区别\r\n\r\n下面首先借助两张图，可以更加清晰看到浅拷贝与深拷贝的区别\r\n\r\n ![](https://static.vue-js.com/d9862c00-69b8-11eb-ab90-d9ae814b240d.png)\r\n\r\n从上图发现，浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样\r\n\r\n浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象\r\n\r\n```js\r\n// 浅拷贝\r\nconst obj1 = {\r\n    name : 'init',\r\n    arr : [1,[2,3],4],\r\n};\r\nconst obj3=shallowClone(obj1) // 一个浅拷贝方法\r\nobj3.name = \"update\";\r\nobj3.arr[1] = [5,6,7] ; // 新旧对象还是共享同一块内存\r\n\r\nconsole.log('obj1',obj1) // obj1 { name: 'init',  arr: [ 1, [ 5, 6, 7 ], 4 ] }\r\nconsole.log('obj3',obj3) // obj3 { name: 'update', arr: [ 1, [ 5, 6, 7 ], 4 ] }\r\n```\r\n\r\n但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象\r\n\r\n```js\r\n// 深拷贝\r\nconst obj1 = {\r\n    name : 'init',\r\n    arr : [1,[2,3],4],\r\n};\r\nconst obj4=deepClone(obj1) // 一个深拷贝方法\r\nobj4.name = \"update\";\r\nobj4.arr[1] = [5,6,7] ; // 新对象跟原对象不共享内存\r\n\r\nconsole.log('obj1',obj1) // obj1 { name: 'init', arr: [ 1, [ 2, 3 ], 4 ] }\r\nconsole.log('obj4',obj4) // obj4 { name: 'update', arr: [ 1, [ 5, 6, 7 ], 4 ] }\r\n```\r\n\r\n\r\n\r\n### 小结\r\n\r\n前提为拷贝类型为引用类型的情况下：\r\n\r\n- 浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址\r\n\r\n- 深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址","level":3.5,"tagId":26}
{"_id":{"$oid":"61aa386d34458700017f1d0f"},"exerciseKey":"a58a7800-e751-4664-9c9c-b342b21c701a","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction Person(firstName, lastName) {\n  this.firstName = firstName\n  this.lastName = lastName\n}\n\nconst lydia = new Person('Lydia', 'Hallie')\nconst sarah = Person('Sarah', 'Smith')\n\nconsole.log(lydia)\nconsole.log(sarah)\n```","options":"{\"options\":[\"Person {firstName: \\\"Lydia\\\", lastName: \\\"Hallie\\\"} and undefined\",\"Person {firstName: \\\"Lydia\\\", lastName: \\\"Hallie\\\"} and Person {firstName: \\\"Sarah\\\", lastName: \\\"Smith\\\"}\",\"Person {firstName: \\\"Lydia\\\", lastName: \\\"Hallie\\\"} and {}\",\"Person {firstName: \\\"Lydia\\\", lastName: \\\"Hallie\\\"} and ReferenceError\"],\"isMulti\":false,\"answer\":[0]}","explanation":"对于 `sarah`，我们没有使用 `new` 关键字。当使用 `new` 时，`this` 引用我们创建的空对象。当未使用 `new` 时，`this` 引用的是**全局对象**（global object）。\n我们说 `this.firstName` 等于 `\"Sarah\"`，并且 `this.lastName` 等于 `\"Smith\"`。实际上我们做的是，定义了 `global.firstName = 'Sarah'` 和 `global.lastName = 'Smith'`。而 `sarah` 本身是 `undefined`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa386d3d5f3a0001af5632"},"exerciseKey":"a67eec57-8dc1-40ee-9c8a-ccfbe25ca58d","category":"QA","renderType":"md","title":"constructor中super与props参数一起使用的目的是什么？","desc":null,"options":null,"explanation":"在调用方法之前，子类构造函数无法使用this引用super()。\n\n在ES6中，在子类的constructor中必须先调用super才能引用this。\n\n在constructor中可以使用this.props\n\n* 使用props：\n\n```react.js\nclass MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(this.props);  // Prints { name: 'sudheer',age: 30 }\n    }\n}\n```\n\n* 不使用props：\n\n```react.js\nclass MyComponent extends React.Component {\n    constructor(props) {\n        super();\n        console.log(this.props); // Prints undefined\n        // But Props parameter is still available\n        console.log(props); // Prints { name: 'sudheer',age: 30 }\n    }\n\n    render() {\n        // No difference outside constructor\n        console.log(this.props) // Prints { name: 'sudheer',age: 30 }\n    }\n}\n```\n\n上面的代码片段揭示了this.props行为仅在构造函数中有所不同。外部构造函数相同。","level":1,"tagId":13}
{"_id":{"$oid":"61aa386d39bf10000191ca39"},"exerciseKey":"a6a869f2-a5f5-451e-8f1d-eb25cea4750f","category":"QA","renderType":"md","title":"实现深拷贝","desc":null,"options":null,"explanation":"```js\nconst cloneDeep1 = (target, hash = new WeakMap()) => {\n  // 对于传入参数处理\n  if (typeof target !== 'object' || target === null) {\n    return target;\n  }\n  // 哈希表中存在直接返回\n  if (hash.has(target)) return hash.get(target);\n\n  const cloneTarget = Array.isArray(target) ? [] : {};\n  hash.set(target, cloneTarget);\n\n  // 针对Symbol属性\n  const symKeys = Object.getOwnPropertySymbols(target);\n  if (symKeys.length) {\n    symKeys.forEach(symKey => {\n      if (typeof target[symKey] === 'object' && target[symKey] !== null) {\n        cloneTarget[symKey] = cloneDeep1(target[symKey]);\n      } else {\n        cloneTarget[symKey] = target[symKey];\n      }\n    })\n  }\n\n  for (const i in target) {\n    if (Object.prototype.hasOwnProperty.call(target, i)) {\n      cloneTarget[i] =\n        typeof target[i] === 'object' && target[i] !== null\n        ? cloneDeep1(target[i], hash)\n        : target[i];\n    }\n  }\n  return cloneTarget;\n}\n\n```","level":3.5,"tagId":26}
{"_id":{"$oid":"61aa386db804f8000122aaef"},"exerciseKey":"a6c99a3d-88a1-4806-8443-89368f608ba1","category":"QA","renderType":"md","title":"使用cookie、session维持登录状态的原理是什么？","desc":null,"options":null,"explanation":"## HTTP协议\n\n要弄明白cookie和session，就得先了解一下HTTP协议。\n\nHTTP是一种无状态的协议，请求响应后，断开了TCP连接，下一次连接与上一次无关。无状态就意味着每个请求之间的不会直接地相互影响，对于每个请求，同样的请求参数就会得到同样的结果。\n\n为了识别不同的请求是否来自同一客户，引用HTTP会话机制，而维持这个会话则主要靠session和cookie。简单来说，cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。\n\n## cookie\n\n由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了，而这个通行证就是cookie了。\n\nCookie实际上是一小段的文本信息，存储在客户端，Web服务器通过传送 HTTP 包头中的 **Set-Cookie** 把一个cookie发送到用户的浏览器中,内容主要包括：`名字`，`值`，`过期时间`，`路径`和`域`，路径与域一起构成cookie的作用范围。\n\n如果不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。这种生命期为浏览器会话期的 cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。\n\n如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。\n\n## session\n\nsession机制是一种服务器端的机制，服务器使用一种类似于散列表的结构来保存信息，一般存储在文件、数据库或内存中。\n\n当客户端第一次请求服务端的时候，服务端会检查客户端的请求头携带的cookie中，是否包含sessionid，如果有的话则会检索这个sessionid对应的session是否存在。\n\n如果不存在则会创建相应的会话信息，生成对应的session，并将sessionid返回给客户端，客户端接收到这个sessionid，把它存储起来，下一次发送请求的时候，附带着这个session一起发送给服务端，服务端只要根据这个sessionid，就知道是谁了,而这个sessionid就是这次会话生命周期的凭证，服务端可以给这个sessionid设置过期时间，一但客户端丢失这个sessionid或者是服务端认为这个sessionid失效了，那么这次会话就结束了。\n\n## 登录态的维持过程：\n\n（1）首先用户在客户端浏览器发起登陆请求\n\n（2）登陆成功后，服务端会把用户信息保存在服务端，并返回一个唯一的 session 标识给客户端浏览器。\n\n（3）客户端浏览器会把这个唯一的 session 标识保存在起来（存在cookie中）\n\n（4）以后再次访问 web 应用时，客户端浏览器会把这个唯一的 session 标识带上，这样服务端就能根据这个唯一标识找到用户信息。\n\n\n\n\n\n\n\n\n\n\n\n\n","level":1,"tagId":30}
{"_id":{"$oid":"61aa386d0f30890001ab8173"},"exerciseKey":"a714a7e1-5905-4209-9d8b-ac52709933bc","category":"QA","renderType":"md","title":"海盗博弈问题","desc":"有五个理性的海盗（不妨以 A-E 命名）找到了100个金币，需要想办法分配金币。\n\n而他们的分配原则是：海盗们从 A 到 E 依次提出一种分配方案。所有还活着的海盗投票决定是否接受这个提案，包括提议人。必须要多于半数的人投赞成票，提案才通过，此时按照提议分配金币。如果没有通过，那么提议人将被扔出船外，由下一个海盗提出新的分配方案。\n\n现在假设海盗们都极其聪明，他们的首要目标是存活并且尽可能获得更多的金币。在此基础之上，他们也倾向于杀死更多的人。请问他们的最终结果是怎样的呢？","options":null,"explanation":"## 情形 1. 只剩 D、E\n\n对于 E 来说，此时不管 D 提出什么提案，他只需要反对即可，这样能够独吞财产并且杀死 D。而对于 D 来说，他只能选择死亡。所以这种情况下，双方结局：\n\n* D：死亡。支持票。\n* E：获得 100 金币，杀死 1 人。反对票。\n\n## 情形 2. 只剩 C、D、E\n\n对于 D 来说，不管 C 提出什么提案，他都会赞成，因为如果 C 的提案不通过，那么就会来到上一个情况。那么对于 C 来说，有了 D 的支持，他就可以肆意妄为了。结局：\n\n* C：100 金币。支持票。\n* D：0 金币。支持票。\n* E：0 金币。反对票。\n\n## 情形 3. 剩下 B、C、D、E\n\n对于 C 来说，B 死了就能进入情形 2，所以他打死也不会赞成 B。对于 D、E，如果他们还是被分配 0 金币，那么他们会选择反对 B 来多杀一个人。但是他们只要得到 1 个金币，就会赞成 B。结局：\n\n* B：98 金币。支持票。\n* C：0 金币。反对票。\n* D：1 金币。支持票。\n* E：1 金币。支持票。\n\n## 情形 4. A、B、C、D、E 全部都在\n\n对于 A 来说，他需要拉拢至少 2 个其他人。那么拉拢成本最低的显然是 C，只需要给他 1 个金币，就会得到支持票。而对于 D、E，每个人都需要 2 个金币获得支持票。结局：\n\n* A：97 金币。支持票。\n* B：0 金币。反对票。\n* C：1 金币。支持票。\n* D：2 金币。支持票。\n* E：0 金币。反对票。（ D 和 E 的结局可以互换，看 A 心情。）\n\n## 最终结局：\n（A，B，C，D，E）== （97，0，1，2，0）or（97，0，1，0，2）\n","level":3,"tagId":17}
{"_id":{"$oid":"61aa386d34458700017f1d15"},"exerciseKey":"a75b1e9d-9359-47b0-8614-1088eee4b085","category":"QA","renderType":"md","title":"什么是 HTML 语义化？","desc":null,"options":null,"explanation":"先看下什么是HTML：\n\n> 超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。\n> HTML元素是构建网站的基石。HTML允许嵌入图像与对象，并且可以用于创建交互式表单，它被用来结构化信息——例如标题、段落和列表等等，也可用来在一定程度上描述文档的外观和语义。\n\n\n那么如何理解 Web 语义化？\n\n通俗的来讲就是从代码上来展示页面的结构，而不是从最终视觉上来展示结构。\n\n单纯的HTML代码是不带任何样式的只是用来标记这一段是标题、这一块是代码、那一个是要强调的内容等等。\n\n但是为什么我们只写HTML在浏览器中不同的标签也是有不同的样式呢？\n\n那是因为各个浏览器都自带的有相应标签的默认样式，为了方便在没有设定样式的情况下友好的展示页面。\n\n良好的语义化代码可以直接从代码上就能看出来那一块到底是要表达什么内容。\n\n## 为什么要使用语义化标签？\n\n有伙伴会认为，我用DIV+CSS也能做出来一样的效果，虽然单纯看实现效果，两者并没有什么区别。\n\n但是页面不止是给人看的，机器也要看爬虫也要看，网页结构更清晰方便开发维护。\n\n特别是在网络或其他原因页面样式文件丢失的时候，良好语义结构组成的页面，肯定比全是div的页面对用户更友好。\n\n总结下语义化的优点：\n\n* 标签语义化有助于构架良好的HTML结构，有利于搜索引擎的建立索引、抓取。简单来说。\n* 有利于不同设备的解析（屏幕阅读器，盲人阅读器等）\n* 有利于构建清晰的机构，有利于团队的开发、维护\n\n\n\n\n\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa386dff0573000165b326"},"exerciseKey":"a762c5d6-5e0b-4b4c-b1c3-eea744b38d3d","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\n!!null\n!!''\n!!1\n```","options":"{\"options\":[\"false true false\",\"false false true\",\"false true true\",\"true true false\"],\"isMulti\":false,\"answer\":[1]}","explanation":"`null` 是 [falsy](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy)。 `!null` 的值是 `true`。 `!true` 的值是 `false`。\n`\"\"` 是 [falsy](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy)。 `!\"\"` 的值是 `true`。  `!true` 的值是 `false`。\n`1` 是 [truthy](https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy)。 `!1` 的值是 `false`。 `!false` 的值是 `true`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386ebdfab500012c84f3"},"exerciseKey":"a7aba2d7-10f3-4ed9-8453-cc7b68edef77","category":"QA","renderType":"md","title":"药丸难题","desc":"医生给了病人两种药丸，每种两颗，两种药丸的成分不同，但外观一样，医生要求早上和晚上，每种药各吃一颗。现在药丸被混在了一起，难以分辨。如果病人没按照规定吃药或者不吃药，就会死亡。请问他要怎么做才能活下来？\n\n","options":null,"explanation":"把所有的4颗药丸都切开成相等的两半，然后早上和晚上，分别吃掉每颗药丸的一半。","level":2,"tagId":17}
{"_id":{"$oid":"61aa386e3976eb00014e458a"},"exerciseKey":"a7afe475-998a-4be3-97a0-c8c7ccabd6e6","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nclass Bird {\n\tconstructor() {\n\t\tconsole.log(\"I'm a bird. 🦢\");\n\t}\n}\n\nclass Flamingo extends Bird {\n\tconstructor() {\n\t\tconsole.log(\"I'm pink. 🌸\");\n\t\tsuper();\n\t}\n}\n\nconst pet = new Flamingo();\n```","options":"{\"options\":[\"I'm pink. 🌸\",\"I'm pink. 🌸 I'm a bird. 🦢\",\"I'm a bird. 🦢 I'm pink. 🌸\",\"Nothing, we didn't call any method\"],\"isMulti\":false,\"answer\":[1]}","explanation":"我们创建了类 `Flamingo` 的实例 `pet`。当我们实例化这个实例，`Flamingo` 中的 `constructor` 被调用。首相，输出 `\"I'm pink. 🌸\"`, 之后我们调用`super()`。`super()` 调用父类的构造函数，`Bird`。`Bird` 的构造函数被调用，并输出 `\"I'm a bird. 🦢\"`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386ebdfab500012c84f7"},"exerciseKey":"a82eaabe-70e6-47ed-b29d-d036e80e0815","category":"QA","renderType":"md","title":"标签上title属性与alt属性的区别是什么？","desc":null,"options":null,"explanation":"* alt 是为了在图片未能正常显示时（屏幕阅读器）给予文字说明。且长度必须少于100个英文字符或者用户必须保证替换文字尽可能的短。\n* title 属性为设置该属性的元素提供建议性的信息。使用title属性提供非本质的额外信息。","level":1,"tagId":12}
{"_id":{"$oid":"61aa386e81337a00011e0641"},"exerciseKey":"a84229a5-810b-463d-9d53-d22fc59fc528","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst createMember = ({ email, address = {}}) => {\n\tconst validEmail = /.+\\@.+\\..+/.test(email)\n\tif (!validEmail) throw new Error(\"Valid email pls\")\n\n\treturn {\n\t\temail,\n\t\taddress: address ? address : null\n\t}\n}\n\nconst member = createMember({ email: \"my@email.com\" })\nconsole.log(member)\n```","options":"{\"options\":[\"{ email: \\\"my@email.com\\\", address: null }\",\"{ email: \\\"my@email.com\\\" }\",\"{ email: \\\"my@email.com\\\", address: {} }\",\"{ email: \\\"my@email.com\\\", address: undefined }\"],\"isMulti\":false,\"answer\":[2]}","explanation":" `address` 的默认值是一个空对象 `{}`。当我们设置 `member` 变量为 `createMember` 函数返回的对象，我们没有为address参数传值，意味着address的值为默认的空对象 `{}`。一个空对象是一个truthy值，意味着 `address ? address : null` 条件会返回 `true`。address的值为空对象 `{}`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa386e34458700017f1d1a"},"exerciseKey":"a88670ef-a898-4676-a272-cabf8bdfade7","category":"QA","renderType":"md","title":"Vue组件间通信方式都有哪些? ","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/7de50d20-3aca-11eb-85f6-6fac77c0c9b3.png)\n## 一、组件间通信的概念  \n\n开始之前，我们把**组件间通信**这个词进行拆分\n\n- 组件\n- 通信\n\n都知道组件是`vue`最强大的功能之一，`vue`中每一个`.vue`我们都可以视之为一个组件通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的。广义上，任何信息的交通都是通信**组件间通信**即指组件\\(`.vue`\\)通过某种方式来传递信息以达到某个目的举个栗子我们在使用`UI`框架中的`table`组件，可能会往`table`组件中传入某些数据，这个本质就形成了组件之间的通信\n\n## 二、组件间通信解决了什么\n\n在古代，人们通过驿站、飞鸽传书、烽火报警、符号、语言、眼神、触碰等方式进行信息传递，到了今天，随着科技水平的飞速发展，通信基本完全利用有线或无线电完成，相继出现了有线电话、固定电话、无线电话、手机、互联网甚至视频电话等各种通信方式从上面这段话，我们可以看到通信的本质是信息同步，共享回到`vue`中，每个组件之间的都有独自的作用域，组件间的数据是无法共享的但实际开发工作中我们常常需要让组件之间共享数据，这也是组件通信的目的要让它们互相之间能进行通讯，这样才能构成一个有机的完整系统\n\n## 二、组件间通信的分类\n\n组件间通信的分类可以分成以下\n\n- 父子组件之间的通信\n- 兄弟组件之间的通信\n- 祖孙与后代组件之间的通信\n- 非关系组件间之间的通信\n\n关系图:\n\n ![](https://static.vue-js.com/85b92400-3aca-11eb-ab90-d9ae814b240d.png)\n\n## 三、组件间通信的方案\n\n整理`vue`中8种常规的通信方案\n\n1.  通过 props 传递\n2.  通过 \\$emit 触发自定义事件\n3.  使用 ref\n4.  EventBus\n5.  $parent 或$root\n6.  attrs 与 listeners\n7.  Provide 与 Inject\n8.  Vuex\n\n### props传递数据\n\n ![](https://static.vue-js.com/8f80a670-3aca-11eb-ab90-d9ae814b240d.png)\n\n- 适用场景：父组件传递数据给子组件\n- 子组件设置`props`属性，定义接收父组件传递过来的参数\n- 父组件在使用子组件标签中通过字面量来传递值\n\n`Children.vue`\n\n```js\nprops:{  \n    // 字符串形式  \n name:String // 接收的类型参数  \n    // 对象形式  \n    age:{    \n        type:Number, // 接收的类型为数值  \n        defaule:18,  // 默认值为18  \n       require:true // age属性必须传递  \n    }  \n}  \n```\n\n`Father.vue`组件\n\n```js\n<Children name=\"jack\" age=18 />  \n```\n\n### \\$emit 触发自定义事件\n\n- 适用场景：子组件传递数据给父组件\n- 子组件通过`$emit触发`自定义事件，`$emit`第二个参数为传递的数值\n- 父组件绑定监听器获取到子组件传递过来的参数\n\n`Chilfen.vue`\n\n```js\nthis.$emit('add', good)  \n```\n\n`Father.vue`\n\n```js\n<Children @add=\"cartAdd($event)\" />  \n```\n\n### ref\n\n- 父组件在使用子组件的时候设置`ref`\n- 父组件通过设置子组件`ref`来获取数据\n\n父组件\n\n```js\n<Children ref=\"foo\" />  \n  \nthis.$refs.foo  // 获取子组件实例，通过子组件实例我们就能拿到对应的数据  \n```\n\n### EventBus\n\n- 使用场景：兄弟组件传值\n- 创建一个中央时间总线`EventBus`\n- 兄弟组件通过`$emit`触发自定义事件，`$emit`第二个参数为传递的数值\n- 另一个兄弟组件通过`$on`监听自定义事件\n\n`Bus.js`\n\n```js\n// 创建一个中央时间总线类  \nclass Bus {  \n  constructor() {  \n    this.callbacks = {};   // 存放事件的名字  \n  }  \n  $on(name, fn) {  \n    this.callbacks[name] = this.callbacks[name] || [];  \n    this.callbacks[name].push(fn);  \n  }  \n  $emit(name, args) {  \n    if (this.callbacks[name]) {  \n      this.callbacks[name].forEach((cb) => cb(args));  \n    }  \n  }  \n}  \n  \n// main.js  \nVue.prototype.$bus = new Bus() // 将$bus挂载到vue实例的原型上  \n// 另一种方式  \nVue.prototype.$bus = new Vue() // Vue已经实现了Bus的功能  \n```\n\n`Children1.vue`\n\n```js\nthis.$bus.$emit('foo')  \n```\n\n`Children2.vue`\n\n```js\nthis.$bus.$on('foo', this.handle)  \n```\n\n### $parent 或$ root\n\n- 通过共同祖辈`$parent`或者`$root`搭建通信侨联\n\n兄弟组件\n\n`this.$parent.on('add',this.add)  \n`\n\n另一个兄弟组件\n\n`this.$parent.emit('add')  \n`\n\n### $attrs  与$ listeners\n\n -    适用场景：祖先传递数据给子孙\n -    设置批量向下传属性`$attrs`和 `$listeners`\n -    包含了父级作用域中不作为 `prop` 被识别 \\(且获取\\) 的特性绑定 \\( class 和 style 除外\\)。\n -    可以通过 `v-bind=\"$attrs\"` 传⼊内部组件\n\n```js\n// child：并未在props中声明foo  \n<p>{{$attrs.foo}}</p>  \n  \n// parent  \n<HelloWorld foo=\"foo\"/>  \n```\n\n```js\n// 给Grandson隔代传值，communication/index.vue  \n<Child2 msg=\"lalala\" @some-event=\"onSomeEvent\"></Child2>  \n  \n// Child2做展开  \n<Grandson v-bind=\"$attrs\" v-on=\"$listeners\"></Grandson>  \n  \n// Grandson使⽤  \n<div @click=\"$emit('some-event', 'msg from grandson')\">  \n{{msg}}  \n</div>  \n```\n\n### provide 与 inject\n\n- 在祖先组件定义`provide`属性，返回传递的值\n- 在后代组件通过`inject`接收组件传递过来的值\n\n祖先组件\n\n```js\nprovide(){  \n    return {  \n        foo:'foo'  \n    }  \n}  \n```\n\n后代组件\n\n```js\ninject:['foo'] // 获取到祖先组件传递过来的值  \n```\n\n### `vuex`\n\n- 适用场景: 复杂关系的组件数据传递\n- `Vuex`作用相当于一个用来存储共享变量的容器\n ![](https://static.vue-js.com/fa207cd0-3aca-11eb-ab90-d9ae814b240d.png)\n\n- `state`用来存放共享变量的地方\n- `getter`，可以增加一个`getter`派生状态，\\(相当于`store`中的计算属性），用来获得共享变量的值\n- `mutations`用来存放修改`state`的方法。\n- `actions`也是用来存放修改state的方法，不过`action`是在`mutations`的基础上进行。常用来做一些异步操作\n\n### 小结\n\n- 父子关系的组件数据传递选择 `props`  与 `$emit`进行传递，也可选择`ref`\n- 兄弟关系的组件数据传递可选择`$bus`，其次可以选择`$parent`进行传递\n- 祖先与后代组件数据传递可选择`attrs`与`listeners`或者 `Provide`与 `Inject`\n- 复杂关系的组件数据传递可以通过`vuex`存放共享的变量\n","level":1,"tagId":14}
{"_id":{"$oid":"61aa386ebdfab500012c84fc"},"exerciseKey":"a8cc1054-2087-4adb-992c-33b88a188ddf","category":"QA","renderType":"md","title":"什么是 Polyfill ？","desc":null,"options":null,"explanation":"Polyfill 指的是用于实现浏览器并不支持的原生 API 的代码。\n\n比如说 `querySelectorAll` 是很多现代浏览器都支持的原生 Web API，但是有些古老的浏览器并不支持，那么假设有人写了一段代码来实现这个功能使这些浏览器也支持了这个功能，那么这就可以成为一个 Polyfill。","level":1,"tagId":10}
{"_id":{"$oid":"61aa386e8e97d90001808797"},"exerciseKey":"a8d808be-7214-4540-bb33-594b23a5a9d3","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst add = x => y => z => {\n\tconsole.log(x, y, z);\n\treturn x + y + z;\n};\n\nadd(4)(5)(6);\n```","options":"{\"options\":[\"4 5 6\",\"6 5 4\",\"4 function function\",\"undefined undefined 6\"],\"isMulti\":false,\"answer\":[0]}","explanation":"函数 `add` 是一个返回 返回箭头函数的箭头函数 的箭头函数（still with me?）。第一个函数接收一个值为 `4` 的参数 `x`。我们调用第二个函数，它接收一个值为 `5` 的参数 `y`。然后我们调用第三个函数，它接收一个值为 `6` 的参数 `z`。当我们尝试在最后一个箭头函数中获取 `x`, `y` 和 `z` 的值，JS 引擎根据作用域链去找 `x` 和 `y` 的值。得到 `4` `5` `6`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386e79641200019174b2"},"exerciseKey":"a93416a5-73ab-49be-98d0-42c829616f9a","category":"QA","renderType":"md","title":"base64编码图片，为什么会让数据量变大？","desc":null,"options":null,"explanation":"Base64编码的思想是是采用64个基本的ASCII码字符对数据进行重新编码。它将需要编码的数据拆分成字节数组。以3个字节为一组。按顺序排列24位数据，再把这24位数据分成4组，即每组6位。再在每组的的最高位前补两个0凑足一个字节。这样就把一个3字节为一组的数据重新编码成了4个字节。当所要编码的数据的字节数不是3的整倍数，也就是说在分组时最后一组不够3个字节。这时在最后一组填充1到2个0字节。并在最后编码完成后在结尾添加1到2个\"=\"。\n\n（ 注BASE64字符表：ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/）\n\n从以上编码规则可以得知，通过Base64编码，原来的3个字节编码后将成为4个字节，即字节增加了33.3%，数据量相应变大。所以20M的数据通过Base64编码后大小大概为20M*133.3%=26.67M。\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa386eff0573000165b32d"},"exerciseKey":"a93f6d22-f862-4d3c-8656-2adbdef9e96e","category":"QA","renderType":"md","title":"实现微前端有哪些技术方案？","desc":null,"options":null,"explanation":"单纯根据对概念的理解，很容易想到实现微前端的重要思想就是将应用进行拆解和整合，通常是一个父应用加上一些子应用，那么使用类似Nginx配置不同应用的转发，或是采用iframe来将多个应用整合到一起等等这些其实都属于微前端的实现方案：\n\n* Nginx路由转发\t\n\n通过Nginx配置反向代理来实现不同路径映射到不同应用，例如www.abc.com/app1对应app1，www.abc.com/app2对应app2，这种方案本身并不属于前端层面的改造，更多的是运维的配置。\t\n\n**优点**：简单，快速，易配置\n\n**缺点**：在切换应用时会触发浏览器刷新，影响体验\n\n* iframe嵌套\t\n\n父应用单独是一个页面，每个子应用嵌套一个iframe，父子通信可采用postMessage或者contentWindow方式\t\n\n**优点**：实现简单，子应用之间自带沙箱，天然隔离，互不影响\t\n\n**缺点**：iframe的样式显示、兼容性等都具有局限性；太过简单而显得low\n\n* Web Components\t\n\n每个子应用需要采用纯Web Components技术编写组件，是一套全新的开发模式\t\n\n**优点**：每个子应用拥有独立的script和css，也可单独部署\t\n\n**缺点**：对于历史系统改造成本高，子应用通信较为复杂易踩坑\n\n* 组合式应用路由分发\t\n\n每个子应用独立构建和部署，运行时由父应用来进行路由管理，应用加载，启动，卸载，以及通信机制\t\n\n**优点**：纯前端改造，体验良好，可无感知切换，子应用相互隔离\t\n\n**缺点**：需要设计和开发，由于父子应用处于同一页面运行，需要解决子应用的样式冲突，变量对象污染，通信机制等技术点\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa386e79641200019174b3"},"exerciseKey":"a951563c-7c0f-47bd-9a32-f46a8cfe4585","category":"QA","renderType":"html","title":"即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？","desc":null,"options":null,"explanation":"<p style=\"text-align:left;text-indent:2em;\">短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p><p></p><p style=\"text-align:left;text-indent:2em;\"><strong>短轮询的基本思路是</strong> 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</p><p></p><p style=\"text-align:left;text-indent:2em;\"><strong>长轮询的基本思路是</strong> 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。</p><p></p><p style=\"text-align:left;text-indent:2em;\"><strong>SSE 的基本思想是</strong> 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。</p><p></p><p style=\"text-align:left;text-indent:2em;\"><strong>WebSocket</strong> 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p><p></p><p style=\"text-align:left;text-indent:2em;\"><strong>上面的四个通信协议，前三个都是基于HTTP协议的。</strong> 对于这四种即使通信协议，从性能的角度来看： <strong>WebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询</strong> 但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了： <strong>短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket</strong> 所以，还是要根据具体的使用场景来判断使用哪种方式。</p>","level":3,"tagId":16}
{"_id":{"$oid":"61aa386fcd02c30001dd22d4"},"exerciseKey":"a9a357ca-9ee4-404d-a48a-49ba46f78166","category":"QA","renderType":"md","title":"React 的事件代理机制和原生事件绑定混用会有什么问题？","desc":null,"options":null,"explanation":"我们在平时的开发中应该尽可能的避免 React 的事件代理机制和原生事件绑定混用。\n\nReact 的合成事件层，并没有将事件直接绑定到 DOM 元素上，所以使用 e.stopPropagation() 来阻止原生 DOM 的冒泡的行为是不行的。阻止 React 事件冒泡的行为只能用于 React 合成事件系统，但是 在原生事件中的阻止冒泡行为，却可以阻止 React 合成事件的传播。\n\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa386f3dd7f70001832fdb"},"exerciseKey":"aa12e754-f3cd-47f5-b1f0-1e0f746527cd","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction sayHi() {\n  return (() => 0)()\n}\n\ntypeof sayHi()\n```","options":"{\"options\":[\"\\\"object\\\"\",\"\\\"number\\\"\",\"\\\"function\\\"\",\"\\\"undefined\\\"\"],\"isMulti\":false,\"answer\":[1]}","explanation":"`sayHi` 方法返回的是立即执行函数(IIFE)的返回值.此立即执行函数的返回值是 `0`， 类型是 `number`\n参考：只有7种内置类型：`null`，`undefined`，`boolean`，`number`，`string`，`object`, `symbol` 和 `bigint`。 ``function`` 不是一种类型，函数是对象，它的类型是``object``。","level":1,"tagId":32}
{"_id":{"$oid":"61aa386f8e97d9000180879d"},"exerciseKey":"aa20fdd3-2a4b-44a6-a97b-7bdbc6dd30d4","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst person = {\n\tname: \"Lydia Hallie\",\n\thobbies: [\"coding\"]\n};\n\nfunction addHobby(hobby, hobbies = person.hobbies) {\n\thobbies.push(hobby);\n\treturn hobbies;\n}\n\naddHobby(\"running\", []);\naddHobby(\"dancing\");\naddHobby(\"baking\", person.hobbies);\n\nconsole.log(person.hobbies);\n```","options":"{\"options\":[\"[\\\"coding\\\"]\",\"[\\\"coding\\\", \\\"dancing\\\"]\",\"[\\\"coding\\\", \\\"dancing\\\", \\\"baking\\\"]\",\"[\\\"coding\\\", \\\"running\\\", \\\"dancing\\\", \\\"baking\\\"]\"],\"isMulti\":false,\"answer\":[2]}","explanation":"函数 `addHobby` 接受两个参数，`hobby` 和有着对象 `person` 中数组 `hobbies` 默认值的 `hobbies`。\n首相，我们调用函数 `addHobby`，并给 `hobby` 传递 `\"running\"` 以及给 `hobbies` 传递一个空数组。因为我们给 `hobbies` 传递了空数组，`\"running\"` 被添加到这个空数组。\n然后，我们调用函数 `addHobby`，并给 `hobby` 传递 `\"dancing\"`。我们不向 `hobbies` 传递值，因此它获取其默认值 —— 对象 `person` 的 属性 `hobbies`。我们向数组 `person.hobbies` push `dancing`。\n最后，我们调用函数 `addHobby`，并向 `hobby` 传递 值 `\"bdaking\"`，并且向 `hobbies` 传递 `person.hobbies`。我们向数组 `person.hobbies` push `dancing`。\npushing `dancing` 和 `baking` 之后，`person.hobbies` 的值为 `[\"coding\", \"dancing\", \"baking\"]`","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386f0f30890001ab8182"},"exerciseKey":"aa95a786-7e51-4769-ab64-80f1adaf3580","category":"QA","renderType":"md","title":"为什么推荐使用 TypeScript ？","desc":null,"options":null,"explanation":"TypeScript是微软公司开发和维护的一种面向对象的编程语言。它是JavaScript的超集，包含其所有元素。\n\n强类型和弱类型、静态类型和动态类型是两组不同的概念。\n\n类型强弱是针对类型转换是否显示来区分，静态和动态类型是针对类型检查的时机来区分。\n\nTS对JS的改进主要是静态类型检查，静态类型检查有何意义？标准答案是“静态类型更有利于构建大型应用”。\n\n推荐使用TypeScript的原因有：\n\n* TypeScript简化了JavaScript代码，使其更易于阅读和调试。\n* TypeScript是开源的。\n* TypeScript为JavaScript ide和实践（如静态检查）提供了高效的开发工具。\n* TypeScript使代码更易于阅读和理解。\n* 使用TypeScript，我们可以大大改进普通的JavaScript。\n* TypeScript为我们提供了ES6（ECMAScript 6）的所有优点，以及更高的生产率。\n* TypeScript通过对代码进行类型检查，可以帮助我们避免在编写JavaScript时经常遇到的令人痛苦的错误。\n* 强大的类型系统，包括泛型。\n* TypeScript只不过是带有一些附加功能的JavaScript。\n* TypeScript代码可以按照ES5和ES6标准编译，以支持最新的浏览器。\n* 与ECMAScript对齐以实现兼容性。\n* 以JavaScript开始和结束。\n* 支持静态类型。\n* TypeScript将节省开发人员的时间。\n* TypeScript是ES3、ES5和ES6的超集。\n","level":0.5,"tagId":19}
{"_id":{"$oid":"61aa386f8e97d9000180879e"},"exerciseKey":"aaee81ad-a128-4bbf-b60b-aa2c9c3396c3","category":"QA","renderType":"md","title":" Promise中，resolve后面的语句是否还会执行？","desc":null,"options":null,"explanation":"会被执行。如果不需要执行，需要在 resolve 语句前加上 return。","level":3,"tagId":10}
{"_id":{"$oid":"61aa386f3976eb00014e4595"},"exerciseKey":"ac5c3d92-55a9-4c88-b452-e0b583f13385","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nconst person = {\n  name: \"Lydia\",\n  age: 21\n};\n\nfor (const item in person) {\n  console.log(item);\n}\n```","options":"{\"options\":[\"{ name: \\\"Lydia\\\" }, { age: 21 }\",\"\\\"name\\\", \\\"age\\\"\",\"\\\"Lydia\\\", 21\",\"[\\\"name\\\", \\\"Lydia\\\"], [\\\"age\\\", 21]\"],\"isMulti\":false,\"answer\":[1]}","explanation":"在`for-in`循环中,我们可以通过对象的key来进行迭代,也就是这里的`name`和`age`。在底层，对象的key都是字符串（如果他们不是Symbol的话）。在每次循环中，我们将`item`设定为当前遍历到的key.所以一开始，`item`是`name`，之后 `item`输出的则是`age`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa386fbdfab500012c850a"},"exerciseKey":"adaa5c02-f04c-4247-b6d6-0fe3f1bd439c","category":"QA","renderType":"md","title":"Vue.observable是什么？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/193782e0-3e7b-11eb-ab90-d9ae814b240d.png)  \n\n## 一、Observable 是什么\n\n`Observable` 翻译过来我们可以理解成**可观察的**\n\n我们先来看一下其在`Vue`中的定义\n\n> `Vue.observable`，让一个对象变成响应式数据。`Vue` 内部会用它来处理 `data` 函数返回的对象\n\n返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器\n\n```js\nVue.observable({ count : 1})\n```\n\n其作用等同于\n\n```js\nnew vue({ count : 1})\n```\n\n在 `Vue 2.x` 中，被传入的对象会直接被 `Vue.observable` 变更，它和被返回的对象是同一个对象\n\n在 `Vue 3.x` 中，则会返回一个可响应的代理，而对源对象直接进行变更仍然是不可响应的\n\n## 二、使用场景\n\n在非父子组件通信时，可以使用通常的`bus`或者使用`vuex`，但是实现的功能不是太复杂，而使用上面两个又有点繁琐。这时，`observable`就是一个很好的选择\n\n创建一个`js`文件\n\n```js\n// 引入vue\nimport Vue from 'vue\n// 创建state对象，使用observable让state对象可响应\nexport let state = Vue.observable({\n  name: '张三',\n  'age': 38\n})\n// 创建对应的方法\nexport let mutations = {\n  changeName(name) {\n    state.name = name\n  },\n  setAge(age) {\n    state.age = age\n  }\n}\n```\n\n在`.vue`文件中直接使用即可\n\n```js\n<template>\n  <div>\n    姓名：{{ name }}\n    年龄：{{ age }}\n    <button @click=\"changeName('李四')\">改变姓名</button>\n    <button @click=\"setAge(18)\">改变年龄</button>\n  </div>\n</template>\nimport { state, mutations } from '@/store\nexport default {\n  // 在计算属性中拿到值\n  computed: {\n    name() {\n      return state.name\n    },\n    age() {\n      return state.age\n    }\n  },\n  // 调用mutations里面的方法，更新数据\n  methods: {\n    changeName: mutations.changeName,\n    setAge: mutations.setAge\n  }\n}\n```\n\n## 三、原理分析\n\n源码位置：src\\core\\observer\\index.js\n\n```js\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  let ob: Observer | void\n  // 判断是否存在__ob__响应式属性\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    // 实例化Observer响应式对象\n    ob = new Observer(value)\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n```\n\n`Observer`类\n\n```js\nexport class Observer {\n    value: any;\n    dep: Dep;\n    vmCount: number; // number of vms that have this object as root $data\n\n    constructor (value: any) {\n        this.value = value\n        this.dep = new Dep()\n        this.vmCount = 0\n        def(value, '__ob__', this)\n        if (Array.isArray(value)) {\n            if (hasProto) {\n                protoAugment(value, arrayMethods)\n            } else {\n                copyAugment(value, arrayMethods, arrayKeys)\n            }\n            this.observeArray(value)\n        } else {\n            // 实例化对象是一个对象，进入walk方法\n            this.walk(value)\n        }\n}\n```\n\n`walk`函数\n\n```js\nwalk (obj: Object) {\n    const keys = Object.keys(obj)\n    // 遍历key，通过defineReactive创建响应式对象\n    for (let i = 0; i < keys.length; i++) {\n        defineReactive(obj, keys[i])\n    }\n}\n```\n\n`defineReactive`方法\n\n```js\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep()\n\n  const property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n\n  let childOb = !shallow && observe(val)\n  // 接下来调用Object.defineProperty()给对象定义响应式属性\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      // 对观察者watchers进行通知,state就成了全局响应式对象\n      dep.notify()\n    }\n  })\n}\n```\n\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa386f3d5f3a0001af5645"},"exerciseKey":"adfb6812-fe80-4875-ae6f-bbcaab8e1a9e","category":"QA","renderType":"md","title":"堆与栈有什么区别？","desc":null,"options":null,"explanation":"堆（Heap）与栈（Stack）是开发人员必须面对的两个概念，在理解这两个概念时，需要放到具体的场景下，因为不同场景下，堆与栈代表不同的含义。一般情况下，有两层含义：\n\n- 程序内存布局场景下，堆与栈表示两种内存管理方式；\n- 数据结构场景下，堆与栈表示两种常用的数据结构。\n\n## 程序内存分区中的堆与栈\n\n### 栈简介\n栈由操作系统自动分配释放 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。\n\n其中函数中定义的局部变量按照先后定义的顺序依次压入栈中，也就是说相邻变量的地址之间不会存在其它变量。栈的内存地址生长方向与堆相反，由高到底，所以后定义的变量地址低于先定义的变量，比如上面代码中变量 s 的地址小于变量 b 的地址，p2 地址小于 s 的地址。栈中存储的数据的生命周期随着函数的执行完成而结束。\n\n### 堆简介\n\n堆由开发人员分配和释放， 若开发人员不释放，程序结束时由 OS 回收，分配方式类似于链表。\n\n堆的内存地址生长方向与栈相反，由低到高，但需要注意的是，后申请的内存空间并不一定在先申请的内存空间的后面，即 p2 指向的地址并不一定大于 p1 所指向的内存地址，原因是先申请的内存空间一旦被释放，后申请的内存空间则会利用先前被释放的内存，从而导致先后分配的内存空间在地址上不存在先后关系。堆中存储的数据若未释放，则其生命周期等同于程序的生命周期。\n\n关于堆上内存空间的分配过程，首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆节点，然后将该节点从空闲节点链表中删除，并将该节点的空间分配给程序。另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确地释放本内存空间。由于找到的堆节点的大小不一定正好等于申请的大小，系统会自动地将多余的那部分重新放入空闲链表。\n\n### 堆与栈区别\n\n堆与栈实际上是操作系统对进程占用的内存空间的两种管理方式，主要有如下几种区别：\n\n（1）管理方式不同。栈由操作系统自动分配释放，无需我们手动控制；堆的申请和释放工作由程序员控制，容易产生内存泄漏；\n\n（2）空间大小不同。每个进程拥有的栈的大小要远远小于堆的大小。理论上，程序员可申请的堆大小为虚拟内存的大小，进程栈的大小 64bits 的 Windows 默认 1MB，64bits 的 Linux 默认 10MB；\n\n（3）生长方向不同。堆的生长方向向上，内存地址由低到高；栈的生长方向向下，内存地址由高到低。\n\n（4）分配方式不同。堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是由操作系统完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由操作系统进行释放，无需我们手工实现。\n\n（5）分配效率不同。栈由操作系统自动分配，会在硬件层级对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制较为复杂，频繁的内存申请容易产生内存碎片。显然，堆的效率比栈要低得多。\n\n（6）存放内容不同。栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等。当主函数调用另外一个函数的时候，要对当前函数执行断点进行保存，需要使用栈来实现，首先入栈的是主函数下一条语句的地址，即扩展指针寄存器的内容（EIP），然后是当前栈帧的底部地址，即扩展基址指针寄存器内容（EBP），再然后是被调函数的实参等，一般情况下是按照从右向左的顺序入栈，之后是被调函数的局部变量，注意静态变量是存放在数据段或者BSS段，是不入栈的。出栈的顺序正好相反，最终栈顶指向主函数下一条语句的地址，主程序又从该地址开始执行。堆，一般情况堆顶使用一个字节的空间来存放堆的大小，而堆中具体存放内容是由程序员来填充的。\n\n从以上可以看到，堆和栈相比，由于大量malloc()/free()或new/delete的使用，容易造成大量的内存碎片，并且可能引发用户态和核心态的切换，效率较低。栈相比于堆，在程序中应用较为广泛，最常见的是函数的调用过程由栈来实现，函数返回地址、EBP、实参和局部变量都采用栈的方式存放。虽然栈有众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，主要还是用堆。\n\n无论是堆还是栈，在内存使用时都要防止非法越界，越界导致的非法内存访问可能会摧毁程序的堆、栈数据，轻则导致程序运行处于不确定状态，获取不到预期结果，重则导致程序异常崩溃，这些都是我们编程时与内存打交道时应该注意的问题。\n\n## 数据结构中的堆与栈\n\n数据结构中，堆与栈是两个常见的数据结构，理解二者的定义、用法与区别，能够利用堆与栈解决很多实际问题。\n\n### 栈简介\n\n栈是一种运算受限的线性表，其限制是指只仅允许在表的一端进行插入和删除操作，这一端被称为栈顶（Top），相对地，把另一端称为栈底（Bottom）。把新元素放到栈顶元素的上面，使之成为新的栈顶元素称作进栈、入栈或压栈（Push）；把栈顶元素删除，使其相邻的元素成为新的栈顶元素称作出栈或退栈（Pop）。这种受限的运算使栈拥有“先进后出”的特性（First In Last Out），简称FILO。\n\n栈分顺序栈和链式栈两种。栈是一种线性结构，所以可以使用数组或链表（单向链表、双向链表或循环链表）作为底层数据结构。使用数组实现的栈叫做顺序栈，使用链表实现的栈叫做链式栈，二者的区别是顺序栈中的元素地址连续，链式栈中的元素地址不连续。\n\n栈的基本操作包括初始化、判断栈是否为空、入栈、出栈以及获取栈顶元素等。\n\n### 堆简介\n\n堆是一种常用的树形结构，是一种特殊的完全二叉树，当且仅当满足所有节点的值总是不大于或不小于其父节点的值的完全二叉树被称之为堆。堆的这一特性称之为堆序性。因此，在一个堆中，根节点是最大（或最小）节点。如果根节点最小，称之为小顶堆（或小根堆），如果根节点最大，称之为大顶堆（或大根堆）。堆的左右孩子没有大小的顺序。\n\n堆的存储一般都用数组来存储堆，i节点的父节点下标就为( i – 1 ) / 2 (i – 1) / 2(i–1)/2。它的左右子节点下标分别为 2 ∗ i + 1 2 * i + 12∗i+1 和 2 ∗ i + 2 2 * i + 22∗i+2。如第0个节点左右子节点下标分别为1和2。\n","level":2,"tagId":30}
{"_id":{"$oid":"61aa386f3dd7f70001832fdf"},"exerciseKey":"ae4d3995-6e26-443a-9f42-a07e594a9bff","category":"QA","renderType":"md","title":"ts中any和unknown有什么区别？","desc":null,"options":null,"explanation":"unknown 和 any 的主要区别是 unknown 类型会更加严格：在对 unknown 类型的值执行大多数操作之前，我们必须进行某种形式的检查。而在对 any 类型的值执行操作之前，我们不必进行任何检查。\n\n举例说明：\n\n```ts\nlet foo: any = 123;\nconsole.log(foo.msg); // 符合TS的语法\nlet a_value1: unknown = foo;   // OK\nlet a_value2: any = foo;      // OK\nlet a_value3: string = foo;   // OK\n\nlet bar: unknown = 222; // OK \nconsole.log(bar.msg); // Error\nlet k_value1: unknown = bar;   // OK\nlet K_value2: any = bar;      // OK\nlet K_value3: string = bar;   // Error\n```\n\n因为bar是一个未知类型(任何类型的数据都可以赋给 `unknown` 类型)，所以不能确定是否有msg属性。不能通过TS语法检测；而 unkown 类型的值也不能将值赋给 any 和 unkown 之外的类型变量\n\n## 总结\n\nany 和 unknown 都是顶级类型，但是 unknown 更加严格，不像 any 那样不做类型检查，反而 unknown 因为未知性质，不允许访问属性，不允许赋值给其他有明确类型的变量。\n\n","level":2,"tagId":19}
{"_id":{"$oid":"61aa386f0f30890001ab8186"},"exerciseKey":"aea31e8b-4929-4a02-8fe5-8eb27fd663bf","category":"QA","renderType":"md","title":"实现一个对象的 flatten 方法","desc":"实现以下转换：\n\n```js\nconst obj = {\n\ta: {\n  \tb: 1,\n\t\tc: 2,\n\t\td: {\n\t\t\te: 5\n\t\t}\n  },\n  b: [1, 3, {a: 2, b: 3}],\n  c: 3\n}\n```\n\nflatten(obj){} 结果返回如下\n\n```js\n// {\n//   'a.b': 1,\n//   'a.c': 2,\n//   'a.d.e': 5,\n//   'b[0]': 1,\n//   'b[1]': 3,\n//   'b[2].a': 2,\n//   'b[2].b': 3\n//    c: 3\n// }\n```\n\n","options":null,"explanation":"从结果入手，可以看出需要对象进行遍历，把里面的属性值依次输出。\n\n核心方法体就是：传入对象的 key 值和 value，对 value 再进行递归遍历。\n\n而 js 的数据类型可以分为`基础数据类型`和`引用数据类型`，对于题目而言，基础数据类型无需再进行深层次遍历，引用数据类型需要再次进行递归。\n\n```js\nfunction flat(obj, key = \"\", res = {}, isArray = false) { \n  for (let [k, v] of Object.entries(obj)) { \n    if (Array.isArray(v)) { \n      let tmp = isArray ? key + \"[\" + k + \"]\" : key + k \n      flat(v, tmp, res, true) \n    } else if (typeof v === \"object\") { \n      let tmp = isArray ? key + \"[\" + k + \"].\" : key + k + \".\" \n      flat(v, tmp, res) \n    } else { \n      let tmp = isArray ? key + \"[\" + k + \"]\" : key + k \n      res[tmp] = v \n    } \n  } \n  return res \n}\n```\n\n还有一种写法更加容易理解：\n\n```js\nfunction objectFlat(obj = ''){\n  const res = {}\n  function flat(item , preKey = ''){\n    Object.entries(item).forEach(([key,value]) => {\n      let newKey = key\n      if (Array.isArray(item)){\n        // console.log('是数组')\n        newKey = preKey ? `${preKey}[${key}]` : key\n      }else{\n        newKey = preKey ? `${preKey}.${key}` : key\n      }\n      if (value && typeof value === 'object'){\n        flat(value , newKey)\n      }else{\n        res[newKey] = value\n      }\n    })\n  }\n  flat(obj)\n  return res\n}\n\nconst source = { a: { b: { c: 1, d: 2 }, e: 3 }, f: { g: 2 } }\nconsole.log(objectFlat(source));\nconst obj = {\n  a: 1,\n  b: [1, 2, { c: true }],\n  c: { e: 2, f: 3 },\n  g: null,\n};\nconsole.log(objectFlat(obj));\n```","level":3,"tagId":26}
{"_id":{"$oid":"61aa3870c2d0220001c96527"},"exerciseKey":"aef19252-da7d-447d-a9c5-3eb0d191901d","category":"QA","renderType":"md","title":"什么是 Samesite Cookie 属性？","desc":null,"options":null,"explanation":"SameSite 是HTTP响应头 `Set-Cookie` 的属性之一。它允许声明该 `Cookie` 是否仅限于第一方或者同一站点上下文。\n\n* 将 Samesite 设为 `strict` ，这种称为严格模式，表示这个 cookie 在任何情况下都不可能作为第三方 cookie。\n\n* 将 Samesite 设为 `Lax` ，这种模式称为宽松模式，也是目前浏览器中的默认值。如果这个请求是个 GET 请求，并且这个请求改变了当前页面或者打开了新的页面，那么这个 cookie 可以作为第三方 cookie，其余情况下都不能作为第三方 cookie。使用这种方法的缺点是，因为它不支持子域，所以子域没有办法与主域共享登录信息，每次转入子域的网站，都需要重新登录。还有一个问题就是它的兼容性不够好。\n\n* 将 Samesite 设为 `None`，Cookie将在所有上下文中发送，即允许跨域发送。\n\n响应头设置方式：\n```\nSet-Cookie: flavor=choco; SameSite=None; Secure\n```\n","level":3,"tagId":21}
{"_id":{"$oid":"61aa387039bf10000191ca48"},"exerciseKey":"af816690-2a3c-4685-a562-991e3040af15","category":"QA","renderType":"md","title":"说说webpack的热更新是如何做到的？原理是什么？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/a076da40-acd4-11eb-85f6-6fac77c0c9b3.png)\n\n### 一、是什么\n\n`HMR `全称 `Hot Module Replacement`，可以理解为模块热替换，指在应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个应用\n\n例如，我们在应用运行过程中修改了某个模块，通过自动刷新会导致整个应用的整体刷新，那页面中的状态信息都会丢失\n\n如果使用的是 `HMR`，就可以实现只将修改的模块实时替换至应用中，不必完全刷新整个应用\n\n在`webpack`中配置开启热模块也非常的简单，如下代码：\n\n```js\nconst webpack = require('webpack')\nmodule.exports = {\n  // ...\n  devServer: {\n    // 开启 HMR 特性\n    hot: true\n    // hotOnly: true\n  }\n}\n```\n\n通过上述这种配置，如果我们修改并保存`css`文件，确实能够以不刷新的形式更新到页面中\n\n但是，当我们修改并保存`js`文件之后，页面依旧自动刷新了，这里并没有触发热模块\n\n所以，`HMR `并不像 `Webpack` 的其他特性一样可以开箱即用，需要有一些额外的操作\n\n我们需要去指定哪些模块发生更新时进行`HRM`，如下代码：\n\n```js\nif(module.hot){\n    module.hot.accept('./util.js',()=>{\n        console.log(\"util.js更新了\")\n    })\n}\n```\n\n\n\n## 二、实现原理\n\n首先来看看一张图，如下：\n\n ![](https://static.vue-js.com/adc05780-acd4-11eb-ab90-d9ae814b240d.png)\n\n- Webpack Compile：将 JS 源代码编译成 bundle.js\n- HMR Server：用来将热更新的文件输出给 HMR Runtime\n- Bundle Server：静态资源文件服务器，提供文件访问路径\n- HMR Runtime：socket服务器，会被注入到浏览器，更新文件的变化\n- bundle.js：构建输出的文件\n- 在HMR Runtime 和 HMR Server之间建立 websocket，即图上4号线，用于实时更新文件变化\n\n上面图中，可以分成两个阶段：\n\n- 启动阶段为上图 1 - 2 - A - B\n\n在编写未经过`webpack`打包的源代码后，`Webpack Compile` 将源代码和 `HMR Runtime` 一起编译成 `bundle `文件，传输给` Bundle Server` 静态资源服务器\n\n- 更新阶段为上图 1 - 2 - 3 - 4\n\n当某一个文件或者模块发生变化时，`webpack `监听到文件变化对文件重新编译打包，编译生成唯一的` hash `值，这个`hash `值用来作为下一次热更新的标识\n\n根据变化的内容生成两个补丁文件：`manifest`（包含了 `hash` 和 `chundId `，用来说明变化的内容）和` chunk.js` 模块\n\n由于`socket`服务器在`HMR Runtime` 和 `HMR Server`之间建立 `websocket`链接，当文件发生改动的时候，服务端会向浏览器推送一条消息，消息包含文件改动后生成的`hash`值，如下图的`h`属性，作为下一次热更细的标识\n\n ![](https://static.vue-js.com/05a0edf0-ad4a-11eb-85f6-6fac77c0c9b3.png)\n\n在浏览器接受到这条消息之前，浏览器已经在上一次` socket` 消息中已经记住了此时的` hash` 标识，这时候我们会创建一个 `ajax` 去服务端请求获取到变化内容的 `manifest` 文件\n\n`mainfest`文件包含重新`build`生成的`hash`值，以及变化的模块，对应上图的`c`属性\n\n浏览器根据 `manifest` 文件获取模块变化的内容，从而触发`render`流程，实现局部模块更新\n\n ![](https://static.vue-js.com/0e7b7850-ad4a-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 三、总结\n\n关于`webpack`热模块更新的总结如下：\n\n- 通过`webpack-dev-server`创建两个服务器：提供静态资源的服务（express）和Socket服务\n- express server 负责直接提供静态资源的服务（打包后的资源直接被浏览器请求和解析）\n- socket server 是一个 websocket 的长连接，双方可以通信\n- 当 socket server 监听到对应的模块发生变化时，会生成两个文件.json（manifest文件）和.js文件（update chunk）\n- 通过长连接，socket server 可以直接将这两个文件主动发送给客户端（浏览器）\n- 浏览器拿到两个新的文件后，通过HMR runtime机制，加载这两个文件，并且针对修改的模块进行更新\n","level":3,"tagId":28}
{"_id":{"$oid":"61aa3870c2d0220001c96529"},"exerciseKey":"af8d6439-598f-4317-8063-93349b83f2d3","category":"QA","renderType":"md","title":"Js 动画与 CSS 动画区别及相应实现","desc":null,"options":null,"explanation":"* CSS3 的动画的优点\n\t* 在性能上会稍微好一些，浏览器会对 CSS3 的动画做一些优化\n\t* 代码相对简单\n* 缺点\n\t* 在动画控制上不够灵活\n\t* 兼容性不好\n\nJavaScript 的动画正好弥补了这两个缺点，控制能力很强，可以单帧的控制、变换，同时写得好完全可以兼容 IE6，并且功能强大。对于一些复杂控制的动画，使用 javascript 会比较靠谱。而在实现一些小的交互动效的时候，就多考虑考虑 CSS 吧","level":3,"tagId":11}
{"_id":{"$oid":"61aa387091a75000018d2d62"},"exerciseKey":"b132d075-c2fe-4b83-8c74-444733612862","category":"QA","renderType":"html","title":"HTTP 1.1和 HTTP 2.0 的区别","desc":null,"options":null,"explanation":"<ul><li><strong>二进制协议</strong>：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是 二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。</li><li><strong>多路复用：</strong> HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回 应，而且不用按照顺序一一发送，这样就避免了”队头堵塞”的问题。</li><li><strong>数据流：</strong> HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的 请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每 个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流 ID ，用来区分它属于哪个数据流。</li><li><strong>头信息压缩：</strong> HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是 重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面， 客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引 号，这样就能提高速度了。</li><li><strong>服务器推送：</strong> HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送，提前给客户端推送必要的资源 ，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</li></ul><p></p>","level":2,"tagId":16}
{"_id":{"$oid":"61aa38703976eb00014e459f"},"exerciseKey":"b19b40b5-e032-482f-8520-25affc3b02db","category":"QA","renderType":"md","title":"解释如何使用 TypeScript mixin。","desc":null,"options":null,"explanation":"Mixin 本质上是在相反方向上工作的继承。Mixins 允许你通过组合以前类中更简单的部分类设置来构建新类。\n\n相反，类A继承类B来获得它的功能，类B从类A需要返回一个新类的附加功能。","level":2.5,"tagId":19}
{"_id":{"$oid":"61aa38703dd7f70001832fe5"},"exerciseKey":"b19c5c77-658d-4004-a9c5-028fd81b3a9e","category":"QA","renderType":"md","title":"react 的虚拟dom是怎么实现的？\n","desc":null,"options":null,"explanation":"React 是把真实的 DOM 树转换为 JS 对象树，也就是 Virtual DOM。每次数据更新后，重新计算 VM，并和上一次生成的 VM 树进行对比，对发生变化的部分进行批量更新。除了性能之外，VM 的实现最大的好处在于和其他平台的集成。\n\n比如我们一个真是的 DOM 是这样的\n\n```html\n<button class=\"myButton\">\n  <span>this is button</span>\n</button>\n```\n\n那么在转化为 VM 之后就是这样的\n\n```json\n{\n  type: 'button',\n  props: {\n  \tclassName: 'myButton',\n    children: [{\n      type: 'span',\n      props: {\n        type: 'text'\n        children: 'this is button'\n      }\n    }]\n  }\n}\n```","level":3,"tagId":13}
{"_id":{"$oid":"61aa38700f30890001ab8193"},"exerciseKey":"b1b488cb-0f79-4d12-bdab-4c070e0da072","category":"QA","renderType":"md","title":"说说你对事件循环的理解","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/50f062d0-7cb8-11eb-ab90-d9ae814b240d.png)\r\n\r\n## 一、是什么\r\n`JavaScript` 在设计之初便是单线程，即指程序运行时，只有一个线程存在，同一时间只能做一件事\r\n\r\n为什么要这么设计，跟`JavaScript`的应用场景有关\r\n\r\n`JavaScript` 初期作为一门浏览器脚本语言，通常用于操作 `DOM` ，如果是多线程，一个线程进行了删除 `DOM` ，另一个添加 `DOM`，此时浏览器该如何处理？\r\n\r\n为了解决单线程运行阻塞问题，`JavaScript`用到了计算机系统的一种运行机制，这种机制就叫做事件循环（Event Loop）\r\n\r\n#### 事件循环（Event Loop）\r\n\r\n在`JavaScript`中，所有的任务都可以分为\r\n\r\n- 同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行\r\n\r\n- 异步任务：异步执行的任务，比如`ajax`网络请求，`setTimeout `定时函数等\r\n\r\n同步任务与异步任务的运行流程图如下：\r\n\r\n ![](https://static.vue-js.com/61efbc20-7cb8-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n从上面我们可以看到，同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就是事件循环\r\n\r\n\r\n\r\n## 二、宏任务与微任务\r\n\r\n如果将任务划分为同步任务和异步任务并不是那么的准确，举个例子：\r\n\r\n```js\r\nconsole.log(1)\r\n\r\nsetTimeout(()=>{\r\n    console.log(2)\r\n}, 0)\r\n\r\nnew Promise((resolve, reject)=>{\r\n    console.log('new Promise')\r\n    resolve()\r\n}).then(()=>{\r\n    console.log('then')\r\n})\r\n\r\nconsole.log(3)\r\n```\r\n\r\n如果按照上面流程图来分析代码，我们会得到下面的执行步骤：\r\n\r\n- `console.log(1) `，同步任务，主线程中执行\r\n- `setTimeout()` ，异步任务，放到 `Event Table`，0 毫秒后`console.log(2) `回调推入 `Event Queue` 中\r\n- `new Promise` ，同步任务，主线程直接执行\r\n- `.then` ，异步任务，放到 `Event Table`\r\n- `console.log(3)`，同步任务，主线程执行\r\n\r\n所以按照分析，它的结果应该是 `1` => `'new Promise'` => `3` => `2` => `'then'`\r\n\r\n但是实际结果是：`1`=>`'new Promise'`=> `3` => `'then'` => `2`\r\n\r\n出现分歧的原因在于异步任务执行顺序，事件队列其实是一个“先进先出”的数据结构，排在前面的事件会优先被主线程读取\r\n\r\n例子中 `setTimeout`回调事件是先进入队列中的，按理说应该先于 `.then` 中的执行，但是结果却偏偏相反\r\n\r\n原因在于异步任务还可以细分为微任务与宏任务\r\n\r\n### 微任务\r\n\r\n一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前\r\n\r\n常见的微任务有：\r\n\r\n- Promise.then\r\n\r\n- MutaionObserver\r\n\r\n- Object.observe（已废弃；Proxy 对象替代）\r\n\r\n- process.nextTick（Node.js）\r\n\r\n  \r\n\r\n### 宏任务\r\n\r\n宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合\r\n\r\n常见的宏任务有：\r\n\r\n- script (可以理解为外层同步代码) \r\n- setTimeout/setInterval \r\n- UI rendering/UI事件 \r\n- postMessage、MessageChannel \r\n- setImmediate、I/O（Node.js）\r\n\r\n\r\n\r\n这时候，事件循环，宏任务，微任务的关系如图所示\r\n\r\n ![](https://static.vue-js.com/6e80e5e0-7cb8-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n按照这个流程，它的执行机制是：\r\n\r\n- 执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中\r\n- 当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完\r\n\r\n\r\n\r\n回到上面的题目\r\n\r\n```js\r\nconsole.log(1)\r\nsetTimeout(()=>{\r\n    console.log(2)\r\n}, 0)\r\nnew Promise((resolve, reject)=>{\r\n    console.log('new Promise')\r\n    resolve()\r\n}).then(()=>{\r\n    console.log('then')\r\n})\r\nconsole.log(3)\r\n```\r\n\r\n流程如下\r\n\r\n```js\r\n// 遇到 console.log(1) ，直接打印 1\r\n// 遇到定时器，属于新的宏任务，留着后面执行\r\n// 遇到 new Promise，这个是直接执行的，打印 'new Promise'\r\n// .then 属于微任务，放入微任务队列，后面再执行\r\n// 遇到 console.log(3) 直接打印 3\r\n// 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 'then'\r\n// 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 2\r\n```\r\n\r\n\r\n\r\n## 三、async与await\r\n\r\n`async` 是异步的意思，`await `则可以理解为等待\r\n\r\n放到一起可以理解` async `就是用来声明一个异步方法，而 `await `是用来等待异步方法执行\r\n\r\n### async\r\n\r\n`async`函数返回一个`promise`对象，下面两种方法是等效的\r\n\r\n```js\r\nfunction f() {\r\n    return Promise.resolve('TEST');\r\n}\r\n\r\n// asyncF is equivalent to f!\r\nasync function asyncF() {\r\n    return 'TEST';\r\n}\r\n```\r\n\r\n### await\r\n\r\n正常情况下，`await`命令后面是一个 `Promise `对象，返回该对象的结果。如果不是 `Promise `对象，就直接返回对应的值\r\n\r\n```js\r\nasync function f(){\r\n    // 等同于\r\n    // return 123\r\n    return await 123\r\n}\r\nf().then(v => console.log(v)) // 123\r\n```\r\n\r\n不管`await`后面跟着的是什么，`await`都会阻塞后面的代码\r\n\r\n```js\r\nasync function fn1 (){\r\n    console.log(1)\r\n    await fn2()\r\n    console.log(2) // 阻塞\r\n}\r\n\r\nasync function fn2 (){\r\n    console.log('fn2')\r\n}\r\n\r\nfn1()\r\nconsole.log(3)\r\n```\r\n\r\n上面的例子中，`await` 会阻塞下面的代码（即加入微任务队列），先执行 `async `外面的同步代码，同步代码执行完，再回到 `async` 函数中，再执行之前阻塞的代码\r\n\r\n所以上述输出结果为：`1`，`fn2`，`3`，`2`\r\n\r\n\r\n\r\n## 四、流程分析\r\n\r\n通过对上面的了解，我们对`JavaScript`对各种场景的执行顺序有了大致的了解\r\n\r\n这里直接上代码：\r\n\r\n```js\r\nasync function async1() {\r\n    console.log('async1 start')\r\n    await async2()\r\n    console.log('async1 end')\r\n}\r\nasync function async2() {\r\n    console.log('async2')\r\n}\r\nconsole.log('script start')\r\nsetTimeout(function () {\r\n    console.log('settimeout')\r\n})\r\nasync1()\r\nnew Promise(function (resolve) {\r\n    console.log('promise1')\r\n    resolve()\r\n}).then(function () {\r\n    console.log('promise2')\r\n})\r\nconsole.log('script end')\r\n```\r\n\r\n分析过程：\r\n\r\n1. 执行整段代码，遇到 `console.log('script start')` 直接打印结果，输出 `script start`\r\n2. 遇到定时器了，它是宏任务，先放着不执行\r\n3. 遇到 `async1()`，执行 `async1` 函数，先打印 `async1 start`，下面遇到` await `怎么办？先执行 `async2`，打印 `async2`，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码\r\n4. 跳到 `new Promise` 这里，直接执行，打印 `promise1`，下面遇到 `.then()`，它是微任务，放到微任务列表等待执行\r\n5. 最后一行直接打印 `script end`，现在同步代码执行完了，开始执行微任务，即 `await `下面的代码，打印 `async1 end`\r\n6. 继续执行下一个微任务，即执行 `then` 的回调，打印 `promise2`\r\n7. 上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 `settimeout`\r\n\r\n所以最后的结果是：`script start`、`async1 start`、`async2`、`promise1`、`script end`、`async1 end`、`promise2`、`settimeout`","level":3,"tagId":10}
{"_id":{"$oid":"61aa3871c2d0220001c96530"},"exerciseKey":"b1d982b1-a2fc-44b7-9124-7f47ba2a4707","category":"QA","renderType":"md","title":"最长回文子串","desc":"给你一个字符串 s，找到 s 中最长的回文子串。\n\n* 示例 1：\n\n```\n输入：s = \"babad\"\n输出：\"bab\"\n解释：\"aba\" 同样是符合题意的答案。\n```\n\n* 示例 2：\n\n```\n输入：s = \"cbbd\"\n输出：\"bb\"\n```\n\n* 示例 3：\n\n```\n输入：s = \"a\"\n输出：\"a\"\n```\n\n* 示例 4：\n\n```\n输入：s = \"ac\"\n输出：\"a\"\n```\n\n* 提示：\n\n```\n1 <= s.length <= 1000\ns 仅由数字和英文字母（大写和/或小写）组成\n```\n","options":null,"explanation":"# 暴力枚举法\n\n## 思路\n\n暴力解法虽然时间复杂度高，但是思路清晰、编写简单，因为编写的正确性高，完全可以使用暴力匹配算法检验我们编写的算法的正确性。\n\n## 代码\n\n```js\nvar longestPalindrome_bf = function(s) {\n  if (!s) return '';\n  var longest = s[0], str, i, j, len;\n  var isPalindrom = function (left, right) {\n    while (left < right && s[left] === s[right]) {\n      left++;\n      right--;\n    }\n    return left >= right;\n  }\n  for (len = 2; len <= s.length; len++) {\n    for (i = 0; i < s.length; i++) {\n      j = i + len - 1;\n      if (isPalindrom(i, j)) {\n        str = s.slice(i, j + 1);\n        if (longest.length < str.length) longest = str;\n      }\n    }\n  }\n  return longest;\n}\n```\n\n## 复杂度\n\n* 时间复杂度O(n^3)\n* 空间复杂度O(1)\n\n# 中心扩散法\n\n## 思路\n\n暴力法时间复杂度比较高，除此之外，还容易想到的是枚举可能出现的回文子串的“中心位置”，从“中心位置”尝试尽可能扩散出去，得到一个回文串。\n\n遍历原字符串，每个字符或每两个字符中间，都可能被当成回文子串的中心，利用回文串的中心对称的特点，尽量往两边扩散，获取最大的“扩散面积”\n\n因此，中心扩散法的思路是：遍历每一个索引，以这个索引为中心，利用“回文串”中心对称的特点，往两边扩散，看最多能扩散多远。\n\n枚举“中心位置”时间复杂度为 O(n) ，从“中心位置”扩散得到“回文子串”的时间复杂度为 O(n) ，因此时间复杂度可以降到 O(n^2)。\n\n在这里要注意一个细节：回文串在长度为奇数和偶数的时候，“回文中心”的形式是不一样的。\n\n* 奇数回文串的“中心”是一个具体的字符，例如：回文串 \"aba\" 的中心是字符 \"a\"；\n* 偶数回文串的“中心”是位于中间的两个字符的“空隙”，例如：回文串串 \"abba\" 的中心是两个 \"b\" 中间的那个“空隙”。\n\n## 代码\n\n```js\n/**\n* @param {string} s\n* @return {string}\n*/\nvar longestPalindrome = function (s) {\n    if (!s) return ''\n    if (s.length === 1) return s;\n    if (s.length === 2) return s[0] === s[1] ? s : s[1];\n    let maxStr = '',\n        len = s.length;\n    for (let i = 0; i < len; i++) {\n        let even = '', // 定义偶数中心回文\n            odd = ''; // 定义奇数中心回文\n        if (s[i] === s[i + 1]) { // 若是偶数中心回文\n            let evenIndex = center(s, i - 1, i + 2); // 比较中心的前一项和后一项\n            even = s.slice(evenIndex.left, evenIndex.right)\n        }\n        let oddIndex = center(s, i - 1, i + 1); // 奇数中心回文\n        odd = s.slice(oddIndex.left, oddIndex.right);\n        let longer = even.length > odd.length ? even : odd; // 比较奇、偶\n        maxStr = maxStr.length > longer.length ? maxStr : longer\n    }\n    return maxStr\n}\n// 中心扩展\nfunction center(s, left, right) {\n    let len = s.length;\n    while (left >= 0 && right < len && s[left] === s[right]) {\n        left--;\n        right++;\n    }\n    return { left: left + 1, right: right }\n}\n```\n\n# 动态规划\n\nDP可能是解这个问题的一个好方法，然而算法复杂度依然是 O(N^2) 的，而且空间复杂度也是 O(N^2)。\n\n我们假设用 P[i][j] 来表示 s[i..j] 是否是一个回文子串。\n\n它的计算公式长这样：\n\n> P[i][j] = s[i] === s[j] && P[i + 1][j - 1] ? true : false;\n\n```js\nvar longestPalindrome_dp = function(s) {\n  var i, j, len;\n  // isPalindrom[i][j] represent s[i..j] is a parlindrom string or not.\n  var isPalindrom = new Array(s.length);\n  for (i = 0; i < s.length; i++) {\n    isPalindrom[i] = new Array(s.length).fill(false);\n  }\n  var maxLen = 1, longestBegin = 0;\n  // initialize\n  for (i = 0; i < s.length; i++) {\n    isPalindrom[i][i] = true;\n    if (i < s.length - 1 && s[i] === s[i + 1]) {\n      isPalindrom[i][i + 1] = true;\n      maxLen = 2;\n      longestBegin = i;\n    }\n  }\n  // compute\n  for (len = 3; len <= s.length; len++) {\n    for (i = 0; i < s.length; i++) {\n      j = len + i - 1;\n      if (s[i] === s[j] && isPalindrom[i + 1][j - 1]) {\n        isPalindrom[i][j] = true;\n        maxLen = len;\n        longestBegin = i;\n      }\n    }\n  }\n  return s.slice(longestBegin, longestBegin + maxLen);\n}\n\n```\n\n# 动态规划 2\n\n## 思路\n\nDP 的空间复杂度是 O(N^2) 的，主要用来保存二维数组 P[i][j]，而且只用了一半。\n\n我们可以把空间复杂度降到 O(1)，只存找到的最长回文串即可。枚举轴心位置，并进行扩展。如果是回文，则轴心两边的字符应该对称相等。\n\n需要考虑到长度奇偶情况的不同，如果是奇数长度，轴心就是一个字符；如果是偶数长度，轴心则不在字符串中\n\n## 实现\n\n```js\nvar longestPalindrome_enum = function(s) {\n  if (!s) return '';\n  var longest = s[0];\n  var expandAroundCenter = function (left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n      left--;\n      right++;\n    }\n    return s.slice(left + 1, right);\n  }\n  for (var i = 0; i < s.length; i++) {\n    // 奇数\n    var odd = expandAroundCenter(i, i);\n    if (odd.length > longest.length) longest = odd;\n    // 偶数\n    var even = expandAroundCenter(i, i + 1);\n    if (longest.length < even.length) longest = even;\n  }\n  return longest;\n}\n\n```\n\n# Manacher 算法\n\n相比降低空间复杂度，降低时间复杂度要难得多。这里有一个 O(N) 时间复杂度的算法，叫做 Manacher 算法。\n\n能够从 O(N^2) 降到 O(N)，这个算法很巧妙。它首先解决了长度奇偶不同的问题。\n\n通过向字符串中加入一些特殊字符来使长度均为奇数。特殊字符即为原字符串的字符集中没有的字符。如 'aba' 中插入 '#'，变成'#a#b#a#'。\n\n然后提出了一个回文半径（P）的概念：\n\n```\nT = # a # b # a # a # b # a #\nP = 0 1 0 3 0 1 6 1 0 3 0 1 0\n```\n\n它代表了以该字符为轴心的回文串对折后的长度。由于插入了特殊字符，如果最长回文字符串的长度为偶数，则轴心会出现在 '#' 上。\n\n容易看出上面的例子中，最大回文子串的轴心就是 P 为 6 的字符。最大回文子串为 'abaaba' ，长度刚好为 6.\n\n这显然不是巧合，接下来就是要计算 P，记下其最大值及对应下标，即可。目标时间复杂度 O(N)。当然，这个算法最难的部分，就是计算 P。\n\n正常计算 P 的话，时间复杂度依然是 O(N^2)，但是如果利用回文串的对称特性，减少搜索，就可以将复杂度降至 O(N)。\n\n计算 P 就是以每一个字符为轴心计算回文半径，也就是从每一个字符开始向两边搜索，那么右边必然会搜索到尚未遍历到的字符，如果我们记下最大能搜索到的右边界 R\n。在后面的遍历搜索中，如果当前 T[i] 在边界内，即比最大右边界小，那么也就是在一个已搜索的回文子串中，假设 i' 是 i 对应当前最大 R 的轴心 C 的对称位置（即 T[i] == T[i']）， 可以做出下面的结论：\n\n```\nif P[i'] < R-i\nthen P[i] = P[i']\nelse P[i] >= P[i'] （需要进一步扩展搜索得出）\n```\n\n另一种情况，如果当前字符 T[i] 不在边界内，即我们不能得出任何结论，所以 P[i] = 0。\n\n## 代码\n\n```js\nvar longestPalindrome_manacher = function(s) {\n  s = '^#' + s.split('').join('#') + '#$';\n  var radius = new Array(s.length).fill(0);\n  var C = 0, centerIndex = 0, maxRight = 0, maxLen = 0;\n\n  for (var i = 1; i < s.length - 1; i++) {\n    // 计算初始回文半径, i' = 2 * C - i\n    radius[i] = (maxRight > i) ? Math.min(maxRight - i, radius[2 * C - i]) : 0;\n    // 扩展半径\n    while (s[i + 1 + radius[i]] && s[i - 1 - radius[i]] && s[i + 1 + radius[i]] === s[i - 1 - radius[i]]) radius[i]++;\n    // 更新当前搜索的最大右边界和位置\n    if (i + radius[i] > maxRight) {\n      C = i;\n      maxRight = i + radius[i];\n    }\n    // 更新最大回文串长度及位置\n    if (maxLen < radius[i]) {\n      maxLen = radius[i];\n      centerIndex = i;\n    }\n  }\n\n  return s.slice((centerIndex - maxLen), (centerIndex + maxLen + 1)).split('#').join('');\n};\n\n```\n","level":3,"tagId":31}
{"_id":{"$oid":"61aa387134458700017f1d26"},"exerciseKey":"b32040b5-50a0-40a8-931d-82738916e4ee","category":"QA","renderType":"md","title":"说说对 Node 中的 Buffer 的理解？应用场景？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/176d02b0-c69c-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n在`Node`应用中，需要处理网络协议、操作数据库、处理图片、接收上传文件等，在网络流和文件的操作中，要处理大量二进制数据，而`Buffer`就是在内存中开辟一片区域（初次初始化为8KB），用来存放二进制数据\n\n在上述操作中都会存在数据流动，每个数据流动的过程中，都会有一个最小或最大数据量\n\n如果数据到达的速度比进程消耗的速度快，那么少数早到达的数据会处于等待区等候被处理。反之，如果数据到达的速度比进程消耗的数据慢，那么早先到达的数据需要等待一定量的数据到达之后才能被处理\n\n这里的等待区就指的缓冲区（Buffer），它是计算机中的一个小物理单位，通常位于计算机的 `RAM` 中\n\n简单来讲，`Nodejs`不能控制数据传输的速度和到达时间，只能决定何时发送数据，如果还没到发送时间，则将数据放在`Buffer`中，即在`RAM`中，直至将它们发送完毕\n\n上面讲到了`Buffer`是用来存储二进制数据，其的形式可以理解成一个数组，数组中的每一项，都可以保存8位二进制：`00000000`，也就是一个字节\n\n例如：\n\n```js\nconst buffer = Buffer.from(\"why\")\n```\n\n其存储过程如下图所示：\n\n ![](https://static.vue-js.com/20371250-c69c-11eb-ab90-d9ae814b240d.png)\n\n\n## 二、使用方法\n\n`Buffer` 类在全局作用域中，无须`require`导入\n\n创建`Buffer`的方法有很多种，我们讲讲下面的两种常见的形式：\n\n- Buffer.from()\n\n- Buffer.alloc() \n\n### Buffer.from()\n\n```js\nconst b1 = Buffer.from('10');\nconst b2 = Buffer.from('10', 'utf8');\nconst b3 = Buffer.from([10]);\nconst b4 = Buffer.from(b3);\n\nconsole.log(b1, b2, b3, b4); // <Buffer 31 30> <Buffer 31 30> <Buffer 0a> <Buffer 0a>\n```\n\n### Buffer.alloc() \n\n```js\nconst bAlloc1 = Buffer.alloc(10); // 创建一个大小为 10 个字节的缓冲区\nconst bAlloc2 = Buffer.alloc(10, 1); // 建一个长度为 10 的 Buffer,其中全部填充了值为 `1` 的字节\nconsole.log(bAlloc1); // <Buffer 00 00 00 00 00 00 00 00 00 00>\nconsole.log(bAlloc2); // <Buffer 01 01 01 01 01 01 01 01 01 01>\n```\n\n在上面创建`buffer`后，则能够`toString`的形式进行交互，默认情况下采取`utf8`字符编码形式，如下\n\n```js\nconst buffer = Buffer.from(\"你好\");\nconsole.log(buffer);\n// <Buffer e4 bd a0 e5 a5 bd>\nconst str = buffer.toString();\nconsole.log(str);\n// 你好\n```\n\n如果编码与解码不是相同的格式则会出现乱码的情况，如下：\n\n```js\nconst buffer = Buffer.from(\"你好\",\"utf-8 \");\nconsole.log(buffer);\n// <Buffer e4 bd a0 e5 a5 bd>\nconst str = buffer.toString(\"ascii\");\nconsole.log(str); \n// d= e%=\n```\n\n当设定的范围导致字符串被截断的时候，也会存在乱码情况，如下：\n\n```js\nconst buf = Buffer.from('Node.js 技术栈', 'UTF-8');\n\nconsole.log(buf)          // <Buffer 4e 6f 64 65 2e 6a 73 20 e6 8a 80 e6 9c af e6 a0 88>\nconsole.log(buf.length)   // 17\n\nconsole.log(buf.toString('UTF-8', 0, 9))  // Node.js �\nconsole.log(buf.toString('UTF-8', 0, 11)) // Node.js 技\n```\n\n所支持的字符集有如下：\n\n- ascii：仅支持 7 位 ASCII 数据，如果设置去掉高位的话，这种编码是非常快的\n- utf8：多字节编码的 Unicode 字符，许多网页和其他文档格式都使用 UTF-8\n- utf16le：2 或 4 个字节，小字节序编码的 Unicode 字符，支持代理对（U+10000至 U+10FFFF）\n- ucs2，utf16le 的别名\n- base64：Base64 编码\n- latin：一种把 Buffer 编码成一字节编码的字符串的方式\n- binary：latin1 的别名，\n- hex：将每个字节编码为两个十六进制字符\n\n\n\n## 三、应用场景\n\n`Buffer`的应用场景常常与流的概念联系在一起，例如有如下：\n\n- I/O操作\n- 加密解密\n- zlib.js\n\n\n\n### I/O操作\n\n通过流的形式，将一个文件的内容读取到另外一个文件\n\n```js\nconst fs = require('fs');\n\nconst inputStream = fs.createReadStream('input.txt'); // 创建可读流\nconst outputStream = fs.createWriteStream('output.txt'); // 创建可写流\n\ninputStream.pipe(outputStream); // 管道读写\n```\n\n\n\n### 加解密\n\n在一些加解密算法中会遇到使用 `Buffer`，例如 `crypto.createCipheriv` 的第二个参数 `key` 为 `string` 或 `Buffer` 类型\n\n\n\n### zlib.js\n\n`zlib.js` 为 `Node.js` 的核心库之一，其利用了缓冲区（`Buffer`）的功能来操作二进制数据流，提供了压缩或解压功能\n","level":2,"tagId":18}
{"_id":{"$oid":"61aa387154ebf60001a1a477"},"exerciseKey":"b343227e-136a-405a-8a9d-b6d92259fa38","category":"QA","renderType":"md","title":"如何判断一个对象是不是空对象？","desc":null,"options":null,"explanation":"```js\n// 方法1\nObject.keys(obj).length === 0\n\n// 方法2\nJSON.stringify(obj) === '{}'\n```","level":2,"tagId":10}
{"_id":{"$oid":"61aa387134458700017f1d27"},"exerciseKey":"b3e592e6-5b29-4d75-9fc6-73032cf0a2ac","category":"QA","renderType":"md","title":"圆桌射击游戏","desc":"圆桌上有1到1000号，1号右手边是2号，左手边是1000号。1号开枪打死2号，把枪交给3号，3号打死4号交给5号。如此继续下去，999号打死1000号后把枪交给1号，之后继续循环。请问最后留下来的是几号？","options":null,"explanation":"**977号**\n\n假设有 1024 个玩家，从 1 号起轮流开始游戏，则最终 1 号必然留下。\n\n在第一轮，第 47 号开抢红包后，桌上仅剩 1000 人。从第 49 号开始重新编号为 1～1000 ，继续游戏。\n\n那么从现在的 1 号（原先的 49 号开始执行任务）。这样 1000 人的游戏就变成了 1024 人游戏的一个子过程，最终留下来的人是原 1 号，现在的 977 号(原 1024 号现在是 1024 - 49 + 1 = 976 ，所以原 1 号现在是 977 号)。\n\n![2 _1_.png](https://i.loli.net/2021/07/04/4Q6sd8FngezDqmM.png)","level":3,"tagId":17}
{"_id":{"$oid":"61aa38718e97d900018087b3"},"exerciseKey":"b4001078-1e40-481b-8fcd-c4d48e6dd855","category":"QA","renderType":"md","title":"浏览器为什么要有跨域限制？","desc":null,"options":null,"explanation":"因为存在浏览器同源策略，所以才会有跨域问题。那么浏览器是出于何种原因会有跨域的限制呢。其实不难想到，跨域限制主要的目的就是为了用户的上网安全。\n\n如果浏览器没有同源策略，会存在什么样的安全问题呢。下面从 DOM 同源策略和 XMLHttpRequest 同源策略来举例说明：\n\n**如果没有 DOM 同源策略**，也就是说不同域的 iframe 之间可以相互访问，那么黑客可以这样进行攻击：\n\n* 做一个假网站，里面用 iframe 嵌套一个银行网站 http://mybank.com。\n* 把 iframe 宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。\n* 这时如果用户输入账号密码，我们的主网站可以跨域访问到 http://mybank.com 的 dom 节点，就可以拿到用户的账户密码了。\n\n\n**如果没有 XMLHttpRequest 同源策略**，那么黑客可以进行 CSRF（跨站请求伪造） 攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com 向用户的 cookie 中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com，执行了页面中的恶意 AJAX 请求代码。\n* http://evil.com 向 http://mybank.com 发起 AJAX HTTP 请求，请求会默认把 http://mybank.com 对应 cookie 也同时发送过去。\n* 银行页面从发送的 cookie 中提取用户标识，验证用户无误，response 中返回请求数据。此时数据就泄露了。\n* 而且由于 Ajax 在后台执行，用户无法感知这一过程。\n\n因此，有了浏览器同源策略，我们才能更安全的上网。\n","level":1,"tagId":10}
{"_id":{"$oid":"61aa3871c2d0220001c96533"},"exerciseKey":"b4137265-8ebe-4fc8-be75-8dfaf125af6c","category":"QA","renderType":"md","title":"使用原生js给一个按钮绑定两个onclick事件","desc":null,"options":null,"explanation":"```javascript\n//事件监听 绑定多个事件\nvar btn = document.getElementById(\"btn\");\n\nbtn.addEventListener(\"click\",hello1);\nbtn.addEventListener(\"click\",hello2);\n\nfunction hello1(){\n alert(\"hello 1\");\n}\nfunction hello2(){\n alert(\"hello 2\");\n}\n```","level":0.5,"tagId":26}
{"_id":{"$oid":"61aa3871ff0573000165b341"},"exerciseKey":"b415a52e-4220-4fb5-83fd-fef21e3cfbff","category":"QA","renderType":"md","title":"说说对 Node 中的 fs模块的理解? 有哪些常用方法","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/a141e5c0-c46a-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\nfs（filesystem），该模块提供本地文件的读写能力，基本上是`POSIX`文件操作命令的简单包装\n\n可以说，所有与文件的操作都是通过`fs`核心模块实现\n\n导入模块如下：\n\n```js\nconst fs = require('fs');\n```\n\n这个模块对所有文件系统操作提供异步（不具有`sync` 后缀）和同步（具有 `sync` 后缀）两种操作方式，而供开发者选择\n\n\n\n### 二、文件知识\n\n在计算机中有关于文件的知识：\n\n- 权限位 mode\n- 标识位 flag\n- 文件描述为 fd\n\n\n\n### 权限位 mode\n\n ![](https://static.vue-js.com/4f4d41a0-c46b-11eb-ab90-d9ae814b240d.png)\n\n针对文件所有者、文件所属组、其他用户进行权限分配，其中类型又分成读、写和执行，具备权限位4、2、1，不具备权限为0\n\n如在`linux`查看文件权限位：\n\n```js\ndrwxr-xr-x 1 PandaShen 197121 0 Jun 28 14:41 core\n-rw-r--r-- 1 PandaShen 197121 293 Jun 23 17:44 index.md\n```\n\n在开头前十位中，`d`为文件夹，`-`为文件，后九位就代表当前用户、用户所属组和其他用户的权限位，按每三位划分，分别代表读（r）、写（w）和执行（x），- 代表没有当前位对应的权限\n\n\n\n### 标识位\n\n标识位代表着对文件的操作方式，如可读、可写、即可读又可写等等，如下表所示：\n\n| 符号 | 含义                                                     |\n| ---- | -------------------------------------------------------- |\n| r    | 读取文件，如果文件不存在则抛出异常。                     |\n| r+   | 读取并写入文件，如果文件不存在则抛出异常。               |\n| rs   | 读取并写入文件，指示操作系统绕开本地文件系统缓存。       |\n| w    | 写入文件，文件不存在会被创建，存在则清空后写入。         |\n| wx   | 写入文件，排它方式打开。                                 |\n| w+   | 读取并写入文件，文件不存在则创建文件，存在则清空后写入。 |\n| wx+  | 和 w+ 类似，排他方式打开。                               |\n| a    | 追加写入，文件不存在则创建文件。                         |\n| ax   | 与 a 类似，排他方式打开。                                |\n| a+   | 读取并追加写入，不存在则创建。                           |\n| ax+  | 与 a+ 类似，排他方式打开。                               |\n\n\n\n### 文件描述为 fd\n\n操作系统会为每个打开的文件分配一个名为文件描述符的数值标识，文件操作使用这些文件描述符来识别与追踪每个特定的文件\n\n`Window `系统使用了一个不同但概念类似的机制来追踪资源，为方便用户，`NodeJS `抽象了不同操作系统间的差异，为所有打开的文件分配了数值的文件描述符\n\n在 `NodeJS `中，每操作一个文件，文件描述符是递增的，文件描述符一般从 `3` 开始，因为前面有 `0`、`1`、`2`三个比较特殊的描述符，分别代表 `process.stdin`（标准输入）、`process.stdout`（标准输出）和 `process.stderr`（错误输出）\n\n\n\n## 三、方法\n\n下面针对`fs`模块常用的方法进行展开：\n\n- 文件读取\n- 文件写入\n- 文件追加写入\n- 文件拷贝\n- 创建目录\n\n\n\n### 文件读取\n\n####  fs.readFileSync\n\n同步读取，参数如下：\n\n- 第一个参数为读取文件的路径或文件描述符\n- 第二个参数为 options，默认值为 null，其中有 encoding（编码，默认为 null）和 flag（标识位，默认为 r），也可直接传入 encoding\n\n结果为返回文件的内容\n\n```js\nconst fs = require(\"fs\");\n\nlet buf = fs.readFileSync(\"1.txt\");\nlet data = fs.readFileSync(\"1.txt\", \"utf8\");\n\nconsole.log(buf); // <Buffer 48 65 6c 6c 6f>\nconsole.log(data); // Hello\n```\n\n\n\n#### fs.readFile\n\n异步读取方法 `readFile` 与 `readFileSync` 的前两个参数相同，最后一个参数为回调函数，函数内有两个参数 `err`（错误）和 `data`（数据），该方法没有返回值，回调函数在读取文件成功后执行\n\n```js\nconst fs = require(\"fs\");\n\nfs.readFile(\"1.txt\", \"utf8\", (err, data) => {\n   if(!err){\n       console.log(data); // Hello\n   }\n});\n```\n\n\n\n### 文件写入\n\n#### writeFileSync\n\n同步写入，有三个参数：\n\n- 第一个参数为写入文件的路径或文件描述符\n\n- 第二个参数为写入的数据，类型为 String 或 Buffer\n\n- 第三个参数为 options，默认值为 null，其中有 encoding（编码，默认为 utf8）、 flag（标识位，默认为 w）和 mode（权限位，默认为 0o666），也可直接传入 encoding\n\n```js\nconst fs = require(\"fs\");\n\nfs.writeFileSync(\"2.txt\", \"Hello world\");\nlet data = fs.readFileSync(\"2.txt\", \"utf8\");\n\nconsole.log(data); // Hello world\n```\n\n\n\n#### writeFile\n\n异步写入，`writeFile` 与 `writeFileSync` 的前三个参数相同，最后一个参数为回调函数，函数内有一个参数 `err`（错误），回调函数在文件写入数据成功后执行\n\n```js\nconst fs = require(\"fs\");\n\nfs.writeFile(\"2.txt\", \"Hello world\", err => {\n    if (!err) {\n        fs.readFile(\"2.txt\", \"utf8\", (err, data) => {\n            console.log(data); // Hello world\n        });\n    }\n});\n```\n\n\n\n### 文件追加写入\n\n#### appendFileSync\n\n参数如下：\n\n- 第一个参数为写入文件的路径或文件描述符\n- 第二个参数为写入的数据，类型为 String 或 Buffer\n- 第三个参数为 options，默认值为 null，其中有 encoding（编码，默认为 utf8）、 flag（标识位，默认为 a）和 mode（权限位，默认为 0o666），也可直接传入 encoding\n\n```js\nconst fs = require(\"fs\");\n\nfs.appendFileSync(\"3.txt\", \" world\");\nlet data = fs.readFileSync(\"3.txt\", \"utf8\");\n```\n\n\n\n#### appendFile\n\n异步追加写入方法 `appendFile` 与 `appendFileSync` 的前三个参数相同，最后一个参数为回调函数，函数内有一个参数 `err`（错误），回调函数在文件追加写入数据成功后执行\n\n```js\nconst fs = require(\"fs\");\n\nfs.appendFile(\"3.txt\", \" world\", err => {\n    if (!err) {\n        fs.readFile(\"3.txt\", \"utf8\", (err, data) => {\n            console.log(data); // Hello world\n        });\n    }\n});\n```\n\n\n\n### 文件拷贝\n\n#### copyFileSync\n\n同步拷贝\n\n```js\nconst fs = require(\"fs\");\n\nfs.copyFileSync(\"3.txt\", \"4.txt\");\nlet data = fs.readFileSync(\"4.txt\", \"utf8\");\n\nconsole.log(data); // Hello world\n```\n\n\n\n#### copyFile\n\n异步拷贝\n\n```js\nconst fs = require(\"fs\");\n\nfs.copyFile(\"3.txt\", \"4.txt\", () => {\n    fs.readFile(\"4.txt\", \"utf8\", (err, data) => {\n        console.log(data); // Hello world\n    });\n});\n```\n\n\n\n### 创建目录\n\n#### mkdirSync\n\n同步创建，参数为一个目录的路径，没有返回值，在创建目录的过程中，必须保证传入的路径前面的文件目录都存在，否则会抛出异常\n\n```js\n// 假设已经有了 a 文件夹和 a 下的 b 文件夹\nfs.mkdirSync(\"a/b/c\")\n```\n\n\n\n#### mkdir\n\n异步创建，第二个参数为回调函数\n\n```js\nfs.mkdir(\"a/b/c\", err => {\n    if (!err) console.log(\"创建成功\");\n});\n```","level":2,"tagId":18}
{"_id":{"$oid":"61aa38710f30890001ab819a"},"exerciseKey":"b43082e8-2312-4594-ac1c-4f0d2d5da81c","category":"QA","renderType":"md","title":"移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？","desc":null,"options":null,"explanation":"移动端点击有 300ms 的延迟是因为移动端会有双击缩放的这个操作，因此浏览器在 click 之后要等待 300ms，看用户有没有下一次点击，来判断这次操作是不是双击。\n\n有三种办法来解决这个问题：\n\n* 通过 meta 标签禁用网页的缩放。\n* 通过 meta 标签将网页的 viewport 设置为 ideal viewport。\n* 调用一些 js 库，比如 FastClick\n\nclick 延时问题还可能引起点击穿透的问题，就是如果我们在一个元素上注册了 touchStart 的监听事件，这个事件会将这个元素隐藏掉，我们发现当这个元素隐藏后，触发了这个元素下的一个元素的点击事件，这就是点击穿透。","level":2,"tagId":10}
{"_id":{"$oid":"61aa38710d111e00010372fa"},"exerciseKey":"b54f7b5e-bac2-47bc-bc6a-0ec521a55a7f","category":"QA","renderType":"md","title":"怎么让Chrome支持小于12px 的文字？","desc":null,"options":null,"explanation":"\n![](https://static.vue-js.com/62945fd0-a334-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、背景\n\nChrome 中文版浏览器会默认设定页面的最小字号是12px，英文版没有限制\n\n原由 Chrome 团队认为汉字小于12px就会增加识别难度\n\n- 中文版浏览器\n\n与网页语言无关，取决于用户在Chrome的设置里（chrome://settings/languages）把哪种语言设置为默认显示语言\n\n- 系统级最小字号\n\n浏览器默认设定页面的最小字号，用户可以前往 chrome://settings/fonts 根据需求更改\n\n而我们在实际项目中，不能奢求用户更改浏览器设置\n\n对于文本需要以更小的字号来显示，就需要用到一些小技巧\n\n\n## 二、解决方案\n\n常见的解决方案有：\n\n- zoom\n- -webkit-transform:scale()\n- -webkit-text-size-adjust:none\n\n### Zoom\n\n`zoom` 的字面意思是“变焦”，可以改变页面上元素的尺寸，属于真实尺寸\n\n其支持的值类型有：\n\n- zoom:50%，表示缩小到原来的一半\n- zoom:0.5，表示缩小到原来的一半\n\n使用 `zoom` 来”支持“ 12px 以下的字体\n\n代码如下：\n\n```html\n<style type=\"text/css\">\n    .span1{\n        font-size: 12px;\n        display: inline-block;\n        zoom: 0.8;\n    }\n    .span2{\n        display: inline-block;\n        font-size: 12px;\n    }\n</style>\n<body>\n    <span class=\"span1\">测试10px</span>\n    <span class=\"span2\">测试12px</span>\n</body>\n```\n\n效果如下：\n\n ![](https://static.vue-js.com/d5243980-a334-11eb-ab90-d9ae814b240d.png)\n\n> 需要注意的是，`Zoom` 并不是标准属性，需要考虑其兼容性\n\n ![image.png](https://static.vue-js.com/3defe3c0-a343-11eb-85f6-6fac77c0c9b3.png)\n\n\n### -webkit-transform:scale()\n\n针对`chrome`浏览器,加`webkit`前缀，用`transform:scale()`这个属性进行放缩\n\n注意的是，使用`scale`属性只对可以定义宽高的元素生效，所以，下面代码中将`span`元素转为行内块元素\n\n实现代码如下：\n\n```html\n<style type=\"text/css\">\n    .span1{\n        font-size: 12px;\n        display: inline-block;\n        -webkit-transform:scale(0.8);\n    }\n    .span2{\n        display: inline-block;\n        font-size: 12px;\n    }\n</style>\n<body>\n    <span class=\"span1\">测试10px</span>\n    <span class=\"span2\">测试12px</span>\n</body>\n```\n\n效果如下：\n\n ![](https://static.vue-js.com/d5243980-a334-11eb-ab90-d9ae814b240d.png)\n\n\n### -webkit-text-size-adjust:none\n\n该属性用来设定文字大小是否根据设备(浏览器)来自动调整显示大小\n\n属性值：\n\n- percentage：字体显示的大小；\n- auto：默认，字体大小会根据设备/浏览器来自动调整；\n- none:字体大小不会自动调整\n\n```css\nhtml { -webkit-text-size-adjust: none; }\n```\n\n这样设置之后会有一个问题，就是当你放大网页时，一般情况下字体也会随着变大，而设置了以上代码后，字体只会显示你当前设置的字体大小，不会随着网页放大而变大了\n\n所以，我们不建议全局应用该属性，而是单独对某一属性使用\n\n> 需要注意的是，自从`chrome 27`之后，就取消了对这个属性的支持。同时，该属性只对英文、数字生效，对中文不生效\n\n## 三、总结\n\n`Zoom` 非标属性，有兼容问题，缩放会改变了元素占据的空间大小，触发重排\n\n`-webkit-transform:scale()` 大部分现代浏览器支持，并且对英文、数字、中文也能够生效，缩放不会改变了元素占据的空间大小，页面布局不会发生变化\n\n`-webkit-text-size-adjust`对谷歌浏览器有版本要求，在27之后，就取消了该属性的支持，并且只对英文、数字生效\n","level":1.5,"tagId":11}
{"_id":{"$oid":"61aa38720f30890001ab819e"},"exerciseKey":"b5824553-6ffc-4262-b90c-ce83f00409c2","category":"QA","renderType":"md","title":"请手写“快速排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。\n\n## 算法描述和实现\n\n快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：\n\n* 从数列中挑出一个元素，称为 “基准”（pivot）；\n* 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n* 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n## 代码实现\n\n```javascript\n/*方法说明：快速排序\n@param  array 待排序数组*/\n//方法一\nfunction quickSort(array, left, right) {\n    console.time('1.快速排序耗时');\n    if (Object.prototype.toString.call(array).slice(8, -1) === 'Array' && typeof left === 'number' && typeof right === 'number') {\n        if (left < right) {\n            var x = array[right], i = left - 1, temp;\n            for (var j = left; j <= right; j++) {\n                if (array[j] <= x) {\n                    i++;\n                    temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                }\n            }\n            quickSort(array, left, i - 1);\n            quickSort(array, i + 1, right);\n        }\n        console.timeEnd('1.快速排序耗时');\n        return array;\n    } else {\n        return 'array is not an Array or left or right is not a number!';\n    }\n}\n\n//方法二\nvar quickSort2 = function(arr) {\n    console.time('2.快速排序耗时');\n　　if (arr.length <= 1) { return arr; }\n　　var pivotIndex = Math.floor(arr.length / 2);\n　　var pivot = arr.splice(pivotIndex, 1)[0];\n　　var left = [];\n　　var right = [];\n　　for (var i = 0; i < arr.length; i++){\n　　　　if (arr[i] < pivot) {\n　　　　　　left.push(arr[i]);\n　　　　} else {\n　　　　　　right.push(arr[i]);\n　　　　}\n　　}\nconsole.timeEnd('2.快速排序耗时');\n　　return quickSort2(left).concat([pivot], quickSort2(right));\n};\n\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(quickSort(arr,0,arr.length-1));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\nconsole.log(quickSort2(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(nlogn)\n* 最差情况：T(n) = O(n2)\n* 平均情况：T(n) = O(nlogn)","level":3,"tagId":26}
{"_id":{"$oid":"61aa3872291c0100017ee295"},"exerciseKey":"b586c729-13ac-45ae-807c-8a7a0a23c7a4","category":"Choice","renderType":"md","title":"选择哪一个？","desc":"```javascript\nconst teams = [\n\t{ name: \"Team 1\", members: [\"Paul\", \"Lisa\"] },\n\t{ name: \"Team 2\", members: [\"Laura\", \"Tim\"] }\n];\n\nfunction* getMembers(members) {\n\tfor (let i = 0; i < members.length; i++) {\n\t\tyield members[i];\n\t}\n}\n\nfunction* getTeams(teams) {\n\tfor (let i = 0; i < teams.length; i++) {\n\t\t// ✨ SOMETHING IS MISSING HERE ✨\n\t}\n}\n\nconst obj = getTeams(teams);\nobj.next(); // { value: \"Paul\", done: false }\nobj.next(); // { value: \"Lisa\", done: false }\n```","options":"{\"options\":[\"yield getMembers(teams[i].members)\",\"yield* getMembers(teams[i].members)\",\"return getMembers(teams[i].members)\",\"return yield getMembers(teams[i].members)\"],\"isMulti\":false,\"answer\":[1]}","explanation":"为了遍历 `teams` 数组中对象的属性 `members` 中的每一项，我们需要将 `teams[i].members` 传递给 Generator 函数 `getMembers`。Generator 函数返回一个 generator 对象。为了遍历这个 generator 对象中的每一项，我们需要使用 `yield*`.\n如果我们没有写 `yield`，`return yield` 或者 `return`，整个 Generator 函数不会第一时间 return 当我们调用 `next` 方法.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa387291a75000018d2d6f"},"exerciseKey":"b61122b0-5971-4bc9-afc2-4987d4aa06d7","category":"QA","renderType":"md","title":"display:none与visibility:hidden 有什么区别？","desc":null,"options":null,"explanation":"## 表现上\n\n* display:none是彻底消失，不在文档流中占位，浏览器也不会解析该元素；\n* visibility:hidden是视觉上消失了，可以理解为透明度为0的效果，在文档流中占位，浏览器会解析该元素；\n\n## 性能上\n\n* 使用visibility:hidden比display:none性能上要好，display:none切换显示时，页面产生回流（当页面中的一部分元素需要改变规模尺寸、布局、显示隐藏等，页面重新构建，此时就是回流。所有页面第一次加载时需要产生一次回流），而visibility切换是否显示时则不会引起回流。","level":1,"tagId":11}
{"_id":{"$oid":"61aa387279641200019174c9"},"exerciseKey":"b66b6742-6ef1-4359-82ae-c69e2a041549","category":"QA","renderType":"md","title":"实现 Array.prototype.reduce()","desc":null,"options":null,"explanation":"```js\nArray.prototype.reduce = function(callback, initialValue) {\n  if (this == undefined) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callbackfn + ' is not a function');\n  }\n  const O = Object(this);\n  const len = this.length >>> 0;\n  let accumulator = initialValue;\n  let k = 0;\n  // 如果第二个参数为undefined的情况下\n  // 则数组的第一个有效值作为累加器的初始值\n  if (accumulator === undefined) {\n    while (k < len && !(k in O)) {\n      k++;\n    }\n    // 如果超出数组界限还没有找到累加器的初始值，则TypeError\n    if (k >= len) {\n      throw new TypeError('Reduce of empty array with no initial value');\n    }\n    accumulator = O[k++];\n  }\n  while (k < len) {\n    if (k in O) {\n      accumulator = callback.call(undefined, accumulator, O[k], k, O);\n    }\n    k++;\n  }\n  return accumulator;\n}\n\n```","level":1,"tagId":26}
{"_id":{"$oid":"61aa38723dd7f70001832ff7"},"exerciseKey":"b752b91f-930f-43b6-8017-83d56392dc7e","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nclass Counter {\n\tconstructor() {\n\t\tthis.count = 0;\n\t}\n\n\tincrement() {\n\t\tthis.count++;\n\t}\n}\n\nconst counterOne = new Counter();\ncounterOne.increment();\ncounterOne.increment();\n\nconst counterTwo = counterOne;\ncounterTwo.increment();\n\nconsole.log(counterOne.count);\n```","options":"{\"options\":[\"0\",\"1\",\"2\",\"3\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`counterOne` 是类 `Counter` 的一个实例。类 Counter 包含一个`count` 属性在它的构造函数里， 和一个 `increment` 方法。首先，我们通过 `counterOne.increment()` 调用方法 `increment` 两次。现在, `counterOne.count` 为 `2`.\n<img src=\"https://i.imgur.com/KxLlTm9.png\" width=\"400\">\n然后，我们创建一个新的变量 `counterTwo` 并将 `counterOne` 的引用地址赋值给它。因为对象受引用地址的影响，我们刚刚创建了一个新的对象，其引用地址和 `counterOne` 的等价。因此它们指向同一块内存地址，任何对其的副作用都会影响 `counterTwo`。现在 `counterTwo.count` 为 `2`。\n我们调用 `counterTwo.increment()` 将 `count` 的值设为 `3`。然后，我们打印 `counterOne` 里的count，结果为 `3`。\n<img src=\"https://i.imgur.com/BNBHXmc.png\" width=\"400\">","level":1,"tagId":32}
{"_id":{"$oid":"61aa38723dd7f70001832ffa"},"exerciseKey":"b77c84b0-6353-4eaa-ad71-6b75df79b94c","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst user = {\n\temail: \"my@email.com\",\n\tupdateEmail: email => {\n\t\tthis.email = email\n\t}\n}\n\nuser.updateEmail(\"new@email.com\")\nconsole.log(user.email)\n```","options":"{\"options\":[\"my@email.com\",\"new@email.com\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`updateEmail` 函数是一个箭头函数，它没有和 `user` 对象绑定。这就意味着 `this` 关键字不会引用到 `user` 对象，但是会引用到全局对象。 `user` 对象内部的 `email` 的值不会更新。当打印 `user.email` 的时候， 原始值 `my@email.com` 被返回。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3872cd02c30001dd22ee"},"exerciseKey":"b7956f38-87f5-4db6-958a-7ae47d60da9b","category":"QA","renderType":"md","title":" Atom CSS 是什么？","desc":null,"options":null,"explanation":"Atom CSS：原子CSS，意思是一个类只干一件事。\n\n不同于大家常用的BEM这类规则，原子css就是拆分，所有 CSS 类都有一个唯一的 CSS 规则。例如如下\n\n```css\n.w-full{\n  width:100%;\n}\n.h-full{\n  height:100%;\n}\n```\n\n而像这种就不是\n```\n.w&h-full{\n  width:100%;\n  height:100%;\n}\n```\n\n当我们使用的时候，直接写class名就可以\n\n```html\n<html>\n\t<body>\n    \t<div id=\"app\" class=\"w-full h-full\">\n        </div>\n\t</body>\n</html>\n\n```\n\n## 原子CSS的优缺点\n\n* 优点\n\t* 减少了css体积，提高了css复用\n\t* 减少起名的复杂度\n* 缺点\n\t* 增加了记忆成本。将css拆分为原子之后，你势必要记住一些class才能书写，哪怕tailwindcss提供了完善的工具链，你写background，也要记住开头是bg。\n    * 增加了html结构的复杂性。当整个dom都是这样class名，势必会带来调试的麻烦，有的时候很难定位具体css问题\n    * 你仍需要起class名。对于大部分属性而言，你可以只用到center,auto，100%，这些值，但是有时候你仍需要设定不一样的参数值，例如left，top，这时候你还需要起一个class名\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","level":2,"tagId":11}
{"_id":{"$oid":"61aa38723d5f3a0001af5667"},"exerciseKey":"b7edb0a3-10d1-4857-907b-cc99acaf3516","category":"QA","renderType":"md","title":"说说对受控组件和非受控组件的理解，以及应用场景？","desc":null,"options":null,"explanation":"## 一、受控组件\n\n受控组件，简单来讲，就是受我们控制的组件，组件的状态全程响应外部数据\n\n举个简单的例子：\n\n```jsx\nclass TestComponent extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = { username: 'lindaidai' };\n  }\n  render () {\n    return <input name=\"username\" value={this.state.username} />\n  }\n}\n```\n\n这时候当我们在输入框输入内容的时候，会发现输入的内容并无法显示出来，也就是`input`标签是一个可读的状态\n\n这是因为`value`被`this.state.username`所控制住。当用户输入新的内容时，`this.state.username`并不会自动更新，这样的话`input`内的内容也就不会变了\n\n如果想要解除被控制，可以为`input`标签设置`onChange`事件，输入的时候触发事件函数，在函数内部实现`state`的更新，从而导致`input`框的内容页发现改变\n\n因此，受控组件我们一般需要初始状态和一个状态更新事件函数\n\n\n\n## 二、非受控组件\n\n非受控组件，简单来讲，就是不受我们控制的组件\n\n一般情况是在初始化的时候接受外部数据，然后自己在内部存储其自身状态\n\n当需要时，可以使用` ref ` 查询 `DOM `并查找其当前值，如下：\n\n```jsx\nimport React, { Component } from 'react';\n\nexport class UnControll extends Component {\n  constructor (props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n  handleSubmit = (e) => {\n    console.log('我们可以获得input内的值为', this.inputRef.current.value);\n    e.preventDefault();\n  }\n  render () {\n    return (\n      <form onSubmit={e => this.handleSubmit(e)}>\n        <input defaultValue=\"lindaidai\" ref={this.inputRef} />\n        <input type=\"submit\" value=\"提交\" />\n      </form>\n    )\n  }\n}\n```\n\n关于`refs`的详情使用可以参考[之前文章](https://mp.weixin.qq.com/s/ZBKWcslVBi0IKQgz7lYzbA)\n\n\n\n## 三、应用场景\n\n大部分时候推荐使用受控组件来实现表单，因为在受控组件中，表单数据由`React`组件负责处理\n\n如果选择非受控组件的话，控制能力较弱，表单数据就由`DOM`本身处理，但更加方便快捷，代码量少\n\n针对两者的区别，其应用场景如下图所示：\n\n ![](https://static.vue-js.com/f28aed20-df2f-11eb-ab90-d9ae814b240d.png)\n\n","level":1.5,"tagId":13}
{"_id":{"$oid":"61aa387239bf10000191ca61"},"exerciseKey":"b8242a9b-8f0f-4c56-ab8f-cc092b3f1db3","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nfunction checkAge(data) {\n  if (data === { age: 18 }) {\n    console.log('You are an adult!')\n  } else if (data == { age: 18 }) {\n    console.log('You are still an adult.')\n  } else {\n    console.log(`Hmm.. You don't have an age I guess`)\n  }\n}\n\ncheckAge({ age: 18 })\n```","options":"{\"options\":[\"You are an adult!\",\"You are still an adult.\",\"Hmm.. You don't have an age I guess\"],\"isMulti\":false,\"answer\":[2]}","explanation":"在测试相等性时，基本类型通过它们的值（value）进行比较，而对象通过它们的引用（reference）进行比较。JavaScript 检查对象是否具有对内存中相同位置的引用。\n题目中我们正在比较的两个对象不是同一个引用：作为参数传递的对象引用的内存位置，与用于判断相等的对象所引用的内存位置并不同。\n这也是 `{ age: 18 } === { age: 18 }` 和 `{ age: 18 } == { age: 18 }` 都返回 `false` 的原因。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38738e97d900018087d0"},"exerciseKey":"b8ef6782-9f7e-4bb2-824f-3e0259322dae","category":"QA","renderType":"md","title":"说说webpack中常见的Plugin？解决了什么问题？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/8d3978a0-a7c2-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n`Plugin`（Plug-in）是一种计算机应用程序，它和主应用程序互相交互，以提供特定的功能\n\n是一种遵循一定规范的应用程序接口编写出来的程序，只能运行在程序规定的系统下，因为其需要调用原纯净系统提供的函数库或者数据\n\n`webpack`中的`plugin`也是如此，`plugin`赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在 `webpack` 的不同阶段（钩子 / 生命周期），贯穿了`webpack`整个编译周期\n\n![](https://static.vue-js.com/9a04ec40-a7c2-11eb-ab90-d9ae814b240d.png)\n\n目的在于解决`loader` 无法实现的其他事\n\n### 配置方式\n\n这里讲述文件的配置方式，一般情况，通过配置文件导出对象中`plugins`属性传入`new`实例对象。如下所示：\n\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst webpack = require('webpack'); // 访问内置的插件\nmodule.exports = {\n  ...\n  plugins: [\n    new webpack.ProgressPlugin(),\n    new HtmlWebpackPlugin({ template: './src/index.html' }),\n  ],\n};\n```\n\n\n\n## 二、特性\n\n其本质是一个具有`apply`方法`javascript`对象\n\n`apply` 方法会被 `webpack compiler `调用，并且在整个编译生命周期都可以访问 `compiler `对象\n\n```javascript\nconst pluginName = 'ConsoleLogOnBuildWebpackPlugin';\n\nclass ConsoleLogOnBuildWebpackPlugin {\n  apply(compiler) {\n    compiler.hooks.run.tap(pluginName, (compilation) => {\n      console.log('webpack 构建过程开始！');\n    });\n  }\n}\n\nmodule.exports = ConsoleLogOnBuildWebpackPlugin;\n```\n\n`compiler hook` 的 `tap `方法的第一个参数，应是驼峰式命名的插件名称\n\n关于整个编译生命周期钩子，有如下：\n\n- entry-option ：初始化 option\n- run\n- compile： 真正开始的编译，在创建 compilation 对象之前\n- compilation ：生成好了 compilation 对象\n- make 从 entry 开始递归分析依赖，准备对每个模块进行 build\n- after-compile： 编译 build 过程结束\n- emit ：在将内存中 assets 内容写到磁盘文件夹之前\n- after-emit ：在将内存中 assets 内容写到磁盘文件夹之后\n- done： 完成所有的编译过程\n- failed： 编译失败的时候\n\n\n\n## 三、常见的Plugin\n\n常见的`plugin`有如图所示：\n\n![](https://static.vue-js.com/bd749400-a7c2-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n下面介绍几个常用的插件用法：\n\n### HtmlWebpackPlugin\n\n在打包结束后，⾃动生成⼀个 `html` ⽂文件，并把打包生成的` js` 模块引⼊到该 `html` 中\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n\n```js\n// webpack.config.js\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n ...\n  plugins: [\n     new HtmlWebpackPlugin({\n       title: \"My App\",\n       filename: \"app.html\",\n       template: \"./src/html/index.html\"\n     }) \n  ]\n};\n```\n\n```html\n<!--./src/html/index.html-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title><%=htmlWebpackPlugin.options.title%></title>\n</head>\n<body>\n    <h1>html-webpack-plugin</h1>\n</body>\n</html>\n```\n\n在 `html` 模板中，可以通过 `<%=htmlWebpackPlugin.options.XXX%>` 的方式获取配置的值\n\n更多的配置可以自寻查找\n\n\n\n### clean-webpack-plugin\n\n删除（清理）构建目录\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n```js\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nmodule.exports = {\n ...\n  plugins: [\n    ...,\n    new CleanWebpackPlugin(),\n    ...\n  ]\n}\n```\n\n\n\n### mini-css-extract-plugin\n\n提取 `CSS` 到一个单独的文件中\n\n```bash\nnpm install --save-dev mini-css-extract-plugin\n```\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');module.exports = { ...,  module: {   rules: [    {     test: /\\.s[ac]ss$/,     use: [      {       loader: MiniCssExtractPlugin.loader     },          'css-loader',          'sass-loader'        ]   }   ] },  plugins: [    ...,    new MiniCssExtractPlugin({     filename: '[name].css'    }),    ...  ]}\n```\n\n\n\n### DefinePlugin\n\n允许在编译时创建配置的全局对象，是一个`webpack`内置的插件，不需要安装\n\n```js\nconst { DefinePlugun } = require('webpack')module.exports = { ...    plugins:[        new DefinePlugin({            BASE_URL:'\"./\"'        })    ]}\n```\n\n这时候编译`template`模块的时候，就能通过下述形式获取全局对象\n\n```html\n<link rel=\"icon\" href=\"<%= BASE_URL%>favicon.ico>\"\n```\n\n\n\n\n\n### copy-webpack-plugin\n\n复制文件或目录到执行区域，如`vue`的打包过程中，如果我们将一些文件放到`public`的目录下，那么这个目录会被复制到`dist`文件夹中\n\n```cmd\nnpm install copy-webpack-plugin -D\n```\n\n```js\nnew CopyWebpackPlugin({    parrerns:[        {            from:\"public\",            globOptions:{                ignore:[                    '**/index.html'                ]            }        }    ]})\n```\n\n复制的规则在`patterns`属性中设置：\n\n- from：设置从哪一个源中开始复制\n- to：复制到的位置，可以省略，会默认复制到打包的目录下\n\n- globOptions：设置一些额外的选项，其中可以编写需要忽略的文件\n\n","level":1.5,"tagId":28}
{"_id":{"$oid":"61aa38733976eb00014e45bf"},"exerciseKey":"b96ba5f2-383d-4a6a-9be9-be18b2a20a6e","category":"QA","renderType":"md","title":"说说对 Node 中的 Stream 的理解？应用场景？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/a5df3c60-c76f-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、是什么\n\n流（Stream），是一个数据传输手段，是端到端信息交换的一种方式，而且是有顺序的,是逐块读取数据、处理内容，用于顺序读取输入或写入输出\n\n`Node.js`中很多对象都实现了流，总之它是会冒数据（以 `Buffer` 为单位）\n\n它的独特之处在于，它不像传统的程序那样一次将一个文件读入内存，而是逐块读取数据、处理其内容，而不是将其全部保存在内存中\n\n流可以分成三部分：`source`、`dest`、`pipe`\n\n在`source`和`dest`之间有一个连接的管道`pipe`,它的基本语法是`source.pipe(dest)`，`source`和`dest`就是通过pipe连接，让数据从`source`流向了`dest`，如下图所示：\n\n ![](https://static.vue-js.com/aec05670-c76f-11eb-ab90-d9ae814b240d.png)\n\n\n\n\n\n## 二、种类\n\n在`NodeJS`，几乎所有的地方都使用到了流的概念，分成四个种类：\n\n- 可写流：可写入数据的流。例如 fs.createWriteStream()  可以使用流将数据写入文件\n\n- 可读流： 可读取数据的流。例如fs.createReadStream() 可以从文件读取内容\n\n- 双工流： 既可读又可写的流。例如 net.Socket\n\n- 转换流： 可以在数据写入和读取时修改或转换数据的流。例如，在文件压缩操作中，可以向文件写入压缩数据，并从文件中读取解压数据\n\n\n在`NodeJS`中`HTTP`服务器模块中，`request` 是可读流，`response` 是可写流。还有`fs` 模块，能同时处理可读和可写文件流\n\n可读流和可写流都是单向的，比较容易理解，而另外两个是双向的\n\n### 双工流\n\n之前了解过`websocket`通信，是一个全双工通信，发送方和接受方都是各自独立的方法，发送和接收都没有任何关系\n\n如下图所示：\n\n ![](https://static.vue-js.com/b7ac6d00-c76f-11eb-ab90-d9ae814b240d.png)\n\n基本代码如下：\n\n```js\nconst { Duplex } = require('stream');\n\nconst myDuplex = new Duplex({\n  read(size) {\n    // ...\n  },\n  write(chunk, encoding, callback) {\n    // ...\n  }\n});\n```\n\n\n\n### 双工流\n\n双工流的演示图如下所示：\n\n ![](https://static.vue-js.com/c02883b0-c76f-11eb-ab90-d9ae814b240d.png)\n\n除了上述压缩包的例子，还比如一个 `babel`，把`es6`转换为，我们在左边写入 `es6`，从右边读取 `es5`\n\n基本代码如下所示：\n\n```js\nconst { Transform } = require('stream');\n\nconst myTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    // ...\n  }\n});\n```\n\n\n\n## 三、应用场景\n\n`stream`的应用场景主要就是处理`IO`操作，而`http`请求和文件操作都属于`IO`操作\n\n思想一下，如果一次`IO`操作过大，硬件的开销就过大，而将此次大的`IO`操作进行分段操作，让数据像水管一样流动，知道流动完成\n\n常见的场景有：\n\n- get请求返回文件给客户端\n- 文件操作\n- 一些打包工具的底层操作\n\n\n\n### get请求返回文件给客户端\n\n使用`stream`流返回文件，`res`也是一个`stream`对象，通过`pipe`管道将文件数据返回\n\n```js\nconst server = http.createServer(function (req, res) {\n    const method = req.method; // 获取请求方法\n    if (method === 'GET') { // get 请求\n        const fileName = path.resolve(__dirname, 'data.txt');\n        let stream = fs.createReadStream(fileName);\n        stream.pipe(res); // 将 res 作为 stream 的 dest\n    }\n});\nserver.listen(8000);\n```\n\n\n\n### 文件操作\n\n创建一个可读数据流`readStream`，一个可写数据流`writeStream`，通过`pipe`管道把数据流转过去\n\n```js\nconst fs = require('fs')\nconst path = require('path')\n\n// 两个文件名\nconst fileName1 = path.resolve(__dirname, 'data.txt')\nconst fileName2 = path.resolve(__dirname, 'data-bak.txt')\n// 读取文件的 stream 对象\nconst readStream = fs.createReadStream(fileName1)\n// 写入文件的 stream 对象\nconst writeStream = fs.createWriteStream(fileName2)\n// 通过 pipe执行拷贝，数据流转\nreadStream.pipe(writeStream)\n// 数据读取完成监听，即拷贝完成\nreadStream.on('end', function () {\n    console.log('拷贝完成')\n})\n\n```\n\n\n\n\n\n### 一些打包工具的底层操作\n\n目前一些比较火的前端打包构建工具，都是通过`node.js`编写的，打包和构建的过程肯定是文件频繁操作的过程，离不来`stream`，如`gulp`\n","level":2,"tagId":18}
{"_id":{"$oid":"61aa387334458700017f1d40"},"exerciseKey":"b97ddbf9-57fd-493f-888d-1ffb7981f10a","category":"QA","renderType":"html","title":" Http 缓存策略，有什么区别，分别解决了什么问题","desc":"<p style=\"text-align:start;text-indent:2em;\"></p>","options":null,"explanation":"<p style=\"text-align:start;text-indent:2em;\"><strong>1）浏览器缓存策略</strong></p><p style=\"text-align:start;text-indent:2em;\">浏览器每次发起请求时，先在本地缓存中查找结果以及缓存标识，根据缓存标识来判断是否使用本地缓存。如果缓存有效，则使<br/>用本地缓存；否则，则向服务器发起请求并携带缓存标识。根据是否需向服务器发起HTTP请求，将缓存过程划分为两个部分：<br/>强制缓存和协商缓存，强缓优先于协商缓存。</p><ul><li>强缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。</li><li>协商缓存，让客户端与服务器之间能实现缓存文件是否更新的验证、提升缓存的复用率，将缓存信息中的Etag和Last-Modified<br/>通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。</li></ul><p style=\"text-align:start;text-indent:2em;\">HTTP缓存都是从第二次请求开始的：</p><ul><li>第一次请求资源时，服务器返回资源，并在response header中回传资源的缓存策略；</li><li>第二次请求时，浏览器判断这些请求参数，击中强缓存就直接200，否则就把请求参数加到request header头中传给服务器，看是否击中协商缓存，击中则返回304，否则服务器会返回新的资源。这是缓存运作的一个整体流程图：</li></ul><p style=\"text-align:start;text-indent:2em;\"></p><p class=\"media-wrap image-wrap\"></p><div class=\"media-wrap image-wrap\"><img src=\"https://camo.githubusercontent.com/df822872ee2a8aef44c665f8fffd13c4cc4eb637bd8706ce4899e8eb72d2a431/687474703a2f2f696d672d7374617469632e796964656e6778756574616e672e636f6d2f77786170702f69737375652d696d672f7169642d382e706e67\"/></div><p></p><p></p><p style=\"text-align:start;text-indent:2em;\"><strong>2）强缓存</strong></p><ul><li>强缓存命中则直接读取浏览器本地的资源，在network中显示的是from memory或者from disk</li><li>控制强制缓存的字段有：Cache-Control（http1.1）和Expires（http1.0）</li><li>Cache-control是一个相对时间，用以表达自上次请求正确的资源之后的多少秒的时间段内缓存有效。</li><li>Expires是一个绝对时间。用以表达在这个时间点之前发起请求可以直接从浏览器中读取数据，而无需发起请求</li><li>Cache-Control的优先级比Expires的优先级高。前者的出现是为了解决Expires在浏览器时间被手动更改导致缓存判断错误的问题。<br/>如果同时存在则使用Cache-control。</li></ul><p style=\"text-align:start;text-indent:2em;\"><strong>3）强缓存-expires</strong></p><ul><li>该字段是服务器响应消息头字段，告诉浏览器在过期时间之前可以直接从浏览器缓存中存取数据。</li><li>Expires 是 HTTP 1.0 的字段，表示缓存到期时间，是一个绝对的时间 (当前时间+缓存时间)。在响应消息头中，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求。</li><li>由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效，重新请求该资源。此外，即使不考虑修改，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。</li><li>优势特点<br/></li><ul><li>1、HTTP 1.0 产物，可以在HTTP 1.0和1.1中使用，简单易用。</li><li>2、以时刻标识失效时间。</li></ul></ul><p></p><ul><li>劣势问题<br/></li><ul><li>1、时间是由服务器发送的(UTC)，如果服务器时间和客户端时间存在不一致，可能会出现问题。</li><li>2、存在版本问题，到期之前的修改客户端是不可知的。</li></ul></ul><p></p><p style=\"text-align:start;text-indent:2em;\"><strong>4）强缓存-cache-control</strong></p><ul><li>已知Expires的缺点之后，在HTTP/1.1中，增加了一个字段Cache-control，该字段表示资源缓存的最大有效时间，在该时间内，客户端不需要向服务器发送请求。</li><li>这两者的区别就是前者是绝对时间，而后者是相对时间。下面列举一些 <code>Cache-control</code> 字段常用的值：(完整的列表可以查看MDN)<br/></li><ul><li><code>max-age</code>：即最大有效时间。</li><li><code>must-revalidate</code>：如果超过了 <code>max-age</code> 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。</li><li><code>no-cache</code>：不使用强缓存，需要与服务器验证缓存是否新鲜。</li><li><code>no-store</code>: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强制和对比。</li><li><code>public</code>：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)</li><li><code>private</code>：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值。</li></ul></ul><p></p><ul><li><strong>Cache-control 的优先级高于 Expires</strong>，为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段都可以设置。</li><li>该字段可以在请求头或者响应头设置，可组合使用多种指令：<br/></li><ul><li><strong>可缓存性</strong>：</li><ul><li>public：浏览器和缓存服务器都可以缓存页面信息</li><li>private：default，代理服务器不可缓存，只能被单个用户缓存</li><li>no-cache：浏览器器和服务器都不应该缓存页面信息，但仍可缓存，只是在缓存前需要向服务器确认资源是否被更改。可配合private，<br/>过期时间设置为过去时间。</li><li>only-if-cache：客户端只接受已缓存的响应</li></ul></ul></ul><p></p><ul><ul><li><strong>到期</strong></li><ul><li>max-age=：缓存存储的最大周期，超过这个周期被认为过期。</li><li>s-maxage=：设置共享缓存，比如can。会覆盖max-age和expires。</li><li>max-stale[=]：客户端愿意接收一个已经过期的资源</li><li>min-fresh=：客户端希望在指定的时间内获取最新的响应</li><li>stale-while-revalidate=：客户端愿意接收陈旧的响应，并且在后台一部检查新的响应。时间代表客户端愿意接收陈旧响应<br/>的时间长度。</li><li>stale-if-error=：如新的检测失败，客户端则愿意接收陈旧的响应，时间代表等待时间。</li></ul></ul></ul><p></p><ul><ul><li><strong>重新验证和重新加载</strong></li><ul><li>must-revalidate：如页面过期，则去服务器进行获取。</li><li>proxy-revalidate：用于共享缓存。</li><li>immutable：响应正文不随时间改变。</li></ul></ul></ul><p></p><ul><ul><li><strong>其他</strong></li><ul><li>no-store：绝对禁止缓存</li><li>no-transform：不得对资源进行转换和转变。例如，不得对图像格式进行转换。</li></ul></ul></ul><p></p><p></p><ul><li>优势特点<br/></li><ul><li>1、HTTP 1.1 产物，以时间间隔标识失效时间，解决了Expires服务器和客户端相对时间的问题。</li><li>2、比Expires多了很多选项设置。</li></ul></ul><p></p><ul><li>劣势问题<br/></li><ul><li>1、存在版本问题，到期之前的修改客户端是不可知的。</li></ul></ul><p></p><p style=\"text-align:start;text-indent:2em;\"><strong>5）协商缓存</strong></p><ul><li>协商缓存的状态码由服务器决策返回200或者304</li><li>当浏览器的强缓存失效的时候或者请求头中设置了不走强缓存，并且在请求头中设置了If-Modified-Since 或者 If-None-Match 的时候，会将这两个属性值到服务端去验证是否命中协商缓存，如果命中了协商缓存，会返回 304 状态，加载浏览器缓存，并且响应头会设置 Last-Modified 或者 ETag 属性。</li><li>对比缓存在请求数上和没有缓存是一致的，但如果是 304 的话，返回的仅仅是一个状态码而已，并没有实际的文件内容，因此 在响应体体积上的节省是它的优化点。</li><li>协商缓存有 2 组字段(不是两个)，控制协商缓存的字段有：Last-Modified/If-Modified-since（http1.0）和Etag/If-None-match（http1.1）</li><li>Last-Modified/If-Modified-since表示的是服务器的资源最后一次修改的时间；Etag/If-None-match表示的是服务器资源的唯一标<br/>识，只要资源变化，Etag就会重新生成。</li><li>Etag/If-None-match的优先级比Last-Modified/If-Modified-since高。</li></ul><p style=\"text-align:start;text-indent:2em;\"><strong>6）协商缓存-协商缓存-Last-Modified/If-Modified-since</strong></p><ul><li>1.服务器通过 <code>Last-Modified</code> 字段告知客户端，资源最后一次被修改的时间，例如 <code>Last-Modified: Mon, 10 Nov 2018 09:10:11 GMT</code></li><li>2.浏览器将这个值和内容一起记录在缓存数据库中。</li><li>3.下一次请求相同资源时时，浏览器从自己的缓存中找出“不确定是否过期的”缓存。因此在请求头中将上次的 <code>Last-Modified</code> 的值写入到请求头的 <code>If-Modified-Since</code> 字段</li><li>4.服务器会将 <code>If-Modified-Since</code> 的值与 <code>Last-Modified</code> 字段进行对比。如果相等，则表示未修改，响应 304；反之，则表示修改了，响应 200 状态码，并返回数据。</li><li>优势特点</li><ul><li>1、不存在版本问题，每次请求都会去服务器进行校验。服务器对比最后修改时间如果相同则返回304，不同返回200以及资源内容。</li></ul></ul><p></p><ul><li>劣势问题</li><ul><li>2、只要资源修改，无论内容是否发生实质性的变化，都会将该资源返回客户端。例如周期性重写，这种情况下该资源包含的数据实际上一样的。</li><li>3、以时刻作为标识，无法识别一秒内进行多次修改的情况。 如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。</li><li>4、某些服务器不能精确的得到文件的最后修改时间。</li><li>5、如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。</li></ul></ul><p></p><p style=\"text-align:start;text-indent:2em;\"><strong>7）协商缓存-Etag/If-None-match</strong></p><ul><li>为了解决上述问题，出现了一组新的字段 <code>Etag</code> 和 <code>If-None-Match</code></li><li><code>Etag</code> 存储的是文件的特殊标识(一般都是 hash 生成的)，服务器存储着文件的 <code>Etag</code> 字段。之后的流程和 <code>Last-Modified</code> 一致，只是 <code>Last-Modified</code> 字段和它所表示的更新时间改变成了 <code>Etag</code> 字段和它所表示的文件 hash，把 <code>If-Modified-Since</code> 变成了 <code>If-None-Match</code>。服务器同样进行比较，命中返回 304, 不命中返回新资源和 200。</li><li>浏览器在发起请求时，服务器返回在Response header中返回请求资源的唯一标识。在下一次请求时，会将上一次返回的Etag值赋值给If-No-Matched并添加在Request Header中。服务器将浏览器传来的if-no-matched跟自己的本地的资源的ETag做对比，如果匹配，则返回304通知浏览器读取本地缓存，否则返回200和更新后的资源。</li><li><strong>Etag 的优先级高于 Last-Modified</strong>。</li><li>优势特点</li><ul><li>1、可以更加精确的判断资源是否被修改，可以识别一秒内多次修改的情况。</li><li>2、不存在版本问题，每次请求都回去服务器进行校验。</li></ul></ul><p></p><ul><li>劣势问题</li><ul><li>1、计算ETag值需要性能损耗。</li><li>2、分布式服务器存储的情况下，计算ETag的算法如果不一样，会导致浏览器从一台服务器上获得页面内容后到另外一台服务器上进行验证时现ETag不匹配的情况。</li></ul></ul><p></p>","level":2,"tagId":16}
{"_id":{"$oid":"61aa38730f30890001ab81b2"},"exerciseKey":"b9a0ceb2-84b5-4a79-8548-d043a97d0096","category":"QA","renderType":"md","title":"common.js和es6中模块引入的区别？","desc":null,"options":null,"explanation":"Common]S是一种模块规范，最初被应用于Nodejs，成为Nodejs 的模块规范。\n\n运行在浏览器端的JavaScript由于也缺少类似的规范，在ES6出来之前，前端也实现了一套相同的模块规范(例如: AMD)，用来对前端模块进行管理。\n\n自ES6起，引入了一套新的ES6 Module规范，在语言标准的层面上实现了模块功能，而且实现得相当简单，有望成为浏览器和服务器通用的模块解决方案。\n\n在使用上的差别主要有:\n\n* CommonJS模块输出的是一个值的拷贝，ES6模块输出的是值的引用CommonJS模块是运行时加载，ES6模块是编译时输出接口。\n* CommonJs是单个值导出，ES6 Module可以导出多个\n* CommonJs是动态语法可以写在判断里，ES6 Module静态语法只能写在顶层CommonJs的this是当前模块，ES6 Module的this是undefined","level":2,"tagId":24}
{"_id":{"$oid":"61aa3873291c0100017ee2a5"},"exerciseKey":"b9bd9552-5748-45b1-88a8-f36e45f6261f","category":"QA","renderType":"md","title":"什么是内存泄漏？什么原因会导致呢？","desc":null,"options":null,"explanation":"内存泄露的解释：程序中己动态分配的堆内存由于某种原因未释放或无法释放。\n\n* 根据JS的垃圾回收机制，当内存中引用的次数为0的时候内存才会被回收\n* 全局执行上下文中的对象被标记为不再使用才会被释放\n\n## 内存泄露的几种场景\n\n* 全局变量过多。**通常是变量未被定义或者胡乱引用了全局变量**\n```js\n// main.js\n// 场景1\nfunction a(){\n    b=10;\n}\na();\nb++;\n\n// 场景2\nsetTimeout(()=>{\n    console.log(b)\n},1000)\n```\n\n* 闭包。 未手动解决必包遗留的内存引用。**定义了闭包就要消除闭包带来的副作用**。\n\n```js\n\nfunction closuer (){\n    const b = 0;\n    return (c)=> b + c\n}\n\nconst render = closuer();\n\nrender();\nrender = null; // 手动设置为null，GC会自己去清除\n```\n\n* 事件监听未被移除\n```js\n\nfunction addEvent (){\n const node =  document.getElementById('warp');\n    node.addEventListener('touchmove',()=>{\n        console.log('In Move');\n    })\n}\n\nconst onTouchEnd = (){\n   const node =  document.getElementById('warp');\n   node.\n}\n\nuseEffect(()=>()=>{\n     const node =  document.getElementById('warp');\n     node.removeEventListener('touchmove');\n}) // 类似react 生命周期函数： componentWillUnmount\nrender(<div id='warp' onTouchEnd={onTouchEnd}>\n // code...\n</div>)\n```\n\n* 缓存。建议所有缓存都设置好过期时间。\n\n","level":3,"tagId":20}
{"_id":{"$oid":"61aa38733dd7f70001833002"},"exerciseKey":"b9df09ce-3064-4ac0-bb66-3eb522679a4b","category":"QA","renderType":"md","title":"实现一个方法，清除字符串前后的空格。","desc":null,"options":null,"explanation":"```js\nfunction trim(str) {\n    if (str & typeof str === \"string\") {\n        return str.replace(/(^s*)|(s*)$/g,\"\"); //去除前后空白符\n    }\n}\n```\n","level":2,"tagId":26}
{"_id":{"$oid":"61aa387379641200019174d7"},"exerciseKey":"ba6327df-ba59-4870-921c-36b8516c4451","category":"QA","renderType":"md","title":"DOCTYPE 标签有什么用？","desc":null,"options":null,"explanation":"DOCTYPE声明于文档最前面，告诉浏览器以何种方式来渲染页面。\n\nHTML5中的声明方式如下：\n```html\n<!DOCTYPE html>\n```\n\n","level":0.5,"tagId":12}
{"_id":{"$oid":"61aa3873d00c060001bf12c2"},"exerciseKey":"ba7ffa60-aa92-4e66-9b14-78520f4deeee","category":"QA","renderType":"md","title":"改造下面的代码，让它输出1，2，3，4，5","desc":"for(var i = 1; i <= 5; i ++){\n  setTimeout(function timer(){\n  \tconsole.log(i)\n  }, 0)\n}","options":null,"explanation":"解决方法：\n\n* 利用IIFE(立即执行函数表达式)当每次for循环时，把此时的i变量传递到定时器中\n\n```js\nfor(var i = 1;i <= 5;i++){\n  (function(j){\n    setTimeout(function timer(){\n    \tconsole.log(j)\n    }, 0)\n  })(i)\n}\n\n```\n\n* 给定时器传入第三个参数, 作为timer函数的第一个函数参数\n\n```js\nfor(var i=1;i<=5;i++){\n  setTimeout(function timer(j){\n  \tconsole.log(j)\n  }, 0, i)\n}\n```\n\n* 使用ES6中的let\n```js\nfor(let i = 1; i <= 5; i++){\n  setTimeout(function timer(){\n \t console.log(i)\n  },0)\n}\n\n```\nlet使JS发生革命性的变化，让JS有函数作用域变为了块级作用域，用let后作用域链不复存在。\n\n","level":2.5,"tagId":26}
{"_id":{"$oid":"61aa3873bdfab500012c852a"},"exerciseKey":"baac6d08-4161-4949-a058-e1c5696791e0","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nlet num = 10;\n\nconst increaseNumber = () => num++;\nconst increasePassedNumber = number => number++;\n\nconst num1 = increaseNumber();\nconst num2 = increasePassedNumber(num1);\n\nconsole.log(num1);\nconsole.log(num2);\n```","options":"{\"options\":[\"10, 10\",\"10, 11\",\"11, 11\",\"11, 12\"],\"isMulti\":false,\"answer\":[0]}","explanation":"一元操作符 `++` _先返回_ 操作值, _再累加_ 操作值。`num1`的值是`10`, 因为`increaseNumber`函数首先返回`num`的值，也就是`10`，随后再进行 `num`的累加。\n`num2`是`10`因为我们将 `num1`传入`increasePassedNumber`. `number`等于`10`（`num1`的值。同样道理，`++` _先返回_ 操作值, _再累加_ 操作值。） `number`是`10`，所以`num2`也是`10`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa3873bdfab500012c852c"},"exerciseKey":"bbcedbfa-a74f-411f-a309-01f7e590ee50","category":"QA","renderType":"md","title":"说说ajax的原理，以及如何实现？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/a35a2950-7b2a-11eb-ab90-d9ae814b240d.png)\r\n\r\n## 一、是什么\r\n\r\n`AJAX `全称(Async Javascript and XML)\r\n\r\n即异步的` JavaScript` 和` XML`，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页\r\n\r\n`Ajax`的原理简单来说通过`XmlHttpRequest`对象来向服务器发异步请求，从服务器获得数据，然后用`JavaScript`来操作`DOM`而更新页面\r\n\r\n流程图如下：\r\n\r\n ![](https://static.vue-js.com/af42de10-7b2a-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n下面举个例子：\r\n\r\n领导想找小李汇报一下工作，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作\r\n\r\n`Ajax`请求数据流程与“领导想找小李汇报一下工作”类似，上述秘书就相当于`XMLHttpRequest`对象，领导相当于浏览器，响应数据相当于小李\r\n\r\n浏览器可以发送`HTTP`请求后，接着做其他事情，等收到`XHR`返回来的数据再进行操作\r\n\r\n\r\n\r\n## 二、实现过程\r\n\r\n实现 `Ajax `异步交互需要服务器逻辑进行配合，需要完成以下步骤：\r\n\r\n- 创建 `Ajax `的核心对象 `XMLHttpRequest `对象\r\n\r\n- 通过 `XMLHttpRequest` 对象的 `open()` 方法与服务端建立连接\r\n\r\n- 构建请求所需的数据内容，并通过` XMLHttpRequest` 对象的 `send()` 方法发送给服务器端\r\n\r\n- 通过 `XMLHttpRequest` 对象提供的 `onreadystatechange` 事件监听服务器端你的通信状态\r\n\r\n- 接受并处理服务端向客户端响应的数据结果\r\n\r\n- 将处理结果更新到 `HTML `页面中\r\n\r\n\r\n\r\n### 创建XMLHttpRequest对象\r\n\r\n通过`XMLHttpRequest()` 构造函数用于初始化一个 `XMLHttpRequest` 实例对象\r\n\r\n```js\r\nconst xhr = new XMLHttpRequest();\r\n```\r\n\r\n\r\n\r\n### 与服务器建立连接\r\n\r\n通过 `XMLHttpRequest` 对象的 `open()` 方法与服务器建立连接\r\n\r\n```js\r\nxhr.open(method, url, [async][, user][, password])\r\n```\r\n\r\n参数说明：\r\n\r\n- `method`：表示当前的请求方式，常见的有`GET`、`POST`\r\n\r\n- `url`：服务端地址\r\n\r\n- `async`：布尔值，表示是否异步执行操作，默认为`true`\r\n\r\n-  `user`: 可选的用户名用于认证用途；默认为`null\r\n\r\n\r\n- `password`: 可选的密码用于认证用途，默认为`null\r\n\r\n\r\n\r\n### 给服务端发送数据\r\n\r\n通过 `XMLHttpRequest` 对象的 `send()` 方法，将客户端页面的数据发送给服务端\r\n\r\n```js\r\nxhr.send([body])\r\n```\r\n\r\n`body`: 在 `XHR` 请求中要发送的数据体，如果不传递数据则为 `null`\r\n\r\n如果使用`GET`请求发送数据的时候，需要注意如下：\r\n\r\n- 将请求数据添加到`open()`方法中的`url`地址中\r\n- 发送请求数据中的`send()`方法中参数设置为`null`\r\n\r\n\r\n\r\n### 绑定onreadystatechange事件\r\n\r\n`onreadystatechange` 事件用于监听服务器端的通信状态，主要监听的属性为`XMLHttpRequest.readyState` ,\r\n\r\n关于`XMLHttpRequest.readyState`属性有五个状态，如下图显示\r\n\r\n![](https://static.vue-js.com/9782fc90-7b31-11eb-ab90-d9ae814b240d.png)\r\n\r\n只要 `readyState `属性值一变化，就会触发一次 `readystatechange` 事件\r\n\r\n`XMLHttpRequest.responseText`属性用于接收服务器端的响应结果\r\n\r\n举个例子：\r\n\r\n```js\r\nconst request = new XMLHttpRequest()\r\nrequest.onreadystatechange = function(e){\r\n    if(request.readyState === 4){ // 整个请求过程完毕\r\n        if(request.status >= 200 && request.status <= 300){\r\n            console.log(request.responseText) // 服务端返回的结果\r\n        }else if(request.status >=400){\r\n            console.log(\"错误信息：\" + request.status)\r\n        }\r\n    }\r\n}\r\nrequest.open('POST','http://xxxx')\r\nrequest.send()\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 三、封装\r\n\r\n通过上面对`XMLHttpRequest `对象的了解，下面来封装一个简单的`ajax`请求\r\n\r\n```js\r\n//封装一个ajax请求\r\nfunction ajax(options) {\r\n    //创建XMLHttpRequest对象\r\n    const xhr = new XMLHttpRequest()\r\n\r\n\r\n    //初始化参数的内容\r\n    options = options || {}\r\n    options.type = (options.type || 'GET').toUpperCase()\r\n    options.dataType = options.dataType || 'json'\r\n    const params = options.data\r\n\r\n    //发送请求\r\n    if (options.type === 'GET') {\r\n        xhr.open('GET', options.url + '?' + params, true)\r\n        xhr.send(null)\r\n    } else if (options.type === 'POST') {\r\n        xhr.open('POST', options.url, true)\r\n        xhr.send(params)\r\n\r\n    //接收请求\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 4) {\r\n            let status = xhr.status\r\n            if (status >= 200 && status < 300) {\r\n                options.success && options.success(xhr.responseText, xhr.responseXML)\r\n            } else {\r\n                options.fail && options.fail(status)\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n使用方式如下\r\n\r\n```js\r\najax({\r\n    type: 'post',\r\n    dataType: 'json',\r\n    data: {},\r\n    url: 'https://xxxx',\r\n    success: function(text,xml){//请求成功后的回调函数\r\n        console.log(text)\r\n    },\r\n    fail: function(status){////请求失败后的回调函数\r\n        console.log(status)\r\n    }\r\n})\r\n```","level":2.5,"tagId":26}
{"_id":{"$oid":"61aa3874d00c060001bf12c4"},"exerciseKey":"bc224611-840e-4ed9-a922-67708c085da3","category":"QA","renderType":"md","title":"说说对中间件概念的理解，如何封装 node 中间件？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/614ae480-cce4-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n中间件（Middleware）是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的\n\n在`NodeJS`中，中间件主要是指封装`http`请求细节处理的方法\n\n例如在`express`、`koa`等`web`框架中，中间件的本质为一个回调函数，参数包含请求对象、响应对象和执行下一个中间件的函数\n\n ![](https://static.vue-js.com/6a6ed3f0-cce4-11eb-85f6-6fac77c0c9b3.png)\n\n在这些中间件函数中，我们可以执行业务逻辑代码，修改请求和响应对象、返回响应数据等操作\n\n\n\n## 二、封装\n\n`koa`是基于`NodeJS`当前比较流行的`web`框架，本身支持的功能并不多，功能都可以通过中间件拓展实现。通过添加不同的中间件，实现不同的需求，从而构建一个 `Koa` 应用\n\n`Koa` 中间件采用的是洋葱圈模型，每次执行下一个中间件传入两个参数：\n\n- ctx ：封装了request 和  response 的变量\n- next ：进入下一个要执行的中间件的函数\n\n ![](https://static.vue-js.com/7507b020-cce4-11eb-ab90-d9ae814b240d.png)\n\n\n\n下面就针对`koa`进行中间件的封装：\n\n`Koa `的中间件就是函数，可以是` async` 函数，或是普通函数\n\n```js\n// async 函数\napp.use(async (ctx, next) => {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);\n});\n\n// 普通函数\napp.use((ctx, next) => {\n  const start = Date.now();\n  return next().then(() => {\n    const ms = Date.now() - start;\n    console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);\n  });\n});\n```\n\n下面则通过中间件封装`http`请求过程中几个常用的功能：\n\n### token校验\n\n```js\nmodule.exports = (options) => async (ctx, next) {\n  try {\n    // 获取 token\n    const token = ctx.header.authorization\n    if (token) {\n      try {\n          // verify 函数验证 token，并获取用户相关信息\n          await verify(token)\n      } catch (err) {\n        console.log(err)\n      }\n    }\n    // 进入下一个中间件\n    await next()\n  } catch (err) {\n    console.log(err)\n  }\n}\n```\n\n### 日志模块\n\n```js\nconst fs = require('fs')\nmodule.exports = (options) => async (ctx, next) => {\n  const startTime = Date.now()\n  const requestTime = new Date()\n  await next()\n  const ms = Date.now() - startTime;\n  let logout = `${ctx.request.ip} -- ${requestTime} -- ${ctx.method} -- ${ctx.url} -- ${ms}ms`;\n  // 输出日志文件\n  fs.appendFileSync('./log.txt', logout + '\\n')\n}\n```\n\n`Koa`存在很多第三方的中间件，如`koa-bodyparser`、`koa-static`等\n\n下面再来看看它们的大体的简单实现：\n\n### koa-bodyparser\n\n`koa-bodyparser` 中间件是将我们的 `post` 请求和表单提交的查询字符串转换成对象，并挂在 `ctx.request.body` 上，方便我们在其他中间件或接口处取值\n\n```js\n// 文件：my-koa-bodyparser.js\nconst querystring = require(\"querystring\");\n\nmodule.exports = function bodyParser() {\n    return async (ctx, next) => {\n        await new Promise((resolve, reject) => {\n            // 存储数据的数组\n            let dataArr = [];\n\n            // 接收数据\n            ctx.req.on(\"data\", data => dataArr.push(data));\n\n            // 整合数据并使用 Promise 成功\n            ctx.req.on(\"end\", () => {\n                // 获取请求数据的类型 json 或表单\n                let contentType = ctx.get(\"Content-Type\");\n\n                // 获取数据 Buffer 格式\n                let data = Buffer.concat(dataArr).toString();\n\n                if (contentType === \"application/x-www-form-urlencoded\") {\n                    // 如果是表单提交，则将查询字符串转换成对象赋值给 ctx.request.body\n                    ctx.request.body = querystring.parse(data);\n                } else if (contentType === \"applaction/json\") {\n                    // 如果是 json，则将字符串格式的对象转换成对象赋值给 ctx.request.body\n                    ctx.request.body = JSON.parse(data);\n                }\n\n                // 执行成功的回调\n                resolve();\n            });\n        });\n\n        // 继续向下执行\n        await next();\n    };\n};\n```\n\n\n\n### koa-static\n\n `koa-static` 中间件的作用是在服务器接到请求时，帮我们处理静态文件\n\n```js\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst mime = require(\"mime\");\nconst { promisify } = require(\"util\");\n\n// 将 stat 和 access 转换成 Promise\nconst stat = promisify(fs.stat);\nconst access = promisify(fs.access)\n\nmodule.exports = function (dir) {\n    return async (ctx, next) => {\n        // 将访问的路由处理成绝对路径，这里要使用 join 因为有可能是 /\n        let realPath = path.join(dir, ctx.path);\n\n        try {\n            // 获取 stat 对象\n            let statObj = await stat(realPath);\n\n            // 如果是文件，则设置文件类型并直接响应内容，否则当作文件夹寻找 index.html\n            if (statObj.isFile()) {\n                ctx.set(\"Content-Type\", `${mime.getType()};charset=utf8`);\n                ctx.body = fs.createReadStream(realPath);\n            } else {\n                let filename = path.join(realPath, \"index.html\");\n\n                // 如果不存在该文件则执行 catch 中的 next 交给其他中间件处理\n                await access(filename);\n\n                // 存在设置文件类型并响应内容\n                ctx.set(\"Content-Type\", \"text/html;charset=utf8\");\n                ctx.body = fs.createReadStream(filename);\n            }\n        } catch (e) {\n            await next();\n        }\n    }\n}\n```\n\n\n\n\n\n## 三、总结\n\n在实现中间件时候，单个中间件应该足够简单，职责单一，中间件的代码编写应该高效，必要的时候通过缓存重复获取数据\n\n`koa`本身比较简洁，但是通过中间件的机制能够实现各种所需要的功能，使得`web`应用具备良好的可拓展性和组合性\n\n通过将公共逻辑的处理编写在中间件中，可以不用在每一个接口回调中做相同的代码编写，减少了冗杂代码，过程就如装饰者模式\n","level":3,"tagId":18}
{"_id":{"$oid":"61aa3874ff0573000165b359"},"exerciseKey":"bc2dd708-c6eb-499f-9139-e2fcfa9255ef","category":"QA","renderType":"md","title":"Typescript中泛型是什么？","desc":null,"options":null,"explanation":"TypeScript Generics是提供创建可重用组件的方法的工具。 它能够创建可以使用多种数据类型而不是单一数据类型的组件。 而且，它在不影响性能或生产率的情况下提供了类型安全性。 泛型允许我们创建泛型类，泛型函数，泛型方法和泛型接口。\n\n在泛型中，类型参数写在左括号（<）和右括号（>）之间，这使它成为强类型集合。 它使用一种特殊的类型变量<T>来表示类型。\n```\nfunction identity<T>(arg: T): T {\n    return arg;\n}\nlet output1 = identity<string>(\"edureka\");\nlet output2 = identity<number>( 117 );\nconsole.log(output1);\nconsole.log(output2);\n```","level":2.5,"tagId":19}
{"_id":{"$oid":"61aa3874cd02c30001dd22fd"},"exerciseKey":"bc7a4856-3f5e-4b7d-8380-bae505e9ee35","category":"QA","renderType":"html","title":"DNS协议介绍","desc":null,"options":null,"explanation":"<h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-54\">1. DNS 协议的概念</h3><p style=\"text-align:left;text-indent:2em;\"><strong>概念</strong>： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</p><p style=\"text-align:left;text-indent:2em;\"><strong>作用</strong>： 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的IP 地址。</p><p></p><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-55\">2. DNS同时使用TCP和UDP协议</h3><p></p><p style=\"text-align:left;text-indent:2em;\"><strong>DNS占用53号端口，同时使用TCP和UDP协议。</strong> </p><p>（1）在区域传输的时候使用TCP协议</p><ul><li>辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</li><li>TCP是一种可靠连接，保证了数据的准确性。</li></ul><p style=\"text-align:left;text-indent:2em;\">（2）在域名解析的时候使用UDP协议</p><ul><li>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</li></ul><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-56\">3. DNS完整的查询过程</h3><p></p><p style=\"text-align:left;text-indent:2em;\">DNS服务器解析域名的过程：</p><ul><li>首先会在<strong>浏览器的缓存</strong>中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步</li><li>将请求发送给<strong>本地DNS服务器</strong>，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</li><li>本地DNS服务器向<strong>根域名服务器</strong>发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li><li>本地DNS服务器向<strong>顶级域名服务器</strong>发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li><li>本地DNS服务器向<strong>权威域名服务器</strong>发送请求，域名服务器返回对应的结果</li><li>本地DNS服务器将返回结果保存在缓存中，便于下次使用</li><li>本地DNS服务器将返回结果返回给浏览器</li></ul><p style=\"text-align:left;text-indent:2em;\">比如我们如果想要查询 <u><a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">www.baidu.com</a></u> 的 IP 地址，我们首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地DNS服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。</p><p></p><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-57\">4. 迭代查询与递归查询</h3><p style=\"text-align:left;text-indent:2em;\">实际上，DNS解析是一个包含迭代查询和递归查询的过程。</p><ul><li><strong>递归查询</strong>指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归 查询，用户只需要发出一次查询请求。</li><li><strong>迭代查询</strong>指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，用户需要发出 多次的查询请求。</li></ul><p style=\"text-align:left;text-indent:2em;\">一般我们向本地 DNS 服务器发送请求的方式就是递归查询，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我 们最终的请求结果。而本地 DNS 服务器向其他域名服务器请求的过程是迭代查询的过程，因为每一次域名服务器只返回单次 查询的结果，下一级的查询由本地 DNS 服务器自己进行。</p><p></p><h3 style=\"text-align:left;text-indent:2em;\" data-id=\"heading-58\">5. DNS 记录和报文</h3><p style=\"text-align:left;text-indent:2em;\">DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为</p><pre class=\" language-http\"><code>（Name，Value，Type，TTL）</code></pre><p style=\"text-align:left;text-indent:2em;\">其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。</p><p style=\"text-align:left;text-indent:2em;\">常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同。</p><ol><li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li><li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li><li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li><li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li></ol><p></p>","level":3,"tagId":16}
{"_id":{"$oid":"61aa38743d5f3a0001af5673"},"exerciseKey":"bc832a32-bf3a-4ee0-b980-89332d68596c","category":"QA","renderType":"md","title":"在react中怎么实现组件间的过渡动画？","desc":null,"options":null,"explanation":"## 一、是什么\n\n在日常开发中，页面切换时的转场动画是比较基础的一个场景\n\n当一个组件在显示与消失过程中存在过渡动画，可以很好的增加用户的体验\n\n在`react`中实现过渡动画效果会有很多种选择，如`react-transition-group`，`react-motion`，`Animated`，以及原生的`CSS`都能完成切换动画\n\n\n## 二、如何实现\n\n在`react`中，`react-transition-group`是一种很好的解决方案，其为元素添加`enter`，`enter-active`，`exit`，`exit-active`这一系列勾子\n\n可以帮助我们方便的实现组件的入场和离场动画\n\n其主要提供了三个主要的组件：\n\n- CSSTransition：在前端开发中，结合 CSS 来完成过渡动画效果\n- SwitchTransition：两个组件显示和隐藏切换时，使用该组件\n- TransitionGroup：将多个动画组件包裹在其中，一般用于列表中元素的动画\n\n### CSSTransition\n\n其实现动画的原理在于，当`CSSTransition`的`in`属性置为`true`时，`CSSTransition`首先会给其子组件加上`xxx-enter`、`xxx-enter-active`的`class`执行动画\n\n当动画执行结束后，会移除两个`class`，并且添加`-enter-done`的`class`\n\n所以可以利用这一点，通过`css`的`transition`属性，让元素在两个状态之间平滑过渡，从而得到相应的动画效果\n\n当`in`属性置为`false`时，`CSSTransition`会给子组件加上`xxx-exit`和`xxx-exit-active`的`class`，然后开始执行动画，当动画结束后，移除两个`class`，然后添加`-enter-done`的`class`\n\n如下例子：\n\n```jsx\nexport default class App2 extends React.PureComponent {\n\n  state = {show: true};\n\n  onToggle = () => this.setState({show: !this.state.show});\n\n  render() {\n    const {show} = this.state;\n    return (\n      <div className={'container'}>\n        <div className={'square-wrapper'}>\n          <CSSTransition\n            in={show}\n            timeout={500}\n            classNames={'fade'}\n            unmountOnExit={true}\n          >\n            <div className={'square'} />\n          </CSSTransition>\n        </div>\n        <Button onClick={this.onToggle}>toggle</Button>\n      </div>\n    );\n  }\n}\n```\n\n对应`css`样式如下：\n\n```css\n.fade-enter {\n  opacity: 0;\n  transform: translateX(100%);\n}\n\n.fade-enter-active {\n  opacity: 1;\n  transform: translateX(0);\n  transition: all 500ms;\n}\n\n.fade-exit {\n  opacity: 1;\n  transform: translateX(0);\n}\n\n.fade-exit-active {\n  opacity: 0;\n  transform: translateX(-100%);\n  transition: all 500ms;\n}\n```\n\n\n\n### SwitchTransition\n\n`SwitchTransition`可以完成两个组件之间切换的炫酷动画\n\n比如有一个按钮需要在`on`和`off`之间切换，我们希望看到`on`先从左侧退出，`off`再从右侧进入\n\n`SwitchTransition`中主要有一个属性`mode`，对应两个值：\n\n- in-out：表示新组件先进入，旧组件再移除；\n- out-in：表示就组件先移除，新组建再进入\n\n`SwitchTransition`组件里面要有`CSSTransition`，不能直接包裹你想要切换的组件\n\n里面的`CSSTransition`组件不再像以前那样接受`in`属性来判断元素是何种状态，取而代之的是`key`属性\n\n下面给出一个按钮入场和出场的示例，如下：\n\n```jsx\nimport { SwitchTransition, CSSTransition } from \"react-transition-group\";\n\nexport default class SwitchAnimation extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOn: true\n    }\n  }\n\n  render() {\n    const {isOn} = this.state;\n\n    return (\n      <SwitchTransition mode=\"out-in\">\n        <CSSTransition classNames=\"btn\"\n                       timeout={500}\n                       key={isOn ? \"on\" : \"off\"}>\n          {\n          <button onClick={this.btnClick.bind(this)}>\n            {isOn ? \"on\": \"off\"}\n          </button>\n        }\n        </CSSTransition>\n      </SwitchTransition>\n    )\n  }\n\n  btnClick() {\n    this.setState({isOn: !this.state.isOn})\n  }\n}\n```\n\n`css`文件对应如下：\n\n```css\n.btn-enter {\n  transform: translate(100%, 0);\n  opacity: 0;\n}\n\n.btn-enter-active {\n  transform: translate(0, 0);\n  opacity: 1;\n  transition: all 500ms;\n}\n\n.btn-exit {\n  transform: translate(0, 0);\n  opacity: 1;\n}\n\n.btn-exit-active {\n  transform: translate(-100%, 0);\n  opacity: 0;\n  transition: all 500ms;\n}\n```\n\n\n\n### TransitionGroup\n\n当有一组动画的时候，就可将这些`CSSTransition`放入到一个`TransitionGroup`中来完成动画\n\n同样`CSSTransition`里面没有`in`属性，用到了`key`属性\n\n`TransitionGroup`在感知`children`发生变化的时候，先保存移除的节点，当动画结束后才真正移除\n\n其处理方式如下：\n\n- 插入的节点，先渲染dom，然后再做动画\n\n- 删除的节点，先做动画，然后再删除dom\n\n如下：\n\n```jsx\nimport React, { PureComponent } from 'react'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nexport default class GroupAnimation extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      friends: []\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <TransitionGroup>\n          {\n            this.state.friends.map((item, index) => {\n              return (\n                <CSSTransition classNames=\"friend\" timeout={300} key={index}>\n                  <div>{item}</div>\n                </CSSTransition>\n              )\n            })\n          }\n        </TransitionGroup>\n        <button onClick={e => this.addFriend()}>+friend</button>\n      </div>\n    )\n  }\n\n  addFriend() {\n    this.setState({\n      friends: [...this.state.friends, \"coderwhy\"]\n    })\n  }\n}\n```\n\n对应`css`如下：\n\n```css\n.friend-enter {\n    transform: translate(100%, 0);\n    opacity: 0;\n}\n\n.friend-enter-active {\n    transform: translate(0, 0);\n    opacity: 1;\n    transition: all 500ms;\n}\n\n.friend-exit {\n    transform: translate(0, 0);\n    opacity: 1;\n}\n\n.friend-exit-active {\n    transform: translate(-100%, 0);\n    opacity: 0;\n    transition: all 500ms;\n}\n```","level":2,"tagId":13}
{"_id":{"$oid":"61aa387485c5f70001543037"},"exerciseKey":"bddd2a34-2ccf-44ba-9cca-4213619b4e8e","category":"QA","renderType":"md","title":"get 请求是否限制了传参长度？","desc":null,"options":null,"explanation":"1. HTTP 协议未规定 GET 和 POST 的长度限制\n2. GET 的最大长度显示是因为浏览器和 web 服务器限制了 URI 的长度\n3. 不同的浏览器和 WEB 服务器，限制的最大长度不一样\n4. 要支持 IE，则最大长度为 2083byte，若只支持 Chrome，则最大长度 8182byte\n","level":1,"tagId":16}
{"_id":{"$oid":"61aa38740f30890001ab81ba"},"exerciseKey":"bde6a595-899a-453a-85c4-0b774b75fb9e","category":"QA","renderType":"md","title":"寻找两个正序数组的中位数","desc":"给定两个大小分别为 `m` 和 `n` 的正序（从小到大）数组 `nums1` 和 `nums2`。请你找出并返回这两个正序数组的**中位数**。\n\n* 示例 1：\n\n```\n输入：nums1 = [1,3], nums2 = [2]\n输出：2.00000\n解释：合并数组 = [1,2,3] ，中位数 2\n```\n\n* 示例 2：\n\n```\n输入：nums1 = [1,2], nums2 = [3,4]\n输出：2.50000\n解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5\n```\n\n* 示例 3：\n\n```\n输入：nums1 = [0,0], nums2 = [0,0]\n输出：0.00000\n```\n\n* 示例 4：\n\n```\n输入：nums1 = [], nums2 = [1]\n输出：1.00000\n```\n\n* 示例 5：\n\n```\n输入：nums1 = [2], nums2 = []\n输出：2.00000\n```\n \n* 提示：\n\n```\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106\n```\n","options":null,"explanation":"# 暴力解法\n\n## 思路\n\n合并两个代码后从小到大排序，数组总数是奇数取nums[n/2]，是偶数则取(nums[n/2] + nums[n/2-1]) / 2\n\n## 代码\n\n```js\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    let n = nums1.length + nums2.length;\n    let nums = nums1.concat(nums2).sort((a, b) => a - b);\n    \n    let result = n % 2 == 0\n        ? (nums[n/2] + nums[n/2-1]) / 2\n        : nums[Math.floor(n/2)];\n\n    return result;\n};\n```\n\n## 复杂度\n\n* 时间复杂度 O(NlogN)，N为两数组的长度和\n* 空间复杂度 O(N)\n\n# 双指针法\n\n## 思路\n\n因为两个数组有序，求中位数不需要把两个数组合并\n\n当合并后的数组总长度len为奇数时，只要知道索引为len/2位置上的数就行了，如果数偶数，只要知道索引为len/2 - 1和len/2上的数就行，所以不管是奇数还是偶数只要遍历len/2次即可，用两个值来存遍历过程中len/2-1和len/2上的数即可\n\n两个指针point1和point2分别指向nums1和nums2，当nums1[point1] < nums2[point2]，则point1指针移动，否则point2指针移动\n\n## 代码\n\n```js\n/**\n * \n * \n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    let n1 = nums1.length;\n    let n2 = nums2.length;\n\n    // 两个数组总长度\n    let len = n1 + n2;\n\n    // 保存当前移动的指针的值(在nums1或nums2移动)，和上一个值\n    let preValue = -1;\n    let curValue = -1;\n\n    //  两个指针分别在nums1和nums2上移动\n    let point1 = 0;\n    let point2 = 0;\n\n    // 需要遍历len/2次，当len是奇数时，最后取curValue的值，是偶数时，最后取(preValue + curValue)/2的值\n    for (let i = 0; i <= Math.floor(len/2); i++) {\n        preValue = curValue;\n        // 需要在nums1上移动point1指针\n        if (point1 < n1 && (point2 >= n2 || nums1[point1] < nums2[point2])) {\n            curValue = nums1[point1];\n            point1++;\n        } else {\n            curValue = nums2[point2];\n            point2++;\n        }\n    }\n    \n    return len % 2 === 0 \n        ? (preValue + curValue) / 2\n        : curValue\n};\n```\n\n## 复杂度\n\n* 时间复杂度O(n+m)，n为nums1的长度，m为nums2的长度\n* 空间复杂度O(1)\n\n# 二分查找\n\n## 思路\n\n### 对于中位数的简单分析\n\n如果两个数组长度和为奇数，那么最终这个中位数是由一位数确定的。\n\n如果两个数组长度和为偶数，那么最终这个中位数是由两位数取平均值确定的。\n\n### 对两个数组的简单分析：\n\n两个数组应该有一个长一点，另一个点一点(等长也不影响)。\n\n中位数可能让两个数组都分成两部分：一部分小于中位数，一部分大于中位数。但两个部分合起来总数量应该一致。\n\n### 对两数组和中位数位置分析：\n\n我们知道两数组虽然可能等长(不影响)，但正常情况应该是一个长(m)一个短(n)。长短数组分别对应的坐标m1和n1和中位数坐标有什么关系？\n\n无论总和奇数偶数，都满足(m1+n1)=(m+n)/2;因为两个数组都是有序的所以总共小于中位数的占一半。其中m和n是定值。也就是不管你怎么变动，这两个坐标编号总和为定值。\n\n### 如何分析为定值得坐标\n\n既然两个坐标的总和为定值，那么可不可以把其中一个当为自变量，一个看成自变量呢？\n\n比如x+y=5你不好分析但是y=5-x，你分析x同时y就确定了。对吧？\n\n那么选择长的那个作为变量还是短的那个作为变量呢？短的。\n\n为啥？主要因为如果从长的当成变量咱们有些区域无法对应到短的(因为长度即使加上短的所有也到不了一半，处理起来麻烦，但是短的就可以很好避免这种情况。\n\n所以我们就用二分去查找小的这个区间，找到最终的结果，你可能会问：什么样情况能够满足确定这条线的附近就是产生中位数的？\n\n二分进行查找编号的时候，满足左侧都比线右侧小才行。这种情况在二分查找就是一个平衡的结果。\n\n最后找到这个index线了。取值比较你还要有注意的地方：取左侧的时候左侧如果有index为0，取右侧的时候index为最大值。\n\n所以在最后取值的时候，需要考虑左右侧是否有值。同时取长的那个也要比较，因为可能出现等长情况例如：1 2 3 4,和5 6 7 8这种去到临界。需要判断当然在实现过程用三目运算简化！\n\n总结：\n* 根据短的进行二分查找位置，先找到线index，说明中位数在附近产生。（奇数偶数在查找因为要除2可以通用表达式）\n* 如果总个数奇数，那么就是线左侧最大的那个(两个比较或只有一个)\n* 如果总个数偶数，那么就是线左侧最大的那个(两个比较或只有一个)和线右侧最小的那个(两个比较或只有一个)的值取平均，注意是double类型。\n* 其他注意点，搞清index从0开始，搞清逻辑上的第几个和数组显示使用的第几个的index的区别。\n\n## 代码\n```js\n/**\n * \n * \n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    // nums1长度比nums2小\n    if (nums1.length > nums2.length) {\n        [nums1, nums2] = [nums2, nums1];\n    }\n\n    let m = nums1.length;\n    let n = nums2.length;\n    // 在0～m中查找\n    let left = 0;\n    let right = m;\n\n    // median1：前一部分的最大值\n    // median2：后一部分的最小值\n    let median1 = 0;\n    let median2 = 0;\n\n    while(left <= right) {\n        // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]\n        // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]\n        const i = left + Math.floor((right - left) / 2);\n        const j = Math.floor((m + n + 1) / 2) - i;\n        \n        const maxLeft1 = i === 0 ? -Infinity : nums1[i - 1];\n        const minRight1 = i === m ? Infinity : nums1[i];\n\n        const maxLeft2 = j === 0 ? -Infinity : nums2[j - 1];\n        const minRight2 = j === n ? Infinity : nums2[j];\n\n        if (maxLeft1 <= minRight2) {\n            median1 = Math.max(maxLeft1, maxLeft2);\n            median2 = Math.min(minRight1, minRight2);\n            left = i + 1;\n        } else{\n            right = i - 1;\n        }\n    }\n    return (m + n) % 2 == 0 ? (median1 + median2) / 2 : median1;\n};\n```\n\n## 复杂度\n\n* 时间复杂度O(log(min(m, n)))，n为nums1的长度，m为nums2的长度\n* 空间复杂度O(1)\n","level":4,"tagId":31}
{"_id":{"$oid":"61aa387454ebf60001a1a49a"},"exerciseKey":"be757fef-dbff-48f4-b401-d7f04238cc81","category":"Choice","renderType":"md","title":"结果是什么?","desc":"```javascript\nPromise.resolve(5)\n```","options":"{\"options\":[\"5\",\"Promise {<pending>: 5}\",\"Promise {<fulfilled>: 5}\",\"Error\"],\"isMulti\":false,\"answer\":[2]}","explanation":"我们可以将我们想要的任何类型的值传递`Promise.resolve`，无论是否`promise`。 该方法本身返回带有已解析值的`Promise` (`<fulfilled>`)。 如果您传递常规函数，它将是具有常规值的已解决`promise`。 如果你通过了promise，它将是一个已经resolved的且带有传的值的promise。\n上述情况，我们传了数字5，因此返回一个resolved状态的promise，resolve值为`5`","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa387454ebf60001a1a49b"},"exerciseKey":"bfa42e01-30b6-4c60-9f2b-81b7495aaebe","category":"QA","renderType":"md","title":"Git，GitHub与GitLab分别是什么？有什么区别？\n","desc":null,"options":null,"explanation":"* Git是一款免费、开源的分布式版本控制系统\n* GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git作为唯一的版本库格式进行托管，故名GitHub。\n* GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。安装方法是参考GitLab在GitHub上的Wiki页面。\n\n## Git，GitHub与GitLab的区别\n\n* Git是一种版本控制系统，是一种工具，用于代码的存储和版本控制。\n* GitHub是一个基于Git实现的在线代码仓库，是目前全球最大的代码托管平台，可以帮助程序员之间互相交流和学习。\n* GitLab是一个基于Git实现的在线代码仓库软件，你可以用GitLab自己搭建一个类似于GitHub一样的仓库，但是GitLab有完善的管理界面和权限控制，一般用于在企业、学校等内部网络搭建Git私服。\n* GitHub和GiLlab两个都是基于Web的Git远程仓库，它们都提供了分享开源项目的平台，为开发团队提供了存储、分享、发布和合作开发项目的中心化云存储的场所。从代码的私有性上来看，GitLab 是一个更好的选择。但是对于开源项目而言，GitHub 依然是代码托管的首选。\n\n\n","level":0.5,"tagId":29}
{"_id":{"$oid":"61aa3874291c0100017ee2af"},"exerciseKey":"bff513af-f95f-481f-8bda-03f3515d0e08","category":"QA","renderType":"md","title":"使用Promise实现每隔1秒输出1,2,3","desc":null,"options":null,"explanation":"这道题比较简单的一种做法是可以用Promise配合着reduce不停的在promise后面叠加.then，请看下面的代码：\n\n```javascript\nconst arr = [1, 2, 3]\narr.reduce((p, x) => {\n  return p.then(() => {\n    return new Promise(r => {\n      setTimeout(() => r(console.log(x)), 1000)\n    })\n  })\n}, Promise.resolve())\n```\n\n还可以更简单一点写：\n\n```javascript\nconst arr = [1, 2, 3]\narr.reduce((p, x) => p.then(() => new Promise(r => setTimeout(() => r(console.log(x)), 1000))), Promise.resolve())\n```\n","level":3,"tagId":26}
{"_id":{"$oid":"61aa3874bdfab500012c8535"},"exerciseKey":"c00fbf63-deef-433c-aa48-a10812107b0e","category":"QA","renderType":"md","title":"介绍一下 tree shaking 及其工作原理","desc":null,"options":null,"explanation":"> Tree shaking 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 Dead code elimination。\n\n## tree shaking如何工作的呢？\n\n虽然 tree shaking 的概念在 1990 就提出了，但直到 ES6 的 `ES6-style` 模块出现后才真正被利用起来。\n\n在ES6以前，我们可以使用CommonJS引入模块：require()，这种引入是动态的，也意味着我们可以基于条件来导入需要的代码：\n\n```javascript\nlet dynamicModule;\n// 动态导入\nif (condition) {\n  myDynamicModule = require(\"foo\");\n} else {\n  myDynamicModule = require(\"bar\");\n}\n```\n\n但是CommonJS规范无法确定在实际运行前需要或者不需要某些模块，所以CommonJS不适合tree-shaking机制。在 ES6 中，引入了完全静态的导入语法：import。这也意味着下面的导入是不可行的：\n\n```javascript\n// 不可行，ES6 的import是完全静态的\nif (condition) {\n  myDynamicModule = require(\"foo\");\n} else {\n  myDynamicModule = require(\"bar\");\n}\n```\n\n我们只能通过导入所有的包后再进行条件获取。如下：\n\n```\nimport foo from \"foo\";\nimport bar from \"bar\";\n\nif (condition) {\n  // foo.xxxx\n} else {\n  // bar.xxx\n}\n```\n\nES6的import语法可以完美使用tree shaking，因为可以在代码不运行的情况下就能分析出不需要的代码。\n\n看完上面的分析，你可能还是有点懵，这里我简单做下总结：因为tree shaking只能在静态modules下工作。ECMAScript 6 模块加载是静态的,因此整个依赖树可以被静态地推导出解析语法树。所以在 ES6 中使用 tree shaking 是非常容易的。\n\n## tree shaking的原理是什么?\n\n看完上面的分析，相信这里你可以很容易的得出题目的答案了：\n\n* ES6 Module引入进行静态分析，故而编译的时候正确判断到底加载了那些模块\n* 静态分析程序流，判断那些模块和变量未被使用或者引用，进而删除对应代码","level":3,"tagId":28}
{"_id":{"$oid":"61aa387581337a00011e0678"},"exerciseKey":"c08daadf-ef79-48b0-8cda-3ab379624fa5","category":"Choice","renderType":"md","title":"method 的值选择哪个时，会输出 { name: \"Lydia\", age: 22 } ?","desc":"```javascript\nconst keys = [\"name\", \"age\"]\nconst values = [\"Lydia\", 22]\n\nconst method = /* ?? */\nObject[method](keys.map((_, i) => {\n\treturn [keys[i], values[i]]\n})) // { name: \"Lydia\", age: 22 }\n```","options":"{\"options\":[\"entries\",\"values\",\"fromEntries\",\"forEach\"],\"isMulti\":false,\"answer\":[2]}","explanation":" `fromEntries` 方法可以将二维数组转换为对象。在每个子数组的第一个元素是key，在每个子数组的第二个元素是value。在这个例子中，我们映射了 `keys` 数组，它返回了一个数组，数组的第一个元素为keys数组当前索引的值，第二个元素为values数组当前索引的值。\n这样就创建了一个包含正确keys和values的子数组的数组，因此结果为`{ name: \"Lydia\", age: 22 }`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa3875b804f8000122ab29"},"exerciseKey":"c0ba0aa2-8660-4049-9a1a-9264259f3182","category":"QA","renderType":"md","title":"Vue中给对象添加新属性时，界面不刷新怎么办?","desc":null,"options":null,"explanation":"\n ![image.png](https://static.vue-js.com/a502dde0-3acc-11eb-ab90-d9ae814b240d.png)\n\n\n## 一、直接添加属性的问题\n\n我们从一个例子开始\n\n定义一个`p`标签，通过`v-for`指令进行遍历\n\n然后给`botton`标签绑定点击事件，我们预期点击按钮时，数据新增一个属性，界面也 新增一行\n\n```html\n<p v-for=\"(value,key) in item\" :key=\"key\">\n    {{ value }}\n</p>\n<button @click=\"addProperty\">动态添加新属性</button>\n```\n\n实例化一个`vue`实例，定义`data`属性和`methods`方法\n\n```js\nconst app = new Vue({\n    el:\"#app\",\n   \tdata:()=>{\n       \titem:{\n            oldProperty:\"旧属性\"\n        }\n    },\n    methods:{\n        addProperty(){\n            this.items.newProperty = \"新属性\"  // 为items添加新属性\n            console.log(this.items)  // 输出带有newProperty的items\n        }\n    }\n})\n```\n\n点击按钮，发现结果不及预期，数据虽然更新了（`console`打印出了新属性），但页面并没有更新\n\n\n## 二、原理分析\n\n为什么产生上面的情况呢？\n\n下面来分析一下\n\n`vue2`是用过`Object.defineProperty`实现数据响应式\n\n```js\nconst obj = {}\nObject.defineProperty(obj, 'foo', {\n        get() {\n            console.log(`get foo:${val}`);\n            return val\n        },\n        set(newVal) {\n            if (newVal !== val) {\n                console.log(`set foo:${newVal}`);\n                val = newVal\n            }\n        }\n    })\n}\n```\n\n当我们访问`foo`属性或者设置`foo`值的时候都能够触发`setter`与`getter`\n\n```js\nobj.foo   \nobj.foo = 'new'\n```\n\n但是我们为`obj`添加新属性的时候，却无法触发事件属性的拦截\n\n```js\nobj.bar  = '新属性'\n```\n\n原因是一开始`obj`的`foo`属性被设成了响应式数据，而`bar`是后面新增的属性，并没有通过`Object.defineProperty`设置成响应式数据\n\n## 三、解决方案\n\n`Vue` 不允许在已经创建的实例上动态添加新的响应式属性\n\n若想实现数据与视图同步更新，可采取下面三种解决方案：\n\n- Vue.set()\n- Object.assign()\n- $forcecUpdated()\n\n\n\n### Vue.set()\n\nVue.set( target, propertyName/index, value )\n\n参数\n\n- `{Object | Array} target`\n- `{string | number} propertyName/index`\n- `{any} value`\n\n返回值：设置的值\n\n通过`Vue.set`向响应式对象中添加一个`property`，并确保这个新 `property `同样是响应式的，且触发视图更新\n\n关于`Vue.set`源码（省略了很多与本节不相关的代码）\n\n源码位置：`src\\core\\observer\\index.js`\n\n```js\nfunction set (target: Array<any> | Object, key: any, val: any): any {\n  ...\n  defineReactive(ob.value, key, val)\n  ob.dep.notify()\n  return val\n}\n```\n\n这里无非再次调用`defineReactive`方法，实现新增属性的响应式\n\n关于`defineReactive`方法，内部还是通过`Object.defineProperty`实现属性拦截\n\n大致代码如下：\n\n```js\nfunction defineReactive(obj, key, val) {\n    Object.defineProperty(obj, key, {\n        get() {\n            console.log(`get ${key}:${val}`);\n            return val\n        },\n        set(newVal) {\n            if (newVal !== val) {\n                console.log(`set ${key}:${newVal}`);\n                val = newVal\n            }\n        }\n    })\n}\n```\n\n\n\n### Object.assign()\n\n直接使用`Object.assign()`添加到对象的新属性不会触发更新\n\n应创建一个新的对象，合并原对象和混入对象的属性\n\n```js\nthis.someObject = Object.assign({},this.someObject,{newProperty1:1,newProperty2:2 ...})\n```\n\n\n\n### $forceUpdate\n\n如果你发现你自己需要在 `Vue `中做一次强制更新，99.9% 的情况，是你在某个地方做错了事\n\n`$forceUpdate`迫使` Vue` 实例重新渲染\n\nPS：仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。\n\n\n\n### 小结\n\n- 如果为对象添加少量的新属性，可以直接采用`Vue.set()`\n\n- 如果需要为新对象添加大量的新属性，则通过`Object.assign()`创建新对象\n\n- 如果你实在不知道怎么操作时，可采取`$forceUpdate()`进行强制刷新 (不建议)\n  \n\nPS：`vue3`是用过`proxy`实现数据响应式的，直接动态添加新属性仍可以实现数据响应式\n\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa3875d00c060001bf12ca"},"exerciseKey":"c137050b-10f5-4a4f-9941-820ad7a9894d","category":"QA","renderType":"md","title":"JavaScript中执行上下文和执行栈是什么？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/8652b710-74c1-11eb-85f6-6fac77c0c9b3.png)\n\n\n## 一、执行上下文\n\n简单的来说，执行上下文是一种对`Javascript`代码执行环境的抽象概念，也就是说只要有`Javascript`代码运行，那么它就一定是运行在执行上下文中\n\n执行上下文的类型分为三种：\n\n- 全局执行上下文：只有一个，浏览器中的全局对象就是 `window `对象，`this` 指向这个全局对象\n- 函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文\n- Eval 函数执行上下文： 指的是运行在 `eval` 函数中的代码，很少用而且不建议使用\n\n下面给出全局上下文和函数上下文的例子：\n\n ![](https://static.vue-js.com/90dd3b60-74c1-11eb-85f6-6fac77c0c9b3.png)\n\n紫色框住的部分为全局上下文，蓝色和橘色框起来的是不同的函数上下文。只有全局上下文（的变量）能被其他任何上下文访问\n\n可以有任意多个函数上下文，每次调用函数创建一个新的上下文，会创建一个私有作用域，函数内部声明的任何变量都不能在当前函数作用域外部直接访问\n\n\n\n## 二、生命周期\n\n执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段\n\n### 创建阶段\n\n创建阶段即当函数被调用，但未执行任何其内部代码之前\n\n创建阶段做了三件事：\n\n- 确定 this 的值，也被称为 `This Binding`\n- LexicalEnvironment（词法环境） 组件被创建\n- VariableEnvironment（变量环境） 组件被创建\n\n伪代码如下：\n\n```js\nExecutionContext = {  \n  ThisBinding = <this value>,     // 确定this \n  LexicalEnvironment = { ... },   // 词法环境\n  VariableEnvironment = { ... },  // 变量环境\n}\n```\n\n\n\n#### This Binding\n\n确定`this`的值我们前面讲到，`this`的值是在执行的时候才能确认，定义的时候不能确认\n\n\n#### 词法环境\n\n词法环境有两个组成部分：\n\n- 全局环境：是一个没有外部环境的词法环境，其外部环境引用为` null`，有一个全局对象，`this` 的值指向这个全局对象\n\n- 函数环境：用户在函数中定义的变量被存储在环境记录中，包含了`arguments` 对象，外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境\n\n伪代码如下：\n\n```js\nGlobalExectionContext = {  // 全局执行上下文\n  LexicalEnvironment: {       // 词法环境\n    EnvironmentRecord: {     // 环境记录\n      Type: \"Object\",           // 全局环境\n      // 标识符绑定在这里 \n      outer: <null>           // 对外部环境的引用\n  }  \n}\n\nFunctionExectionContext = { // 函数执行上下文\n  LexicalEnvironment: {     // 词法环境\n    EnvironmentRecord: {    // 环境记录\n      Type: \"Declarative\",      // 函数环境\n      // 标识符绑定在这里      // 对外部环境的引用\n      outer: <Global or outer function environment reference>  \n  }  \n}\n```\n\n\n\n#### 变量环境\n\n变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性\n\n在 ES6 中，词法环境和变量环境的区别在于前者用于存储函数声明和变量（ `let` 和 `const` ）绑定，而后者仅用于存储变量（ `var` ）绑定\n\n举个例子\n\n```js\nlet a = 20;  \nconst b = 30;  \nvar c;\n\nfunction multiply(e, f) {  \n var g = 20;  \n return e * f * g;  \n}\n\nc = multiply(20, 30);\n```\n\n执行上下文如下：\n\n```js\nGlobalExectionContext = {\n\n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {  // 词法环境\n    EnvironmentRecord: {  \n      Type: \"Object\",  \n      // 标识符绑定在这里  \n      a: < uninitialized >,  \n      b: < uninitialized >,  \n      multiply: < func >  \n    }  \n    outer: <null>  \n  },\n\n  VariableEnvironment: {  // 变量环境\n    EnvironmentRecord: {  \n      Type: \"Object\",  \n      // 标识符绑定在这里  \n      c: undefined,  \n    }  \n    outer: <null>  \n  }  \n}\n\nFunctionExectionContext = {  \n   \n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {  \n    EnvironmentRecord: {  \n      Type: \"Declarative\",  \n      // 标识符绑定在这里  \n      Arguments: {0: 20, 1: 30, length: 2},  \n    },  \n    outer: <GlobalLexicalEnvironment>  \n  },\n\n  VariableEnvironment: {  \n    EnvironmentRecord: {  \n      Type: \"Declarative\",  \n      // 标识符绑定在这里  \n      g: undefined  \n    },  \n    outer: <GlobalLexicalEnvironment>  \n  }  \n}\n```\n\n留意上面的代码，`let`和`const`定义的变量`a`和`b`在创建阶段没有被赋值，但`var`声明的变量从在创建阶段被赋值为`undefined`\n\n这是因为，创建阶段，会在代码中扫描变量和函数声明，然后将函数声明存储在环境中\n\n但变量会被初始化为`undefined`(`var`声明的情况下)和保持`uninitialized`(未初始化状态)(使用`let`和`const`声明的情况下)\n\n这就是变量提升的实际原因\n\n\n\n### 执行阶段\n\n在这阶段，执行变量赋值、代码执行\n\n如果 `Javascript` 引擎在源代码中声明的实际位置找不到变量的值，那么将为其分配 `undefined` 值\n\n\n\n### 回收阶段\n\n执行上下文出栈等待虚拟机回收执行上下文\n\n\n\n## 二、执行栈\n\n执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文\n\n ![](https://static.vue-js.com/9eda0310-74c1-11eb-ab90-d9ae814b240d.png)\n\n当`Javascript`引擎开始执行你第一行脚本代码的时候，它就会创建一个全局执行上下文然后将它压到执行栈中\n\n每当引擎碰到一个函数的时候，它就会创建一个函数执行上下文，然后将这个执行上下文压到执行栈中\n\n引擎会执行位于执行栈栈顶的执行上下文(一般是函数执行上下文)，当该函数执行结束后，对应的执行上下文就会被弹出，然后控制流程到达执行栈的下一个执行上下文\n\n举个例子：\n\n```js\nlet a = 'Hello World!';\nfunction first() {\n  console.log('Inside first function');\n  second();\n  console.log('Again inside first function');\n}\nfunction second() {\n  console.log('Inside second function');\n}\nfirst();\nconsole.log('Inside Global Execution Context');\n```\n\n转化成图的形式\n\n ![](https://static.vue-js.com/ac11a600-74c1-11eb-ab90-d9ae814b240d.png)\n\n简单分析一下流程：\n\n- 创建全局上下文请压入执行栈\n- `first`函数被调用，创建函数执行上下文并压入栈\n- 执行`first`函数过程遇到`second`函数，再创建一个函数执行上下文并压入栈\n- `second`函数执行完毕，对应的函数执行上下文被推出执行栈，执行下一个执行上下文`first`函数\n- `first`函数执行完毕，对应的函数执行上下文也被推出栈中，然后执行全局上下文\n- 所有代码执行完毕，全局上下文也会被推出栈中，程序结束\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa387591a75000018d2d8d"},"exerciseKey":"c141b446-0f24-4580-8594-f61f23dc5979","category":"QA","renderType":"md","title":"说说 Javascript 为什么会存在数字精度丢失的问题，以及如何进行解决？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/09646a10-86f4-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、场景复现\n\n一个经典的面试题\n\n```js\n0.1 + 0.2 === 0.3 // false\n```\n\n为什么是`false`呢?\n\n先看下面这个比喻\n\n比如一个数 1÷3=0.33333333...... \n\n3会一直无限循环，数学可以表示，但是计算机要存储，方便下次取出来再使用，但0.333333...... 这个数无限循环，再大的内存它也存不下，所以不能存储一个相对于数学来说的值，只能存储一个近似值，当计算机存储后再取出时就会出现精度丢失问题\n\n## 二、浮点数\n\n“浮点数”是一种表示数字的标准，整数也可以用浮点数的格式来存储\n\n我们也可以理解成，浮点数就是小数\n\n在`JavaScript`中，现在主流的数值类型是`Number`，而`Number`采用的是`IEEE754`规范中64位双精度浮点数编码\n\n这样的存储结构优点是可以归一化处理整数和小数，节省存储空间\n\n对于一个整数，可以很轻易转化成十进制或者二进制。但是对于一个浮点数来说，因为小数点的存在，小数点的位置不是固定的。解决思路就是使用科学计数法，这样小数点位置就固定了\n\n而计算机只能用二进制（0或1）表示，二进制转换为科学记数法的公式如下：\n\n ![](https://static.vue-js.com/1b4b1620-86f4-11eb-ab90-d9ae814b240d.png)\n\n其中，`a`的值为0或者1，e为小数点移动的位置\n\n举个例子：\n\n27.0转化成二进制为11011.0 ，科学计数法表示为：\n\n ![](https://static.vue-js.com/37007090-86f4-11eb-ab90-d9ae814b240d.png)\n\n前面讲到，`javaScript`存储方式是双精度浮点数，其长度为8个字节，即64位比特\n\n64位比特又可分为三个部分：\n\n- 符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数\n- 指数位E：中间的 11 位存储指数（exponent），用来表示次方数，可以为正负数。在双精度浮点数中，指数的固定偏移量为1023\n- 尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零\n\n如下图所示：\n\n ![](https://static.vue-js.com/430d0100-86f4-11eb-85f6-6fac77c0c9b3.png)\n\n举个例子：\n\n27.5 转换为二进制11011.1\n\n11011.1转换为科学记数法 ![[公式]](https://www.zhihu.com/equation?tex=1.10111%2A2%5E4)\n\n符号位为1(正数)，指数位为4+，1023+4，即1027\n\n因为它是十进制的需要转换为二进制，即 `10000000011`，小数部分为`10111`，补够52位即： 1011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000`\n\n所以27.5存储为计算机的二进制标准形式（符号位+指数位+小数部分 (阶数)），既下面所示\n\n0+10000000011+011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000`\n\n\n## 二、问题分析\n\n再回到问题上\n\n```js\n0.1 + 0.2 === 0.3 // false\n```\n\n通过上面的学习，我们知道，在`javascript`语言中，0.1 和 0.2 都转化成二进制后再进行运算\n\n```js\n// 0.1 和 0.2 都转化成二进制后再进行运算\n0.00011001100110011001100110011001100110011001100110011010 +\n0.0011001100110011001100110011001100110011001100110011010 =\n0.0100110011001100110011001100110011001100110011001100111\n\n// 转成十进制正好是 0.30000000000000004\n```\n\n所以输出`false`\n\n再来一个问题，那么为什么`x=0.1`得到`0.1`？\n\n主要是存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是`2^53=9007199254740992`，对应科学计数尾数是 `9.007199254740992`，这也是 JS 最多能表示的精度\n\n它的长度是 16，所以可以使用 `toPrecision(16)` 来做精度运算，超过的精度会自动做凑整处理\n\n```js\n.10000000000000000555.toPrecision(16)\n// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1\n```\n\n但看到的 `0.1` 实际上并不是 `0.1`。不信你可用更高的精度试试：\n\n```js\n0.1.toPrecision(21) = 0.100000000000000005551\n```\n\n如果整数大于 `9007199254740992` 会出现什么情况呢？\n\n由于指数位最大值是1023，所以最大可以表示的整数是 `2^1024 - 1`，这就是能表示的最大整数。但你并不能这样计算这个数字，因为从 `2^1024` 开始就变成了 `Infinity`\n\n```\n> Math.pow(2, 1023)\n8.98846567431158e+307\n\n> Math.pow(2, 1024)\nInfinity\n```\n\n那么对于 `(2^53, 2^63)` 之间的数会出现什么情况呢？\n\n- `(2^53, 2^54)` 之间的数会两个选一个，只能精确表示偶数\n- `(2^54, 2^55)` 之间的数会四个选一个，只能精确表示4个倍数\n- ... 依次跳过更多2的倍数\n\n要想解决大数的问题你可以引用第三方库 `bignumber.js`，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生差很多\n\n### 小结\n\n计算机存储双精度浮点数需要先把十进制数转换为二进制的科学记数法的形式，然后计算机以自己的规则{符号位+(指数位+指数偏移量的二进制)+小数部分}存储二进制的科学记数法\n\n因为存储时有位数限制（64位），并且某些十进制的浮点数在转换为二进制数时会出现无限循环，会造成二进制的舍入操作(0舍1入)，当再转换为十进制时就造成了计算误差\n\n\n## 三、解决方案\n\n理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果\n\n当你拿到 `1.4000000000000001` 这样的数据要展示时，建议使用 `toPrecision` 凑整并 `parseFloat` 转成数字后再显示，如下：\n\n```\nparseFloat(1.4000000000000001.toPrecision(12)) === 1.4  // True\n```\n\n封装成方法就是：\n\n```js\nfunction strip(num, precision = 12) {\n  return +parseFloat(num.toPrecision(precision));\n}\n```\n\n对于运算类操作，如 `+-*/`，就不能使用 `toPrecision` 了。正确的做法是把小数转成整数后再运算。以加法为例：\n\n```js\n/**\n * 精确加法\n */\nfunction add(num1, num2) {\n  const num1Digits = (num1.toString().split('.')[1] || '').length;\n  const num2Digits = (num2.toString().split('.')[1] || '').length;\n  const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits));\n  return (num1 * baseNum + num2 * baseNum) / baseNum;\n}\n```\n\n最后还可以使用第三方库，如`Math.js`、`BigDecimal.js`\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa38753976eb00014e45d2"},"exerciseKey":"c188ea2f-8882-413c-af52-3ccce36f35cf","category":"QA","renderType":"md","title":"简单介绍下 ES6 中的 Iterator 迭代器","desc":null,"options":null,"explanation":"想必大家使用过for循环、while循环等，遍历Array获取其中的值，那其他数据结构如何通过遍历获取呢？或者这样说，是否可以提供一个统一的访问机制？来访问Object、Map、Set等。\n\n轮到Iterator迭代器出场，Iterator迭代器就是为了解决这个问题，它提供统一的接口，为不同的数据结构提供统一的访问机制。(目前Map、Set、Array支持Iterator)。\n\n顾名思义，Iterator迭代器的出现就是为了迭代而生，为不同的集合：Object、Array、Map、Set，提供了一个统一的接口（这里接口可以简单的理解为方法，就是遍历方法）。像我们常用的for...of就是依赖与Iterator迭代器。\n\n在这里顺便提一嘴，我理解到的遍历、迭代的关系：遍历就是访问数据结构的所有元素，而迭代是遍历的一种形式。\n\n```javascript\n// 阮一峰 ECMAScript 6 入门\n// 模拟next方法返回值\nvar it = makeIterator(['a', 'b']);\n\nit.next() // { value: \"a\", done: false }\nit.next() // { value: \"b\", done: false }\nit.next() // { value: undefined, done: true }\n\nfunction makeIterator(array) {\n  var nextIndex = 0;\n  return {\n    next: function() {\n      return nextIndex < array.length ?\n        {value: array[nextIndex++], done: false} :\n        {value: undefined, done: true}\n    }\n  }\n}\n```\n\n上面的makeIterator函数，它就是一个迭代器生成函数，作用就是返回一个迭代器对象。对数组执行这个函数，就会返回该数组的迭代器对象it。\n\n通过调用next函数，返回value和done两个属性；value属性返回当前位置的成员，done属性是一个布尔值，表示遍历是否结束，即是否还有必要再一次调用next方法；当done为true时，即遍历完成。\n\n小结：Iterator迭代器就是一个接口方法，它为不同的数据结构提供了一个统一的访问机制；使得数据结构的成员能够按某种次序排列，并逐个被访问。\n\n## Iterator规范\n\n在上面的代码中，迭代器对象it包含一个next() 方法，调用next()方法，返回两个属性：布尔值done和值value，value的类型无限制。\n\n迭代器对象包含的属性我们知道了，那么在日常开发中，我们如何让一个对象成为一个可迭代对象呢？（可迭代对象即支持迭代器规范的对象）\n\n要成为可迭代对象， 一个对象必须实现@@iterator方法。这意味着对象（或者它原型链上的某个对象）必须有一个键为@@iterator的属性，可通过常量 Symbol.iterator 访问该属性。\n\n```javascript\nlet myIterable = {\n    a: 1,\n    b: 2,\n    c: 3\n}\nmyIterable[Symbol.iterator] = function() {\n  let self = this;\n  let arr = Object.keys(self);\n  let index = 0;\n  return {\n    next() {\n      return index < arr.length ? {value: self[arr[index++]], done: false} : {value: undefined, done: true};\n    }\n  }\n}\n\nvar it = myIterable[Symbol.iterator]();\n\nit.next();\n\nfor(const i of myIterable) {\n  console.log(i);\n}\n```\n\n将myIterable对象添加Symbol.iterator属性，同时在返回的next方法中，添加两个属性，既让它成为了一个可迭代对象。（其实如果真的有这样的需求，可以考虑使用Map）。\n\n小结：Iterator规范————Iterator迭代器包含一个next()方法，方法调用返回返回两个属性：done和value；通过定义一个对象的Symbol.iterator属性，即可将此对象修改为迭代器对象，支持for...of遍历。\n\n\n","level":3,"tagId":24}
{"_id":{"$oid":"61aa3875b804f8000122ab2d"},"exerciseKey":"c1bcc1f1-3375-4c66-b3af-1ba1b937c01f","category":"QA","renderType":"md","title":"说说你对vue的mixin的理解，以及有哪些应用场景？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/8a739c90-3b7f-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、mixin是什么\n\n`Mixin`是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问`mixin`类的方法而不必成为其子类\n\n`Mixin`类通常作为功能模块使用，在需要该功能时“混入”，有利于代码复用又避免了多继承的复杂\n\n### Vue中的mixin\n先来看一下官方定义\n> `mixin`（混入），提供了一种非常灵活的方式，来分发 `Vue` 组件中的可复用功能。\n\n本质其实就是一个`js`对象，它可以包含我们组件中任意功能选项，如`data`、`components`、`methods `、`created`、`computed`等等\n\n我们只要将共用的功能以对象的方式传入 `mixins`选项中，当组件使用 `mixins`对象时所有`mixins`对象的选项都将被混入该组件本身的选项中来\n\n在`Vue`中我们可以**局部混入**跟**全局混入**\n\n### 局部混入\n\n定义一个`mixin`对象，有组件`options`的`data`、`methods`属性\n\n```js\nvar myMixin = {\n  created: function () {\n    this.hello()\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!')\n    }\n  }\n}\n```\n\n组件通过`mixins`属性调用`mixin`对象\n\n```js\nVue.component('componentA',{\n  mixins: [myMixin]\n})\n```\n\n该组件在使用的时候，混合了`mixin`里面的方法，在自动执行`create`生命钩子，执行`hello`方法\n\n### 全局混入\n\n通过`Vue.mixin()`进行全局的混入\n\n```js\nVue.mixin({\n  created: function () {\n      console.log(\"全局混入\")\n    }\n})\n```\n\n使用全局混入需要特别注意，因为它会影响到每一个组件实例（包括第三方组件）\n\nPS：全局混入常用于插件的编写\n\n### 注意事项：\n\n当组件存在与`mixin`对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖`mixin`的选项\n\n但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行`mixin`的钩子，再执行组件的钩子\n\n\n\n## 二、使用场景\n\n在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立\n\n这时，可以通过`Vue`的`mixin`功能将相同或者相似的代码提出来\n\n举个例子\n\n定义一个`modal`弹窗组件，内部通过`isShowing`来控制显示\n\n```js\nconst Modal = {\n  template: '#modal',\n  data() {\n    return {\n      isShowing: false\n    }\n  },\n  methods: {\n    toggleShow() {\n      this.isShowing = !this.isShowing;\n    }\n  }\n}\n```\n\n定义一个`tooltip`提示框，内部通过`isShowing`来控制显示\n\n```js\nconst Tooltip = {\n  template: '#tooltip',\n  data() {\n    return {\n      isShowing: false\n    }\n  },\n  methods: {\n    toggleShow() {\n      this.isShowing = !this.isShowing;\n    }\n  }\n}\n```\n\n通过观察上面两个组件，发现两者的逻辑是相同，代码控制显示也是相同的，这时候`mixin`就派上用场了\n\n首先抽出共同代码，编写一个`mixin`\n\n```js\nconst toggle = {\n  data() {\n    return {\n      isShowing: false\n    }\n  },\n  methods: {\n    toggleShow() {\n      this.isShowing = !this.isShowing;\n    }\n  }\n}\n```\n\n两个组件在使用上，只需要引入`mixin`\n\n```js\nconst Modal = {\n  template: '#modal',\n  mixins: [toggle]\n};\n \nconst Tooltip = {\n  template: '#tooltip',\n  mixins: [toggle]\n}\n```\n\n通过上面小小的例子，让我们知道了`Mixin`对于封装一些可复用的功能如此有趣、方便、实用\n\n\n\n## 三、源码分析\n\n首先从`Vue.mixin`入手\n\n源码位置：/src/core/global-api/mixin.js\n\n```js\nexport function initMixin (Vue: GlobalAPI) {\n  Vue.mixin = function (mixin: Object) {\n    this.options = mergeOptions(this.options, mixin)\n    return this\n  }\n}\n```\n\n主要是调用`merOptions`方法\n\n源码位置：/src/core/util/options.js\n\n```js\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n\nif (child.mixins) { // 判断有没有mixin 也就是mixin里面挂mixin的情况 有的话递归进行合并\n    for (let i = 0, l = child.mixins.length; i < l; i++) {\n    parent = mergeOptions(parent, child.mixins[i], vm)\n    }\n}\n\n  const options = {} \n  let key\n  for (key in parent) {\n    mergeField(key) // 先遍历parent的key 调对应的strats[XXX]方法进行合并\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) { // 如果parent已经处理过某个key 就不处理了\n      mergeField(key) // 处理child中的key 也就parent中没有处理过的key\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    options[key] = strat(parent[key], child[key], vm, key) // 根据不同类型的options调用strats中不同的方法进行合并\n  }\n  return options\n}\n```\n从上面的源码，我们得到以下几点：\n\n- 优先递归处理 `mixins`\n- 先遍历合并`parent` 中的`key`，调用`mergeField`方法进行合并，然后保存在变量`options`\n- 再遍历 `child`，合并补上 `parent` 中没有的`key`，调用`mergeField`方法进行合并，保存在变量`options`\n- 通过 `mergeField` 函数进行了合并\n\n下面是关于`Vue`的几种类型的合并策略\n\n- 替换型\n- 合并型\n- 队列型\n- 叠加型\n\n### 替换型\n\n替换型合并有`props`、`methods`、`inject`、`computed`\n\n```js\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal: ?Object,\n  childVal: ?Object,\n  vm?: Component,\n  key: string\n): ?Object {\n  if (!parentVal) return childVal // 如果parentVal没有值，直接返回childVal\n  const ret = Object.create(null) // 创建一个第三方对象 ret\n  extend(ret, parentVal) // extend方法实际是把parentVal的属性复制到ret中\n  if (childVal) extend(ret, childVal) // 把childVal的属性复制到ret中\n  return ret\n}\nstrats.provide = mergeDataOrFn\n```\n\n同名的`props`、`methods`、`inject`、`computed`会被后来者代替\n\n### 合并型\n\n和并型合并有：`data`\n\n```js\nstrats.data = function(parentVal, childVal, vm) {    \n    return mergeDataOrFn(\n        parentVal, childVal, vm\n    )\n};\n\nfunction mergeDataOrFn(parentVal, childVal, vm) {    \n    return function mergedInstanceDataFn() {        \n        var childData = childVal.call(vm, vm) // 执行data挂的函数得到对象\n        var parentData = parentVal.call(vm, vm)        \n        if (childData) {            \n            return mergeData(childData, parentData) // 将2个对象进行合并                                 \n        } else {            \n            return parentData // 如果没有childData 直接返回parentData\n        }\n    }\n}\n\nfunction mergeData(to, from) {    \n    if (!from) return to    \n    var key, toVal, fromVal;    \n    var keys = Object.keys(from);   \n    for (var i = 0; i < keys.length; i++) {\n        key = keys[i];\n        toVal = to[key];\n        fromVal = from[key];    \n        // 如果不存在这个属性，就重新设置\n        if (!to.hasOwnProperty(key)) {\n            set(to, key, fromVal);\n        }      \n        // 存在相同属性，合并对象\n        else if (typeof toVal ==\"object\" && typeof fromVal ==\"object\") {\n            mergeData(toVal, fromVal);\n        }\n    }    \n    return to\n}\n```\n\n`mergeData`函数遍历了要合并的 data 的所有属性，然后根据不同情况进行合并：\n\n- 当目标 data 对象不包含当前属性时，调用 `set` 方法进行合并（set方法其实就是一些合并重新赋值的方法）\n- 当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为了防止对象存在新增属性\n\n### 队列性\n\n队列性合并有：全部生命周期和`watch`\n\n```js\nfunction mergeHook (\n  parentVal: ?Array<Function>,\n  childVal: ?Function | ?Array<Function>\n): ?Array<Function> {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(hook => {\n  strats[hook] = mergeHook\n})\n\n// watch\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n```\n\n生命周期钩子和`watch`被合并为一个数组，然后正序遍历一次执行\n\n### 叠加型\n\n叠加型合并有：`component`、`directives`、`filters`\n\n```js\nstrats.components=\nstrats.directives=\n\nstrats.filters = function mergeAssets(\n    parentVal, childVal, vm, key\n) {    \n    var res = Object.create(parentVal || null);    \n    if (childVal) { \n        for (var key in childVal) {\n            res[key] = childVal[key];\n        }   \n    } \n    return res\n}\n```\n\n叠加型主要是通过原型链进行层层的叠加\n\n\n\n### 小结：\n\n- 替换型策略有`props`、`methods`、`inject`、`computed`，就是将新的同名参数替代旧的参数\n- 合并型策略是`data`, 通过`set`方法进行合并和重新赋值\n- 队列型策略有生命周期函数和`watch`，原理是将函数存入一个数组，然后正序遍历依次执行\n- 叠加型有`component`、`directives`、`filters`，通过原型链进行层层的叠加\n\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa3875cd02c30001dd230c"},"exerciseKey":"c1ee1a9b-5955-4dc1-a89d-2ce7b017616a","category":"QA","renderType":"md","title":"Vue 3.0中Treeshaking特性是什么，并举例进行说明？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/5e8bf1d0-6097-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n`Tree shaking` 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 `Dead code elimination`\n\n简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码\n\n如果把代码打包比作制作蛋糕，传统的方式是把鸡蛋（带壳）全部丢进去搅拌，然后放入烤箱，最后把（没有用的）蛋壳全部挑选并剔除出去\n\n而` treeshaking `则是一开始就把有用的蛋白蛋黄（import）放入搅拌，最后直接作出蛋糕\n\n也就是说 ，`tree shaking` 其实是找出使用的代码\n\n在`Vue2`中，无论我们使用什么功能，它们最终都会出现在生产代码中。主要原因是`Vue`实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到\n\n```js\nimport Vue from 'vue'\n \nVue.nextTick(() => {})\n```\n\n而`Vue3`源码引入`tree shaking`特性，将全局 API 进行分块。如果您不使用其某些功能，它们将不会包含在您的基础包中\n\n```js\nimport { nextTick, observable } from 'vue'\n \nnextTick(() => {})\n```\n\n\n\n## 二、如何做\n\n`Tree shaking`是基于`ES6`模板语法（`import`与`exports`），主要是借助`ES6`模块的静态编译思想，在编译时就能确定模块的依赖关系，以及输入和输出的变量\n\n`Tree shaking`无非就是做了两件事：\n\n- 编译阶段利用`ES6 Module`判断哪些模块已经加载\n- 判断那些模块和变量未被使用或者引用，进而删除对应代码\n\n下面就来举个例子：\n\n通过脚手架`vue-cli`安装`Vue2`与`Vue3`项目\n\n```c\nvue create vue-demo\n```\n\n### Vue2 项目\n\n组件中使用`data`属性\n\n```vue\n<script>\n    export default {\n        data: () => ({\n            count: 1,\n        }),\n    };\n</script>\n```\n\n对项目进行打包，体积如下图\n\n![](https://static.vue-js.com/6bd2aff0-6097-11eb-85f6-6fac77c0c9b3.png)\n\n为组件设置其他属性（`compted`、`watch`）\n\n```js\nexport default {\n    data: () => ({\n        question:\"\", \n        count: 1,\n    }),\n    computed: {\n        double: function () {\n            return this.count * 2;\n        },\n    },\n    watch: {\n        question: function (newQuestion, oldQuestion) {\n            this.answer = 'xxxx'\n        }\n};\n```\n\n再一次打包，发现打包出来的体积并没有变化\n\n![](https://static.vue-js.com/7c29e260-6097-11eb-ab90-d9ae814b240d.png)\n\n\n\n### Vue3 项目\n\n组件中简单使用\n\n```js\nimport { reactive, defineComponent } from \"vue\";\nexport default defineComponent({\n  setup() {\n    const state = reactive({\n      count: 1,\n    });\n    return {\n      state,\n    };\n  },\n});\n```\n\n将项目进行打包\n\n![](https://static.vue-js.com/95df0000-6097-11eb-85f6-6fac77c0c9b3.png)\n\n在组件中引入`computed`和`watch`\n\n```js\nimport { reactive, defineComponent, computed, watch } from \"vue\";\nexport default defineComponent({\n  setup() {\n    const state = reactive({\n      count: 1,\n    });\n    const double = computed(() => {\n      return state.count * 2;\n    });\n\n    watch(\n      () => state.count,\n      (count, preCount) => {\n        console.log(count);\n        console.log(preCount);\n      }\n    );\n    return {\n      state,\n      double,\n    };\n  },\n});\n```\n\n再次对项目进行打包，可以看到在引入`computer`和`watch`之后，项目整体体积变大了\n\n ![](https://static.vue-js.com/b36a7a00-6097-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 三、作用\n\n通过`Tree shaking`，`Vue3`给我们带来的好处是：\n\n- 减少程序体积（更小）\n- 减少程序执行时间（更快）\n- 便于将来对程序架构进行优化（更友好）\n\n","level":3,"tagId":14}
{"_id":{"$oid":"61aa3875c2d0220001c9655d"},"exerciseKey":"c29d2196-388f-48a1-9715-70f39cc92f4d","category":"QA","renderType":"md","title":"Object.is() 与比较操作符 “===”、“==” 的区别？","desc":null,"options":null,"explanation":"* 使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n* 使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n* 使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。","level":2,"tagId":10}
{"_id":{"$oid":"61aa38750f30890001ab81c1"},"exerciseKey":"c3272068-de10-428e-8e99-27b2cba2dfe5","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nlet greeting\ngreetign = {} // Typo!\nconsole.log(greetign)\n```","options":"{\"options\":[\"{}\",\"ReferenceError: greetign is not defined\",\"undefined\"],\"isMulti\":false,\"answer\":[0]}","explanation":"代码打印出了一个对象，这是因为我们在全局对象上创建了一个空对象！当我们将 `greeting` 写错成 `greetign` 时，JS 解释器实际在上浏览器中将它视为 `global.greetign = {}` （或者 `window.greetign = {}`）。\n为了避免这个为题，我们可以使用 `\"use strict\"。这能确保当你声明变量时必须赋值。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3875b804f8000122ab34"},"exerciseKey":"c3f69ef3-ab4e-456f-869f-3e6ef470d0f3","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nconst foo = () => console.log('First')\nconst bar = () => setTimeout(() => console.log('Second'))\nconst baz = () => console.log('Third')\n\nbar()\nfoo()\nbaz()\n```","options":"{\"options\":[\"First Second Third\",\"First Third Second\",\"Second First Third\",\"Second Third First\"],\"isMulti\":false,\"answer\":[1]}","explanation":"我们有一个 `setTimeout` 函数，并首先调用它。然而，它是最后打印日志的。\n这是因为在浏览器中，我们不仅有运行时引擎，还有一个叫做 `WebAPI` 的东西。`WebAPI` 提供了 `setTimeout` 函数，也包含其他的，例如 DOM。\n将 _callback_ 推送到 WebAPI 后，`setTimeout` 函数本身(但不是回调！)将从栈中弹出。\n<img src=\"https://i.imgur.com/X5wsHOg.png\" width=\"200\">\n现在，`foo` 被调用，打印 `\"First\"`。\n<img src=\"https://i.imgur.com/Pvc0dGq.png\" width=\"200\">\n`foo` 从栈中弹出，`baz` 被调用. 打印 `\"Third\"`。\n<img src=\"https://i.imgur.com/WhA2bCP.png\" width=\"200\">\nWebAPI 不能随时向栈内添加内容。相反，它将回调函数推到名为 _queue_ 的地方。\n<img src=\"https://i.imgur.com/NSnDZmU.png\" width=\"200\">\n这就是事件循环开始工作的地方。一个**事件循环**查看栈和任务队列。如果栈是空的，它接受队列上的第一个元素并将其推入栈。\n<img src=\"https://i.imgur.com/uyiScAI.png\" width=\"200\">\n`bar` 被调用，打印 `\"Second\"`，然后它被栈弹出。","level":1,"tagId":32}
{"_id":{"$oid":"61aa387639bf10000191ca7a"},"exerciseKey":"c4765da3-f74e-4190-b3c0-7b66f5cd05b0","category":"QA","renderType":"html","title":"如何提高webpack的打包速度","desc":null,"options":null,"explanation":"<ul><li>happypack: 利用进程并行编译loader,利用缓存来使得 rebuild 更快,遗憾的是作者表示已经不会继续开发此项目,类似的替代者是<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fwebpack-contrib%2Fthread-loader\" target=\"_blank\">thread-loader</a> </li><li> <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwebpack.docschina.org%2Fconfiguration%2Fexternals%2F\" target=\"_blank\">外部扩展(externals)</a>: 将不怎么需要更新的第三方库脱离webpack打包，不被打入bundle中，从而减少打包时间,比如jQuery用script标签引入</li><li>dll: 采用webpack的 DllPlugin 和 DllReferencePlugin 引入dll，让一些基本不会改动的代码先打包成静态资源,避免反复编译浪费时间</li><li>利用缓存: <code>webpack.cache</code>、babel-loader.cacheDirectory、<code>HappyPack.cache</code>都可以利用缓存提高rebuild效率</li><li>缩小文件搜索范围: 比如babel-loader插件,如果你的文件仅存在于src中,那么可以<code>include: path.resolve(__dirname, &#x27;src&#x27;)</code>,当然绝大多数情况下这种操作的提升有限,除非不小心build了node_modules文件<br/></li></ul>","level":1,"tagId":28}
{"_id":{"$oid":"61aa387685c5f70001543049"},"exerciseKey":"c50852c5-6471-4bd3-8392-02ab58e4c726","category":"QA","renderType":"md","title":"CSR和SSR分别是什么？","desc":null,"options":null,"explanation":"对于html的加载，以React为例，我们习惯的做法是加载js文件中的React代码，去生成页面渲染，同时，js也完成页面交互事件的绑定，这样的一个过程就是CSR（客户端渲染）。\n\n但如果这个js文件比较大的话，加载起来就会比较慢，到达页面渲染的时间就会比较长，导致首屏白屏。这时候，SSR（服务端渲染）就出来了：由服务端直接生成html内容返回给浏览器渲染首屏内容。\n\n但是服务端渲染的页面交互能力有限，如果要实现复杂交互，还是要通过引入js文件来辅助实现，我们把页面的展示内容和交互写在一起，让代码执行两次，这种方式就叫同构。\n\nCSR和SSR的区别在于，最终的html代码是从客户端添加的还是从服务端。\n\n\n\n\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa38768e97d900018087e7"},"exerciseKey":"c50bec05-c350-46bd-a2a6-dd5f9a6cdf46","category":"QA","renderType":"md","title":"实现 throttle（节流）函数","desc":null,"options":null,"explanation":"高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。\n```js\nconst throttle = (fn, time) => {\n  let flag = true;\n  return function() {\n    if (!flag) return;\n    flag = false;\n    setTimeout(() => {\n      fn.apply(this, arguments);\n      flag = true;\n    }, time);\n  }\n}\n\n```\n\n节流常应用于鼠标不断点击触发、监听滚动事件。\n\n","level":1,"tagId":26}
{"_id":{"$oid":"61aa3876bdfab500012c8544"},"exerciseKey":"c585e9b3-1595-40cc-9132-b9dff1abd028","category":"QA","renderType":"md","title":"解释一下TypeScript中的枚举。","desc":null,"options":null,"explanation":"枚举是TypeScipt数据类型，它允许我们定义一组命名常量。 使用枚举使记录意图或创建一组不同的案例变得更加容易。 它是相关值的集合，可以是数字值或字符串值。\n\n```typescript\nenum Gender {\n    Male,\n    Female\n    Other\n}\nconsole.log(Gender.Male); // Output: 0\n\n//We can also access an enum value by it's number value.\nconsole.log(Gender[1]); // Output: Female\n```","level":1,"tagId":19}
{"_id":{"$oid":"61aa3876d00c060001bf12d1"},"exerciseKey":"c591d4b9-eff8-4a29-b01b-50130bde5d3b","category":"Choice","renderType":"md","title":"使用哪个构造函数可以成功继承 Dog 类?","desc":"```javascript\nclass Dog {\n  constructor(name) {\n    this.name = name;\n  }\n};\n\nclass Labrador extends Dog {\n  // 1 \n  constructor(name, size) {\n    this.size = size;\n  }\n  // 2\n  constructor(name, size) {\n    super(name);\n    this.size = size;\n  }\n  // 3\n  constructor(size) {\n    super(name);\n    this.size = size;\n  }\n  // 4 \n  constructor(name, size) {\n    this.name = name;\n    this.size = size;\n  }\n\n};\n```","options":"{\"options\":[\"1\",\"2\",\"3\",\"4\"],\"isMulti\":false,\"answer\":[1]}","explanation":"在子类中，在调用`super`之前不能访问到`this`关键字。 如果这样做，它将抛出一个`ReferenceError`：1和4将引发一个引用错误。\n使用`super`关键字，需要用给定的参数来调用父类的构造函数。 父类的构造函数接收`name`参数，因此我们需要将`name`传递给`super`。\n`Labrador`类接收两个参数，`name`参数是由于它继承了`Dog`，`size`作为`Labrador`类的额外属性，它们都需要传递给`Labrador`的构造函数，因此使用构造函数2正确完成。","level":1,"tagId":32}
{"_id":{"$oid":"61aa387685c5f7000154304a"},"exerciseKey":"c6027c9d-6c64-4765-9358-5d01c37149c4","category":"QA","renderType":"md","title":"JS代码中的use strict是什么意思？","desc":null,"options":null,"explanation":"use strict是一种ECMAscript5添加的(严格）运行模式，这种模式使得Javascript 在更严格的条件下运行。\n\n设立\"严格模式\"的目的，主要有以下几个:\n\n* 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;消除代码运行的一些不安全之处，保证代码运行的安全;\n* 提高编译器效率，增加运行速度;\n* 为未来新版本的Javascript 做好铺垫。\n\n区别:\n\n* 禁止使用with语句。\n* 禁止this关键字指向全局对象。\n* 对象不能有重名的属性。","level":2,"tagId":10}
{"_id":{"$oid":"61aa3876ff0573000165b374"},"exerciseKey":"c6c4c722-bd37-41dd-b736-e836260b7863","category":"QA","renderType":"md","title":"实现 Function.prototype.bind","desc":null,"options":null,"explanation":"```js\nFunction.prototype.bind = function(context, ...args) {\n  if (typeof this !== 'function') {\n    throw new Error(\"Type Error\");\n  }\n  // 保存this的值\n  var self = this;\n\n  return function F() {\n    // 考虑new的情况\n    if(this instanceof F) {\n      return new self(...args, ...arguments)\n    }\n    return self.apply(context, [...args, ...arguments])\n  }\n}\n\n```","level":2.5,"tagId":26}
{"_id":{"$oid":"61aa3876d00c060001bf12d7"},"exerciseKey":"c6db446a-bbc3-42a9-bc4a-aeecfde8bcbc","category":"QA","renderType":"md","title":"不同版本的 React 都做过哪些优化？","desc":null,"options":null,"explanation":"React渲染页面的两个阶段：\n\n* 调度阶段（reconciliation）：在这个阶段 React 会更新数据生成新的 Virtual DOM，然后通过Diff算法，快速找出需要更新的元素，放到更新队列中去，得到新的更新队列。\n* 渲染阶段（commit）：这个阶段 React 会遍历更新队列，**将其所有的变更一次性更新到DOM上**。\n\n## React 15 架构\n\nReact15架构可以分为两层：\n\n* Reconciler（协调器）—— 负责找出变化的组件；\n* Renderer（渲染器）—— 负责将变化的组件渲染到页面上；\n\n在React15及以前，Reconciler采用递归的方式创建虚拟DOM，递归过程是不能中断的。如果组件树的层级很深，递归会占用线程很多时间，递归更新时间超过了16ms，用户交互就会卡顿。\n\n为了解决这个问题，React16将递归的无法中断的更新重构为异步的可中断更新，由于曾经用于递归的虚拟DOM数据结构已经无法满足需要。于是，全新的Fiber架构应运而生。\n\n## React 16 架构\n\n为了解决同步更新长时间占用线程导致页面卡顿的问题，也为了探索运行时优化的更多可能，React开始重构并一直持续至今。重构的目标是实现Concurrent Mode（并发模式）。\n\n从v15到v16，React团队花了两年时间将源码架构中的Stack Reconciler重构为Fiber Reconciler。\n\nReact16架构可以分为三层：\n\n* Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入Reconciler；\n* Reconciler（协调器）—— 负责找出变化的组件：更新工作从递归变成了可以中断的循环过程。Reconciler内部采用了Fiber的架构；\n* Renderer（渲染器）—— 负责将变化的组件渲染到页面上。\n\n## React 17 优化\n\nReact16的expirationTimes模型只能区分是否>=expirationTimes决定节点是否更新。React17的lanes模型可以选定一个更新区间，并且动态的向区间中增减优先级，可以处理更细粒度的更新。\n\n>Lane用二进制位表示任务的优先级，方便优先级的计算（位运算），不同优先级占用不同位置的“赛道”，而且存在批的概念，优先级越低，“赛道”越多。高优先级打断低优先级，新建的任务需要赋予什么优先级等问题都是Lane所要解决的问题。\n\nConcurrent Mode的目的是实现一套可中断/恢复的更新机制。其由两部分组成：\n\n* 一套协程架构：Fiber Reconciler\n* 基于协程架构的启发式更新算法：控制协程架构工作方式的算法\n\n\n\n","level":4,"tagId":13}
{"_id":{"$oid":"61aa38773976eb00014e45dc"},"exerciseKey":"c77b5c6f-9fcc-40a6-bbf0-9f412d6ce94c","category":"QA","renderType":"md","title":"实现 debounce（防抖）函数\n","desc":null,"options":null,"explanation":"触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。\n\n```js\nconst debounce = (fn, time) => {\n  let timeout = null;\n  return function() {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      fn.apply(this, arguments);\n    }, time);\n  }\n};\n\n```\n\n防抖常应用于用户进行搜索输入节约请求资源，window触发resize事件时进行防抖只触发一次。\n\n","level":1,"tagId":26}
{"_id":{"$oid":"61aa3877cd02c30001dd231b"},"exerciseKey":"c7844d1f-223c-41cc-b6c2-6df29d8ecc00","category":"QA","renderType":"md","title":"什么是CSS媒体查询?","desc":null,"options":null,"explanation":"媒体查询(Media Queries)早在在css2时代就存在,经过css3的洗礼后变得更加强大bootstrap的响应式特性就是从此而来的.\n\n简单的来讲媒体查询是一种用于修饰css何时起作用的语法.\n\n> Media Queries 的引入，其作用就是允许添加表达式用以确定媒体的环境情况，以此来应用不同的样式表。换句话说，其允许我们在不改变内容的情况下，改变页面的布局以精确适应不同的设备。","level":1,"tagId":11}
{"_id":{"$oid":"61aa38770d111e0001037326"},"exerciseKey":"c79bd75a-aa6d-4228-9e55-c9fb41e97253","category":"QA","renderType":"md","title":"什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？","desc":null,"options":null,"explanation":"MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化我们的开发效率。\n\n比如说我们实验室在以前项目开发的时候，使用单页应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，当时一旦项目变得复杂，那么整个文件就会变得冗长，混乱，这样对我们的项目开发和后期的项目维护是非常不利的。\n\nMVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Co\nntroller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。\n\nMVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中我们使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的\nController 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此我们可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。\n\nMVVM 模式中的 VM，指的是 ViewModel，它和 MVP 的思想其实是相同的，不过它通过双向的数据绑定，将 View 和 Model 的同步更新给自动化了。当 Model 发生变化的时候，ViewModel 就会自动更新；ViewModel 变化了，View 也会更新。这样就将 Presenter 中的工作给自动化了。我了解过一点双向数据绑定的原理，比如 vue 是通过使用数据劫持和发布订阅者模式来实现的这一功\n能。","level":3,"tagId":27}
{"_id":{"$oid":"61aa38770d111e0001037327"},"exerciseKey":"c7c6762f-bc84-4b0c-9f05-79072db1e1ea","category":"Choice","renderType":"md","title":"下面代码输出什么?","desc":"```javascript\nconst food = ['🍕', '🍫', '🥑', '🍔']\nconst info = { favoriteFood: food[0] }\n\ninfo.favoriteFood = '🍝'\n\nconsole.log(food)\n```","options":"{\"options\":[\"['🍕', '🍫', '🥑', '🍔']\",\"['🍝', '🍫', '🥑', '🍔']\",\"['🍝', '🍕', '🍫', '🥑', '🍔']\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[0]}","explanation":"我们将`info`对象上的`favoriteFood`属性的值设置为披萨表情符号“🍕”的字符串。字符串是原始数据类型。在JavaScript中，原始数据类型通过值起作用\n在这种情况下，我们将`info`对象上的`favoriteFood`属性的值设置为等于`food`数组中的第一个元素的值，字符串为披萨表情符号（`'🍕'` ）。字符串是原始数据类型，并且通过值进行交互，我们更改`info`对象上`favoriteFood`属性的值。 food数组没有改变，因为favoriteFood的值只是该数组中第一个元素的值的复制，并且与该元素上的元素没有相同的内存引用食物`[0]`。当我们记录食物时，它仍然是原始数组`['🍕'，'🍫'，'🥑'，'🍔']`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa387781337a00011e068b"},"exerciseKey":"c81eed52-f021-4483-8b61-c815eb03ae18","category":"QA","renderType":"md","title":"砝码称重问题（三）","desc":"现在有质量分别为1g、2g、3g、4g、8g的砝码各一枚.用这些砝码在天平上共可称出多少种不同的质量?","options":null,"explanation":"1g-18g都可以称出来，也就是18种\n\n```\n1=1\n2=2\n3=3\n4=4\n5=1+4\n6=2+4\n7=3+7\n8=8\n9=1+8\n10=2+8\n11=3+8\n12=4+8\n13=1+4+8\n14=2+4+8\n15=3+4+8\n16=1+3+4+8\n17=2+3+4+8\n18+1+2+3+4+8\n```","level":1,"tagId":17}
{"_id":{"$oid":"61aa387785c5f70001543053"},"exerciseKey":"c8245703-a177-4deb-a8be-24f73a3267b8","category":"QA","renderType":"md","title":"实现 Function.prototype.apply()","desc":"第一个参数是绑定的this，默认为window，第二个参数是数组或类数组","options":null,"explanation":"```js\nFunction.prototype.apply = function(context = window, args) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Type Error');\n  }\n  const fn = Symbol('fn');\n  context[fn] = this;\n\n  const res = context[fn](...args);\n  delete context[fn];\n  return res;\n}\n\n```","level":2.5,"tagId":26}
{"_id":{"$oid":"61aa387779641200019174f4"},"exerciseKey":"c843a307-4934-4fa2-9c16-9f06484b0021","category":"QA","renderType":"md","title":"var、let、const之间有什么区别？","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/d2aba2e0-50f7-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、var\n\n在ES5中，顶层对象的属性和全局变量是等价的，用`var`声明的变量既是全局变量，也是顶层变量\n\n注意：顶层对象，在浏览器环境指的是`window`对象，在 `Node` 指的是`global`对象\n\n```js\nvar a = 10;\nconsole.log(window.a) // 10\n```\n\n使用`var`声明的变量存在变量提升的情况\n\n```js\nconsole.log(a) // undefined\nvar a = 20\n```\n\n在编译阶段，编译器会将其变成以下执行\n\n```js\nvar a\nconsole.log(a)\na = 20\n```\n\n使用`var`，我们能够对一个变量进行多次声明，后面声明的变量会覆盖前面的变量声明\n\n```js\nvar a = 20 \nvar a = 30\nconsole.log(a) // 30\n```\n\n在函数中使用使用`var`声明变量时候，该变量是局部的\n\n```js\nvar a = 20\nfunction change(){\n    var a = 30\n}\nchange()\nconsole.log(a) // 20 \n```\n\n而如果在函数内不使用`var`，该变量是全局的\n\n```js\nvar a = 20\nfunction change(){\n   a = 30\n}\nchange()\nconsole.log(a) // 30 \n```\n\n## 二、let\n\n`let`是`ES6`新增的命令，用来声明变量\n\n用法类似于`var`，但是所声明的变量，只在`let`命令所在的代码块内有效\n\n```js\n{\n    let a = 20\n}\nconsole.log(a) // ReferenceError: a is not defined.\n```\n\n不存在变量提升\n\n```js\nconsole.log(a) // 报错ReferenceError\nlet a = 2\n```\n\n这表示在声明它之前，变量`a`是不存在的，这时如果用到它，就会抛出一个错误\n\n只要块级作用域内存在`let`命令，这个区域就不再受外部影响\n\n```js\nvar a = 123\nif (true) {\n    a = 'abc' // ReferenceError\n    let a;\n}\n```\n\n使用`let`声明变量前，该变量都不可用，也就是大家常说的“暂时性死区”\n\n最后，`let`不允许在相同作用域中重复声明\n\n```js\nlet a = 20\nlet a = 30\n// Uncaught SyntaxError: Identifier 'a' has already been declared\n```\n\n注意的是相同作用域，下面这种情况是不会报错的\n\n```js\nlet a = 20\n{\n    let a = 30\n}\n```\n\n因此，我们不能在函数内部重新声明参数\n\n```js\nfunction func(arg) {\n  let arg;\n}\nfunc()\n// Uncaught SyntaxError: Identifier 'arg' has already been declared\n```\n\n## 三、const\n\n`const`声明一个只读的常量，一旦声明，常量的值就不能改变\n\n```js\nconst a = 1\na = 3\n// TypeError: Assignment to constant variable.\n```\n\n这意味着，`const`一旦声明变量，就必须立即初始化，不能留到以后赋值\n\n```js\nconst a;\n// SyntaxError: Missing initializer in const declaration\n```\n\n如果之前用`var`或`let`声明过变量，再用`const`声明同样会报错\n\n```js\nvar a = 20\nlet b = 20\nconst a = 30\nconst b = 30\n// 都会报错\n```\n\n`const`实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动\n\n对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量\n\n对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，`const`只能保证这个指针是固定的，并不能确保改变量的结构不变\n\n```js\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n```\n\n其它情况，`const`与`let`一致\n\n## 四、区别\n\n`var`、`let`、`const`三者区别可以围绕下面五点展开：\n\n- 变量提升\n- 暂时性死区\n- 块级作用域\n- 重复声明\n- 修改声明的变量\n- 使用\n\n\n\n### 变量提升\n\n`var `声明的变量存在变量提升，即变量可以在声明之前调用，值为`undefined`\n\n`let`和`const`不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错\n\n```js\n// var\nconsole.log(a)  // undefined\nvar a = 10\n\n// let \nconsole.log(b)  // Cannot access 'b' before initialization\nlet b = 10\n\n// const\nconsole.log(c)  // Cannot access 'c' before initialization\nconst c = 10\n```\n\n\n\n### 暂时性死区\n\n`var`不存在暂时性死区\n\n`let`和`const`存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量\n\n```js\n// var\nconsole.log(a)  // undefined\nvar a = 10\n\n// let\nconsole.log(b)  // Cannot access 'b' before initialization\nlet b = 10\n\n// const\nconsole.log(c)  // Cannot access 'c' before initialization\nconst c = 10\n```\n\n\n\n### 块级作用域\n\n`var`不存在块级作用域\n\n`let`和`const`存在块级作用域\n\n```js\n// var\n{\n    var a = 20\n}\nconsole.log(a)  // 20\n\n// let\n{\n    let b = 20\n}\nconsole.log(b)  // Uncaught ReferenceError: b is not defined\n\n// const\n{\n    const c = 20\n}\nconsole.log(c)  // Uncaught ReferenceError: c is not defined\n```\n\n\n\n### 重复声明\n\n`var`允许重复声明变量\n\n`let`和`const`在同一作用域不允许重复声明变量\n\n```js\n// var\nvar a = 10\nvar a = 20 // 20\n\n// let\nlet b = 10\nlet b = 20 // Identifier 'b' has already been declared\n\n// const\nconst c = 10\nconst c = 20 // Identifier 'c' has already been declared\n```\n\n\n\n### 修改声明的变量\n\n`var`和`let`可以\n\n`const`声明一个只读的常量。一旦声明，常量的值就不能改变\n\n```js\n// var\nvar a = 10\na = 20\nconsole.log(a)  // 20\n\n//let\nlet b = 10\nb = 20\nconsole.log(b)  // 20\n\n// const\nconst c = 10\nc = 20\nconsole.log(c) // Uncaught TypeError: Assignment to constant variable\n```\n\n\n\n### 使用\n能用`const`的情况尽量使用`const`，其他情况下大多数使用`let`，避免使用`var`\n","level":1.5,"tagId":24}
{"_id":{"$oid":"61aa387785c5f70001543054"},"exerciseKey":"c849aa25-0dae-49aa-8148-b1c410a7aa1e","category":"QA","renderType":"md","title":"常用的 meta 元素有哪些？","desc":null,"options":null,"explanation":"> 作者：tonytony\n> 来源：掘金\n\n> The <meta> tag provides metadata about the HTML document. Metadata will not be displayed on the page, but will be machine parsable.\n\n<meta> 元素标签是提供有关HTML文档的元数据，元数据不会显示在页面上，但是能够被机器识别。\n\n总而言之, meta标签是用来让机器识别的，同时它对SEO起着重要的作用。\n\n## charset\n\n指定了html文档的编码格式，常用的是utf-8(Unicode的字符编码)，还有ISO-8859-1(拉丁字母的字符编码)。当然还有其他的，但是一般不常用也就不介绍了\n\n```html\n<meta charset=\"utf-8\">\n```\n\n## name & content\n\n指定元数据的名称(这部分对SEO非常有用)\n\n* author——定义了页面的作者\n\n```html\n<meta name=\"author\" content=\"Tony\">\n```\n\n* keywords——为搜索引擎提供关键字\n\n```html\n<meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\n```\n\n* description——对网页整体的描述\n\n```html\n<meta name=\"description\" content=\"My tutorials on HTML, CSS and JavaScript\">\n```\n\n* viewport——对页面视图相关进行定义\n\n```\nwidth=device-width——将页面宽度设置为跟随屏幕宽度变化而变化\ninitial-scale=1.0——设置浏览器首次加载页面时的初始缩放比例(0.0-10.0正数)\nmaximum-scale=1.0——允许用户缩放的最大比例(0.0-10.0正数)，必须大于等于minimum-scale\nminimum-scale=1.0——允许用户缩放的最小比例(0.0-10.0正数)，必须小于等于maximum-scale\nuser-scalable=no——是否允许用户手动缩放(yes或者no)\n```\n\n``` html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minmum-scale=1.0\">\n```\n\n* generator——包含生成页面软件的标识符\n\n> which contains the identifier of the software that generated the page.\n\n```html\n<meta name=\"generator\" content=\"Hexo 3.8.0\">\n```\n\n* theme-color——定义主题颜色\n\n```html\n<meta name=\"theme-color\" content=\"#222\">\n```\n\n* http-equiv & content\n\n> Provides an HTTP header for the information/value of the content attribute\n\n* refresh——每30s刷新一次文档\n\n```html\n<meta http-equiv=\"refresh\" content=\"30\">\n```\n\n* X-UA-Compatible——告知浏览器以何种版本渲染界面。下面的例子有限使用IE最新版本\n\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n```\n\n关于是否有必要使用这一条在stack overflow尚且有争议。个人认为如果不想兼容低版本的IE，可以直接忽略这一条。\n\n* Cache-Control——请求和响应遵循的缓存机制，可以声明缓存的内容，修改过期时间，可多次声明\n\n> no-transform——不得对资源进行转换或转变。\n> no-siteapp——禁止百度进行转码\n\n```html\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n```\n\n* property & content\n\n可以让网页成为一个富媒体对象，同意网页内容被其他网站引用，同时在应用的时候不会只是一个链接，会提取相应的信息展现给用户。\n\n```html\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:url\" content=\"https://zjgyb.github.io/index.html\">\n<meta property=\"og:site_name\" content=\"tony's blog\">\n```\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa3877c2d0220001c9656e"},"exerciseKey":"c860f93c-430e-4813-b534-0fcfda8b64ba","category":"QA","renderType":"md","title":"如何检测浏览器所支持的最小字体大小？","desc":null,"options":null,"explanation":"可以使用 JS 设置 DOM 的字体为某一个值，然后再取出来，如果值设置成功，就说明支持。\n","level":1,"tagId":11}
{"_id":{"$oid":"61aa38770d111e000103732b"},"exerciseKey":"c8a6250a-c30b-4ddc-8b5c-5313c04e136e","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst myFunc = ({ x, y, z }) => {\n\tconsole.log(x, y, z);\n};\n\nmyFunc(1, 2, 3);\n```","options":"{\"options\":[\"1 2 3\",\"{1: 1} {2: 2} {3: 3}\",\"{ 1: undefined } undefined undefined\",\"undefined undefined undefined\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`myFunc` 期望接收一个包含 `x`, `y` 和 `z` 属性的对象作为它的参数。因为我们仅仅传递三个单独的数字值 (1, 2, 3) 而不是一个含有 `x`, `y` 和 `z` 属性的对象 ({x: 1, y: 2, z: 3})， `x`, `y` 和 `z` 有着各自的默认值 `undefined`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38783dd7f70001833029"},"exerciseKey":"c8d54253-ca08-4d87-b64c-33dcdd369073","category":"QA","renderType":"md","title":"React中的路由懒加载是什么？原理是什么？","desc":null,"options":null,"explanation":"## React.lazy 是什么\n\n随着前端应用体积的扩大，资源加载的优化是我们必须要面对的问题，动态代码加载就是其中的一个方案。\n\nwebpack 提供了符合 ECMAScript 提案 的 import() 语法 ，让我们来实现动态地加载模块（注：require.ensure 与 import() 均为 webpack 提供的代码动态加载方案，在 webpack 2.x 中，require.ensure 已被 import 取代）。\n\n在 React 16.6 版本中，新增了 React.lazy 函数，它能让你像渲染常规组件一样处理动态引入的组件，配合 webpack 的 Code Splitting ，只有当组件被加载，对应的资源才会导入 ，从而达到懒加载的效果。\n\n## 使用 React.lazy\n\n在实际的使用中，首先是引入组件方式的变化：\n\n```\n// 不使用 React.lazy\nimport OtherComponent from './OtherComponent';\n// 使用 React.lazy\nconst OtherComponent = React.lazy(() => import('./OtherComponent'))\n```\n\nReact.lazy 接受一个函数作为参数，这个函数需要调用 import() 。它需要返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。\n\nReact.lazy 方法返回的是一个 lazy 组件的对象，类型是 react.lazy，并且 lazy 组件具有 _status 属性，与 Promise 类似它具有 Pending、Resolved、Rejected 三个状态，分别代表组件的加载中、已加载、和加载失败三中状态。\n\n需要注意的一点是，React.lazy 需要配合 Suspense 组件一起使用，在 Suspense 组件中渲染 React.lazy 异步加载的组件。如果单独使用 React.lazy，React 会给出错误提示。\n\n## 实现原理\n\n### Webpack 动态加载\n\n上面使用了 import() 语法，webpack 检测到这种语法会自动代码分割。使用这种动态导入语法代替以前的静态引入，可以让组件在渲染的时候，再去加载组件对应的资源，这个异步加载流程的实现机制是怎么样呢？\n\nwebpack 是通过创建 script 标签来实现动态加载的，找出依赖对应的 chunk 信息，然后生成 script 标签来动态加载 chunk，每个 chunk 都有对应的状态：未加载 、 加载中、已加载 。\n\n### Suspense 组件\n\nSuspense 内部主要通过捕获组件的状态去判断如何加载，上面我们提到 React.lazy 创建的动态加载组件具有 Pending、Resolved、Rejected 三种状态，当这个组件的状态为 Pending 时显示的是 Suspense 中 fallback 的内容，只有状态变为 resolve 后才显示组件。\n\n### Error Boundaries 处理资源加载失败场景\n\n如果遇到网络问题或是组件内部错误，页面的动态资源可能会加载失败，为了优雅降级，可以使用 Error Boundaries 来解决这个问题。\n\nError Boundaries 是一种组件，如果你在组件中定义了 static getDerivedStateFromError() 或 componentDidCatch() 生命周期函数，它就会成为一个 Error Boundaries 的组件。\n\n它的用法也非常的简单，可以直接当作一个组件去使用，如下：\n\n```javascript\n<ErrorBoundary>\n  <MyWidget />\n</ErrorBoundary>\n```\n\n## 总结\n\nReact.lazy() 和 React.Suspense 的提出为现代 React 应用的性能优化和工程化提供了便捷之路。 React.lazy 可以让我们像渲染常规组件一样处理动态引入的组件，结合 Suspense 可以更优雅地展现组件懒加载的过渡动画以及处理加载异常的场景。\n","level":3.5,"tagId":13}
{"_id":{"$oid":"61aa38783d5f3a0001af5692"},"exerciseKey":"c93c4f3d-e1ff-4fd0-844c-1e610e429532","category":"QA","renderType":"md","title":"怎么用3升和5升的桶量出4升的水？","desc":null,"options":null,"explanation":"* 首先用三升水桶装满水，倒入五升水桶\n* 再次倒满三升水桶，填满后继续倒入五升水桶，直到五升水桶倒满\n* 清空五升水桶，将三升水桶的一升水倒入\n* 再次填满三升水桶，倒入五升水桶中\n\n此时，5L的水桶中，正好有4L的水\n\n\n","level":2,"tagId":17}
{"_id":{"$oid":"61aa38783976eb00014e45e5"},"exerciseKey":"c99dea56-2532-41b6-8ec2-68fec71da84a","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nfunction* generator(i) {\n  yield i;\n  yield i * 2;\n}\n\nconst gen = generator(10);\n\nconsole.log(gen.next().value);\nconsole.log(gen.next().value);\n```","options":"{\"options\":[\"[0, 10], [10, 20]\",\"20, 20\",\"10, 20\",\"0, 10 and 10, 20\"],\"isMulti\":false,\"answer\":[2]}","explanation":"一般的函数在执行之后是不能中途停下的。但是，生成器函数却可以中途“停下”，之后可以再从停下的地方继续。当生成器遇到`yield`关键字的时候，会生成`yield`后面的值。注意，生成器在这种情况下不 _返回_ (_return_ )值，而是 _生成_ (_yield_)值。\n首先，我们用`10`作为参数`i`来初始化生成器函数。然后使用`next()`方法一步步执行生成器。第一次执行生成器的时候，`i`的值为`10`，遇到第一个`yield`关键字，它要生成`i`的值。此时，生成器“暂停”，生成了`10`。\n然后，我们再执行`next()`方法。生成器会从刚才暂停的地方继续，这个时候`i`还是`10`。于是我们走到了第二个`yield`关键字处，这时候需要生成的值是`i*2`，`i`为`10`，那么此时生成的值便是`20`。所以这道题的最终结果是`10,20`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa387891a75000018d2da6"},"exerciseKey":"c9d672a0-9abe-46ec-812b-fd198f1e79f4","category":"QA","renderType":"md","title":"你是怎么理解ES6中Module的？使用场景有哪些？","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/b6d19be0-5adb-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、介绍\n\n模块，（Module），是能够单独命名并独立地完成一定功能的程序语句的**集合（即程序代码和数据结构的集合体）**。\n\n两个基本的特征：外部特征和内部特征\n\n- 外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能\n\n- 内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码）\n\n### 为什么需要模块化\n\n- 代码抽象\n- 代码封装\n- 代码复用\n- 依赖管理\n\n如果没有模块化，我们代码会怎样？\n\n- 变量和方法不容易维护，容易污染全局作用域\n- 加载资源的方式通过script标签从上到下。\n- 依赖的环境主观逻辑偏重，代码较多就会比较复杂。\n- 大型项目资源难以维护，特别是多人合作的情况下，资源的引入会让人奔溃\n\n因此，需要一种将` JavaScript `程序模块化的机制，如\n\n- CommonJs (典型代表：node.js早期)\n- AMD (典型代表：require.js)\n- CMD (典型代表：sea.js)\n\n\n### AMD\n\n`Asynchronous ModuleDefinition`（AMD），异步模块定义，采用异步方式加载模块。所有依赖模块的语句，都定义在一个回调函数中，等到模块加载完成之后，这个回调函数才会运行\n\n代表库为`require.js`\n\n```js\n/** main.js 入口文件/主模块 **/\n// 首先用config()指定各模块路径和引用名\nrequire.config({\n  baseUrl: \"js/lib\",\n  paths: {\n    \"jquery\": \"jquery.min\",  //实际路径为js/lib/jquery.min.js\n    \"underscore\": \"underscore.min\",\n  }\n});\n// 执行基本操作\nrequire([\"jquery\",\"underscore\"],function($,_){\n  // some code here\n});\n```\n\n\n\n### CommonJs\n\n`CommonJS` 是一套 `Javascript` 模块规范，用于服务端\n\n```js\n// a.js\nmodule.exports={ foo , bar}\n\n// b.js\nconst { foo,bar } = require('./a.js')\n```\n\n其有如下特点：\n\n- 所有代码都运行在模块作用域，不会污染全局作用域\n- 模块是同步加载的，即只有加载完成，才能执行后面的操作\n- 模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存\n- `require`返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值\n\n\n既然存在了`AMD`以及`CommonJs`机制，`ES6`的`Module`又有什么不一样？\n\nES6 在语言标准的层面上，实现了`Module`，即模块功能，完全可以取代 `CommonJS `和 `AMD `规范，成为浏览器和服务器通用的模块解决方案\n\n`CommonJS` 和` AMD` 模块，都只能在运行时确定这些东西。比如，`CommonJS `模块就是对象，输入时必须查找对象属性\n\n```javascript\n// CommonJS模块\nlet { stat, exists, readfile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n```\n\n`ES6`设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量\n\n```js\n// ES6模块\nimport { stat, exists, readFile } from 'fs';\n```\n\n上述代码，只加载3个方法，其他方法不加载，即 `ES6` 可以在编译时就完成模块加载\n\n由于编译加载，使得静态分析成为可能。包括现在流行的`typeScript`也是依靠静态分析实现功能\n\n\n\n## 二、使用\n\n`ES6`模块内部自动采用了严格模式，这里就不展开严格模式的限制，毕竟这是`ES5`之前就已经规定好\n\n模块功能主要由两个命令构成：\n\n- `export`：用于规定模块的对外接口\n- `import`：用于输入其他模块提供的功能\n\n\n\n### export\n\n一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用`export`关键字输出该变量\n\n```javascript\n// profile.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n\n或 \n// 建议使用下面写法，这样能瞬间确定输出了哪些变量\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n```\n\n输出函数或类\n\n```js\nexport function multiply(x, y) {\n  return x * y;\n};\n```\n\n通过`as`可以进行输出变量的重命名\n\n```js\nfunction v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n};\n```\n\n\n\n### import\n\n使用`export`命令定义了模块的对外接口以后，其他 JS 文件就可以通过`import`命令加载这个模块\n\n```javascript\n// main.js\nimport { firstName, lastName, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = firstName + ' ' + lastName;\n}\n```\n\n同样如果想要输入变量起别名，通过`as`关键字\n\n```javascript\nimport { lastName as surname } from './profile.js';\n```\n\n当加载整个模块的时候，需要用到星号`*`\n\n```js\n// circle.js\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\n\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n\n// main.js\nimport * as circle from './circle';\nconsole.log(circle)   // {area:area,circumference:circumference}\n```\n\n输入的变量都是只读的，不允许修改，但是如果是对象，允许修改属性\n\n```js\nimport {a} from './xxx.js'\n\na.foo = 'hello'; // 合法操作\na = {}; // Syntax Error : 'a' is read-only;\n```\n\n不过建议即使能修改，但我们不建议。因为修改之后，我们很难差错\n\n`import`后面我们常接着`from`关键字，`from`指定模块文件的位置，可以是相对路径，也可以是绝对路径\n\n```js\nimport { a } from './a';\n```\n\n如果只有一个模块名，需要有配置文件，告诉引擎模块的位置\n\n```javascript\nimport { myMethod } from 'util';\n```\n\n在编译阶段，`import`会提升到整个模块的头部，首先执行\n\n```javascript\nfoo();\n\nimport { foo } from 'my_module';\n```\n\n多次重复执行同样的导入，只会执行一次\n\n```js\nimport 'lodash';\nimport 'lodash';\n```\n\n上面的情况，大家都能看到用户在导入模块的时候，需要知道加载的变量名和函数，否则无法加载\n\n如果不需要知道变量名或函数就完成加载，就要用到`export default`命令，为模块指定默认输出\n\n```js\n// export-default.js\nexport default function () {\n    console.log('foo');\n}\n```\n\n加载该模块的时候，`import`命令可以为该函数指定任意名字\n\n```js\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n\n\n### 动态加载\n\n允许您仅在需要时动态加载模块，而不必预先加载所有模块，这存在明显的性能优势\n\n这个新功能允许您将`import()`作为函数调用，将其作为参数传递给模块的路径。 它返回一个 `promise`，它用一个模块对象来实现，让你可以访问该对象的导出\n\n```js\nimport('/modules/myModule.mjs')\n  .then((module) => {\n    // Do something with the module.\n  });\n```\n\n\n\n### 复合写法\n\n如果在一个模块之中，先输入后输出同一个模块，`import`语句可以与`export`语句写在一起\n\n```javascript\nexport { foo, bar } from 'my_module';\n\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n```\n\n同理能够搭配`as`、`*`搭配使用\n\n\n\n## 三、使用场景\n\n如今，`ES6`模块化已经深入我们日常项目开发中，像`vue`、`react`项目搭建项目，组件化开发处处可见，其也是依赖模块化实现\n\n`vue`组件\n\n```js\n<template>\n  <div class=\"App\">\n      组件化开发 ---- 模块化\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>\n```\n\n`react`组件\n\n```js\nfunction App() {\n  return (\n    <div className=\"App\">\n\t\t组件化开发 ---- 模块化\n    </div>\n  );\n}\n\nexport default App;\n```\n\n包括完成一些复杂应用的时候，我们也可以拆分成各个模块\n","level":3,"tagId":24}
{"_id":{"$oid":"61aa3878b804f8000122ab4a"},"exerciseKey":"c9e06422-43a4-4dc7-8a07-35b878896123","category":"Choice","renderType":"md","title":"哪一个是正确的？","desc":"```javascript\nconst bird = {\n  size: 'small'\n}\n\nconst mouse = {\n  name: 'Mickey',\n  small: true\n}\n```","options":"{\"options\":[\"mouse.bird.size是无效的\",\"mouse[bird.size]是无效的\",\"mouse[bird[\\\"size\\\"]]是无效的\",\"以上三个选项都是有效的\"],\"isMulti\":false,\"answer\":[0]}","explanation":"在 JavaScript 中，所有对象的 keys 都是字符串（除非对象是 Symbol）。尽管我们可能不会定义它们为字符串，但它们在底层总会被转换为字符串。\n当我们使用括号语法时（[]），JavaScript 会解释（或者 unboxes）语句。它首先看到第一个开始括号 `[` 并继续前进直到找到结束括号 `]`。只有这样，它才会计算语句的值。\n`mouse[bird.size]`：首先计算 `bird.size`，这会得到 `small`。`mouse[\"small\"]` 返回 `true`。\n然后使用点语法的话，上面这一切都不会发生。`mouse` 没有 `bird` 这个 key，这也就意味着 `mouse.bird` 是 `undefined`。然后当我们使用点语法 `mouse.bird.size` 时，因为 `mouse.bird` 是 `undefined`，这也就变成了 `undefined.size`。这个行为是无效的，并且会抛出一个错误类似 `Cannot read property \"size\" of undefined`。","level":2,"tagId":32}
{"_id":{"$oid":"61aa3878bdfab500012c8559"},"exerciseKey":"ca63a7ef-8e3d-4fe4-b697-28138bd96f74","category":"QA","renderType":"md","title":"Vue3.0的设计目标是什么？做了哪些优化?","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/b93b49c0-5c58-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、设计目标\n\n不以解决实际业务痛点的更新都是耍流氓，下面我们来列举一下`Vue3`之前我们或许会面临的问题\n\n- 随着功能的增长，复杂组件的代码变得越来越难以维护\n\n- 缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制\n\n- 类型推断不够友好\n\n- `bundle`的时间太久了\n\n而 `Vue3` 经过长达两三年时间的筹备，做了哪些事情？\n\n我们从结果反推\n\n- 更小\n- 更快\n- TypeScript支持\n- API设计一致性\n- 提高自身可维护性\n- 开放更多底层功能\n\n一句话概述，就是更小更快更友好了\n\n\n### 更小\n\n`Vue3`移除一些不常用的 `API`\n\n引入`tree-shaking`，可以将无用模块“剪辑”，仅打包需要的，使打包的整体体积变小了\n\n\n\n### 更快\n\n主要体现在编译方面：\n\n- diff算法优化\n- 静态提升\n- 事件监听缓存\n- SSR优化\n\n下篇文章我们会进一步介绍\n\n\n\n### 更友好\n\n`vue3`在兼顾`vue2`的`options API`的同时还推出了`composition API`，大大增加了代码的逻辑组织和代码复用能力\n\n这里代码简单演示下：\n\n存在一个获取鼠标位置的函数\n\n```js\nimport { toRefs, reactive } from 'vue';\nfunction useMouse(){\n    const state = reactive({x:0,y:0});\n    const update = e=>{\n        state.x = e.pageX;\n        state.y = e.pageY;\n    }\n    onMounted(()=>{\n        window.addEventListener('mousemove',update);\n    })\n    onUnmounted(()=>{\n        window.removeEventListener('mousemove',update);\n    })\n\n    return toRefs(state);\n}\n```\n\n我们只需要调用这个函数，即可获取`x`、`y`的坐标，完全不用关注实现过程\n\n试想一下，如果很多类似的第三方库，我们只需要调用即可，不必关注实现过程，开发效率大大提高\n\n同时，`VUE3`是基于`typescipt`编写的，可以享受到自动的类型定义提示\n\n\n\n## 三、优化方案\n\n`vue3`从很多层面都做了优化，可以分成三个方面：\n\n- 源码\n- 性能\n- 语法 API\n\n\n\n### 源码\n\n源码可以从两个层面展开：\n\n- 源码管理\n- TypeScript\n\n\n\n#### 源码管理\n\n`vue3`整个源码是通过 `monorepo `的方式维护的，根据功能将不同的模块拆分到`packages `目录下面不同的子目录中\n\n ![](https://static.vue-js.com/d7c32520-5c58-11eb-ab90-d9ae814b240d.png)\n\n这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性\n\n另外一些 `package`（比如 `reactivity` 响应式库）是可以独立于 `Vue` 使用的，这样用户如果只想使用 `Vue3 `的响应式能力，可以单独依赖这个响应式库而不用去依赖整个 `Vue`\n\n\n\n#### TypeScript\n\n`Vue3`是基于`typeScript`编写的，提供了更好的类型检查，能支持复杂的类型推导\n\n\n\n### 性能\n\n`vue3`是从什么哪些方面对性能进行进一步优化呢？\n\n- 体积优化\n- 编译优化\n- 数据劫持优化\n\n这里讲述数据劫持：\n\n在`vue2`中，数据劫持是通过`Object.defineProperty `，这个 API 有一些缺陷，并不能检测对象属性的添加和删除\n\n```js\nObject.defineProperty(data, 'a',{\n  get(){\n    // track\n  },\n  set(){\n    // trigger\n  }\n})\n```\n\n尽管` Vue`为了解决这个问题提供了 `set `和`delete `实例方法，但是对于用户来说，还是增加了一定的心智负担\n\n同时在面对嵌套层级比较深的情况下，就存在性能问题\n\n```js\ndefault {\n  data: {\n    a: {\n      b: {\n          c: {\n          d: 1\n        }\n      }\n    }\n  }\n}\n```\n\n相比之下，`vue3`是通过`proxy`监听整个对象，那么对于删除还是监听当然也能监听到\n\n同时`Proxy ` 并不能监听到内部深层次的对象变化，而 `Vue3` 的处理方式是在` getter` 中去递归响应式，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归\n\n\n\n### 语法 API\n\n这里当然说的就是`composition API`，其两大显著的优化：\n\n- 优化逻辑组织\n- 优化逻辑复用\n\n\n\n#### 逻辑组织\n\n一张图，我们可以很直观地感受到 `Composition API `在逻辑组织方面的优势\n\n ![](https://static.vue-js.com/e5804bc0-5c58-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n相同功能的代码编写在一块，而不像`options API`那样，各个功能的代码混成一块\n\n\n\n#### 逻辑复用\n\n在`vue2`中，我们是通过`mixin`实现功能混合，如果多个`mixin`混合，会存在两个非常明显的问题：命名冲突和数据来源不清晰\n\n而通过`composition`这种形式，可以将一些复用的代码抽离出来作为一个函数，只要的使用的地方直接进行调用即可\n\n同样是上文的获取鼠标位置的例子\n\n```js\nimport { toRefs, reactive, onUnmounted, onMounted } from 'vue';\nfunction useMouse(){\n    const state = reactive({x:0,y:0});\n    const update = e=>{\n        state.x = e.pageX;\n        state.y = e.pageY;\n    }\n    onMounted(()=>{\n        window.addEventListener('mousemove',update);\n    })\n    onUnmounted(()=>{\n        window.removeEventListener('mousemove',update);\n    })\n\n    return toRefs(state);\n}\n```\n\n组件使用\n\n```js\nimport useMousePosition from './mouse'\nexport default {\n    setup() {\n        const { x, y } = useMousePosition()\n        return { x, y }\n    }\n}\n```\n\n可以看到，整个数据来源清晰了，即使去编写更多的` hook `函数，也不会出现命名冲突的问题\n","level":3,"tagId":14}
{"_id":{"$oid":"61aa3878cd02c30001dd2322"},"exerciseKey":"ca78ecad-b7a0-4d2c-ac4e-650f86800a77","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst person = {\n  name: \"Lydia\",\n  age: 21\n}\n\nlet city = person.city\ncity = \"Amsterdam\"\n\nconsole.log(person)\n```","options":"{\"options\":[\"{ name: \\\"Lydia\\\", age: 21 }\",\"{ name: \\\"Lydia\\\", age: 21, city: \\\"Amsterdam\\\" }\",\"{ name: \\\"Lydia\\\", age: 21, city: undefined }\",\"\\\"Amsterdam\\\"\"],\"isMulti\":false,\"answer\":[0]}","explanation":"我们将变量`city`设置为等于`person`对象上名为`city`的属性的值。 这个对象上没有名为`city`的属性，因此变量`city`的值为`undefined`。\n请注意，我们没有引用`person`对象本身，只是将变量`city`设置为等于`person`对象上`city`属性的当前值。\n然后，我们将`city`设置为等于字符串`“Amsterdam”`。 这不会更改person对象：没有对该对象的引用。\n因此打印`person`对象时，会返回未修改的对象。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38783dd7f7000183302f"},"exerciseKey":"cac139d1-256d-4124-829d-5ca355a99144","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst info = {\n  [Symbol('a')]: 'b'\n}\n\nconsole.log(info)\nconsole.log(Object.keys(info))\n```","options":"{\"options\":[\"{Symbol('a'): 'b'} and [\\\"{Symbol('a')\\\"]\",\"{} and []\",\"{ a: \\\"b\\\" } and [\\\"a\\\"]\",\"{Symbol('a'): 'b'} and []\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`Symbol`类型是不可枚举的。`Object.keys`方法返回对象上的所有可枚举的键属性。`Symbol`类型是不可见的，并返回一个空数组。 记录整个对象时，所有属性都是可见的，甚至是不可枚举的属性。\n这是`Symbol`的众多特性之一：除了表示完全唯一的值（防止对象意外名称冲突，例如当使用2个想要向同一对象添加属性的库时），您还可以`隐藏`这种方式对象的属性（尽管不完全。你仍然可以使用`Object.getOwnPropertySymbols()`方法访问 `Symbol`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3878cd02c30001dd2323"},"exerciseKey":"cae03999-2c1e-4ecc-9c66-10c0714c61d6","category":"QA","renderType":"md","title":"如何实现单行／多行文本溢出的省略样式？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/ada8d840-a0e9-11eb-ab90-d9ae814b240d.png)\n\n\n## 一、前言\n\n在日常开发展示页面，如果一段文本的数量过长，受制于元素宽度的因素，有可能不能完全显示，为了提高用户的使用体验，这个时候就需要我们把溢出的文本显示成省略号\n\n对于文本的溢出，我们可以分成两种形式：\n\n- 单行文本溢出\n- 多行文本溢出\n\n\n\n## 二、实现方式\n\n\n\n### 单行文本溢出省略\n\n理解也很简单，即文本在一行内显示，超出部分以省略号的形式展现\n\n实现方式也很简单，涉及的`css`属性有：\n\n- text-overflow：规定当文本溢出时，显示省略符号来代表被修剪的文本\n- white-space：设置文字在一行显示，不能换行\n- overflow：文字长度超出限定宽度，则隐藏超出的内容\n\n`overflow`设为`hidden`，普通情况用在块级元素的外层隐藏内部溢出元素，或者配合下面两个属性实现文本溢出省略\n\n`white-space:nowrap`，作用是设置文本不换行，是`overflow:hidden`和`text-overflow：ellipsis`生效的基础\n\n`text-overflow`属性值有如下：\n\n- clip：当对象内文本溢出部分裁切掉\n- ellipsis：当对象内文本溢出时显示省略标记（...）\n\n`text-overflow`只有在设置了`overflow:hidden`和`white-space:nowrap`才能够生效的\n\n举个例子\n\n```html\n<style>\n    p{\n        overflow: hidden;\n        line-height: 40px;\n        width:400px;\n        height:40px;\n        border:1px solid red;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n</style>\n<p 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</p >\n```\n\n效果如下：\n\n ![](https://static.vue-js.com/bb3048e0-a0e9-11eb-85f6-6fac77c0c9b3.png)\n\n可以看到，设置单行文本溢出较为简单，并且省略号显示的位置较好\n\n\n\n### 多行文本溢出省略\n\n多行文本溢出的时候，我们可以分为两种情况：\n\n- 基于高度截断\n- 基于行数截断\n\n\n\n#### 基于高度截断\n\n#### 伪元素 + 定位\n\n核心的`css`代码结构如下：\n\n- position: relative：为伪元素绝对定位\n- overflow: hidden：文本溢出限定的宽度就隐藏内容）\n- position: absolute：给省略号绝对定位\n- line-height: 20px：结合元素高度,高度固定的情况下,设定行高, 控制显示行数\n- height: 40px：设定当前元素高度\n- ::after {} ：设置省略号样式\n\n代码如下所示：\n\n```html\n<style>\n    .demo {\n        position: relative;\n        line-height: 20px;\n        height: 40px;\n        overflow: hidden;\n    }\n    .demo::after {\n        content: \"...\";\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        padding: 0 20px 0 10px;\n    }\n</style>\n\n<body>\n    <div class='demo'>这是一段很长的文本</div>\n</body>\n```\n\n实现原理很好理解，就是通过伪元素绝对定位到行尾并遮住文字，再通过 `overflow: hidden` 隐藏多余文字\n\n这种实现具有以下优点：\n\n- 兼容性好，对各大主流浏览器有好的支持\n- 响应式截断，根据不同宽度做出调整\n\n一般文本存在英文的时候，可以设置`word-break: break-all`使一个单词能够在换行时进行拆分\n\n\n\n#### 基于行数截断\n\n纯`css`实现也非常简单，核心的`css`代码如下：\n\n- -webkit-line-clamp: 2：用来限制在一个块元素显示的文本的行数，为了实现该效果，它需要组合其他的WebKit属性）\n- display: -webkit-box：和1结合使用，将对象作为弹性伸缩盒子模型显示 \n- -webkit-box-orient: vertical：和1结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 \n- overflow: hidden：文本溢出限定的宽度就隐藏内容\n- text-overflow: ellipsis：多行文本的情况下，用省略号“…”隐藏溢出范围的文本\n\n```html\n<style>\n    p {\n        width: 400px;\n        border-radius: 1px solid red;\n        -webkit-line-clamp: 2;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n</style>\n<p>\n    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本\n    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本\n</p >\n```\n\n可以看到，上述使用了`webkit`的`CSS`属性扩展，所以兼容浏览器范围是`PC`端的`webkit`内核的浏览器，由于移动端大多数是使用`webkit`，所以移动端常用该形式\n\n需要注意的是，如果文本为一段很长的英文或者数字，则需要添加`word-wrap: break-word`属性\n\n还能通过使用`javascript`实现配合`css`，实现代码如下所示：\n\ncss结构如下：\n\n```css\np {\n    position: relative;\n    width: 400px;\n    line-height: 20px;\n    overflow: hidden;\n\n}\n.p-after:after{\n    content: \"...\"; \n    position: absolute; \n    bottom: 0; \n    right: 0; \n    padding-left: 40px;\n    background: -webkit-linear-gradient(left, transparent, #fff 55%);\n    background: -moz-linear-gradient(left, transparent, #fff 55%);\n    background: -o-linear-gradient(left, transparent, #fff 55%);\n    background: linear-gradient(to right, transparent, #fff 55%);\n}\n```\n\njavascript代码如下：\n\n```js\n$(function(){\n //获取文本的行高，并获取文本的高度，假设我们规定的行数是五行，那么对超过行数的部分进行限制高度，并加上省略号\n   $('p').each(function(i, obj){\n        var lineHeight = parseInt($(this).css(\"line-height\"));\n        var height = parseInt($(this).height());\n        if((height / lineHeight) >3 ){\n            $(this).addClass(\"p-after\")\n            $(this).css(\"height\",\"60px\");\n        }else{\n            $(this).removeClass(\"p-after\");\n        }\n    });\n})\n```\n","level":2,"tagId":11}
{"_id":{"$oid":"61aa387885c5f7000154305d"},"exerciseKey":"cb091ae7-6a50-441b-9513-ef6638e5f123","category":"QA","renderType":"md","title":"Typescript中 interface 和 type 的差别是什么？","desc":null,"options":null,"explanation":"## 相同点\n\n* 都可以描述一个对象或者函数\n\n**interface**\n```typescript\ninterface User {\n  name: string\n  age: number\n}\n\ninterface SetUser {\n  (name: string, age: number): void;\n}\n```\n\n**type**\n```typescript\ntype User = {\n  name: string\n  age: number\n};\n\ntype SetUser = (name: string, age: number)=> void;\n```\n\n* 都允许拓展（extends）\n\ninterface 和 type 都可以拓展，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 extends interface 。 虽然效果差不多，但是两者语法不同。\n\n**interface extends interface**\n```typescript\ninterface Name { \n  name: string; \n}\ninterface User extends Name { \n  age: number; \n}\n```\n\n**type extends type**\n```typescript\ntype Name = { \n  name: string; \n}\ntype User = Name & { age: number  };\n```\n\n**interface extends type**\n```typescript\ntype Name = { \n  name: string; \n}\ninterface User extends Name { \n  age: number; \n}\n```\n\n**type extends interface**\n```typescript\ninterface Name { \n  name: string; \n}\ntype User = Name & { \n  age: number; \n}\n```\n\n## 不同点\n\n* type 可以而 interface 不行\n\n**type 可以声明基本类型别名，联合类型，元组等类型**\n```typescript\n// 基本类型别名\ntype Name = string\n\n// 联合类型\ninterface Dog {\n    wong();\n}\ninterface Cat {\n    miao();\n}\n\ntype Pet = Dog | Cat\n\n// 具体定义数组每个位置的类型\ntype PetList = [Dog, Pet]\n```\n\n**type 语句中还可以使用 typeof 获取实例的 类型进行赋值**\n```typescript\n// 当你想获取一个变量的类型时，使用 typeof\nlet div = document.createElement('div');\ntype B = typeof div\n```\n\n**其他骚操作**\n```typescript\ntype StringOrNumber = string | number;  \ntype Text = string | { text: string };  \ntype NameLookup = Dictionary<string, Person>;  \ntype Callback<T> = (data: T) => void;  \ntype Pair<T> = [T, T];  \ntype Coordinates = Pair<number>;  \ntype Tree<T> = T | { left: Tree<T>, right: Tree<T> };\n```\n\n* interface 可以而 type 不行\n\n**interface 能够声明合并**\n\n```typescript\ninterface User {\n  name: string\n  age: number\n}\n\ninterface User {\n  sex: string\n}\n\n/*\nUser 接口为 {\n  name: string\n  age: number\n  sex: string \n}\n*/\n```\n\n一般来说，如果不清楚什么时候用interface/type，能用 interface 实现，就用 interface , 如果不能就用 type 。\n","level":3,"tagId":19}
{"_id":{"$oid":"61aa3879cd02c30001dd2326"},"exerciseKey":"cb0fc1b3-29a9-4f1a-b350-ec50276e5bdc","category":"QA","renderType":"md","title":"说说你对操作系统的理解？核心概念有哪些？","desc":null,"options":null,"explanation":"\n![](https://static.vue-js.com/0f06bf30-008a-11ec-8e64-91fdec0f05a1.png)\n\n## 一、是什么\n\n操作系统（Operating System，缩写：OS）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序，同时也是计算机系统的内核与基石\n\n简单来讲，操作系统就是一种复杂的软件，相当于软件管家\n\n操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出设备、操作网络与管理文件系统等基本事务，\n\n操作系统的类型非常多样，不同机器安装的操作系统可从简单到复杂，可从移动电话的嵌入式系统到超级电脑的大型操作系统，在计算机与用户之间起接口的作用，如下图：\n\n ![](https://static.vue-js.com/0ad1b850-009b-11ec-8e64-91fdec0f05a1.png)\n\n许多操作系统制造者对它涵盖范畴的定义也不尽一致，例如有些操作系统集成了图形用户界面，而有些仅使用命令行界面，将图形用户界面视为一种非必要的应用程序\n\n\n\n\n## 二、核心概念\n\n操作系统的核心概念都是对具体物理硬件的抽象，主要有如下：\n\n- 进程（线程）：进程（线程）是操作系统对CPU的抽象\n- 虚拟内存（地址空间）：虚拟内存是操作系统对物理内存的抽象\n- 文件：文件是操作系统对物理磁盘的抽象\n- shell：它是一个程序，可从键盘获取命令并将其提供给操作系统以执行。\n- GUI ：是一种用户界面，允许用户通过图形图标和音频指示符与电子设备进行交互\n- 计算机架构(computer architecture)： 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构\n- 多处理系统(Computer multitasking)：是指计算机同时运行多个程序的能力\n- 程序计数器(Program counter)：程序计数器 是一个 CPU 中的寄存器，用于指示计算机在其程序序列中的位置\n- 多线程(multithreading)：是指从软件或者硬件上实现多个线程并发执行的技术\n\n- CPU 核心(core)：它是 CPU 的大脑，它接收指令，并执行计算或运算以满足这些指令。一个 CPU 可以有多个内核\n- 图形处理器(Graphics Processing Unit)：又称显示核心、视觉处理器、显示芯片或绘图芯片\n- 缓存命中(cache hit)：当应用程序或软件请求数据时，会首先发生缓存命中\n\n- RAM((Random Access Memory)：随机存取存储器，也叫主存，是与 CPU 直接交换数据的内部存储器\n\n- ROM (Read Only Memory)：只读存储器是一种半导体存储器，其特性是一旦存储数据就无法改变或删除\n\n- 虚拟地址(virtual memory)： 虚拟内存是计算机系统内存管理的一种机制\n\n- 驱动程序(device driver)：设备驱动程序，简称驱动程序（driver），是一个允许高级别电脑软件与硬件交互的程序\n\n- USB(Universal Serial Bus)：是连接计算机系统与外部设备的一种串口总线标准，也是一种输入输出接口的技术规范\n\n- 地址空间(address space)：地址空间是内存中可供程序或进程使用的有效地址范\n\n- 进程间通信(interprocess communication)： 指至少两个进程或线程间传送数据或信号的一些技术或方法\n\n- 目录(directory)： 在计算机或相关设备中，一个目录或文件夹就是一个装有数字文件系统的虚拟容器\n\n- 路径(path name)： 路径是一种电脑文件或目录的名称的通用表现形式，它指向文件系统上的一个唯一位置。\n- 根目录(root directory)：根目录指的就是计算机系统中的顶层目录，比如 Windows 中的 C 盘和 D 盘，Linux 中的 /\n- 工作目录(Working directory)：它是一个计算机用语。用户在操作系统内所在的目录，用户可在此目录之下，用相对文件名访问文件。\n- 文件描述符(file descriptor)： 文件描述符是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念\n- 客户端(clients)：客户端是访问服务器提供的服务的计算机硬件或软件。\n- 服务端(servers)： 在计算中，服务器是为其他程序或设备提供功能的计算机程序或设备\n\n\n\n## 三、总结\n\n- 操作系统是管理计算机硬件与软件资源的程序，是计算机的基石\n- 操作系统本质上是一个运行在计算机上的软件程序 ，用于管理计算机硬件和软件资源\n- 操作系统存在屏蔽了硬件层的复杂性。 操作系统就像是硬件使用的负责人，统筹着各种相关事项\n- 操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理。 内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性\n\n","level":2,"tagId":30}
{"_id":{"$oid":"61aa38790d111e000103733c"},"exerciseKey":"cb23ddfc-db2e-4d2a-b859-9238d30daed9","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nclass Counter {\n  #number = 10\n\n  increment() {\n    this.#number++\n  }\n\n  getNum() {\n    return this.#number\n  }\n}\n\nconst counter = new Counter()\ncounter.increment()\n\nconsole.log(counter.#number)\n```","options":"{\"options\":[\"10\",\"11\",\"undefined\",\"SyntaxError\"],\"isMulti\":false,\"answer\":[3]}","explanation":"在 ES2020 中，通过 `#` 我们可以给 class 添加私有变量。在 class 的外部我们无法获取该值。当我们尝试输出 `counter.#number`，语法错误被抛出：我们无法在 class `Counter` 外部获取它!","level":1,"tagId":32}
{"_id":{"$oid":"61aa387934458700017f1d6f"},"exerciseKey":"cbbef7f1-c87e-4c3c-9f0a-c8c2f0683075","category":"QA","renderType":"md","title":"说说new操作符具体干了什么？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/880d0010-7a39-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n## 一、是什么\r\n\r\n在`JavaScript`中，`new`操作符用于创建一个给定构造函数的实例对象\r\n\r\n例子\r\n\r\n```js\r\nfunction Person(name, age){\r\n    this.name = name;\r\n    this.age = age;\r\n}\r\nPerson.prototype.sayName = function () {\r\n    console.log(this.name)\r\n}\r\nconst person1 = new Person('Tom', 20)\r\nconsole.log(person1)  // Person {name: \"Tom\", age: 20}\r\nt.sayName() // 'Tom'\r\n```\r\n\r\n从上面可以看到：\r\n\r\n- `new` 通过构造函数 `Person` 创建出来的实例可以访问到构造函数中的属性\r\n- `new` 通过构造函数 `Person` 创建出来的实例可以访问到构造函数原型链中的属性（即实例与构造函数通过原型链连接了起来）\r\n\r\n现在在构建函数中显式加上返回值，并且这个返回值是一个原始类型\r\n\r\n```js\r\nfunction Test(name) {\r\n  this.name = name\r\n  return 1\r\n}\r\nconst t = new Test('xxx')\r\nconsole.log(t.name) // 'xxx'\r\n```\r\n\r\n可以发现，构造函数中返回一个原始值，然而这个返回值并没有作用\r\n\r\n下面在构造函数中返回一个对象\r\n\r\n```js\r\nfunction Test(name) {\r\n  this.name = name\r\n  console.log(this) // Test { name: 'xxx' }\r\n  return { age: 26 }\r\n}\r\nconst t = new Test('xxx')\r\nconsole.log(t) // { age: 26 }\r\nconsole.log(t.name) // 'undefined'\r\n```\r\n\r\n从上面可以发现，构造函数如果返回值为一个对象，那么这个返回值会被正常使用\r\n\r\n\r\n\r\n## 二、流程\r\n\r\n从上面介绍中，我们可以看到`new`关键字主要做了以下的工作：\r\n\r\n- 创建一个新的对象`obj`\r\n- 将对象与构建函数通过原型链连接起来\r\n- 将构建函数中的`this`绑定到新建的对象`obj`上\r\n\r\n- 根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理\r\n\r\n举个例子：\r\n\r\n```js\r\nfunction Person(name, age){\r\n    this.name = name;\r\n    this.age = age;\r\n}\r\nconst person1 = new Person('Tom', 20)\r\nconsole.log(person1)  // Person {name: \"Tom\", age: 20}\r\nt.sayName() // 'Tom'\r\n```\r\n\r\n流程图如下：\r\n\r\n ![](https://static.vue-js.com/b429b990-7a39-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n\r\n\r\n## 三、手写new操作符\r\n\r\n现在我们已经清楚地掌握了`new`的执行过程\r\n\r\n那么我们就动手来实现一下`new`\r\n\r\n```js\r\nfunction mynew(Func, ...args) {\r\n    // 1.创建一个新对象\r\n    const obj = {}\r\n    // 2.新对象原型指向构造函数原型对象\r\n    obj.__proto__ = Func.prototype\r\n    // 3.将构建函数的this指向新对象\r\n    let result = Func.apply(obj, args)\r\n    // 4.根据返回值判断\r\n    return result instanceof Object ? result : obj\r\n}\r\n```\r\n\r\n测试一下\r\n\r\n```js\r\nfunction mynew(func, ...args) {\r\n    const obj = {}\r\n    obj.__proto__ = func.prototype\r\n    let result = func.apply(obj, args)\r\n    return result instanceof Object ? result : obj\r\n}\r\nfunction Person(name, age) {\r\n    this.name = name;\r\n    this.age = age;\r\n}\r\nPerson.prototype.say = function () {\r\n    console.log(this.name)\r\n}\r\n\r\nlet p = mynew(Person, \"huihui\", 123)\r\nconsole.log(p) // Person {name: \"huihui\", age: 123}\r\np.say() // huihui\r\n```\r\n\r\n可以发现，代码虽然很短，但是能够模拟实现`new`","level":2,"tagId":26}
{"_id":{"$oid":"61aa38790f30890001ab81d9"},"exerciseKey":"ccc4f906-dcd4-4eed-93b1-13ba4d853093","category":"QA","renderType":"md","title":"实现数字的千分位逗号分割","desc":null,"options":null,"explanation":"## 方案一：数组循环\n\n```javascript\nfunction thousands(num) {\n     var result = [], counter = 0;\n     num = (num || 0).toString().split('');\n     for (var i = num.length - 1; i >= 0; i--) {\n         counter++;\n         result.unshift(num[i]);\n         if (!(counter % 3) && i != 0) { result.unshift(','); }\n     }\n     console.log(result.join(''));\n }\n\nthousands(314159265354)\n```\n\n## 方案二：字符串循环\n\n直接获取字符串下标，不需要转数组\n```javascript\nfunction thousands(num) {\n     var result = '', counter = 0;\n     num = (num || 0).toString();\n     for (var i = num.length - 1; i >= 0; i--) {\n         counter++;\n         result = num.charAt(i) + result;\n         if (!(counter % 3) && i != 0) { result = ',' + result; }\n     }\n     console.log(result);\n}\nthousands(314159265354)\n```\n\n## 方案三：字符串不循环\n\n直接根据截取\n```javascript\nfunction thousands(num) {\n     var num = (num || 0).toString(), result = '';\n     while (num.length > 3) {\n         result = ',' + num.slice(-3) + result;\n         num = num.slice(0, num.length - 3);\n     }\n     if (num) { result = num + result; }\n     console.log(result);\n}\nthousands(314159265354)\n```\n\n## 方案四：正则\n\n```javascript\nfunction thousands(num) {\n     var num = (num || 0).toString(), reg = '/\\d{3}$/', result = ''; //匹配三个数字字符\n     while (reg.test(num) ) {\n         result = RegExp.lastMatch + result;//返回上一次正则表达式搜索过程中最后一个匹配的文本字符串。\n         if (num !== RegExp.lastMatch) {\n             result = ',' + result;\n             num = RegExp.leftContext;//返回上一次正则表达式匹配时，被搜索字符串中最后一个匹配文本之前(不包括最后一个匹配)的所有字符。\n         } else {\n             num = '';\n             break;\n         }\n     }\n     if (num) { result = num + result; }\n     console.log(result);\n};\nthousands(314159265354)\n```\n\n## 方案五：升级版正则\n\n```javascript\nfunction thousands(num) {\n    // \\B 匹配非单词边界，匹配位置的左右两边都是 \\w([a-zA-Z0-9_])\n    // ?=是先行断言，表示这个位置后面的内容需要满足的条件，注意只是匹配一个位置，并不匹配具体的字符，所以是零宽；\n    // ?!后行断言，表示这个位置后面的内容不能满足的条件,(?!\\d)表示接下来的位置不是数字,可以是小数点\n    // \\d{3}匹配三个数字，+表示前面的内容重复1到多次,也就是匹配3个数字一到多次，3的倍数字符串\n    // (?=(\\d{3})+(?!\\d))匹配一个位置，这个位置后面首先是3的倍数个数字的字符串，接下来的位置不是数字\n    \n    console.log(num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\n}\nthousands(314159265354.99)\n```\n\n## 方案六：凑整法\n\n```javascript\nfunction thousands(num) {\n     var num = (num || 0).toString(), temp = num.length % 3;\n     switch (temp) {\n         case 1:\n             num = '00' + num;\n             break;\n         case 2:\n             num = '0' + num;\n             break;\n     }\n     console.log (num.match(/\\d{3}/g).join(',').replace(/^0+/, ''));\n}\nthousands(314159265354)\n```\n\n## 方案七：toLocaleString\n\n```javascript\nvar num = 123456789\n//格式化千分位输出\nnum.toLocaleString()\n//格式化为千分位带$符号输出\nnum.toLocaleString(\"en-US\",{style:\"currency\",currency:\"USD\"})\n//格式化为带￥符号输出\nnum.toLocaleString(\"zh-Hans-CN\",{style:\"currency\",currency:\"CNY\"})\n```\n","level":2,"tagId":26}
{"_id":{"$oid":"61aa38793d5f3a0001af569a"},"exerciseKey":"ccde1c25-c646-4521-bf81-fcb0a3581ce2","category":"QA","renderType":"md","title":"如何判断一个元素是否在可视区域中？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/d848c790-8a05-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、用途\n\n可视区域即我们浏览网页的设备肉眼可见的区域，如下图\n\n ![](https://static.vue-js.com/9c5bbb10-8a56-11eb-85f6-6fac77c0c9b3.png)\n\n在日常开发中，我们经常需要判断目标元素是否在视窗之内或者和视窗的距离小于一个值（例如 100 px），从而实现一些常用的功能，例如：\n\n- 图片的懒加载\n- 列表的无限滚动\n- 计算广告元素的曝光情况\n- 可点击链接的预加载\n\n\n## 二、实现方式\n\n判断一个元素是否在可视区域，我们常用的有三种办法：\n\n- offsetTop、scrollTop\n\n- getBoundingClientRect \n- Intersection Observer\n\n\n\n### offsetTop、scrollTop\n\n`offsetTop`，元素的上外边框至包含元素的上内边框之间的像素距离，其他`offset`属性如下图所示：\n\n ![](https://static.vue-js.com/b4b63ca0-8a54-11eb-85f6-6fac77c0c9b3.png)\n\n下面再来了解下`clientWidth`、`clientHeight`：\n\n- `clientWidth`：元素内容区宽度加上左右内边距宽度，即`clientWidth = content + padding`\n- `clientHeight`：元素内容区高度加上上下内边距高度，即`clientHeight = content + padding`\n\n这里可以看到`client`元素都不包括外边距\n\n最后，关于`scroll`系列的属性如下：\n\n- `scrollWidth` 和 `scrollHeight` 主要用于确定元素内容的实际大小\n\n- `scrollLeft` 和 `scrollTop` 属性既可以确定元素当前滚动的状态，也可以设置元素的滚动位置\n\n- - 垂直滚动 `scrollTop > 0`\n  - 水平滚动 `scrollLeft > 0`\n\n- 将元素的 `scrollLeft` 和 `scrollTop` 设置为 0，可以重置元素的滚动位置\n\n#### 注意\n\n- 上述属性都是只读的，每次访问都要重新开始\n\n\n\n下面再看看如何实现判断：\n\n公式如下：\n\n```js\nel.offsetTop - document.documentElement.scrollTop <= viewPortHeight\n```\n\n代码实现：\n\n```js\nfunction isInViewPortOfOne (el) {\n    // viewPortHeight 兼容所有浏览器写法\n    const viewPortHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight \n    const offsetTop = el.offsetTop\n    const scrollTop = document.documentElement.scrollTop\n    const top = offsetTop - scrollTop\n    return top <= viewPortHeight\n}\n```\n\n### getBoundingClientRect \n\n返回值是一个 `DOMRect`对象，拥有`left`, `top`, `right`, `bottom`, `x`, `y`, `width`, 和 `height`属性\n\n```js\nconst target = document.querySelector('.target');\nconst clientRect = target.getBoundingClientRect();\nconsole.log(clientRect);\n\n// {\n//   bottom: 556.21875,\n//   height: 393.59375,\n//   left: 333,\n//   right: 1017,\n//   top: 162.625,\n//   width: 684\n// }\n```\n\n属性对应的关系图如下所示：\n\n ![](https://static.vue-js.com/e34ac5d0-8a05-11eb-85f6-6fac77c0c9b3.png)\n\n当页面发生滚动的时候，`top`与`left`属性值都会随之改变\n\n如果一个元素在视窗之内的话，那么它一定满足下面四个条件：\n\n- top 大于等于 0\n- left 大于等于 0\n- bottom 小于等于视窗高度\n- right 小于等于视窗宽度\n\n实现代码如下：\n\n```js\nfunction isInViewPort(element) {\n  const viewWidth = window.innerWidth || document.documentElement.clientWidth;\n  const viewHeight = window.innerHeight || document.documentElement.clientHeight;\n  const {\n    top,\n    right,\n    bottom,\n    left,\n  } = element.getBoundingClientRect();\n\n  return (\n    top >= 0 &&\n    left >= 0 &&\n    right <= viewWidth &&\n    bottom <= viewHeight\n  );\n}\n```\n\n\n\n### Intersection Observer\n\n`Intersection Observer` 即重叠观察者，从这个命名就可以看出它用于判断两个元素是否重叠，因为不用进行事件的监听，性能方面相比`getBoundingClientRect `会好很多\n\n\n\n使用步骤主要分为两步：创建观察者和传入被观察者\n\n#### 创建观察者\n\n```js\nconst options = {\n  // 表示重叠面积占被观察者的比例，从 0 - 1 取值，\n  // 1 表示完全被包含\n  threshold: 1.0, \n  root:document.querySelector('#scrollArea') // 必须是目标元素的父级元素\n};\n\nconst callback = (entries, observer) => { ....}\n\nconst observer = new IntersectionObserver(callback, options);\n```\n\n通过`new IntersectionObserver`创建了观察者 `observer`，传入的参数 `callback` 在重叠比例超过 `threshold` 时会被执行`\n\n关于`callback`回调函数常用属性如下：\n\n```js\n// 上段代码中被省略的 callback\nconst callback = function(entries, observer) { \n    entries.forEach(entry => {\n        entry.time;               // 触发的时间\n        entry.rootBounds;         // 根元素的位置矩形，这种情况下为视窗位置\n        entry.boundingClientRect; // 被观察者的位置举行\n        entry.intersectionRect;   // 重叠区域的位置矩形\n        entry.intersectionRatio;  // 重叠区域占被观察者面积的比例（被观察者不是矩形时也按照矩形计算）\n        entry.target;             // 被观察者\n    });\n};\n```\n\n#### 传入被观察者\n\n通过 `observer.observe(target)` 这一行代码即可简单的注册被观察者\n\n```js\nconst target = document.querySelector('.target');\nobserver.observe(target);\n```\n\n\n\n### 三、案例分析\n\n实现：创建了一个十万个节点的长列表，当节点滚入到视窗中时，背景就会从红色变为黄色\n\n`Html`结构如下：\n\n```js\n<div class=\"container\"></div>\n```\n\n`css`样式如下：\n\n```css\n.container {\n    display: flex;\n    flex-wrap: wrap;\n}\n.target {\n    margin: 5px;\n    width: 20px;\n    height: 20px;\n    background: red;\n}\n```\n\n往`container`插入1000个元素\n\n```js\nconst $container = $(\".container\");\n\n// 插入 100000 个 <div class=\"target\"></div>\nfunction createTargets() {\n  const htmlString = new Array(100000)\n    .fill('<div class=\"target\"></div>')\n    .join(\"\");\n  $container.html(htmlString);\n}\n```\n\n这里，首先使用`getBoundingClientRect `方法进行判断元素是否在可视区域\n\n```js\nfunction isInViewPort(element) {\n    const viewWidth = window.innerWidth || document.documentElement.clientWidth;\n    const viewHeight =\n          window.innerHeight || document.documentElement.clientHeight;\n    const { top, right, bottom, left } = element.getBoundingClientRect();\n\n    return top >= 0 && left >= 0 && right <= viewWidth && bottom <= viewHeight;\n}\n```\n\n然后开始监听`scroll`事件，判断页面上哪些元素在可视区域中，如果在可视区域中则将背景颜色设置为`yellow`\n\n```js\n$(window).on(\"scroll\", () => {\n    console.log(\"scroll !\");\n    $targets.each((index, element) => {\n        if (isInViewPort(element)) {\n            $(element).css(\"background-color\", \"yellow\");\n        }\n    });\n});\n```\n\n通过上述方式，可以看到可视区域颜色会变成黄色了，但是可以明显看到有卡顿的现象，原因在于我们绑定了`scroll`事件，`scroll`事件伴随了大量的计算，会造成资源方面的浪费\n\n下面通过`Intersection Observer`的形式同样实现相同的功能\n\n首先创建一个观察者\n\n```js\nconst observer = new IntersectionObserver(getYellow, { threshold: 1.0 });\n```\n\n`getYellow`回调函数实现对背景颜色改变，如下：\n\n```js\nfunction getYellow(entries, observer) {\n    entries.forEach(entry => {\n        $(entry.target).css(\"background-color\", \"yellow\");\n    });\n}\n```\n\n最后传入观察者，即`.target`元素\n\n```js\n$targets.each((index, element) => {\n    observer.observe(element);\n});\n```\n\n可以看到功能同样完成，并且页面不会出现卡顿的情况\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa38793976eb00014e45f0"},"exerciseKey":"cdeec2cc-5772-4c63-b7f0-34f864ea886d","category":"QA","renderType":"md","title":"介绍些 setTimeout 的运行机制","desc":null,"options":null,"explanation":"## setTimeout简介\n\nsetTimeout()函数：用来指定某个函数或某段代码在多少毫秒之后执行。它返回一个整数，表示定时器timer的编号，可以用来取消该定时器。\n\n先看个简单的例子：\n\n```js\nconsole.log(1);\nsetTimeout(function () {\n    console.log(2);\n}, 0);\nconsole.log(3);\n```\n\n问：最后的打印顺序是什么？（如果不了解js的运行机制就会答错）\n\n正确答案：`1 3 2`\n\n解析：无论setTimeout的执行时间是0还是1000，结果都是先输出3后输出2，这就是面试官常常考查的js运行机制的问题，接下来我们要引入一个概念，JavaScript 是单线程的。\n\n## JavaScript 单线程\n\nJavasScript引擎是基于事件驱动和单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行程序，即主线程。那么单线程的JavasScript是怎么实现“非阻塞执行”呢？是通过**任务队列**。\n\n所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。\n\n单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。但是如果有些任务很慢时（比如Ajax操作从网络读取数据），我还是要等结果在执行后一个任务吗？于是，有了一种异步任务。\n\n同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；而异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有主线程执行完毕，主线程去通知\"任务队列\"，某个异步任务可以执行了，该任务才会进入主线程执行。\n\n所以js的运行机制如下：\n\n* 1) 所有同步任务都在主线程上执行，形成一个执行栈（Call Stack）\n* 2) 主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件\n* 3) 一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n* 4) 主线程不断重复上面的第三步。\n\n## setTimeout运行机制\n\nsetTimeout 和 setInterval的运行机制，其实就是将指定的代码移出本次执行，等到下一轮 Event Loop 时，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就等到再下一轮 Event Loop 时重新判断。\n\n这意味着，setTimeout指定的代码，必须等到本次执行的所有同步代码都执行完，才会执行。\n\n\n\n\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa387985c5f70001543063"},"exerciseKey":"ce52c8e9-5835-4021-ba1c-1cda46ba1578","category":"QA","renderType":"md","title":"React.PureComponent 和 React.Component 有什么区别？\n","desc":null,"options":null,"explanation":"PureComponent 和 Component的区别是：Component需要手动实现 shouldComponentUpdate，而 PureComponent 通过浅对比默认实现了 shouldComponentUpdate 方法。\n\n浅比较(shallowEqual)，即react源码中的一个函数，然后根据下面的方法进行是不是PureComponent的判断，帮我们做了本来应该我们在 shouldComponentUpdate 中做的事情\n\n```js\nif (this._compositeType === CompositeTypes.PureClass) {\n  shouldUpdate = !shallowEqual(prevProps, nextProps) || ! shallowEqual(inst.state, nextState);\n}\n```\n\n注意： 浅比较只比较了第一层，复杂数据结构可能会导致更新问题\n\n总结: PureComponent 不仅会影响本身，而且会影响子组件，所以 PureComponent 最佳情况是展示组件","level":3,"tagId":13}
{"_id":{"$oid":"61aa387981337a00011e069d"},"exerciseKey":"ce8cb922-4de0-429b-9036-63d1dc387af9","category":"QA","renderType":"html","title":"webpack的热更新是如何做到的？说明其原理","desc":null,"options":null,"explanation":"<p>webpack的热更新又称热替换（Hot Module Replacement），缩写为HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p><p><br/> 首先要知道server端和client端都做了处理工作<br/> </p><ol><li>第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。</li><li>第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。</li><li>第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。</li><li>第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。</li><li>webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。</li><li>HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li><li>而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。</li><li>最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。</li></ol><p> </p>","level":2,"tagId":28}
{"_id":{"$oid":"61aa387979641200019174fd"},"exerciseKey":"cebb4191-0937-48cf-b844-1aaf0faa96f6","category":"QA","renderType":"md","title":"请手写“冒泡排序”","desc":null,"options":null,"explanation":"## 算法描述\n\n冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n## 算法步骤\n\n* 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n* 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n* 针对所有的元素重复以上的步骤，除了最后一个。\n* 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n```javascript\nfunction bubbleSort(arr) {\n    var len = arr.length;\n    for (var i = 0; i < len; i++) {\n        for (var j = 0; j < len - 1 - i; j++) {\n            if (arr[j] > arr[j+1]) {        //相邻元素两两对比\n                var temp = arr[j+1];        //元素交换\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(bubbleSort(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n## 改进冒泡排序\n\n设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。\n\n```javascript\nfunction bubbleSort2(arr) {\n    console.time('改进后冒泡排序耗时');\n    var i = arr.length-1;  //初始时,最后位置保持不变\n    while ( i> 0) {\n        var pos= 0; //每趟开始时,无记录交换\n        for (var j= 0; j< i; j++)\n            if (arr[j]> arr[j+1]) {\n                pos= j; //记录交换的位置\n                var tmp = arr[j]; arr[j]=arr[j+1];arr[j+1]=tmp;\n            }\n        i= pos; //为下一趟排序作准备\n     }\n     console.timeEnd('改进后冒泡排序耗时');\n     return arr;\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(bubbleSort2(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n## 继续优化\n\n传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。\n\n```javascript\nfunction bubbleSort3(arr3) {\n    var low = 0;\n    var high= arr.length-1; //设置变量的初始值\n    var tmp,j;\n    console.time('2.改进后冒泡排序耗时');\n    while (low < high) {\n        for (j= low; j< high; ++j) //正向冒泡,找到最大者\n            if (arr[j]> arr[j+1]) {\n                tmp = arr[j]; arr[j]=arr[j+1];arr[j+1]=tmp;\n            }\n        --high;                 //修改high值, 前移一位\n        for (j=high; j>low; --j) //反向冒泡,找到最小者\n            if (arr[j]<arr[j-1]) {\n                tmp = arr[j]; arr[j]=arr[j-1];arr[j-1]=tmp;\n            }\n        ++low;                  //修改low值,后移一位\n    }\n    console.timeEnd('2.改进后冒泡排序耗时');\n    return arr3;\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(bubbleSort3(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n","level":1,"tagId":26}
{"_id":{"$oid":"61aa38793976eb00014e45f4"},"exerciseKey":"cecf2aa7-4281-4255-95c9-e8ae487760f1","category":"QA","renderType":"md","title":"说说 JavaScript 中内存泄漏有哪几种情况？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/19f76b30-824d-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存\n\n并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费\n\n程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存\n\n对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃\n\n ![](https://static.vue-js.com/56d4bd90-821c-11eb-ab90-d9ae814b240d.png)\n\n在`C`语言中，因为是手动管理内存，内存泄露是经常出现的事情。\n\n```clang\nchar * buffer;\nbuffer = (char*) malloc(42);\n\n// Do something with buffer\n\nfree(buffer);\n```\n\n上面是 C 语言代码，`malloc`方法用来申请内存，使用完毕之后，必须自己用`free`方法释放内存。\n\n这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为\"垃圾回收机制\"\n\n\n## 二、垃圾回收机制\n\nJavascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存\n\n原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存\n\n通常情况下有两种实现方式：\n\n- 标记清除\n- 引用计数\n\n\n\n### 标记清除\n\n`JavaScript`最常用的垃圾收回机制\n\n当变量进入执行环境是，就标记这个变量为“进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境“\n\n垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉\n\n在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了\n\n随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存\n\n举个例子：\n\n```js\nvar m = 0,n = 19 // 把 m,n,add() 标记为进入环境。\nadd(m, n) // 把 a, b, c标记为进入环境。\nconsole.log(n) // a,b,c标记为离开环境，等待垃圾回收。\nfunction add(a, b) {\n  a++\n  var c = a + b\n  return c\n}\n```\n\n\n\n### 引用计数\n\n语言引擎有一张\"引用表\"，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是`0`，就表示这个值不再用到了，因此可以将这块内存释放\n\n如果一个值不再需要了，引用数却不为`0`，垃圾回收机制无法释放这块内存，从而导致内存泄漏\n\n```javascript\nconst arr = [1, 2, 3, 4];\nconsole.log('hello world');\n```\n\n面代码中，数组`[1, 2, 3, 4]`是一个值，会占用内存。变量`arr`是仅有的对这个值的引用，因此引用次数为`1`。尽管后面的代码没有用到`arr`，它还是会持续占用内存\n\n如果需要这块内存被垃圾回收机制释放，只需要设置如下：\n\n```js\narr = null\n```\n\n通过设置`arr`为`null`，就解除了对数组`[1,2,3,4]`的引用，引用次数变为 0，就被垃圾回收了\n\n\n\n### 小结\n\n有了垃圾回收机制，不代表不用关注内存泄露。那些很占空间的值，一旦不再用到，需要检查是否还存在对它们的引用。如果是的话，就必须手动解除引用\n\n\n\n## 三、常见内存泄露情况\n\n意外的全局变量\n\n```js\nfunction foo(arg) {\n    bar = \"this is a hidden global variable\";\n}\n```\n\n另一种意外的全局变量可能由 `this` 创建：\n\n```js\nfunction foo() {\n    this.variable = \"potential accidental global\";\n}\n// foo 调用自己，this 指向了全局对象（window）\nfoo();\n```\n\n上述使用严格模式，可以避免意外的全局变量\n\n定时器也常会造成内存泄露\n\n```js\nvar someResource = getData();\nsetInterval(function() {\n    var node = document.getElementById('Node');\n    if(node) {\n        // 处理 node 和 someResource\n        node.innerHTML = JSON.stringify(someResource));\n    }\n}, 1000);\n```\n\n如果`id`为Node的元素从`DOM`中移除，该定时器仍会存在，同时，因为回调函数中包含对`someResource`的引用，定时器外面的`someResource`也不会被释放\n\n包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放\n\n```js\nfunction bindEvent() {\n  var obj = document.createElement('XXX');\n  var unused = function () {\n    console.log(obj, '闭包内引用obj obj不会被释放');\n  };\n  obj = null; // 解决方法\n}\n```\n\n没有清理对`DOM`元素的引用同样造成内存泄露\n\n```js\nconst refA = document.getElementById('refA');\ndocument.body.removeChild(refA); // dom删除了\nconsole.log(refA, 'refA'); // 但是还存在引用能console出整个div 没有被回收\nrefA = null;\nconsole.log(refA, 'refA'); // 解除引用\n```\n\n包括使用事件监听`addEventListener`监听的时候，在不监听的情况下使用`removeEventListener`取消对事件监听\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa387a0f30890001ab81dd"},"exerciseKey":"cef2e473-d9d3-4c2e-937d-9ffe268aeda7","category":"QA","renderType":"md","title":"TCP链接为什么会采用三次握手，而不是两次或者四次呢？","desc":null,"options":null,"explanation":"建立连接的过程是利用客户服务器模式，假设主机A为客户端，主机B为服务器端。\n\n采用三次握手是为了防止失效的连接请求报文段突然又传送到主机B，因而产生错误。\n\n失效的连接请求报文段是指：主机A发出的连接请求没有收到主机B的确认，于是经过一段时间后，主机A又重新向主机B发送连接请求，且建立成功，顺序完成数据传输。\n\n考虑这样一种特殊情况，主机A第一次发送的连接请求并没有丢失，而是因为网络节点导致延迟达到主机B，主机B以为是主机A又发起的新连接，于是主机B同意连接，并向主机A发回确认，但是此时主机A根本不会理会，主机B就一直在等待主机A发送数据，导致主机B的资源浪费。\n\n采用两次握手不行，原因就是上面说的失效的连接请求的特殊情况。\n\n而在三次握手中，client和server都有一个发syn和收ack的过程，双方都是发后能收，表明通信则准备工作OK。\n\n为什么不是四次握手呢？ \n\n因为通信不可能100%可靠，而上面的三次握手已经做好了通信的准备工作，再增加握手，并不能显著提高可靠性，而且也没有必要。","level":2.5,"tagId":16}
{"_id":{"$oid":"61aa387ad00c060001bf12ef"},"exerciseKey":"cf173a5c-bf67-4121-ad14-ed7404bc77a4","category":"QA","renderType":"md","title":"Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/57aa5c80-5f7f-11eb-ab90-d9ae814b240d.png)\n\n\n## 一、Object.defineProperty\n\n定义：`Object.defineProperty()` 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象\n\n##### 为什么能实现响应式\n\n通过`defineProperty` 两个属性，`get`及`set`\n\n- get \n\n属性的 getter 函数，当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值\n\n- set \n\n属性的 setter 函数，当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。默认为 undefined\n\n下面通过代码展示：\n\n定义一个响应式函数`defineReactive`\n\n```js\nfunction update() {\n    app.innerText = obj.foo\n}\n\nfunction defineReactive(obj, key, val) {\n    Object.defineProperty(obj, key, {\n        get() {\n            console.log(`get ${key}:${val}`);\n            return val\n        },\n        set(newVal) {\n            if (newVal !== val) {\n                val = newVal\n                update()\n            }\n        }\n    })\n}\n```\n\n调用`defineReactive`，数据发生变化触发`update`方法，实现数据响应式\n\n```js\nconst obj = {}\ndefineReactive(obj, 'foo', '')\nsetTimeout(()=>{\n    obj.foo = new Date().toLocaleTimeString()\n},1000)\n```\n\n在对象存在多个`key`情况下，需要进行遍历\n\n```js\nfunction observe(obj) {\n    if (typeof obj !== 'object' || obj == null) {\n        return\n    }\n    Object.keys(obj).forEach(key => {\n        defineReactive(obj, key, obj[key])\n    })\n}\n```\n\n如果存在嵌套对象的情况，还需要在`defineReactive`中进行递归\n\n```js\nfunction defineReactive(obj, key, val) {\n    observe(val)\n    Object.defineProperty(obj, key, {\n        get() {\n            console.log(`get ${key}:${val}`);\n            return val\n        },\n        set(newVal) {\n            if (newVal !== val) {\n                val = newVal\n                update()\n            }\n        }\n    })\n}\n```\n\n当给`key`赋值为对象的时候，还需要在`set`属性中进行递归\n\n```js\nset(newVal) {\n    if (newVal !== val) {\n        observe(newVal) // 新值是对象的情况\n        notifyUpdate()\n    }\n}\n```\n\n上述例子能够实现对一个对象的基本响应式，但仍然存在诸多问题\n\n现在对一个对象进行删除与添加属性操作，无法劫持到\n\n```js\nconst obj = {\n    foo: \"foo\",\n    bar: \"bar\"\n}\nobserve(obj)\ndelete obj.foo // no ok\nobj.jar = 'xxx' // no ok\n```\n\n当我们对一个数组进行监听的时候，并不那么好使了\n\n```js\nconst arrData = [1,2,3,4,5];\narrData.forEach((val,index)=>{\n    defineProperty(arrData,index,val)\n})\narrData.push() // no ok\narrData.pop()  // no ok\narrDate[0] = 99 // ok\n```\n\n可以看到数据的`api`无法劫持到，从而无法实现数据响应式，\n\n所以在`Vue2`中，增加了`set`、`delete` API，并且对数组`api`方法进行一个重写\n\n还有一个问题则是，如果存在深层的嵌套对象关系，需要深层的进行监听，造成了性能的极大问题\n\n### 小结\n\n- 检测不到对象属性的添加和删除\n- 数组`API`方法无法监听到\n- 需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题\n\n\n\n## 二、proxy\n\n`Proxy`的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作，这就完全可以代理所有属性了\n\n在`ES6`系列中，我们详细讲解过`Proxy`的使用，就不再述说了\n\n下面通过代码进行展示：\n\n定义一个响应式方法`reactive`\n\n```js\nfunction reactive(obj) {\n    if (typeof obj !== 'object' && obj != null) {\n        return obj\n    }\n    // Proxy相当于在对象外层加拦截\n    const observed = new Proxy(obj, {\n        get(target, key, receiver) {\n            const res = Reflect.get(target, key, receiver)\n            console.log(`获取${key}:${res}`)\n            return res\n        },\n        set(target, key, value, receiver) {\n            const res = Reflect.set(target, key, value, receiver)\n            console.log(`设置${key}:${value}`)\n            return res\n        },\n        deleteProperty(target, key) {\n            const res = Reflect.deleteProperty(target, key)\n            console.log(`删除${key}:${res}`)\n            return res\n        }\n    })\n    return observed\n}\n```\n\n测试一下简单数据的操作，发现都能劫持\n\n```js\nconst state = reactive({\n    foo: 'foo'\n})\n// 1.获取\nstate.foo // ok\n// 2.设置已存在属性\nstate.foo = 'fooooooo' // ok\n// 3.设置不存在属性\nstate.dong = 'dong' // ok\n// 4.删除属性\ndelete state.dong // ok\n```\n\n再测试嵌套对象情况，这时候发现就不那么 OK 了\n\n```js\nconst state = reactive({\n    bar: { a: 1 }\n})\n\n// 设置嵌套对象属性\nstate.bar.a = 10 // no ok\n```\n\n如果要解决，需要在`get`之上再进行一层代理\n\n```js\nfunction reactive(obj) {\n    if (typeof obj !== 'object' && obj != null) {\n        return obj\n    }\n    // Proxy相当于在对象外层加拦截\n    const observed = new Proxy(obj, {\n        get(target, key, receiver) {\n            const res = Reflect.get(target, key, receiver)\n            console.log(`获取${key}:${res}`)\n            return isObject(res) ? reactive(res) : res\n        },\n    return observed\n}\n```\n\n\n## 三、总结\n\n`Object.defineProperty`只能遍历对象属性进行劫持\n\n```js\nfunction observe(obj) {\n    if (typeof obj !== 'object' || obj == null) {\n        return\n    }\n    Object.keys(obj).forEach(key => {\n        defineReactive(obj, key, obj[key])\n    })\n}\n```\n\n`Proxy`直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的\n\n```js\nfunction reactive(obj) {\n    if (typeof obj !== 'object' && obj != null) {\n        return obj\n    }\n    // Proxy相当于在对象外层加拦截\n    const observed = new Proxy(obj, {\n        get(target, key, receiver) {\n            const res = Reflect.get(target, key, receiver)\n            console.log(`获取${key}:${res}`)\n            return res\n        },\n        set(target, key, value, receiver) {\n            const res = Reflect.set(target, key, value, receiver)\n            console.log(`设置${key}:${value}`)\n            return res\n        },\n        deleteProperty(target, key) {\n            const res = Reflect.deleteProperty(target, key)\n            console.log(`删除${key}:${res}`)\n            return res\n        }\n    })\n    return observed\n}\n```\n\n`Proxy`可以直接监听数组的变化（`push`、`shift`、`splice`）\n\n```js\nconst obj = [1,2,3]\nconst proxtObj = reactive(obj)\nobj.psuh(4) // ok\n```\n\n`Proxy`有多达13种拦截方法,不限于`apply`、`ownKeys`、`deleteProperty`、`has`等等，这是`Object.defineProperty`不具备的\n\n正因为`defineProperty`自身的缺陷，导致`Vue2`在实现响应式过程需要实现其他的方法辅助（如重写数组方法、增加额外`set`、`delete`方法）\n\n```js\n// 数组重写\nconst originalProto = Array.prototype\nconst arrayProto = Object.create(originalProto)\n['push', 'pop', 'shift', 'unshift', 'splice', 'reverse', 'sort'].forEach(method => {\n  arrayProto[method] = function () {\n    originalProto[method].apply(this.arguments)\n    dep.notice()\n  }\n});\n\n// set、delete\nVue.set(obj,'bar','newbar')\nVue.delete(obj),'bar')\n```\n\n`Proxy` 不兼容IE，也没有 `polyfill`, `defineProperty` 能支持到IE9\n","level":3.5,"tagId":14}
{"_id":{"$oid":"61aa387ac2d0220001c9657d"},"exerciseKey":"cf1e843f-9005-42dc-b204-194dd3d1fc42","category":"QA","renderType":"md","title":"说说你对Vue生命周期的理解","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/3a119e10-3aca-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、生命周期是什么  \n\n生命周期`（Life Cycle）`的概念应用很广泛，特别是在政治、经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”`（Cradle-to-Grave）`的整个过程在`Vue`中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程我们可以把组件比喻成工厂里面的一条流水线，每个工人（生命周期）站在各自的岗位，当任务流转到工人身边的时候，工人就开始工作PS：在`Vue`生命周期钩子会自动绑定 `this` 上下文到实例中，因此你可以访问数据，对 `property` 和方法进行运算这意味着**你不能使用箭头函数来定义一个生命周期方法** \\(例如 `created: () => this.fetchTodos()`\\)\n\n## 二、生命周期有哪些\n\nVue生命周期总共可以分为8个阶段：创建前后, 载入前后,更新前后,销毁前销毁后，以及一些特殊场景的生命周期\n\n| 生命周期 | 描述 |\n| :-- | :-- |\n| beforeCreate | 组件实例被创建之初 |\n| created | 组件实例已经完全创建 |\n| beforeMount | 组件挂载之前 |\n| mounted | 组件挂载到实例上去之后 |\n| beforeUpdate | 组件数据发生变化，更新之前 |\n| updated | 数据数据更新之后 |\n| beforeDestroy | 组件实例销毁之前 |\n| destroyed | 组件实例销毁之后 |\n| activated | keep-alive 缓存的组件激活时 |\n| deactivated | keep-alive 缓存的组件停用时调用 |\n| errorCaptured | 捕获一个来自子孙组件的错误时被调用 |\n\n## 三、生命周期整体流程\n\n`Vue`生命周期流程图\n\n ![](https://static.vue-js.com/44114780-3aca-11eb-85f6-6fac77c0c9b3.png)\n\n#### 具体分析\n\n**beforeCreate -> created**\n\n- 初始化`vue`实例，进行数据观测\n\n**created**\n\n- 完成数据观测，属性与方法的运算，`watch`、`event`事件回调的配置\n- 可调用`methods`中的方法，访问和修改data数据触发响应式渲染`dom`，可通过`computed`和`watch`完成数据计算\n- 此时`vm.$el` 并没有被创建\n\n**created -> beforeMount**\n\n- 判断是否存在`el`选项，若不存在则停止编译，直到调用`vm.$mount(el)`才会继续编译\n- 优先级：`render` > `template` > `outerHTML`\n- `vm.el`获取到的是挂载`DOM`的\n\n**beforeMount**\n\n- 在此阶段可获取到`vm.el`\n- 此阶段`vm.el`虽已完成DOM初始化，但并未挂载在`el`选项上\n\n**beforeMount -> mounted**\n\n- 此阶段`vm.el`完成挂载，`vm.$el`生成的`DOM`替换了`el`选项所对应的`DOM`\n\n**mounted**\n\n- `vm.el`已完成`DOM`的挂载与渲染，此刻打印`vm.$el`，发现之前的挂载点及内容已被替换成新的DOM\n\n**beforeUpdate**\n\n- 更新的数据必须是被渲染在模板上的（`el`、`template`、`rende`r之一）\n- 此时`view`层还未更新\n- 若在`beforeUpdate`中再次修改数据，不会再次触发更新方法\n\n**updated**\n\n- 完成`view`层的更新\n- 若在`updated`中再次修改数据，会再次触发更新方法（`beforeUpdate`、`updated`）\n\n**beforeDestroy**\n\n- 实例被销毁前调用，此时实例属性与方法仍可访问\n\n**destroyed**\n\n- 完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器\n- 并不能清除DOM，仅仅销毁实例\n\n  \n\n**使用场景分析**\n\n  \n\n| 生命周期 | 描述 |\n| :-- | :-- |\n| beforeCreate | 执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务 |\n| created | 组件初始化完毕，各种数据可以使用，常用于异步数据获取 |\n| beforeMount | 未执行渲染、更新，dom未创建 |\n| mounted | 初始化结束，dom已创建，可用于获取访问数据和dom元素 |\n| beforeUpdate | 更新前，可用于获取更新前各种状态 |\n| updated | 更新后，所有状态已是最新 |\n| beforeDestroy | 销毁前，可用于一些定时器或订阅的取消 |\n| destroyed | 组件已销毁，作用同上 |\n\n## 四、题外话：数据请求在created和mouted的区别\n\n`created`是在组件实例一旦创建完成的时候立刻调用，这时候页面`dom`节点并未生成`mounted`是在页面`dom`节点渲染完毕之后就立刻执行的触发时机上`created`是比`mounted`要更早的两者相同点：都能拿到实例对象的属性和方法讨论这个问题本质就是触发的时机，放在`mounted`请求有可能导致页面闪动（页面`dom`结构已经生成），但如果在页面加载前完成则不会出现此情况建议：放在`create`生命周期当中","level":2,"tagId":14}
{"_id":{"$oid":"61aa387a0d111e0001037341"},"exerciseKey":"cf3a9965-7761-4d5e-8b0a-cbde804517b8","category":"QA","renderType":"md","title":"什么是变量提升","desc":null,"options":null,"explanation":"函数在运行的时候，会首先创建执行上下文，然后将执行上下文入栈，然后当此执行上下文处于栈顶时，开始运行执行上下文。\n\n在创建执行上下文的过程中会做三件事：创建变量对象，创建作用域链，确定 this 指向，其中创建变量对象的过程中，首先会为 arguments 创建一个属性，值为 arguments，然后会扫码 function 函数声明，创建一个同名属性，值为函数的引用，接着会扫码 var 变量声明，创建一个同名属性，值为 undefined，这就是变量提升。","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa387a81337a00011e06a5"},"exerciseKey":"cfe8f03e-1a05-4c00-baa7-04ae08c8765c","category":"QA","renderType":"md","title":"说说你对git rebase 和 git merge的理解？以及它们的区别？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/77590970-fdd4-11eb-bc6f-3f06e1491664.png)\n\n## 一、是什么\n\n在使用 `git` 进行版本管理的项目中，当完成一个特性的开发并将其合并到 `master` 分支时，会有两种方式：\n\n- git merge\n- git rebase\n\n`git rebase` 与 `git merge`都有相同的作用，都是将一个分支的提交合并到另一分支上，但是在原理上却不相同\n\n\n\n用法上两者也十分的简单：\n\n### git merge\n\n将当前分支合并到指定分支，命令用法如下：\n\n```cmd\ngit merge xxx\n```\n\n\n\n### git rebase\n\n将当前分支移植到指定分支或指定`commit`之上，用法如下：\n\n```cmd\ngit rebase -i <commit>\n```\n\n常见的参数有`--continue`，用于解决冲突之后，继续执行`rebase`\n\n```cmd\ngit rebase --continue\n```\n\n\n\n\n\n## 二、分析\n\n### git merge\n\n通过`git merge`将当前分支与`xxx`分支合并，产生的新的`commit`对象有两个父节点\n\n如果“指定分支”本身是当前分支的一个直接子节点，则会产生快照合并\n\n举个例子，`bugfix`分支是从`maste`r分支分叉出来的，如下所示：\n\n ![](https://static.vue-js.com/88410a30-fdd4-11eb-991d-334fd31f0201.png)\n\n合并` bugfix`分支到`master`分支时，如果`master`分支的状态没有被更改过，即 `bugfix`分支的历史记录包含`master`分支所有的历史记录\n\n所以通过把`master`分支的位置移动到`bugfix`的最新分支上，就完成合并\n\n如果`master`分支的历史记录在创建`bugfix`分支后又有新的提交，如下情况：\n\n ![](https://static.vue-js.com/929eb220-fdd4-11eb-991d-334fd31f0201.png)\n\n这时候使用`git merge`的时候，会生成一个新的提交，并且`master`分支的`HEAD`会移动到新的分支上，如下：\n\n ![](https://static.vue-js.com/9fdfa3e0-fdd4-11eb-991d-334fd31f0201.png)\n\n\n\n从上面可以看到，会把两个分支的最新快照以及二者最近的共同祖先进行三方合并，合并的结果是生成一个新的快照\n\n\n\n### git rebase\n\n同样，`master`分支的历史记录在创建`bugfix`分支后又有新的提交，如下情况：\n\n ![](https://static.vue-js.com/ab2d5120-fdd4-11eb-bc6f-3f06e1491664.png)\n\n通过`git rebase`，会变成如下情况：\n\n ![](https://static.vue-js.com/b72aed70-fdd4-11eb-991d-334fd31f0201.png)\n\n在移交过程中，如果发生冲突，需要修改各自的冲突，如下：\n\n ![](https://static.vue-js.com/c9ba0e80-fdd4-11eb-bc6f-3f06e1491664.png)\n\n`rebase`之后，`master`的`HEAD`位置不变。因此，要合并`master`分支和`bugfix`分支\n\n ![](https://static.vue-js.com/dc660660-fdd4-11eb-991d-334fd31f0201.png)\n\n从上面可以看到，`rebase`会找到不同的分支的最近共同祖先，如上图的`B`\n\n然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件（老的提交`X`和`Y`也没有被销毁，只是简单地不能再被访问或者使用）\n\n然后将当前分支指向目标最新位置`D`, 然后将之前另存为临时文件的修改依序应用\n\n\n\n\n\n## 三、区别\n\n从上面可以看到，`merge`和`rebasea`都是合并历史记录，但是各自特性不同：\n\n### merge\n\n通过`merge`合并分支会新增一个`merge commit`，然后将两个分支的历史联系起来\n\n其实是一种非破坏性的操作，对现有分支不会以任何方式被更改，但是会导致历史记录相对复杂\n\n\n\n### rebase\n\n`rebase `会将整个分支移动到另一个分支上，有效地整合了所有分支上的提交\n\n主要的好处是历史记录更加清晰，是在原有提交的基础上将差异内容反映进去，消除了 ` git merge `所需的不必要的合并提交\n","level":2,"tagId":29}
{"_id":{"$oid":"61aa387a3d5f3a0001af56a1"},"exerciseKey":"cffcacf0-52fc-4d67-b9d0-3e7d477b92d0","category":"QA","renderType":"md","title":"css sprites是什么，怎么使用？","desc":null,"options":null,"explanation":"## 是什么\n\nCSS Sprites是一种网页图片应用处理方式，就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位。\n\n## 优点\n\n其优点在于：\n\n* 减少网页的http请求，提高性能，这也是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；\n* 减少图片的字节：多张图片合并成1张图片的字节小于多张图片的字节总和；\n* 减少了命名困扰：只需对一张集合的图片命名，不需要对每一个小元素进行命名提高制作效率；\n* 更换风格方便：只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变，维护起来更加方便。\n\n## 缺点\n\n诚然CSS Sprites是如此的强大，但是也存在一些不可忽视的缺点：\n\n* 图片合成比较麻烦；\n* 背景设置时，需要得到每一个背景单元的精确位置；\n* 维护合成图片时，最好只是往下加图片，而不要更改已有图片。","level":1,"tagId":11}
{"_id":{"$oid":"61aa387a3dd7f70001833036"},"exerciseKey":"cfff7bf1-9ff0-4661-8e8e-2ddec4ed270a","category":"QA","renderType":"md","title":"Nginx支持哪些负载均衡调度算法？","desc":null,"options":null,"explanation":"* weight轮询（默认，常用，具有HA功效！）：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。\n* ip_hash（常用）：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。\n* fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。\n* url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。","level":3.5,"tagId":16}
{"_id":{"$oid":"61aa387a291c0100017ee2da"},"exerciseKey":"d0fd0142-dd09-4d9a-9465-012c30cd921e","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\n[...'Lydia']\n```","options":"{\"options\":[\"[\\\"L\\\", \\\"y\\\", \\\"d\\\", \\\"i\\\", \\\"a\\\"]\",\"[\\\"Lydia\\\"]\",\"[[], \\\"Lydia\\\"]\",\"[[\\\"L\\\", \\\"y\\\", \\\"d\\\", \\\"i\\\", \\\"a\\\"]]\"],\"isMulti\":false,\"answer\":[0]}","explanation":"string 类型是可迭代的。扩展运算符将迭代的每个字符映射成一个元素。","level":1,"tagId":32}
{"_id":{"$oid":"61aa387aff0573000165b391"},"exerciseKey":"d184edae-f95e-494b-8944-86e713028816","category":"QA","renderType":"md","title":"什么是受控组件？","desc":null,"options":null,"explanation":"在HTML当中，像<input>,<textarea>, 和 <select>这类表单元素会维持自身状态，并根据用户输入进行更新。但在React中，可变的状态通常保存在组件的状态属性中，并且只能用 setState() 方法进行更新。\n\n## 非受控组件\n\n非受控组件，即组件的状态不受React控制的组件，例如下边这个\n\n```react.js\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Demo1 extends Component {\n    render() {\n        return (\n            <input />\n        )\n    }\n}\n\nReactDOM.render(<Demo1/>, document.getElementById('content'))\n```\n\n在这个最简单的输入框组件里,我们并没有干涉input中的value展示,即用户输入的内容都会展示在上面。如果我们通过props给组件设置一个初始默认值,defaultValue属性是React内部实现的一个属性,目的类似于input的placeholder属性。\n\nps: 此处如果使用value代替defaultValue,会发现输入框的值无法改变\n\n## 受控组件\n\n受控组件就是组件的状态受React控制。上面提到过，既然通过设置input的value属性, 无法改变输入框值,那么我们把它和state结合在一起,再绑定onChange事件,实时更新value值就行了。\n\n```react.js\nclass Demo1 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value\n        }\n    }\n\n    handleChange(e) {\n        this.setState({\n            value: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <input value={this.state.value} onChange={e => this.handleChange(e)}/>\n        )\n    }\n}\n```\n\n\n\n","level":2.5,"tagId":13}
{"_id":{"$oid":"61aa387a91a75000018d2dba"},"exerciseKey":"d1bb4169-cd53-4398-b4a1-5e0c533c87dc","category":"QA","renderType":"md","title":"JavaScript中的原型，原型链分别是什么? ","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/4500e170-725e-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、原型\n\n`JavaScript` 常被描述为一种基于原型的语言——每个对象拥有一个原型对象\n\n当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾\n\n准确地说，这些属性和方法定义在Object的构造器函数（constructor functions）之上的`prototype`属性上，而非实例对象本身\n\n下面举个例子：\n\n函数可以有属性。 每个函数都有一个特殊的属性叫作原型`prototype` \n\n```js\nfunction doSomething(){}\nconsole.log( doSomething.prototype );\n```\n\n控制台输出\n\n```js\n{\n    constructor: ƒ doSomething(),\n    __proto__: {\n        constructor: ƒ Object(),\n        hasOwnProperty: ƒ hasOwnProperty(),\n        isPrototypeOf: ƒ isPrototypeOf(),\n        propertyIsEnumerable: ƒ propertyIsEnumerable(),\n        toLocaleString: ƒ toLocaleString(),\n        toString: ƒ toString(),\n        valueOf: ƒ valueOf()\n    }\n}\n```\n\n上面这个对象，就是大家常说的原型对象\n\n可以看到，原型对象有一个自有属性`constructor`，这个属性指向该函数，如下图关系展示\n\n ![](https://static.vue-js.com/56d87250-725e-11eb-ab90-d9ae814b240d.png)\n\n\n\n\n\n## 二、原型链\n\n原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法\n\n在对象实例和它的构造器之间建立一个链接（它是`__proto__`属性，是从构造函数的`prototype`属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法\n\n下面举个例子：\n\n```js\nfunction Person(name) {\n    this.name = name;\n    this.age = 18;\n    this.sayName = function() {\n        console.log(this.name);\n    }\n}\n// 第二步 创建实例\nvar person = new Person('person')\n```\n\n根据代码，我们可以得到下图\n\n ![](https://static.vue-js.com/60825aa0-725e-11eb-85f6-6fac77c0c9b3.png)\n\n下面分析一下：\n\n- 构造函数`Person`存在原型对象`Person.prototype`\n- 构造函数生成实例对象`person`，`person`的`__proto__`指向构造函数`Person`原型对象\n- `Person.prototype.__proto__` 指向内置对象，因为 `Person.prototype` 是个对象，默认是由 `Object `函数作为类创建的，而 `Object.prototype` 为内置对象\n\n- `Person.__proto__` 指向内置匿名函数 `anonymous`，因为 Person 是个函数对象，默认由 Function 作为类创建\n\n- `Function.prototype` 和 `Function.__proto__ `同时指向内置匿名函数 `anonymous`，这样原型链的终点就是 `null`\n\n\n\n## 三、总结\n\n下面首先要看几个概念：\n\n`__proto__`作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象的\n\n ![](https://static.vue-js.com/6a742160-725e-11eb-ab90-d9ae814b240d.png)\n\n每个对象的`__proto__`都是指向它的构造函数的原型对象`prototype`的\n\n```js\nperson1.__proto__ === Person.prototype\n```\n\n构造函数是一个函数对象，是通过 `Function `构造器产生的\n\n```js\nPerson.__proto__ === Function.prototype\n```\n\n原型对象本身是一个普通对象，而普通对象的构造函数都是`Object`\n\n```js\nPerson.prototype.__proto__ === Object.prototype\n```\n\n刚刚上面说了，所有的构造器都是函数对象，函数对象都是 `Function `构造产生的\n\n```js\nObject.__proto__ === Function.prototype\n```\n\n`Object `的原型对象也有`__proto__`属性指向`null`，`null`是原型链的顶端\n\n```js\nObject.prototype.__proto__ === null\n```\n\n下面作出总结：\n\n- 一切对象都是继承自`Object`对象，`Object` 对象直接继承根源对象` null`\n\n- 一切的函数对象（包括 `Object` 对象），都是继承自 `Function` 对象\n\n- `Object` 对象直接继承自 `Function` 对象\n\n- `Function`对象的`__proto__`会指向自己的原型对象，最终还是继承自`Object`对象\n\n","level":2.5,"tagId":10}
{"_id":{"$oid":"61aa387b0f30890001ab81e2"},"exerciseKey":"d1d9bc22-287a-4fb0-9860-51fb461006de","category":"QA","renderType":"md","title":"forEach 中能否使用 await ？","desc":null,"options":null,"explanation":"```javascript\nfunction test() {\n  let arr = [3, 2, 1];\n  arr.forEach(async (item) => {\n    const res = await fetch(item);\n    console.log(res);\n  });\n  console.log(\"end\");\n}\n\nfunction fetch(x) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 500 * x);\n  });\n}\n\ntest();\n```\n\n上面代码的输出结果是：\n\n```javascript\nend\n1\n2\n3\n```\n\n## 为什么\n\n其实原因很简单，那就是 forEach 只支持同步代码。\n\n我们可以参考下 Polyfill 版本的 forEach，简化以后类似就是这样的伪代码\n\n```javascript\nwhile (index < arr.length) {\n\tcallback(item, index)   //也就是我们传入的回调函数\n}\n```\n\n从上述代码中我们可以发现，forEach 只是简单的执行了下回调函数而已，并不会去处理异步的情况。 并且即使你在 callback 中使用 break 也并不能结束遍历。\n\n## 怎么解决\n\n一般来说解决的办法有2种：\n\n* for...of\n\n因为 for...of 内部处理的机制和 forEach 不同，forEach 是直接调用回调函数，for...of 是通过迭代器的方式去遍历。\n\n```javascript\nasync function test() {\n  let arr = [3, 2, 1];\n  for (const item of arr) {\n    const res = await fetch(item);\n    console.log(res);\n  }\n  console.log(\"end\");\n}\n```\n\n* for循环\n\n```javascript\nasync function test() {\n  let arr = [3, 2, 1];\n  for (var i = 0; i < arr.length; i++) {\n    const res = await fetch(arr[i]);\n    console.log(res);\n  }\n  console.log(\"end\");\n}\n\nfunction fetch(x) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 500 * x);\n  });\n}\n\ntest();\n```\n\n\n\n\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa387bc2d0220001c96586"},"exerciseKey":"d2396e88-33d5-4374-ba81-b41609a57289","category":"QA","renderType":"md","title":"实现一个函数，判断输入是不是回文字符串。","desc":"“回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。","options":null,"explanation":"* 解法一\n```js\nfunction isPlalindrome(input) {\n  if (typeof input !== 'string') return false;\n  return input.split('').reverse().join('') === input;\n}\n```\n\n* 解法二\n```js\nfunction isPlalindrome(input) {\n  if (typeof input !== 'string') return false;\n  let i = 0, j = input.length - 1\n  while(i < j) {\n      if(input.charAt(i) !== input.charAt(j)) return false\n      i ++\n      j --\n  }\n  return true\n}\n```","level":1,"tagId":15}
{"_id":{"$oid":"61aa387b3dd7f7000183303a"},"exerciseKey":"d26004b5-4091-4a30-b66f-7c6e78dd34c8","category":"QA","renderType":"md","title":"CSS中，box-sizing属性值有什么用？","desc":null,"options":null,"explanation":"用来控制元素的盒子模型的解析模式，默认为content-box\n\n* context-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽\n* border-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽","level":0.5,"tagId":11}
{"_id":{"$oid":"61aa387b91a75000018d2dbe"},"exerciseKey":"d28f9b69-6d6c-474d-82ad-682dddfe1aa5","category":"QA","renderType":"md","title":"为什么会出现浮动？什么时候需要清除浮动？清除浮动的方式有哪些？","desc":null,"options":null,"explanation":"浮动元素碰到包含它的边框或者浮动元素的边框停留。由于浮动元素不在文档流中，所以文档流的块框表现得就像浮动框不存在一样。浮动元素会漂浮在文档流的块框上。\n\n浮动带来的问题：\n\n* 父元素的高度无法被撑开，影响与父元素同级的元素\n* 与浮动元素同级的非浮动元素（内联元素）会跟随其后\n* 若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构。\n\n清除浮动的方式：\n\n* 父级div定义height\n* 最后一个浮动元素后加空div标签 并添加样式clear:both。\n* 包含浮动元素的父标签添加样式overflow为hidden或auto。\n* 父级div定义zoom\n","level":1,"tagId":11}
{"_id":{"$oid":"61aa387bbdfab500012c856a"},"exerciseKey":"d3411be6-a0be-4901-8f37-f418af1c0475","category":"QA","renderType":"md","title":"微前端可以解决什么问题？","desc":null,"options":null,"explanation":"任何新技术的产生都是为了解决现有场景和需求下的技术痛点，微前端也不例外：\n\n* 拆分和细化\n\n当下前端领域，单页面应用（SPA）是非常流行的项目形态之一，而随着时间的推移以及应用功能的丰富，单页应用变得不再单一而是越来越庞大也越来越难以维护，往往是改一处而动全身，由此带来的发版成本也越来越高。微前端的意义就是将这些庞大应用进行拆分，并随之解耦，每个部分可以单独进行维护和部署，提升效率。\n\n* 整合历史系统\n\n在不少的业务中，或多或少会存在一些历史项目，这些项目大多以采用老框架类似（Backbone.js，Angular.js 1）的B端管理系统为主，介于日常运营，这些系统需要结合到新框架中来使用还不能抛弃，对此我们也没有理由浪费时间和精力重写旧的逻辑。而微前端可以将这些系统进行整合，在基本不修改来逻辑的同时来同时兼容新老两套系统并行运行。\n\n## 微前端架构具备以下几个核心价值：\n\n* 技术栈无关\n\n主框架不限制接入应用的技术栈，微应用具备完全自主权\n\n* 独立开发、独立部署\n\n微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新\n\n* 增量升级\n\n在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略\n\n* 独立运行时\n\n每个微应用之间状态隔离，运行时状态不共享\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa387bc2d0220001c96589"},"exerciseKey":"d370ad63-b673-4887-899d-6446148bcfe7","category":"QA","renderType":"md","title":"cookie中的 HttpOnly 属性有什么用途？","desc":null,"options":null,"explanation":"MDN 上对HttpOnly属性的解释： \n\n> JavaScript Document.cookie API 无法访问带有 HttpOnly 属性的cookie；此类 Cookie 仅作用于服务器。例如，持久化服务器端会话的 Cookie 不需要对 JavaScript 可用，而应具有 HttpOnly 属性。此预防措施有助于缓解跨站点脚本（XSS） (en-US)攻击。\n\n也就是说，对于设置了 HttpOnly 属性为 true 的cookie，无法通过 js 进行访问或其他操作，只是在发送对应域下的请求时，浏览器会自动带上。这样可以有效缓解 XSS 攻击。","level":1,"tagId":21}
{"_id":{"$oid":"61aa387b7964120001917504"},"exerciseKey":"d428fd54-972b-44de-b0ab-cb8ac1ed27ca","category":"QA","renderType":"md","title":"说说你对版本管理的理解？","desc":null,"options":null,"explanation":"版本控制（Version control），是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步\n\n透过文档控制，能记录任何工程项目内各个模块的改动历程，并为每次改动编上序号\n\n一种简单的版本控制形式如下：赋给图的初版一个版本等级“A”。当做了第一次改变后，版本等级改为“B”，以此类推\n\n版本控制能提供项目的设计者，将设计恢复到之前任一状态的选择权\n\n简言之，你的修改只要提到到版本控制系统，基本都可以找回，版本控制系统就像一台时光机器，可以让你回到任何一个时间点","level":1,"tagId":29}
{"_id":{"$oid":"61aa387b81337a00011e06b3"},"exerciseKey":"d462f484-bcf7-4109-a4c0-c77fb2ed74de","category":"QA","renderType":"md","title":"说说Git中 fork, clone,branch这三个概念，有什么区别?","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/9c4eb9a0-f7ad-11eb-bc6f-3f06e1491664.png)\n\n\n\n## 一、是什么\n\n### fork\n\n`fork`，英语翻译过来就是叉子，动词形式则是分叉，如下图，从左到右，一条直线变成多条直线\n\n ![](https://static.vue-js.com/ad04ade0-f7ad-11eb-991d-334fd31f0201.png)\n\n转到`git`仓库中，`fork`则可以代表分叉、克隆 出一个（仓库的）新拷贝\n\n ![](https://static.vue-js.com/b4b31450-f7ad-11eb-991d-334fd31f0201.png)\n\n包含了原来的仓库（即upstream repository，上游仓库）所有内容，如分支、Tag、提交\n\n如果想将你的修改合并到原项目中时，可以通过的 Pull Request 把你的提交贡献回 原仓库\n\n### clone\n\n`clone`，译为克隆，它的作用是将文件从远程代码仓下载到本地，从而形成一个本地代码仓\n\n执行`clone`命令后，会在当前目录下创建一个名为`xxx`的目录，并在这个目录下初始化一个 `.git` 文件夹，然后从中读取最新版本的文件的拷贝\n\n默认配置下远程 `Git` 仓库中的每一个文件的每一个版本都将被拉取下来\n\n### branch\n\n`branch`，译为分支，其作用简单而言就是开启另一个分支， 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线\n\n` Git` 处理分支的方式十分轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷\n\n在我们开发中，默认只有一条`master`分支，如下图所示：\n\n ![](https://static.vue-js.com/7fa8e9c0-f923-11eb-991d-334fd31f0201.png)\n\n通过`git branch `可以创建一个分支，但并不会自动切换到新分支中去\n\n ![](https://static.vue-js.com/89efd560-f923-11eb-bc6f-3f06e1491664.png)\n\n通过`git checkout`可以切换到另一个`testing`分支\n\n ![](https://static.vue-js.com/91d1cef0-f923-11eb-bc6f-3f06e1491664.png)\n\n\n## 二、如何使用\n\n### fork\n\n当你在`github`发现感兴趣开源项目的时候，可以通过点击`github`仓库中右上角`fork`标识的按钮，如下图：\n\n ![](https://static.vue-js.com/bc4c4510-f7ad-11eb-991d-334fd31f0201.png)\n\n点击这个操作后会将这个仓库的文件、提交历史、issues和其余东西的仓库复制到自己的`github`仓库中，而你本地仓库是不会存在任何更改\n\n然后你就可以通过`git clone`对你这个复制的远程仓库进行克隆\n\n后续更改任何东西都可以在本地完成，如`git add`、`git commit`一系列的操作，然后通过`push`命令推到自己的远程仓库\n\n如果希望对方接受你的修改，可以通过发送`pull requests`给对方，如果对方接受。则会将你的修改内容更新到仓库中\n\n ![](https://static.vue-js.com/c5265a40-f7ad-11eb-991d-334fd31f0201.png)\n\n整体流程如下图：\n\n ![](https://static.vue-js.com/ced8ce10-f7ad-11eb-bc6f-3f06e1491664.png)\n\n\n### clone\n\n在`github`中，开源项目右侧存在`code`按钮，点击后则会显示开源项目`url`信息，如下图所示：\n\n ![](https://static.vue-js.com/d8685090-f7ad-11eb-bc6f-3f06e1491664.png)\n\n通过`git clone xxx`则能完成远程项目的下载\n\n\n### branch\n\n可通过`git branch`进行查看当前的分支状态，\n\n如果给了`--list`，或者没有非选项参数，现有的分支将被列出；当前的分支将以绿色突出显示，并标有星号\n\n以及通过`git branch`创建一个新的分支出来\n\n\n## 三、区别\n\n其三者区别如下：\n\n- fork 只能对代码仓进行操作，且 fork 不属于 git 的命令，通常用于代码仓托管平台的一种“操作”\n- clone 是 git 的一种命令，它的作用是将文件从远程代码仓下载到本地，从而形成一个本地代码仓\n- branch 特征与 fork 很类似，fork 得到的是一个新的、自己的代码仓，而 branch 得到的是一个代码仓的一个新分支\n","level":3,"tagId":29}
{"_id":{"$oid":"61aa387bd00c060001bf12fa"},"exerciseKey":"d4a6dd39-06ce-454f-b1ef-4ec580faf27c","category":"QA","renderType":"md","title":"说一说TypeScript中的类及其特性。","desc":null,"options":null,"explanation":"TypeScript 引入了类，以便它们可以利用诸如封装和抽象之类的面向对象技术的好处。\n\nTypeScript 编译器将 TypeScript 中的类编译为普通的 JavaScript 函数，以跨平台和浏览器工作。\n\n一个类包括以下内容：\n\n* 构造器（Constructor）\n* 属性（Properties）\n* 方法（Methods）\n\n```\nclass Employee {\n    empID: number;\n    empName: string;\n \n    constructor(ID: number, name: string) {\n        this.empName = name;\n        this.empID = ID;\n    }\n \n    getSalary(): number {\n        return 40000;\n    }\n}\n```\n类的其他特性有：\n\n* 继承（Inheritance）\n* 封装（Encapsulation）\n* 多态（Polymorphism）\n* 抽象（Abstraction）","level":2.5,"tagId":19}
{"_id":{"$oid":"61aa387cb804f8000122ab67"},"exerciseKey":"d4f2b4e6-6d91-4aed-b4de-c2166e44bc3d","category":"QA","renderType":"html","title":"HTTP的长连接和短连接分别是什么？keep-alive是干什么的","desc":null,"options":null,"explanation":"<p><code>HTTP</code>的长连接和短连接实际上是<code>TCP</code>的长连接和短连接，<code>HTTP</code>属于应用层协议。<br/><strong> 短连接：</strong>浏览器和服务器每进行一次<code>HTPP</code>操作，就建立一个连接，但任务结束就会中断这个连接<br/> <strong>长连接：</strong><code>HTTP1.1</code>规定了默认保持长连接，也称为持久连接。<br/> 意思就是，数据传输完成了保持<code>TCP</code>连接不断开（不发<code>RST</code>包、不四次握手），等待在同域名下继续用这个通道传输数据。<br/> <strong>长连接好处:</strong><br/> </p><ol><li>同一个客户端可以使用这个长连接处理其他请求，避免<code>HTTP</code>重新连接和断开所消耗的时间；</li><li>服务器可以利用这个连接 <strong>主动推送</strong> 消息到客户端（重要的）。</li></ol><p> <code>HTTP</code>头部有<code>了Connection: Keep-Alive</code>这个值，代表客户端期望这次请求是长连接的。但是并不代表一定会使用长连接，服务器端都可以无视这个值，也就是不按标准来。实现长连接要客户端和服务端都支持长连接。<br/> <code>keep-alive</code>的优点：<br/> </p><ul><li>较少的<code>CPU</code>和内存的使用（由于同时打开的连接的减少了）</li><li>允许请求和应答的<code>HTTP</code>管线化</li><li>降低拥塞控制 （<code>TCP</code>连接减少了）</li><li>减少了后续请求的延迟（无需再进行握手）</li><li>报告错误无需关闭<code>TCP</code>连接</li></ul><p> </p>","level":3,"tagId":16}
{"_id":{"$oid":"61aa387c54ebf60001a1a4d6"},"exerciseKey":"d5acd6cf-38c3-4afb-965d-be79f03cd045","category":"QA","renderType":"md","title":"什么是虚拟DOM？如何实现一个虚拟DOM？说说你的思路","desc":null,"options":null,"explanation":"\n\n ![](https://static.vue-js.com/770b9670-442c-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、什么是虚拟DOM\n\n虚拟 DOM （`Virtual DOM` ）这个概念相信大家都不陌生，从 `React` 到 `Vue` ，虚拟 `DOM` 为这两个框架都带来了跨平台的能力（`React-Native` 和 `Weex`）\n\n实际上它只是一层对真实`DOM`的抽象，以`JavaScript` 对象 (`VNode` 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上\n\n在`Javascript`对象中，虚拟`DOM` 表现为一个 `Object `对象。并且最少包含标签名 (`tag`)、属性 (`attrs`) 和子元素对象 (`children`) 三个属性，不同框架对这三个属性的名命可能会有差别\n\n创建虚拟`DOM`就是为了更好将虚拟的节点渲染到页面视图中，所以虚拟`DOM`对象的节点与真实`DOM`的属性一一照应\n\n在`vue`中同样使用到了虚拟`DOM`技术\n\n定义真实`DOM`\n\n```html\n<div id=\"app\">\n    <p class=\"p\">节点内容</p>\n    <h3>{{ foo }}</h3>\n</div>\n```\n\n实例化`vue`\n\n```js\nconst app = new Vue({\n    el:\"#app\",\n    data:{\n        foo:\"foo\"\n    }\n})\n```\n\n观察`render`的`render`，我们能得到虚拟`DOM`\n\n```js\n(function anonymous(\n) {\n\twith(this){return _c('div',{attrs:{\"id\":\"app\"}},[_c('p',{staticClass:\"p\"},\n\t\t\t\t\t  [_v(\"节点内容\")]),_v(\" \"),_c('h3',[_v(_s(foo))])])}})\n```\n\n通过`VNode`，`vue`可以对这颗抽象树进行创建节点,删除节点以及修改节点的操作， 经过`diff`算法得出一些需要修改的最小单位,再更新视图，减少了`dom`操作，提高了性能\n\n## 二、为什么需要虚拟DOM\n\n`DOM`是很慢的，其元素非常庞大，页面的性能问题，大部分都是由`DOM`操作引起的\n\n真实的`DOM`节点，哪怕一个最简单的`div`也包含着很多属性，可以打印出来直观感受一下：\n ![](https://static.vue-js.com/cc95c7f0-442c-11eb-ab90-d9ae814b240d.png)\n\n由此可见，操作`DOM`的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户的体验\n\n**举个例子：**\n\n你用传统的原生`api`或`jQuery`去操作`DOM`时，浏览器会从构建`DOM`树开始从头到尾执行一遍流程\n\n当你在一次操作时，需要更新10个`DOM`节点，浏览器没这么智能，收到第一个更新`DOM`请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程\n\n而通过`VNode`，同样更新10个`DOM`节点，虚拟`DOM`不会立即操作`DOM`，而是将这10次更新的`diff`内容保存到本地的一个`js`对象中，最终将这个`js`对象一次性`attach`到`DOM`树上，避免大量的无谓计算\n\n> 很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种GUI\n\n\n## 三、如何实现虚拟DOM\n\n首先可以看看`vue`中`VNode`的结构\n\n源码位置：src/core/vdom/vnode.js\n\n```js\nexport default class VNode {\n  tag: string | void;\n  data: VNodeData | void;\n  children: ?Array<VNode>;\n  text: string | void;\n  elm: Node | void;\n  ns: string | void;\n  context: Component | void; // rendered in this component's scope\n  functionalContext: Component | void; // only for functional component root nodes\n  key: string | number | void;\n  componentOptions: VNodeComponentOptions | void;\n  componentInstance: Component | void; // component instance\n  parent: VNode | void; // component placeholder node\n  raw: boolean; // contains raw HTML? (server only)\n  isStatic: boolean; // hoisted static node\n  isRootInsert: boolean; // necessary for enter transition check\n  isComment: boolean; // empty comment placeholder?\n  isCloned: boolean; // is a cloned node?\n  isOnce: boolean; // is a v-once node?\n\n  constructor (\n    tag?: string,\n    data?: VNodeData,\n    children?: ?Array<VNode>,\n    text?: string,\n    elm?: Node,\n    context?: Component,\n    componentOptions?: VNodeComponentOptions\n  ) {\n    /*当前节点的标签名*/\n    this.tag = tag\n    /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n    this.data = data\n    /*当前节点的子节点，是一个数组*/\n    this.children = children\n    /*当前节点的文本*/\n    this.text = text\n    /*当前虚拟节点对应的真实dom节点*/\n    this.elm = elm\n    /*当前节点的名字空间*/\n    this.ns = undefined\n    /*编译作用域*/\n    this.context = context\n    /*函数化组件作用域*/\n    this.functionalContext = undefined\n    /*节点的key属性，被当作节点的标志，用以优化*/\n    this.key = data && data.key\n    /*组件的option选项*/\n    this.componentOptions = componentOptions\n    /*当前节点对应的组件的实例*/\n    this.componentInstance = undefined\n    /*当前节点的父节点*/\n    this.parent = undefined\n    /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/\n    this.raw = false\n    /*静态节点标志*/\n    this.isStatic = false\n    /*是否作为跟节点插入*/\n    this.isRootInsert = true\n    /*是否为注释节点*/\n    this.isComment = false\n    /*是否为克隆节点*/\n    this.isCloned = false\n    /*是否有v-once指令*/\n    this.isOnce = false\n  }\n\n  // DEPRECATED: alias for componentInstance for backwards compat.\n  /* istanbul ignore next https://github.com/answershuto/learnVue*/\n  get child (): Component | void {\n    return this.componentInstance\n  }\n}\n```\n\n这里对`VNode`进行稍微的说明：\n\n- 所有对象的 `context` 选项都指向了 `Vue` 实例\n- `elm` 属性则指向了其相对应的真实 `DOM` 节点\n\n`vue`是通过`createElement`生成`VNode`\n\n源码位置：src/core/vdom/create-element.js\n\n```js\nexport function createElement (\n  context: Component,\n  tag: any,\n  data: any,\n  children: any,\n  normalizationType: any,\n  alwaysNormalize: boolean\n): VNode | Array<VNode> {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children\n    children = data\n    data = undefined\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n```\n\n上面可以看到`createElement` 方法实际上是对 `_createElement` 方法的封装，对参数的传入进行了判断\n\n```javascript\nexport function _createElement(\n    context: Component,\n    tag?: string | Class<Component> | Function | Object,\n    data?: VNodeData,\n    children?: any,\n    normalizationType?: number\n): VNode | Array<VNode> {\n    if (isDef(data) && isDef((data: any).__ob__)) {\n        process.env.NODE_ENV !== 'production' && warn(\n            `Avoid using observed data object as vnode data: ${JSON.stringify(data)}\\n` +\n            'Always create fresh vnode data objects in each render!',\n            context`\n        )\n        return createEmptyVNode()\n    }\n    // object syntax in v-bind\n    if (isDef(data) && isDef(data.is)) {\n        tag = data.is\n    }\n    if (!tag) {\n        // in case of component :is set to falsy value\n        return createEmptyVNode()\n    }\n    ... \n    // support single function children as default scoped slot\n    if (Array.isArray(children) &&\n        typeof children[0] === 'function'\n    ) {\n        data = data || {}\n        data.scopedSlots = { default: children[0] }\n        children.length = 0\n    }\n    if (normalizationType === ALWAYS_NORMALIZE) {\n        children = normalizeChildren(children)\n    } else if ( === SIMPLE_NORMALIZE) {\n        children = simpleNormalizeChildren(children)\n    }\n\t// 创建VNode\n    ...\n}\n```\n\n可以看到`_createElement`接收5个参数：\n\n- `context` 表示 `VNode` 的上下文环境，是 `Component` 类型\n- tag 表示标签，它可以是一个字符串，也可以是一个 `Component`\n\n- `data` 表示 `VNode` 的数据，它是一个 `VNodeData` 类型\n\n- `children` 表示当前 `VNode `的子节点，它是任意类型的\n\n- `normalizationType` 表示子节点规范的类型，类型不同规范的方法也就不一样，主要是参考 `render` 函数是编译生成的还是用户手写的\n\n根据`normalizationType` 的类型，`children`会有不同的定义\n\n```js\nif (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children)\n} else if ( === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children)\n}\n```\n\n`simpleNormalizeChildren`方法调用场景是 `render` 函数是编译生成的\n\n`normalizeChildren`方法调用场景分为下面两种：\n\n-  `render` 函数是用户手写的\n- 编译 `slot`、`v-for` 的时候会产生嵌套数组\n\n无论是`simpleNormalizeChildren`还是`normalizeChildren`都是对`children`进行规范（使`children` 变成了一个类型为 `VNode` 的 `Array`），这里就不展开说了\n\n规范化`children`的源码位置在：src/core/vdom/helpers/normalzie-children.js\n\n在规范化`children`后，就去创建`VNode`\n\n```js\nlet vnode, ns\n// 对tag进行判断\nif (typeof tag === 'string') {\n  let Ctor\n  ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag)\n  if (config.isReservedTag(tag)) {\n    // 如果是内置的节点，则直接创建一个普通VNode\n    vnode = new VNode(\n      config.parsePlatformTagName(tag), data, children,\n      undefined, undefined, context\n    )\n  } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n    // component\n    // 如果是component类型，则会通过createComponent创建VNode节点\n    vnode = createComponent(Ctor, data, context, children, tag)\n  } else {\n    vnode = new VNode(\n      tag, data, children,\n      undefined, undefined, context\n    )\n  }\n} else {\n  // direct component options / constructor\n  vnode = createComponent(tag, data, context, children)\n}\n```\n\n`createComponent`同样是创建`VNode`\n\n源码位置：src/core/vdom/create-component.js\n\n```js\nexport function createComponent (\n  Ctor: Class<Component> | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array<VNode>,\n  tag?: string\n): VNode | Array<VNode> | void {\n  if (isUndef(Ctor)) {\n    return\n  }\n // 构建子类构造函数 \n  const baseCtor = context.$options._base\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor)\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Invalid Component definition: ${String(Ctor)}`, context)\n    }\n    return\n  }\n\n  // async component\n  let asyncFactory\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context)\n    if (Ctor === undefined) {\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {}\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor)\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data)\n  }\n\n  // extract props\n  const propsData = extractPropsFromVNodeData(data, Ctor, tag)\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  const listeners = data.on\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn\n\n  if (isTrue(Ctor.options.abstract)) {\n    const slot = data.slot\n    data = {}\n    if (slot) {\n      data.slot = slot\n    }\n  }\n\n  // 安装组件钩子函数，把钩子函数合并到data.hook中\n  installComponentHooks(data)\n\n  //实例化一个VNode返回。组件的VNode是没有children的\n  const name = Ctor.options.name || tag\n  const vnode = new VNode(\n    `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`,\n    data, undefined, undefined, undefined, context,\n    { Ctor, propsData, listeners, tag, children },\n    asyncFactory\n  )\n  if (__WEEX__ && isRecyclableComponent(vnode)) {\n    return renderRecyclableComponentTemplate(vnode)\n  }\n\n  return vnode\n}\n```\n\n稍微提下`createComponent`生成`VNode`的三个关键流程：\n\n- 构造子类构造函数`Ctor `\n- `installComponentHooks`安装组件钩子函数\n- 实例化 `vnode`\n\n### 小结\n\n`createElement` 创建 `VNode` 的过程，每个 `VNode` 有 `children`，`children` 每个元素也是一个`VNode`，这样就形成了一个虚拟树结构，用于描述真实的`DOM`树结构\n","level":3.5,"tagId":14}
{"_id":{"$oid":"61aa387c91a75000018d2dc5"},"exerciseKey":"d627f91c-d910-447b-88b5-4f424799aa84","category":"QA","renderType":"html","title":"点击劫持","desc":null,"options":null,"explanation":"<p></p><ul><li>Clickjacking： 点击劫持，是指利用透明的按钮或连接做成陷阱，覆盖在 Web 页面之上。然后诱使用户在不知情的情况下，点击那个连接访问内容的一种攻击手段。这种行为又称为界面伪装(UI Redressing) 。</li><li>大概有两种方式：</li></ul><p>攻击者使用一个透明 iframe，覆盖在一个网页上，然后诱使用户在该页面上进行操作，此时用户将在不知情的情况下点击透明的 iframe 页面；<br/>攻击者使用一张图片覆盖在网页，遮挡网页原有的位置含义。<br/></p><hr/><p><br/><strong>一般步骤</strong><br/></p><ul><li>黑客创建一个网页利用 iframe 包含目标网站；</li><li>隐藏目标网站，使用户无法无法察觉到目标网站存在；</li><li>构造网页，诱变用户点击特点按钮</li><li>用户在不知情的情况下点击按钮，触发执行恶意网页的命令。</li></ul><p><strong>防御</strong><br/><strong><span style=\"color:#f32784\">X-FRAME-OPTIONS</span></strong>；<br/>X-FRAME-OPTIONS HTTP 响应头是用来给浏览器指示允许一个页面可否在&lt;frame&gt;, <br/><br/>&lt;iframe&gt; 或者 &lt;object&gt; 中展现的标记。<br/><br/>网站可以使用此功能，来确保自己网站内容没有被嵌到别人的网站中去，也从而避免点击劫持的攻击。<br/><strong>有三个值：</strong><br/></p><ul><li>DENY：表示页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li><li>SAMEORIGIN：表示该页面可以在相同域名页面的 frame 中展示。</li><li>ALLOW-FROM url：表示该页面可以在指定来源的 frame 中展示。</li></ul><p></p><p></p><p><br/></p>","level":3,"tagId":21}
{"_id":{"$oid":"61aa387c0d111e000103734c"},"exerciseKey":"d6a31677-c085-4ce9-8841-257659a14034","category":"QA","renderType":"md","title":"如果让你来设计一个分页功能, 你会怎么设计? 前后端如何交互?","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/54b0a390-cf14-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n在我们做数据查询的时候，如果数据量很大，比如几万条数据，放在一个页面显示的话显然不友好，这时候就需要采用分页显示的形式，如每次只显示10条数据\n\n![](https://static.vue-js.com/6070e8c0-cf14-11eb-85f6-6fac77c0c9b3.png)\n\n要实现分页功能，实际上就是从结果集中显示第1~10条记录作为第1页，显示第11~20条记录作为第2页，以此类推\n\n因此，分页实际上就是从结果集中截取出第M~N条记录\n\n\n## 二、如何实现\n\n前端实现分页功能，需要后端返回必要的数据，如总的页数，总的数据量，当前页，当前的数据\n\n```js\n{\n \"totalCount\": 1836,   // 总的条数\n \"totalPages\": 92,  // 总页数\n \"currentPage\": 1   // 当前页数\n \"data\": [     // 当前页的数据\n   {\n ...\n   }\n]\n```\n\n后端采用`mysql`作为数据的持久性存储\n\n前端向后端发送目标的页码`page`以及每页显示数据的数量`pageSize`，默认情况每次取10条数据，则每一条数据的起始位置`start`为：\n\n```js\nconst start = (page - 1) * pageSize\n```\n\n当确定了`limit`和`start`的值后，就能够确定`SQL`语句：\n\n```JS\nconst sql = `SELECT * FROM record limit ${pageSize} OFFSET ${start};`\n```\n\n上诉`SQL`语句表达的意思为：截取从`start`到`start`+`pageSize`之间（左闭右开）的数据\n\n关于查询数据总数的`SQL`语句为，`record`为表名：\n\n```mysql\nSELECT COUNT(*) FROM record\n```\n\n因此后端的处理逻辑为：\n\n- 获取用户参数页码数page和每页显示的数目 pageSize ，其中page 是必须传递的参数，pageSize为可选参数，默认为10\n- 编写 SQL 语句，利用 limit 和 OFFSET 关键字进行分页查询\n- 查询数据库，返回总数据量、总页数、当前页、当前页数据给前端\n\n代码如下所示：\n\n```js\nrouter.all('/api', function (req, res, next) {\n  var param = '';\n  // 获取参数\n  if (req.method == \"POST\") {\n    param = req.body;\n  } else {\n    param = req.query || req.params;\n  }\n  if (param.page == '' || param.page == null || param.page == undefined) {\n    res.end(JSON.stringify({ msg: '请传入参数page', status: '102' }));\n    return;\n  }\n  const pageSize = param.pageSize || 10;\n  const start = (param.page - 1) * pageSize;\n  const sql = `SELECT * FROM record limit ${pageSize} OFFSET ${start};`\n  pool.getConnection(function (err, connection) {\n    if (err) throw err;\n    connection.query(sql, function (err, results) {\n      connection.release();\n      if (err) {\n        throw err\n      } else {\n        // 计算总页数\n        var allCount = results[0][0]['COUNT(*)'];\n        var allPage = parseInt(allCount) / 20;\n        var pageStr = allPage.toString();\n        // 不能被整除\n        if (pageStr.indexOf('.') > 0) {\n          allPage = parseInt(pageStr.split('.')[0]) + 1;\n        }\n        var list = results[1];\n        res.end(JSON.stringify({ msg: '操作成功', status: '200', totalPages: allPage, currentPage: param.page, totalCount: allCount, data: list }));\n      }\n    })\n  })\n});\n```\n\n\n\n## 三、总结\n\n通过上面的分析，可以看到分页查询的关键在于，要首先确定每页显示的数量`pageSize`，然后根据当前页的索引`pageIndex`（从1开始），确定`LIMIT`和`OFFSET`应该设定的值：\n\n- LIMIT 总是设定为 pageSize\n- OFFSET 计算公式为 pageSize * (pageIndex - 1)\n\n确定了这两个值，就能查询出第 `N`页的数据\n","level":3,"tagId":18}
{"_id":{"$oid":"61aa387cb804f8000122ab6c"},"exerciseKey":"d6a65597-0522-4127-bbe1-68eb9da818ee","category":"QA","renderType":"md","title":"行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？","desc":null,"options":null,"explanation":"CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n* 常用的块状元素有：\n\n```html\n<div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form>\n```\n\n* 常用的内联元素有：\n\n```html\n<a>、<span>、<br>、<i>、<em>、<strong>、<label>、<q>、<var>、<cite>、<code>\n```\n\n* 常用的内联块状元素有：\n\n```html\n<img>、<input>\n```\n\n* 知名的空元素：\n\n```html\n<br/> <hr/> <img/> <input/> <link/> <meta/> <br />\n```\n","level":1,"tagId":12}
{"_id":{"$oid":"61aa387cd00c060001bf12ff"},"exerciseKey":"d6aa767b-f4e2-4200-ac29-22f5f1759021","category":"QA","renderType":"md","title":"React Fiber 是如何实现更新过程可控？","desc":null,"options":null,"explanation":"更新过程的可控主要体现在下面几个方面：\n\n* 任务拆分\n* 任务挂起、恢复、终止\n* 任务具备优先级\n\n## 任务拆分\n\n在 React Fiber 机制中，它采用\"化整为零\"的思想，将调和阶段（Reconciler）递归遍历 VDOM 这个大任务分成若干小任务，每个任务只负责一个节点的处理。\n\n## 任务挂起、恢复、终止\n\n* workInProgress tree\n\nworkInProgress 代表当前正在执行更新的 Fiber 树。在 render 或者 setState 后，会构建一颗 Fiber 树，也就是 workInProgress tree，这棵树在构建每一个节点的时候会收集当前节点的副作用，整棵树构建完成后，会形成一条完整的副作用链。\n\n* currentFiber tree\n\ncurrentFiber 表示上次渲染构建的 Filber 树。在每一次更新完成后 workInProgress 会赋值给 currentFiber。在新一轮更新时 workInProgress tree 再重新构建，新 workInProgress 的节点通过 alternate 属性和 currentFiber 的节点建立联系。\n\n在新 workInProgress tree 的创建过程中，会同 currentFiber 的对应节点进行 Diff 比较，收集副作用。同时也会复用和 currentFiber 对应的节点对象，减少新创建对象带来的开销。也就是说无论是创建还是更新、挂起、恢复以及终止操作都是发生在 workInProgress tree 创建过程中的。workInProgress tree 构建过程其实就是循环的执行任务和创建下一个任务。\n\n### 挂起\n\n当第一个小任务完成后，先判断这一帧是否还有空闲时间，没有就挂起下一个任务的执行，记住当前挂起的节点，让出控制权给浏览器执行更高优先级的任务。\n\n### 恢复\n\n在浏览器渲染完一帧后，判断当前帧是否有剩余时间，如果有就恢复执行之前挂起的任务。如果没有任务需要处理，代表调和阶段完成，可以开始进入渲染阶段。\n\n* 如何判断一帧是否有空闲时间的呢？\n\n使用前面提到的 RIC (RequestIdleCallback) 浏览器原生 API，React 源码中为了兼容低版本的浏览器，对该方法进行了 Polyfill。\n\n* 恢复执行的时候又是如何知道下一个任务是什么呢？\n\n答案是在前面提到的链表。在 React Fiber 中每个任务其实就是在处理一个 FiberNode 对象，然后又生成下一个任务需要处理的 FiberNode。\n\n### 终止\n\n其实并不是每次更新都会走到提交阶段。当在调和过程中触发了新的更新，在执行下一个任务的时候，判断是否有优先级更高的执行任务，如果有就终止原来将要执行的任务，开始新的 workInProgressFiber 树构建过程，开始新的更新流程。这样可以避免重复更新操作。这也是在 React 16 以后生命周期函数 componentWillMount 有可能会执行多次的原因。\n\n![image.png](https://i.loli.net/2021/08/07/zDMJxTkSUA7qQbW.png)\n\n## 任务具备优先级\n\nReact Fiber 除了通过挂起，恢复和终止来控制更新外，还给每个任务分配了优先级。具体点就是在创建或者更新 FiberNode 的时候，通过算法给每个任务分配一个到期时间（expirationTime）。在每个任务执行的时候除了判断剩余时间，如果当前处理节点已经过期，那么无论现在是否有空闲时间都必须执行该任务。过期时间的大小还代表着任务的优先级。\n\n任务在执行过程中顺便收集了每个 FiberNode 的副作用，将有副作用的节点通过 firstEffect、lastEffect、nextEffect 形成一条副作用单链表 A1(TEXT)-B1(TEXT)-C1(TEXT)-C1-C2(TEXT)-C2-B1-B2(TEXT)-B2-A。\n\n其实最终都是为了收集到这条副作用链表，有了它，在接下来的渲染阶段就通过遍历副作用链完成 DOM 更新。这里需要注意，更新真实 DOM 的这个动作是一气呵成的，不能中断，不然会造成视觉上的不连贯（commit）。\n\n\n\n\n\n","level":4,"tagId":13}
{"_id":{"$oid":"61aa387c3976eb00014e4610"},"exerciseKey":"d73bb354-253c-4832-80e1-0aa525bc7dc9","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nfunction* generatorOne() {\n  yield ['a', 'b', 'c'];\n}\n\nfunction* generatorTwo() {\n  yield* ['a', 'b', 'c'];\n}\n\nconst one = generatorOne()\nconst two = generatorTwo()\n\nconsole.log(one.next().value)\nconsole.log(two.next().value)\n```","options":"{\"options\":[\"a and a\",\"a and undefined\",\"['a', 'b', 'c'] and a\",\"a and ['a', 'b', 'c']\"],\"isMulti\":false,\"answer\":[2]}","explanation":"通过 `yield` 关键字, 我们在 `Generator` 函数里执行`yield`表达式. 通过 `yield*` 关键字, 我们可以在一个`Generator` 函数里面执行（`yield`表达式）另一个 `Generator` 函数, 或可遍历的对象 (如数组).\n在函数 `generatorOne` 中, 我们通过 `yield` 关键字 yield 了一个完整的数组 `['a', 'b', 'c']`。函数`one`通过`next`方法返回的对象的`value` 属性的值 (`one.next().value`) 等价于数组 `['a', 'b', 'c']`.\n```javascript\nconsole.log(one.next().value) // ['a', 'b', 'c']\nconsole.log(one.next().value) // undefined\n```\n在函数 `generatorTwo` 中, 我们使用 `yield*` 关键字。就相当于函数`two`第一个`yield`的值, 等价于在迭代器中第一个 `yield` 的值。数组`['a', 'b', 'c']`就是这个迭代器. 第一个 `yield` 的值就是 `a`, 所以我们第一次调用 `two.next().value`时, 就返回`a`。\n```javascript\nconsole.log(two.next().value) // 'a'\nconsole.log(two.next().value) // 'b'\nconsole.log(two.next().value) // 'c'\nconsole.log(two.next().value) // undefined\n```","level":1,"tagId":32}
{"_id":{"$oid":"61aa387cbdfab500012c8574"},"exerciseKey":"d7b4d0ce-dc04-4989-9244-88276318b6db","category":"QA","renderType":"html","title":"HTTP Request Header和Response Header里面分别都有哪些比较重要的字段","desc":null,"options":null,"explanation":"<p><strong>通用首部字段</strong>：请求报文和响应报文两方都会使用的首部<br/> </p><ul><li> <code>Cache-Control</code>  告诉所有的缓存机制是否可以缓存及哪种类型<br/> </li><li> <code>Connection</code> 表明是否需要持久连接<br/> </li><li> <code>Transfer-Encoding</code>  文件传输编码<br/> </li></ul><p><strong> Request Header</strong>：<br/> </p><ul><li> <code>Accept</code> 指定客户端能够接收的内容类型，内容类型中的先后次序表示客户端接收的先后次序<br/> </li><li> <code>Range</code> 实体的字节范围请求<br/> </li><li> <code>Authorization</code> web的认证信息<br/> </li><li> <code>Host</code> 请求资源所在服务器<br/> </li><li> <code>User-Agent</code> 客户端程序信息<br/> </li></ul><p><strong> Response Header</strong>：<br/> </p><ul><li><code>Location</code> 令客户端重定向的URI</li><li><code>ETag</code> 能够表示资源唯一资源的字符串</li><li><code>Server</code> 服务器的信息</li></ul><p><strong> 实体首部字段</strong>：（Entity头域）<br/> </p><ul><li> <code>Last-Modified</code> 请求资源的最后修改时间<br/> </li><li> <code>Expires</code> 响应过期的日期和时间<br/> </li><li> <code>Allow</code> 资源可支持http请求的方法，不允许则返回405<br/> </li><li> Content-Type 返回内容的媒体类型\tContent-Type: text/html; charset=utf-8</li></ul><p></p>","level":2,"tagId":16}
{"_id":{"$oid":"61aa387c0f30890001ab81f2"},"exerciseKey":"d7d29afc-ce7b-480d-aab0-66f70b25ce46","category":"QA","renderType":"md","title":"进程间有哪些通信方式？","desc":null,"options":null,"explanation":"* 管道通信\n* 消息队列通信\n* 信号量通信\n* 共享内存通信\n* 套接字通信","level":1,"tagId":30}
{"_id":{"$oid":"61aa387d3976eb00014e4612"},"exerciseKey":"d7e46f80-9878-4757-8535-ee962dca4ee6","category":"QA","renderType":"md","title":"页面导入样式时，使用link和@import有什么区别？","desc":null,"options":null,"explanation":"link属于HTML标签，而@import是css提供的；\n\n页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完再加载；\n\n@import只在IE5以上才能识别，而link是XHTML标签，无兼容问题；\n\nlink方式的样式的权重高于@import的权重。","level":1,"tagId":12}
{"_id":{"$oid":"61aa387dbdfab500012c8576"},"exerciseKey":"d86b13c6-54f1-423a-80c5-e52c24f71e30","category":"QA","renderType":"md","title":"Cookie 的 SameSite 属性有什么作用？","desc":null,"options":null,"explanation":"Chrome 51 开始，浏览器的 Cookie 新增加了一个SameSite属性，用来防止 CSRF 攻击和用户追踪。\n\n## 相关概念：\n\n* 第一方cookie：第一方 cookie 指的是由网络用户访问的域创建的 cookie。\n* 第三方cookie：第三方 cookie 是建立在别的域名不是你访问的域名（地址栏中的网址），比如：广告网络商就是最常见的第三方 cookies 的来源，他们用它们在多个网站上追踪用户的行为，当然这些活动可以用来调整广告。此外图像、 JavaScript 和 iframe 通常也会导致第三方 cookies 的生成。\n\n## CSRF 攻击是什么？\n\nCookie 往往用来存储用户的身份信息，恶意网站可以设法伪造带有正确 Cookie 的 HTTP 请求，这就是 CSRF 攻击。\n\n举例来说，用户登陆了银行网站your-bank.com，银行服务器发来了一个 Cookie。\n\n```\nSet-Cookie:id=a3fWa;\n```\n\n用户后来又访问了恶意网站`malicious.com`，上面有一个表单。\n\n```html\n<form action=\"your-bank.com/transfer\" method=\"POST\">\n  ...\n</form>\n```\n\n用户一旦被诱骗发送这个表单，银行网站就会收到带有正确 Cookie 的请求。为了防止这种攻击，表单一般都带有一个随机 token，告诉服务器这是真实请求。\n\n```html\n<form action=\"your-bank.com/transfer\" method=\"POST\">\n  <input type=\"hidden\" name=\"token\" value=\"dad3weg34\">\n  ...\n</form>\n```\n\n这种第三方网站引导发出的 Cookie，就称为第三方 Cookie。它除了用于 CSRF 攻击，还可以用于用户追踪。\n\n比如，Facebook 在第三方网站插入一张看不见的图片。\n\n```\n<img src=\"facebook.com\" style=\"visibility:hidden;\">\n```\n\n浏览器加载上面代码时，就会向 Facebook 发出带有 Cookie 的请求，从而 Facebook 就会知道你是谁，访问了什么网站。\n\n## SameSite 属性\n\nCookie 的SameSite属性用来限制第三方 Cookie，从而减少安全风险。\n\n它可以设置三个值:\n\n* Strict\n* Lax\n* None\n\n### Strict\n\nStrict最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。\n\n```\nSet-Cookie: CookieName=CookieValue; SameSite=Strict;\n```\n\n这个规则过于严格，可能造成非常不好的用户体验。比如，当前网页有一个 GitHub 链接，用户点击跳转就不会带有 GitHub 的 Cookie，跳转过去总是未登陆状态。\n\n### Lax\n\nLax规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。\n\n```\nSet-Cookie: CookieName=CookieValue; SameSite=Lax;\n```\n\n导航到目标网址的 GET 请求，只包括三种情况：链接，预加载请求，GET 表单。详见下表。\n\n|请求类型|示例|正常情况|Lax|\n|--|--|--|--|\n|链接|\t<a href=\"...\"></a>|\t发送 Cookie|\t发送 Cookie|\n|预加载|\t<link rel=\"prerender\" href=\"...\"/>|\t发送 Cookie|\t发送 Cookie|\n|GET| 表单\t<form method=\"GET\" action=\"...\">|发送 Cookie|\t发送 Cookie|\n|POST| 表单\t<form method=\"POST\" action=\"...\">\t|发送 Cookie|\t不发送|\n|iframe|\t<iframe src=\"...\"></iframe>|\t发送 Cookie\t|不发送|\n|AJAX|\t$.get(\"...\")\t|发送 Cookie|\t不发送|\n|Image|\t<img src=\"...\">\t|发送 Cookie|\t不发送|\n\n设置了Strict或Lax以后，基本就杜绝了 CSRF 攻击。当然，前提是用户浏览器支持 SameSite 属性。\n\n### None\n\n网站可以选择显式关闭SameSite属性，将其设为None，这样无论是否跨站都会发送 Cookie。不过，前提是必须同时设置Secure属性（Cookie 只能通过 HTTPS 协议发送），否则无效。\n\n下面的设置无效。\n\n```\nSet-Cookie: widget_session=abc123; SameSite=None\n```\n\n下面的设置有效。\n\n```\nSet-Cookie: widget_session=abc123; SameSite=None; Secure\n```\n","level":2,"tagId":21}
{"_id":{"$oid":"61aa387dd00c060001bf1303"},"exerciseKey":"d86ffa19-714c-45a6-a7e0-81ebe2248972","category":"QA","renderType":"md","title":"实现 Array.prototype.map()","desc":null,"options":null,"explanation":"```js\nArray.prototype.map = function(callback, thisArg) {\n  if (this == undefined) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callback + ' is not a function');\n  }\n  const res = [];\n  // 同理\n  const O = Object(this);\n  const len = O.length >>> 0;\n  for (let i = 0; i < len; i++) {\n    if (i in O) {\n      // 调用回调函数并传入新数组\n      res[i] = callback.call(thisArg, O[i], i, this);\n    }\n  }\n  return res;\n}\n```","level":1,"tagId":26}
{"_id":{"$oid":"61aa387d85c5f7000154307d"},"exerciseKey":"d8fe4e1f-93ef-440b-a06b-81d22897afa2","category":"QA","renderType":"md","title":"谈谈你对事件冒泡和捕获的理解","desc":null,"options":null,"explanation":"事件冒泡和事件捕获分别由微软和网景公司提出，这两个概念都是为了解决页面中事件流（事件发生顺序）的问题。\n\n```html\n<div id=\"outer\">\n    <p id=\"inner\">Click me!</p>\n</div>\n```\n上面的代码当中一个div元素当中有一个p子元素，如果两个元素都有一个click的处理函数，那么我们怎么才能知道哪一个函数会首先被触发呢？\n\n## 事件冒泡\n\n微软提出了名为事件冒泡(event bubbling)的事件流。事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。\n\n因此在事件冒泡的概念下在p元素上发生click事件的顺序应该是p -> div -> body -> html -> document\n\n## 事件捕获\n\n网景提出另一种事件流名为事件捕获(event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。\n\n因此在事件捕获的概念下在p元素上发生click事件的顺序应该是document -> html -> body -> div -> p\n\n## addEventListener的第三个参数\n\n网景 和 微软 曾经的战争还是比较火热的，当时， 网景主张捕获方式，微软主张冒泡方式。后来 w3c 采用折中的方式，平息了战火，制定了统一的标准——**先捕获再冒泡**。\n\naddEventListener的第三个参数就是为冒泡和捕获准备的。\n\naddEventListener有三个参数：\n\n```js\nelement.addEventListener(event, function, useCapture)\n```\n\n* 第一个参数是需要绑定的事件\n* 第二个参数是触发事件后要执行的函数\n* 第三个参数默认值是false，表示在事件冒泡阶段调用事件处理函数;如果参数为true，则表示在事件捕获阶段调用处理函数。\n\n\n\n","level":1,"tagId":10}
{"_id":{"$oid":"61aa387d34458700017f1d8f"},"exerciseKey":"d9ddb08c-beb1-4aa4-8c54-cbccc0395fc5","category":"QA","renderType":"md","title":"mouseover 和 mouseenter 有什么区别？","desc":null,"options":null,"explanation":"当鼠标移动到元素上时就会触发 mouseenter 事件，类似 mouseover，它们两者之间的差别是 mouseenter 不会冒泡。\n\n由于 mouseenter 不支持事件冒泡，导致在一个元素的子元素上进入或离开的时候会触发其 mouseover 和 mouseout 事件，但是却不会触发 mouseenter 和 mouseleave 事件。","level":1,"tagId":10}
{"_id":{"$oid":"61aa387d81337a00011e06c2"},"exerciseKey":"d9e5d51b-5b8d-4b80-8011-6766a0323bb3","category":"QA","renderType":"md","title":"解析url","desc":"/**\n * 解析一个url，并生成window.location对象包含的域\n * location:\n * {\n *      href: '包含完整的url',\n *      origin: '包含协议到pathname之前的内容',\n *      protocol: 'url使用的协议，包含末尾的:',\n *      username: '用户名', // 暂时不支持\n *      password: '密码',  // 暂时不支持\n *      host: '完整主机名，包含:和端口',\n *      hostname: '主机名，不包含端口'\n *      port: '端口号',\n *      pathname: '服务器上访问资源的路径/开头',\n *      search: 'query string，?开头',\n *      hash: '#开头的fragment identifier'\n * }\n *\n * @param {string} url 需要解析的url\n * @return {Object} 包含url信息的对象\n */\n","options":null,"explanation":"## 方案一\n```javascript\nfunction parseUrl(url) {\n    var result = {};\n    var keys = ['href', 'origin', 'protocol', 'host',\n                'hostname', 'port', 'pathname', 'search', 'hash'];\n    var i, len;\n    var regexp = /(([^:]+:)\\/\\/(([^:\\/\\?#]+)(:\\d+)?))(\\/[^?#]*)?(\\?[^#]*)?(#.*)?/;\n\n    var match = regexp.exec(url);\n\t console.info('match=', match);\n\t \n    if (match) {\n        for (i = keys.length - 1; i >= 0; --i) {\n            result[keys[i]] = match[i] ? match[i] : '';\n        }\n    }\n\t console.info('result=', result);\n    return result;\n}\n```\n\n## 方案二\n\n```javascript\nfunction parseURL(url) {\n  //创建一个 a 标签，并将 url 赋值给标签的 href 属性。\n  const a = document.createElement('a')\n  a.href = url\n  return {\n    source: url,\n    protocol: a.protocol.replace(':', ''), // 协议\n    host: a.hostname,   // 主机名称\n    port: a.port,   // 端口号\n    query: a.search,  // 查询字符串\n    params: (function () {  // 查询参数\n      let ret = {},\n        seg = a.search.replace(/^\\?/, '').split('&'),\n        len = seg.length, i = 0, s\n      for (; i < len; i++) {\n        if (!seg[i]) {\n          continue\n        }\n        s = seg[i].split('=')\n        ret[s[0]] = decodeURIComponent(s[1])\n      }\n      return ret\n    })(),\n    file: (a.pathname.match(/\\/([^\\/?#]+)$/i) || [, ''])[1], // 文件名\n    hash: a.hash.replace('#', ''), // 哈希参数\n    path: a.pathname.replace(/^([^\\/])/, '/$1'), // 路径\n    relative: (a.href.match(/tps?:\\/\\/[^\\/]+(.+)/) || [, ''])[1],  // 相对路径\n    segments: a.pathname.replace(/^\\//, '').split('/') // 路径片段\n  }\n}\n\nparseUrl(\"http://test.com:8080?name=1&password=2#page1\");\n```","level":1,"tagId":26}
{"_id":{"$oid":"61aa387dcd02c30001dd2344"},"exerciseKey":"d9fc73ae-b463-4632-bbf9-dbb1a0cfa83d","category":"QA","renderType":"md","title":"砝码称重问题（一）","desc":"如何制造个数最少的单位砝码，如 1g，2g，3g，4g……，使得这些单位砝码能称出1g到100g之间的任何整数克的物体？","options":null,"explanation":"最直观的感受是直接使用1,2,4,8......，64 。也就是2^0,2^1,2^2......2^6，一共7个砝码，因为任何数字都可以表示成二进制数，比如100用二进制表示就是：1100100，所以使用2^2,2^5,2^6三个砝码即可。任何数字都可以表示为二进制数，在这里就意味着任何重量都可以用上述2^n砝码表示。\n\n但这是最少数量的砝码吗？\n\n这要视情况而定，如果只能在天平的一边放砝码，另一边放物品，这就是最少的方案。因为对于砝码而言只有两种状态：放与不放，对于n个砝码，可能出现的总体状态有2^n种状态，要表示100个数据则要保证2^n>=100，得最小的n=7，意思就是说不管什么砝码方案，至少都要7个砝码。而前面我们猜想的方案正好是7个砝码，正好是理论推导出的最少砝码个数，不会比这个数目更少了，所以是一个最少的方案。\n\n如果允许天平两边都放砝码，也就是说物品可以和砝码放在一边，上述2^n砝码方案就不是最少的方案了。\n\n因为砝码有三种状态：不放、放左边和放右边。\n\n对于n个砝码，可能出现的总体状态有3^n种状态，要表示100个数据则要保证3^n>=100,的最小的n=5，意思就是说不管什么砝码方案，至少都要5个砝码。\n\n接下来我们尝试一下能不能找到5个砝码的方案。\n\n任意一个数都可以表示成三进制的数，比如100用三进制表示就是10201，通过减法，我们又可以把任意一个三进制数化成只有0和1的形式，比如将10201化成10201=11001-100。而且减数与被减数相同位上的数字必然不会同时为1，假如化成减法形式后相同位同时为1，比如110-10，两个数的十位上都为1，结果必然是100，没有2，所以不用化简，矛盾。\n\n综上，3^0,3^1,3^2......3^4一共5个砝码一定可以表示出从1到3^0+3^1+3^2+...+3^4=121的所有数（注:不是3^5-1）","level":4,"tagId":17}
{"_id":{"$oid":"61aa387d0f30890001ab81fb"},"exerciseKey":"da1881cc-64b9-40f8-8a25-a6256c1349ed","category":"QA","renderType":"md","title":"谈谈对Vue中双向绑定的理解","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/cef7dcc0-3ac9-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、什么是双向绑定\n\n我们先从单向绑定切入单向绑定非常简单，就是把`Model`绑定到`View`，当我们用`JavaScript`代码更新`Model`时，`View`就会自动更新双向绑定就很容易联想到了，在单向绑定的基础上，用户更新了`View`，`Model`的数据也自动被更新了，这种情况就是双向绑定举个栗子\n\n ![](https://static.vue-js.com/d65738d0-3ac9-11eb-ab90-d9ae814b240d.png)\n\n当用户填写表单时，`View`的状态就被更新了，如果此时可以自动更新`Model`的状态，那就相当于我们把`Model`和`View`做了双向绑定关系图如下\n\n ![](https://static.vue-js.com/dcc1d4a0-3ac9-11eb-ab90-d9ae814b240d.png)\n\n## 二、双向绑定的原理是什么\n\n我们都知道 `Vue` 是数据双向绑定的框架，双向绑定由三个重要部分构成\n\n- 数据层（Model）：应用的数据及业务逻辑\n- 视图层（View）：应用的展示效果，各类UI组件\n- 业务逻辑层（ViewModel）：框架封装的核心，它负责将数据与视图关联起来\n\n而上面的这个分层的架构方案，可以用一个专业术语进行称呼：`MVVM`这里的控制层的核心功能便是 “数据双向绑定” 。自然，我们只需弄懂它是什么，便可以进一步了解数据绑定的原理\n\n### 理解ViewModel\n\n它的主要职责就是：\n\n- 数据变化后更新视图\n- 视图变化后更新数据\n\n当然，它还有两个主要部分组成\n\n- 监听器（Observer）：对所有数据的属性进行监听\n- 解析器（Compiler）：对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数\n\n### 三、实现双向绑定\n\n我们还是以`Vue`为例，先来看看`Vue`中的双向绑定流程是什么的\n\n1.  `new Vue()`首先执行初始化，对`data`执行响应化处理，这个过程发生`Observe`中\n2.  同时对模板执行编译，找到其中动态绑定的数据，从`data`中获取并初始化视图，这个过程发生在`Compile`中\n3.  同时定义⼀个更新函数和`Watcher`，将来对应数据变化时`Watcher`会调用更新函数\n4.  由于`data`的某个`key`在⼀个视图中可能出现多次，所以每个`key`都需要⼀个管家`Dep`来管理多个`Watcher`\n5.  将来data中数据⼀旦发生变化，会首先找到对应的`Dep`，通知所有`Watcher`执行更新函数\n\n流程图如下：\n\n ![](https://static.vue-js.com/e5369850-3ac9-11eb-85f6-6fac77c0c9b3.png)\n\n### 实现\n\n先来一个构造函数：执行初始化，对`data`执行响应化处理\n\n```js\nclass Vue {  \n  constructor(options) {  \n    this.$options = options;  \n    this.$data = options.data;  \n        \n    // 对data选项做响应式处理  \n    observe(this.$data);  \n        \n    // 代理data到vm上  \n    proxy(this);  \n        \n    // 执行编译  \n    new Compile(options.el, this);  \n  }  \n}  \n```\n\n对`data`选项执行响应化具体操作\n\n```js\nfunction observe(obj) {  \n  if (typeof obj !== \"object\" || obj == null) {  \n    return;  \n  }  \n  new Observer(obj);  \n}  \n  \nclass Observer {  \n  constructor(value) {  \n    this.value = value;  \n    this.walk(value);  \n  }  \n  walk(obj) {  \n    Object.keys(obj).forEach((key) => {  \n      defineReactive(obj, key, obj[key]);  \n    });  \n  }  \n}  \n```\n\n#### 编译`Compile`\n\n对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数\n\n ![](https://static.vue-js.com/f27e19c0-3ac9-11eb-85f6-6fac77c0c9b3.png)\n\n```\nclass Compile {  \n  constructor(el, vm) {  \n    this.$vm = vm;  \n    this.$el = document.querySelector(el);  // 获取dom  \n    if (this.$el) {  \n      this.compile(this.$el);  \n    }  \n  }  \n  compile(el) {  \n    const childNodes = el.childNodes;   \n    Array.from(childNodes).forEach((node) => { // 遍历子元素  \n      if (this.isElement(node)) {   // 判断是否为节点  \n        console.log(\"编译元素\" + node.nodeName);  \n      } else if (this.isInterpolation(node)) {  \n        console.log(\"编译插值⽂本\" + node.textContent);  // 判断是否为插值文本 {{}}  \n      }  \n      if (node.childNodes && node.childNodes.length > 0) {  // 判断是否有子元素  \n        this.compile(node);  // 对子元素进行递归遍历  \n      }  \n    });  \n  }  \n  isElement(node) {  \n    return node.nodeType == 1;  \n  }  \n  isInterpolation(node) {  \n    return node.nodeType == 3 && /\\{\\{(.*)\\}\\}/.test(node.textContent);  \n  }  \n}  \n  \n```\n\n#### 依赖收集\n\n视图中会用到`data`中某`key`，这称为依赖。同⼀个`key`可能出现多次，每次都需要收集出来用⼀个`Watcher`来维护它们，此过程称为依赖收集多个`Watcher`需要⼀个`Dep`来管理，需要更新时由`Dep`统⼀通知\n\n ![](https://static.vue-js.com/fa191f40-3ac9-11eb-ab90-d9ae814b240d.png)\n\n实现思路\n\n 1. `defineReactive`时为每⼀个`key`创建⼀个`Dep`实例\n 2. 初始化视图时读取某个`key`，例如`name1`，创建⼀个`watcher1`\n 3. 由于触发`name1`的`getter`方法，便将`watcher1`添加到`name1`对应的Dep中\n 4. 当`name1`更新，`setter`触发时，便可通过对应`Dep`通知其管理所有`Watcher`更新\n\n```js\n// 负责更新视图  \nclass Watcher {  \n  constructor(vm, key, updater) {  \n    this.vm = vm  \n    this.key = key  \n    this.updaterFn = updater  \n  \n    // 创建实例时，把当前实例指定到Dep.target静态属性上  \n    Dep.target = this  \n    // 读一下key，触发get  \n    vm[key]  \n    // 置空  \n    Dep.target = null  \n  }  \n  \n  // 未来执行dom更新函数，由dep调用的  \n  update() {  \n    this.updaterFn.call(this.vm, this.vm[this.key])  \n  }  \n}  \n```\n\n声明`Dep`\n\n```js\nclass Dep {  \n  constructor() {  \n    this.deps = [];  // 依赖管理  \n  }  \n  addDep(dep) {  \n    this.deps.push(dep);  \n  }  \n  notify() {   \n    this.deps.forEach((dep) => dep.update());  \n  }  \n}  \n```\n\n创建`watcher`时触发`getter`\n\n```js\nclass Watcher {  \n  constructor(vm, key, updateFn) {  \n    Dep.target = this;  \n    this.vm[this.key];  \n    Dep.target = null;  \n  }  \n}  \n  \n```\n\n依赖收集，创建`Dep`实例\n\n```js\nfunction defineReactive(obj, key, val) {  \n  this.observe(val);  \n  const dep = new Dep();  \n  Object.defineProperty(obj, key, {  \n    get() {  \n      Dep.target && dep.addDep(Dep.target);// Dep.target也就是Watcher实例  \n      return val;  \n    },  \n    set(newVal) {  \n      if (newVal === val) return;  \n      dep.notify(); // 通知dep执行更新方法  \n    },  \n  });  \n}  \n```\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa387e91a75000018d2dd2"},"exerciseKey":"da532e2b-898c-4a7d-b179-fbe8052c8c60","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconst getList = ([x, ...y]) => [x, y]\nconst getUser = user => { name: user.name, age: user.age }\n\nconst list = [1, 2, 3, 4]\nconst user = { name: \"Lydia\", age: 21 }\n\nconsole.log(getList(list))\nconsole.log(getUser(user))\n```","options":"{\"options\":[\"[1, [2, 3, 4]] and undefined\",\"[1, [2, 3, 4]] and { name: \\\"Lydia\\\", age: 21 }\",\"[1, 2, 3, 4] and { name: \\\"Lydia\\\", age: 21 }\",\"Error and { name: \\\"Lydia\\\", age: 21 }\"],\"isMulti\":false,\"answer\":[0]}","explanation":"`getList`函数接收一个数组作为其参数。 在`getList`函数的括号之间，我们立即解构这个数组。 您可以将其视为：\n `[x, ...y] = [1, 2, 3, 4]`\n使用剩余的参数`... y`，我们将所有剩余参数放在一个数组中。 在这种情况下，其余的参数是`2`，`3`和`4`。 `y`的值是一个数组，包含所有其余参数。 在这种情况下，`x`的值等于`1`，所以当我们打印`[x，y]`时，会打印`[1，[2,3,4]]`。\n `getUser`函数接收一个对象。对于箭头函数，如果只返回一个值，我们不必编写花括号。但是，如果您想从一个箭头函数返回一个对象，您必须在圆括号之间编写它，否则不会返回任何值!下面的函数将返回一个对象:\n```const getUser = user => ({ name: user.name, age: user.age })```\n由于在这种情况下不返回任何值，因此该函数返回`undefined`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa387eff0573000165b3ab"},"exerciseKey":"db22b09c-fdbb-4a6c-8fdd-2ad65bb11846","category":"QA","renderType":"md","title":"Vue中的 v-show 和 v-if 有什么区别","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/d21c3c50-3acb-11eb-85f6-6fac77c0c9b3.png)\n\n\n## 一、v-show与v-if的共同点\n\n我们都知道在 `vue` 中 `v-show ` 与 `v-if` 的作用效果是相同的(不含v-else)，都能控制元素在页面是否显示\n\n在用法上也是相同的\n\n```js\n<Model v-show=\"isShow\" />\n<Model v-if=\"isShow\" />\n```\n\n- 当表达式为`true`的时候，都会占据页面的位置\n- 当表达式都为`false`时，都不会占据页面位置\n\n\n## 二、v-show与v-if的区别\n\n- 控制手段不同\n- 编译过程不同\n- 编译条件不同\n\n控制手段：`v-show`隐藏则是为该元素添加`css--display:none`，`dom`元素依旧还在。`v-if`显示隐藏是将`dom`元素整个添加或删除\n\n编译过程：`v-if`切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；`v-show`只是简单的基于css切换\n\n编译条件：`v-if`是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染\n\n- `v-show` 由`false`变为`true`的时候不会触发组件的生命周期\n\n- `v-if`由`false`变为`true`的时候，触发组件的`beforeCreate`、`create`、`beforeMount`、`mounted`钩子，由`true`变为`false`的时候触发组件的`beforeDestory`、`destoryed`方法\n\n性能消耗：`v-if`有更高的切换消耗；`v-show`有更高的初始渲染消耗；\n\n## 三、v-show与v-if原理分析\n\n具体解析流程这里不展开讲，大致流程如下\n- 将模板`template`转为`ast`结构的`JS`对象\n- 用`ast`得到的`JS`对象拼装`render`和`staticRenderFns`函数\n- `render`和`staticRenderFns`函数被调用后生成虚拟`VNODE`节点，该节点包含创建`DOM`节点所需信息\n- `vm.patch`函数通过虚拟`DOM`算法利用`VNODE`节点创建真实`DOM`节点\n\n### v-show原理\n\n不管初始条件是什么，元素总是会被渲染\n\n我们看一下在`vue`中是如何实现的\n\n代码很好理解，有`transition`就执行`transition`，没有就直接设置`display`属性\n\n```js\n// https://github.com/vuejs/vue-next/blob/3cd30c5245da0733f9eb6f29d220f39c46518162/packages/runtime-dom/src/directives/vShow.ts\nexport const vShow: ObjectDirective<VShowElement> = {\n  beforeMount(el, { value }, { transition }) {\n    el._vod = el.style.display === 'none' ? '' : el.style.display\n    if (transition && value) {\n      transition.beforeEnter(el)\n    } else {\n      setDisplay(el, value)\n    }\n  },\n  mounted(el, { value }, { transition }) {\n    if (transition && value) {\n      transition.enter(el)\n    }\n  },\n  updated(el, { value, oldValue }, { transition }) {\n    // ...\n  },\n  beforeUnmount(el, { value }) {\n    setDisplay(el, value)\n  }\n}\n```\n\n### v-if原理\n\n`v-if`在实现上比`v-show`要复杂的多，因为还有`else` `else-if` 等条件需要处理，这里我们也只摘抄源码中处理 `v-if` 的一小部分\n\n返回一个`node`节点，`render`函数通过表达式的值来决定是否生成`DOM`\n\n```js\n// https://github.com/vuejs/vue-next/blob/cdc9f336fd/packages/compiler-core/src/transforms/vIf.ts\nexport const transformIf = createStructuralDirectiveTransform(\n  /^(if|else|else-if)$/,\n  (node, dir, context) => {\n    return processIf(node, dir, context, (ifNode, branch, isRoot) => {\n      // ...\n      return () => {\n        if (isRoot) {\n          ifNode.codegenNode = createCodegenNodeForBranch(\n            branch,\n            key,\n            context\n          ) as IfConditionalExpression\n        } else {\n          // attach this branch's codegen node to the v-if root.\n          const parentCondition = getParentCondition(ifNode.codegenNode!)\n          parentCondition.alternate = createCodegenNodeForBranch(\n            branch,\n            key + ifNode.branches.length - 1,\n            context\n          )\n        }\n      }\n    })\n  }\n)\n```\n\n## 四、v-show与v-if的使用场景\n\n`v-if` 与 `v-show` 都能控制`dom`元素在页面的显示\n\n`v-if` 相比 `v-show` 开销更大的（直接操作`dom`节点增加与删除） \n\n如果需要非常频繁地切换，则使用 v-show 较好\n\n如果在运行时条件很少改变，则使用 v-if 较好\n","level":1,"tagId":14}
{"_id":{"$oid":"61aa387e7964120001917511"},"exerciseKey":"dc0b6bc1-71a9-4dec-a1df-a63d08f1c888","category":"QA","renderType":"md","title":"实现柯里化","desc":null,"options":null,"explanation":"柯里化是什么：是指这样一个函数，它接收函数 A，并且能返回一个新的函数，这个新的函数能够处理函数 A 的剩余参数\n\n```js\nfunction createCurry(func, args) {\n  var argity = func.length;\n  var args = args || [];\n  \n  return function () {\n    var _args = [].slice.apply(arguments);\n    args.push(..._args);\n    \n    if (args.length < argity) {\n      return createCurry.call(this, func, args);\n    }\n    \n    return func.apply(this, args);\n  }\n}\n```","level":3,"tagId":26}
{"_id":{"$oid":"61aa387ed00c060001bf130a"},"exerciseKey":"dc584829-5c57-435d-9276-f971e479bd29","category":"QA","renderType":"md","title":"toPrecision 和 toFixed 和 Math.round 有什么区别？","desc":null,"options":null,"explanation":"* toPrecision 用于处理精度，精度是从左至右第一个不为 0 的数开始数起。\n* toFixed 是对小数点后指定位数取整，从小数点开始数起。\n* Math.round 是将一个数字四舍五入到一个整数。","level":1,"tagId":10}
{"_id":{"$oid":"61aa387e85c5f70001543088"},"exerciseKey":"dc607f56-c467-4cc2-8a0a-c79d498bee49","category":"QA","renderType":"md","title":"说说你对盒子模型的理解","desc":"","options":null,"explanation":"![](https://static.vue-js.com/8d0e9ca0-8f9b-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）\n\n一个盒子由四个部分组成：`content`、`padding`、`border`、`margin`\n\n![](https://static.vue-js.com/976789a0-8f9b-11eb-85f6-6fac77c0c9b3.png)\\r\\n\\r\\n`content`，即实际内容，显示文本和图像\n\n* `boreder`，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成\n* `padding`，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的`background`属性影响\n* `margin`，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域\n\n上述是一个从二维的角度观察盒子，下面再看看看三维图：\n\n![](https://static.vue-js.com/b2548b00-8f9b-11eb-ab90-d9ae814b240d.png)\n\n下面来段代码：\n```html\n<style>\n.box {\n\twidth: 200px;\n\theight: 100px;\n\tpadding: 20px;\n}\n</style>\n\n<div class=\\\"box\\\">\n盒子模型\n</div>\n```\n\n当我们在浏览器查看元素时，却发现元素的大小变成了`240px`\n\n这是因为，在`CSS`中，盒子模型可以分成：\n\n- W3C 标准盒子模型\n- IE 怪异盒子模型\n\n默认情况下，盒子模型为`W3C` 标准盒子模型\n\n## 二、标准盒子模型\n\n标准盒子模型，是浏览器默认的盒子模型\n\n下面看看标准盒子模型的模型图：\n\n![](https://static.vue-js.com/c0e1d2e0-8f9b-11eb-85f6-6fac77c0c9b3.png)\n\n从上图可以看到：\n\n- 盒子总宽度 = width + padding + border + margin;\n- 盒子总高度 = height + padding + border + margin\n\n也就是，`width/height` 只是内容高度，不包含 `padding` 和 `border `值\n\n所以上面问题中，设置`width`为200px，但由于存在`padding`，但实际上盒子的宽度有240px\n\n## 三、IE 怪异盒子模型\n\n同样看看IE 怪异盒子模型的模型图：\n\n![](https://static.vue-js.com/cfbb3ef0-8f9b-11eb-ab90-d9ae814b240d.png)\n\n从上图可以看到：\n\n- 盒子总宽度 = width + margin;\n- 盒子总高度 = height + margin;\n\n也就是，`width/height` 包含了 `padding `和 `border `值\n\n## Box-sizing\n\nCSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度\n\n语法：\n\n```css\nbox-sizing: content-box|border-box|inherit;\n```\n\n- content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致\n- border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致\n- inherit 指定 box-sizing 属性的值，应该从父元素继承\n\n回到上面的例子里，设置盒子为 border-box 模型\n\n```html\n<style>\n.box {\n\twidth: 200px;\n\theight: 100px;\n    padding: 20px;\n    box-sizing: border-box;\n}\n</style>\n<div class=\\\"box\\\">\n盒子模型\n</div>\n```\n\n这时候，就可以发现盒子的所占据的宽度为200px","level":1,"tagId":11}
{"_id":{"$oid":"61aa387ed00c060001bf130b"},"exerciseKey":"dc8c6233-f645-444c-8e31-f18bc3f5244f","category":"QA","renderType":"md","title":"什么是响应式设计？响应式设计的基本原理是什么？如何进行实现？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/a57e2e40-9dba-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整\n\n描述响应式界面最著名的一句话就是“Content is like water”\n\n大白话便是“如果将屏幕看作容器，那么内容就像水一样”\n\n响应式网站常见特点：\n\n- 同时适配PC + 平板 + 手机等\n\n- 标签导航在接近手持终端设备时改变为经典的抽屉式导航\n\n- 网站的布局会根据视口来调整模块的大小和位置\n\n ![](https://static.vue-js.com/ae68be30-9dba-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 二、实现方式\n\n响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须有`meta`声明`viewport`\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”>\n```\n\n属性对应如下：\n\n- width=device-width: 是自适应手机屏幕的尺寸宽度\n\n- maximum-scale:是缩放比例的最大值\n\n- inital-scale:是缩放的初始化\n\n- user-scalable:是用户的可以缩放的操作\n\n\n\n实现响应式布局的方式有如下：\n\n- 媒体查询\n- 百分比\n- vw/vh\n- rem\n\n\n\n### 媒体查询\n\n`CSS3 `中的增加了更多的媒体查询，就像`if`条件表达式一样，我们可以设置不同类型的媒体条件，并根据对应的条件，给相应符合条件的媒体调用相对应的样式表\n\n使用`@Media`查询，可以针对不同的媒体类型定义不同的样式，如：\n\n```css\n@media screen and (max-width: 1920px) { ... }\n```\n\n当视口在375px - 600px之间，设置特定字体大小18px\n\n```css\n@media screen (min-width: 375px) and (max-width: 600px) {\n  body {\n    font-size: 18px;\n  }\n}\n```\n\n通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片\n\n比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现\n\n\n\n### 百分比\n\n通过百分比单位 \" % \" 来实现响应式的效果\n\n 比如当浏览器的宽度或者高度发生变化时，通过百分比单位，可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果\n\n`height`、`width`属性的百分比依托于父标签的宽高，但是其他盒子属性则不完全依赖父元素：\n\n- 子元素的top/left和bottom/right如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度/宽度\n\n- 子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。\n\n- 子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width\n\n- border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度\n\n可以看到每个属性都使用百分比，会照成布局的复杂度，所以不建议使用百分比来实现响应式\n\n\n\n\n\n### vw/vh\n\n`vw`表示相对于视图窗口的宽度，`vh`表示相对于视图窗口高度。 任意层级元素，在使用`vw`单位的情况下，`1vw`都等于视图宽度的百分之一\n\n与百分比布局很相似，在以前文章提过与`%`的区别，这里就不再展开述说\n\n\n\n### rem\n\n在以前也讲到，`rem`是相对于根元素`html`的`font-size`属性，默认情况下浏览器字体大小为`16px`，此时`1rem = 16px`\n\n可以利用前面提到的媒体查询，针对不同设备分辨率改变`font-size`的值，如下：\n\n```css\n@media screen and (max-width: 414px) {\n  html {\n    font-size: 18px\n  }\n}\n\n@media screen and (max-width: 375px) {\n  html {\n    font-size: 16px\n  }\n}\n\n@media screen and (max-width: 320px) {\n  html {\n    font-size: 12px\n  }\n}\n```\n\n为了更准确监听设备可视窗口变化，我们可以在`css`之前插入`script`标签，内容如下：\n\n```js\n//动态为根元素设置字体大小\nfunction init () {\n    // 获取屏幕宽度\n    var width = document.documentElement.clientWidth\n    // 设置根元素字体大小。此时为宽的10等分\n    document.documentElement.style.fontSize = width / 10 + 'px'\n}\n\n//首次加载应用，设置一次\ninit()\n// 监听手机旋转的事件的时机，重新设置\nwindow.addEventListener('orientationchange', init)\n// 监听手机窗口变化，重新设置\nwindow.addEventListener('resize', init)\n```\n\n无论设备可视窗口如何变化，始终设置`rem`为`width`的1/10，实现了百分比布局\n\n除此之外，我们还可以利用主流`UI`框架，如：`element ui`、`antd`提供的栅格布局实现响应式\n\n\n\n### 小结\n\n响应式设计实现通常会从以下几方面思考：\n\n- 弹性盒子（包括图片、表格、视频）和媒体查询等技术\n- 使用百分比布局创建流式布局的弹性UI，同时使用媒体查询限制元素的尺寸和内容变更范围\n- 使用相对单位使得内容自适应调节\n- 选择断点，针对不同断点实现不同布局和内容展示\n\n\n\n## 三、总结\n\n响应式布局优点可以看到：\n\n- 面对不同分辨率设备灵活性强\n- 能够快捷解决多设备显示适应问题\n\n缺点：\n\n- 仅适用布局、信息、框架并不复杂的部门类型网站\n- 兼容各种设备工作量大，效率低下\n- 代码累赘，会出现隐藏无用的元素，加载时间加长\n- 其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果\n- 一定程度上改变了网站原有的布局结构，会出现用户混淆的情况\n\n","level":3,"tagId":11}
{"_id":{"$oid":"61aa387e34458700017f1d95"},"exerciseKey":"dcb3eab5-6a15-43e1-90bb-b6bb2a17697c","category":"QA","renderType":"md","title":"什么是高阶组件？","desc":null,"options":null,"explanation":"高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。基本上，这是从React的组成性质派生的一种模式，我们称它们为“纯”组件， 因为它们可以接受任何动态提供的子组件，但它们不会修改或复制其输入组件的任何行为。\n\n```react.js\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\n```\n\n* 高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧\n* 高阶组件的参数为一个组件返回一个新的组件\n* 组件是将 props 转换为 UI，而高阶组件是将组件转换为另一个组件\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa387e3976eb00014e4622"},"exerciseKey":"dcfb407b-223e-40ec-a3d2-7d7ef9514774","category":"QA","renderType":"md","title":"babel-polyfill 有什么用？","desc":null,"options":null,"explanation":"Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。\n\n举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n","level":2,"tagId":29}
{"_id":{"$oid":"61aa387e8e97d9000180882c"},"exerciseKey":"dd65350c-9907-4d3a-a01c-baeebb3e963d","category":"QA","renderType":"md","title":"flexbox（弹性盒布局模型）是什么，适用什么场景？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/ef25b0a0-9837-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n`Flexible Box` 简称 `flex`，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局\n\n采用Flex布局的元素，称为`flex`容器`container`\n\n它的所有子元素自动成为容器成员，称为`flex`项目`item`\n\n ![](https://static.vue-js.com/fbc5f590-9837-11eb-ab90-d9ae814b240d.png)\n\n容器中默认存在两条轴，主轴和交叉轴，呈90度关系。项目默认沿主轴排列，通过`flex-direction`来决定主轴的方向\n\n每根轴都有起点和终点，这对于元素的对齐非常重要\n\n\n\n## 二、属性\n\n关于`flex`常用的属性，我们可以划分为容器属性和容器成员属性\n\n容器属性有：\n\n- flex-direction\n- flex-wrap\n- flex-flow\n- justify-content\n- align-items\n- align-content\n\n\n\n### flex-direction\n\n决定主轴的方向(即项目的排列方向)\n\n```css\n.container {   \n    flex-direction: row | row-reverse | column | column-reverse;  \n} \n```\n\n属性对应如下：\n\n- row（默认值）：主轴为水平方向，起点在左端\n- row-reverse：主轴为水平方向，起点在右端\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿\n\n如下图所示：\n\n ![](https://static.vue-js.com/0c9abc70-9838-11eb-ab90-d9ae814b240d.png)\n\n\n\n### flex-wrap\n\n弹性元素永远沿主轴排列，那么如果主轴排不下，通过`flex-wrap`决定容器内项目是否可换行\n\n```css\n.container {  \n    flex-wrap: nowrap | wrap | wrap-reverse;\n}  \n```\n\n属性对应如下：\n\n- nowrap（默认值）：不换行\n- wrap：换行，第一行在上方\n- wrap-reverse：换行，第一行在下方\n\n默认情况是不换行，但这里也不会任由元素直接溢出容器，会涉及到元素的弹性伸缩\n\n\n\n### flex-flow\n\n是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`\n\n```css\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n\n\n### justify-content\n\n定义了项目在主轴上的对齐方式\n\n```css\n.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n\n属性对应如下：\n\n- flex-start（默认值）：左对齐\n- flex-end：右对齐\n- center：居中\n- space-between：两端对齐，项目之间的间隔都相等\n- space-around：两个项目两侧间隔相等\n\n效果图如下：\n\n ![](https://static.vue-js.com/2d5ca950-9838-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n### align-items\n\n定义项目在交叉轴上如何对齐\n\n```css\n.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n属性对应如下：\n\n- flex-start：交叉轴的起点对齐\n- flex-end：交叉轴的终点对齐\n- center：交叉轴的中点对齐\n- baseline: 项目的第一行文字的基线对齐\n- stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度\n\n\n\n### align-content\n\n定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用\n\n```css\n.box {\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n\n属性对应如吓：\n\n- flex-start：与交叉轴的起点对齐\n- flex-end：与交叉轴的终点对齐\n- center：与交叉轴的中点对齐\n- space-between：与交叉轴两端对齐，轴线之间的间隔平均分布\n- space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍\n- stretch（默认值）：轴线占满整个交叉轴\n\n效果图如下：\n\n ![](https://static.vue-js.com/39bcb0f0-9838-11eb-ab90-d9ae814b240d.png)\n\n\n\n容器成员属性如下：\n\n- `order`\n- `flex-grow`\n- `flex-shrink`\n- `flex-basis`\n- `flex`\n- `align-self`\n\n\n\n### order\n\n定义项目的排列顺序。数值越小，排列越靠前，默认为0\n\n```css\n.item {\n    order: <integer>;\n}\n```\n\n\n\n### flex-grow\n\n上面讲到当容器设为`flex-wrap: nowrap;`不换行的时候，容器宽度有不够分的情况，弹性元素会根据`flex-grow`来决定\n\n定义项目的放大比例（容器宽度>元素总宽度时如何伸展）\n\n默认为`0`，即如果存在剩余空间，也不放大\n\n```css\n.item {\n    flex-grow: <number>;\n}\n```\n\n如果所有项目的`flex-grow`属性都为1，则它们将等分剩余空间（如果有的话）\n\n ![](https://static.vue-js.com/48c8c5c0-9838-11eb-ab90-d9ae814b240d.png)\n\n如果一个项目的`flex-grow`属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍\n\n ![](https://static.vue-js.com/5b822b20-9838-11eb-ab90-d9ae814b240d.png)\n\n弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论`flex-grow`是什么值都不会生效\n\n\n\n### flex-shrink\n\n定义了项目的缩小比例（容器宽度<元素总宽度时如何收缩），默认为1，即如果空间不足，该项目将缩小\n\n```css\n.item {\n    flex-shrink: <number>; /* default 1 */\n}\n```\n\n如果所有项目的`flex-shrink`属性都为1，当空间不足时，都将等比例缩小\n\n如果一个项目的`flex-shrink`属性为0，其他项目都为1，则空间不足时，前者不缩小\n\n ![](https://static.vue-js.com/658c5be0-9838-11eb-85f6-6fac77c0c9b3.png)\n\n在容器宽度有剩余时，`flex-shrink`也是不会生效的\n\n\n\n\n\n### flex-basis\n\n设置的是元素在主轴上的初始尺寸，所谓的初始尺寸就是元素在`flex-grow`和`flex-shrink`生效前的尺寸\n\n浏览器根据这个属性，计算主轴是否有多余空间，默认值为`auto`，即项目的本来大小，如设置了`width`则元素尺寸由`width/height`决定（主轴方向），没有设置则由内容决定\n\n ```css\n.item {\n    flex-basis: <length> | auto; /* default auto */\n}\n ```\n\n当设置为0的是，会根据内容撑开\n\n它可以设为跟`width`或`height`属性一样的值（比如350px），则项目将占据固定空间\n\n\n\n### flex\n\n`flex`属性是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`，也是比较难懂的一个复合属性\n\n ```css\n .item {\n   flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n }\n ```\n\n一些属性有：\n\n- flex: 1 = flex: 1 1 0%\n- flex: 2 = flex: 2 1 0%\n- flex: auto = flex: 1 1 auto\n- flex: none = flex: 0 0 auto，常用于固定尺寸不伸缩\n\n\n\n`flex:1` 和 `flex:auto` 的区别，可以归结于`flex-basis:0`和`flex-basis:auto`的区别\n\n当设置为0时（绝对弹性元素），此时相当于告诉`flex-grow`和`flex-shrink`在伸缩的时候不需要考虑我的尺寸\n\n当设置为`auto`时（相对弹性元素），此时则需要在伸缩时将元素尺寸纳入考虑\n\n注意：建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值\n\n\n\n### align-self\n\n允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性\n\n默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`\n\n```css\n.item {\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n效果图如下：\n\n ![](https://static.vue-js.com/6f8304a0-9838-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 三、应用场景\n\n在以前的文章中，我们能够通过`flex`简单粗暴的实现元素水平垂直方向的居中，以及在两栏三栏自适应布局中通过`flex`完成，这里就不再展开代码的演示\n\n包括现在在移动端、小程序这边的开发，都建议使用`flex`进行布局\n\n","level":2,"tagId":11}
{"_id":{"$oid":"61aa387e34458700017f1d9b"},"exerciseKey":"dd7273e3-f9be-4cde-a77a-693a02fc967a","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nfunction giveLydiaPizza() {\n  return \"Here is pizza!\"\n}\n\nconst giveLydiaChocolate = () => \"Here's chocolate... now go hit the gym already.\"\n\nconsole.log(giveLydiaPizza.prototype)\nconsole.log(giveLydiaChocolate.prototype)\n```","options":"{\"options\":[\"{ constructor: ...} { constructor: ...}\",\"{} { constructor: ...}\",\"{ constructor: ...} {}\",\"{ constructor: ...} undefined\"],\"isMulti\":false,\"answer\":[3]}","explanation":"常规函数，例如`giveLydiaPizza`函数，有一个`prototype`属性，它是一个带有`constructor`属性的对象（原型对象）。 然而，箭头函数，例如`giveLydiaChocolate`函数，没有这个`prototype`属性。 尝试使用`giveLydiaChocolate.prototype`访问`prototype`属性时会返回`undefined`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa387f3976eb00014e4625"},"exerciseKey":"dda1ce4e-518b-4023-898b-eeb9db4e9b51","category":"QA","renderType":"md","title":"Node性能如何进行监控以及优化？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/bb37dae0-d179-11eb-ab90-d9ae814b240d.png)\n\n## 一、 是什么\n\n`Node`作为一门服务端语言，性能方面尤为重要，其衡量指标一般有如下：\n\n- CPU\n- 内存\n- I/O\n- 网络\n\n\n### CPU\n\n主要分成了两部分：\n\n- CPU负载：在某个时间段内，占用以及等待CPU的进程总数\n- CPU使用率：CPU时间占用状况，等于 1 - 空闲CPU时间(idle time) / CPU总时间\n\n这两个指标都是用来评估系统当前CPU的繁忙程度的量化指标\n\n`Node`应用一般不会消耗很多的`CPU`，如果`CPU`占用率高，则表明应用存在很多同步操作，导致异步任务回调被阻塞\n\n\n\n### 内存指标\n\n内存是一个非常容易量化的指标。 内存占用率是评判一个系统的内存瓶颈的常见指标。 对于Node来说，内部内存堆栈的使用状态也是一个可以量化的指标\n\n```js\n// /app/lib/memory.js\nconst os = require('os');\n// 获取当前Node内存堆栈情况\nconst { rss, heapUsed, heapTotal } = process.memoryUsage();\n// 获取系统空闲内存\nconst sysFree = os.freemem();\n// 获取系统总内存\nconst sysTotal = os.totalmem();\n\nmodule.exports = {\n  memory: () => {\n    return {\n      sys: 1 - sysFree / sysTotal,  // 系统内存占用率\n      heap: heapUsed / headTotal,   // Node堆内存占用率\n      node: rss / sysTotal,         // Node占用系统内存的比例\n    }\n  }\n}\n```\n\n- rss：表示node进程占用的内存总量。\n- heapTotal：表示堆内存的总量。\n- heapUsed：实际堆内存的使用量。\n- external ：外部程序的内存使用量，包含Node核心的C++程序的内存使用量\n\n在`Node`中，一个进程的最大内存容量为1.5GB。因此我们需要减少内存泄露\n\n\n\n### 磁盘 I/O\n\n硬盘的` IO` 开销是非常昂贵的，硬盘 IO 花费的 CPU 时钟周期是内存的 164000 倍\n\n内存 `IO `比磁盘` IO` 快非常多，所以使用内存缓存数据是有效的优化方法。常用的工具如 `redis`、`memcached `等\n\n并不是所有数据都需要缓存，访问频率高，生成代价比较高的才考虑是否缓存，也就是说影响你性能瓶颈的考虑去缓存，并且而且缓存还有缓存雪崩、缓存穿透等问题要解决\n\n\n\n## 二、如何监控\n\n关于性能方面的监控，一般情况都需要借助工具来实现\n\n这里采用`Easy-Monitor 2.0`，其是轻量级的 `Node.js` 项目内核性能监控 + 分析工具，在默认模式下，只需要在项目入口文件 `require` 一次，无需改动任何业务代码即可开启内核级别的性能监控分析\n\n使用方法如下：\n\n在你的项目入口文件中按照如下方式引入，当然请传入你的项目名称：\n\n```js\nconst easyMonitor = require('easy-monitor');\neasyMonitor('你的项目名称');\n```\n\n打开你的浏览器，访问 `http://localhost:12333` ，即可看到进程界面\n\n关于定制化开发、通用配置项以及如何动态更新配置项详见官方文档\n\n\n\n## 三、如何优化\n\n关于`Node`的性能优化的方式有：\n\n- 使用最新版本Node.js\n- 正确使用流 Stream\n- 代码层面优化\n- 内存管理优化\n\n\n\n### 使用最新版本Node.js\n\n每个版本的性能提升主要来自于两个方面：\n\n- V8 的版本更新\n- Node.js 内部代码的更新优化\n\n\n\n### 正确使用流 Stream\n\n在`Node`中，很多对象都实现了流，对于一个大文件可以通过流的形式发送，不需要将其完全读入内存\n\n```js\nconst http = require('http');\nconst fs = require('fs');\n\n// bad\nhttp.createServer(function (req, res) {\n    fs.readFile(__dirname + '/data.txt', function (err, data) {\n        res.end(data);\n    });\n});\n\n// good\nhttp.createServer(function (req, res) {\n    const stream = fs.createReadStream(__dirname + '/data.txt');\n    stream.pipe(res);\n});\n```\n\n\n\n### 代码层面优化\n\n合并查询，将多次查询合并一次，减少数据库的查询次数\n\n```js\n// bad\nfor user_id in userIds \n     let account = user_account.findOne(user_id)\n\n// good\nconst user_account_map = {}   // 注意这个对象将会消耗大量内存。\nuser_account.find(user_id in user_ids).forEach(account){\n    user_account_map[account.user_id] =  account\n}\nfor user_id in userIds \n    var account = user_account_map[user_id]\n```\n\n\n\n### 内存管理优化\n\n在 V8 中，主要将内存分为新生代和老生代两代：\n\n- 新生代：对象的存活时间较短。新生对象或只经过一次垃圾回收的对象\n- 老生代：对象存活时间较长。经历过一次或多次垃圾回收的对象\n\n若新生代内存空间不够，直接分配到老生代\n\n通过减少内存占用，可以提高服务器的性能。如果有内存泄露，也会导致大量的对象存储到老生代中，服务器性能会大大降低\n\n如下面情况：\n\n```js\nconst buffer = fs.readFileSync(__dirname + '/source/index.htm');\n\napp.use(\n    mount('/', async (ctx) => {\n        ctx.status = 200;\n        ctx.type = 'html';\n        ctx.body = buffer;\n        leak.push(fs.readFileSync(__dirname + '/source/index.htm'));\n    })\n);\n\nconst leak = [];\n```\n\n`leak`的内存非常大，造成内存泄露，应当避免这样的操作，通过减少内存使用，是提高服务性能的手段之一\n\n而节省内存最好的方式是使用池，其将频用、可复用对象存储起来，减少创建和销毁操作\n\n例如有个图片请求接口，每次请求，都需要用到类。若每次都需要重新new这些类，并不是很合适，在大量请求时，频繁创建和销毁这些类，造成内存抖动\n\n使用对象池的机制，对这种频繁需要创建和销毁的对象保存在一个对象池中。每次用到该对象时，就取对象池空闲的对象，并对它进行初始化操作，从而提高框架的性能\n\n\n","level":3,"tagId":18}
{"_id":{"$oid":"61aa387f39bf10000191cac0"},"exerciseKey":"ddec2e9f-993c-4298-8477-b7bc25db7713","category":"QA","renderType":"md","title":"== 和 ===有什么区别，分别在什么情况使用？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/51b208f0-68df-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n## 一、等于操作符\r\n\r\n等于操作符用两个等于号（ == ）表示，如果操作数相等，则会返回 `true`\r\n\r\n前面文章，我们提到在`JavaScript`中存在隐式转换。等于操作符（==）在比较中会先进行类型转换，再确定操作数是否相等\r\n\r\n遵循以下规则：\r\n\r\n如果任一操作数是布尔值，则将其转换为数值再比较是否相等\r\n\r\n```js\r\nlet result1 = (true == 1); // true\r\n```\r\n\r\n如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等\r\n\r\n```js\r\nlet result1 = (\"55\" == 55); // true\r\n```\r\n\r\n如果一个操作数是对象，另一个操作数不是，则调用对象的 `valueOf() `方法取得其原始值，再根据前面的规则进行比较\r\n\r\n```js\r\nlet obj = {valueOf:function(){return 1}}\r\nlet result1 = (obj == 1); // true\r\n```\r\n\r\n`null `和` undefined `相等\r\n\r\n```js\r\nlet result1 = (null == undefined ); // true\r\n```\r\n\r\n如果有任一操作数是 `NaN` ，则相等操作符返回 `false` \r\n\r\n```js\r\nlet result1 = (NaN == NaN ); // false\r\n```\r\n\r\n如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回` true `\r\n\r\n```\r\nlet obj1 = {name:\"xxx\"}\r\nlet obj2 = {name:\"xxx\"}\r\nlet result1 = (obj1 == obj2 ); // false\r\n```\r\n\r\n下面进一步做个小结：\r\n\r\n- 两个都为简单类型，字符串和布尔值都会转换成数值，再比较\r\n- 简单类型与引用类型比较，对象转化成其原始类型的值，再比较\r\n\r\n- 两个都为引用类型，则比较它们是否指向同一个对象\r\n\r\n- null 和 undefined 相等\r\n- 存在 NaN 则返回 false\r\n\r\n\r\n\r\n## 二、全等操作符\r\n\r\n全等操作符由 3 个等于号（ === ）表示，只有两个操作数在不转换的前提下相等才返回 `true`。即类型相同，值也需相同\r\n\r\n```js\r\nlet result1 = (\"55\" === 55); // false，不相等，因为数据类型不同\r\nlet result2 = (55 === 55); // true，相等，因为数据类型相同值也相同\r\n```\r\n\r\n`undefined` 和 `null` 与自身严格相等\r\n\r\n```js\r\nlet result1 = (null === null)  //true\r\nlet result2 = (undefined === undefined)  //true\r\n```\r\n\r\n\r\n\r\n## 三、区别\r\n\r\n相等操作符（==）会做类型转换，再进行值的比较，全等运算符不会做类型转换\r\n\r\n```js\r\nlet result1 = (\"55\" === 55); // false，不相等，因为数据类型不同\r\nlet result2 = (55 === 55); // true，相等，因为数据类型相同值也相同\r\n```\r\n\r\n`null` 和 `undefined` 比较，相等操作符（==）为`true`，全等为`false`\r\n\r\n```js\r\nlet result1 = (null == undefined ); // true\r\nlet result2 = (null  === undefined); // false\r\n```\r\n\r\n\r\n\r\n### 小结\r\n\r\n相等运算符隐藏的类型转换，会带来一些违反直觉的结果\r\n\r\n```js\r\n'' == '0' // false\r\n0 == '' // true\r\n0 == '0' // true\r\n\r\nfalse == 'false' // false\r\nfalse == '0' // true\r\n\r\nfalse == undefined // false\r\nfalse == null // false\r\nnull == undefined // true\r\n\r\n' \\t\\r\\n' == 0 // true\r\n```\r\n\r\n但在比较`null`的情况的时候，我们一般使用相等操作符`==`\r\n\r\n```js\r\nconst obj = {};\r\n\r\nif(obj.x == null){\r\n  console.log(\"1\");  //执行\r\n}\r\n```\r\n\r\n等同于下面写法\r\n\r\n```js\r\nif(obj.x === null || obj.x === undefined) {\r\n    ...\r\n}\r\n```\r\n\r\n使用相等操作符（==）的写法明显更加简洁了\r\n\r\n所以，除了在比较对象属性为`null`或者`undefined`的情况下，我们可以使用相等操作符（==），其他情况建议一律使用全等操作符（===）\r\n\r\n\r\n\r\n","level":1.5,"tagId":10}
{"_id":{"$oid":"61aa387f54ebf60001a1a4e8"},"exerciseKey":"de0467f1-fe29-442c-8122-3373f20c32fa","category":"QA","renderType":"md","title":"react中懒加载的实现原理是什么？","desc":null,"options":null,"explanation":"随着前端应用体积的扩大，资源加载的优化是我们必须要面对的问题，动态代码加载就是其中的一个方案，webpack 提供了符合 ECMAScript 提案 的 import() 语法 ，让我们来实现动态地加载模块（注：require.ensure 与 import() 均为 webpack 提供的代码动态加载方案，在 webpack 2.x 中，require.ensure 已被 import 取代）。\n\n在 React 16.6 版本中，新增了 React.lazy 函数，它能让你像渲染常规组件一样处理动态引入的组件，配合 webpack 的 Code Splitting ，只有当组件被加载，对应的资源才会导入 ，从而达到懒加载的效果。\n\n## 使用 React.lazy\n\n在实际的使用中，首先是引入组件方式的变化：\n\n```javascript\n// 不使用 React.lazy\nimport OtherComponent from './OtherComponent';\n// 使用 React.lazy\nconst OtherComponent = React.lazy(() => import('./OtherComponent'))\n```\n\nReact.lazy 接受一个函数作为参数，这个函数需要调用 import() 。它需要返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。\n\n```react.js\nimport React, { Suspense } from 'react';\n\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <OtherComponent />\n      </Suspense>\n    </div>\n  );\n}\n```\n\n如上代码中，通过 import()、React.lazy 和 Suspense 共同一起实现了 React 的懒加载，也就是我们常说了运行时动态加载，即 OtherComponent 组件文件被拆分打包为一个新的包（bundle）文件，并且只会在 OtherComponent 组件渲染时，才会被下载到本地。\n\n需要注意的一点是，React.lazy 需要配合 Suspense 组件一起使用，在 Suspense 组件中渲染 React.lazy 异步加载的组件。如果单独使用 React.lazy，React 会给出错误提示。\n\nSuspense 可以包裹多个动态加载的组件，这也意味着在加载这两个组件的时候只会有一个 loading 层，因为 loading 的实现实际是 Suspense 这个父组件去完成的，当所有的子组件对象都 resolve 后，再去替换所有子组件。这样也就避免了出现多个 loading 的体验问题。所以 loading 一般不会针对某个子组件，而是针对整体的父组件做 loading 处理。\n\n## Webpack 动态加载\n\n上面使用了 import() 语法，webpack 检测到这种语法会自动代码分割。使用这种动态导入语法代替以前的静态引入，可以让组件在渲染的时候，再去加载组件对应的资源，这个异步加载流程的实现机制是怎么样呢？\n\n### import() 原理\n\nimport() 函数是由TS39提出的一种动态加载模块的规范实现，其返回是一个 promise。在浏览器宿主环境中一个import()的参考实现如下：\n\n```javascript\nfunction import(url) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    const tempGlobal = \"__tempModuleLoadingVariable\" + Math.random().toString(32).substring(2);\n    script.type = \"module\";\n    script.textContent = `import * as m from \"${url}\"; window.${tempGlobal} = m;`;\n\n    script.onload = () => {\n      resolve(window[tempGlobal]);\n      delete window[tempGlobal];\n      script.remove();\n    };\n\n    script.onerror = () => {\n      reject(new Error(\"Failed to load module script with URL \" + url));\n      delete window[tempGlobal];\n      script.remove();\n    };\n\n    document.documentElement.appendChild(script);\n  });\n}\n```\n\n结合上面的代码来看，webpack 通过创建 script 标签来实现动态加载的，找出依赖对应的 chunk 信息，然后生成 script 标签来动态加载 chunk，每个 chunk 都有对应的状态：未加载 、 加载中、已加载 。\n\n我们可以运行 React.lazy 代码来具体看看 network 的变化，为了方便辨认 chunk。我们可以在 import 里面加入 webpackChunckName 的注释，来指定包文件名称。\n\n## Suspense 组件\n\nSuspense 内部主要通过捕获组件的状态去判断如何加载， React.lazy 创建的动态加载组件具有 Pending、Resolved、Rejected 三种状态，当这个组件的状态为 Pending 时显示的是 Suspense 中 fallback 的内容，只有状态变为 resolve 后才显示组件。\n\n## Error Boundaries 处理资源加载失败场景\n\n如果遇到网络问题或是组件内部错误，页面的动态资源可能会加载失败，为了优雅降级，可以使用 Error Boundaries 来解决这个问题。\n\nError Boundaries 是一种组件，如果你在组件中定义了 static getDerivedStateFromError() 或 componentDidCatch() 生命周期函数，它就会成为一个 Error Boundaries 的组件。\n\n## 总结\n\nReact.lazy() 和 React.Suspense 的提出为现代 React 应用的性能优化和工程化提供了便捷之路。 \n\nReact.lazy 可以让我们像渲染常规组件一样处理动态引入的组件，结合 Suspense 可以更优雅地展现组件懒加载的过渡动画以及处理加载异常的场景。\n","level":3.5,"tagId":13}
{"_id":{"$oid":"61aa387fc2d0220001c965a0"},"exerciseKey":"dfc602d9-11d7-4730-99e2-312b4236f206","category":"QA","renderType":"md","title":"如何实现文件上传？说说你的思路","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/248a5580-ce60-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n文件上传在日常开发中应用很广泛，我们发微博、发微信朋友圈都会用到了图片上传功能\n\n因为浏览器限制，浏览器不能直接操作文件系统的，需要通过浏览器所暴露出来的统一接口，由用户主动授权发起来访问文件动作，然后读取文件内容进指定内存里，最后执行提交请求操作，将内存里的文件内容数据上传到服务端，服务端解析前端传来的数据信息后存入文件里\n\n对于文件上传，我们需要设置请求头为`content-type:multipart/form-data`\n\n> multipart互联网上的混合资源，就是资源由多种元素组成，form-data表示可以使用HTML Forms 和 POST 方法上传文件\n\n结构如下：\n\n```http\nPOST /t2/upload.do HTTP/1.1\nUser-Agent: SOHUWapRebot\nAccept-Language: zh-cn,zh;q=0.5\nAccept-Charset: GBK,utf-8;q=0.7,*;q=0.7\nConnection: keep-alive\nContent-Length: 60408\nContent-Type:multipart/form-data; boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nHost: w.sohu.com\n\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data; name=\"city\"\n\nSanta colo\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data;name=\"desc\"\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n \n...\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data;name=\"pic\"; filename=\"photo.jpg\"\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: binary\n \n... binary data of the jpg ...\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--\n```\n\n`boundary`表示分隔符，如果要上传多个表单项，就要使用`boundary`分割，每个表单项由`———XXX`开始，以`———XXX`结尾\n\n而`xxx`是即时生成的字符串，用以确保整个分隔符不会在文件或表单项的内容中出现\n\n每个表单项必须包含一个 `Content-Disposition` 头，其他的头信息则为可选项， 比如 `Content-Type` \n\n`Content-Disposition` 包含了 `type `和 一个名字为` name `的 `parameter`，`type` 是 `form-data`，`name `参数的值则为表单控件（也即 field）的名字，如果是文件，那么还有一个 `filename `参数，值就是文件名\n\n```kotlin\nContent-Disposition: form-data; name=\"user\"; filename=\"logo.png\"\n```\n\n至于使用`multipart/form-data`，是因为文件是以二进制的形式存在，其作用是专门用于传输大型二进制数据，效率高\n\n\n\n### 二、如何实现\n\n关于文件的上传的上传，我们可以分成两步骤：\n\n- 文件的上传\n- 文件的解析\n\n\n\n### 文件上传\n\n传统前端文件上传的表单结构如下：\n\n```html\n<form action=\"http://localhost:8080/api/upload\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\" id=\"file\" value=\"\" multiple=\"multiple\" />\n    <input type=\"submit\" value=\"提交\"/>\n</form>\n```\n\n`action` 就是我们的提交到的接口，`enctype=\"multipart/form-data\"` 就是指定上传文件格式，`input` 的 `name` 属性一定要等于`file`\n\n\n\n### 文件解析\n\n在服务器中，这里采用`koa2`中间件的形式解析上传的文件数据，分别有下面两种形式：\n\n- koa-body\n- koa-multer\n\n\n#### koa-body\n\n安装依赖\n\n```cmd\nnpm install koa-body\n```\n\n引入`koa-body`中间件\n\n```js\nconst koaBody = require('koa-body');\napp.use(koaBody({\n    multipart: true,\n    formidable: {\n        maxFileSize: 200*1024*1024    // 设置上传文件大小最大限制，默认2M\n    }\n}));\n```\n\n获取上传的文件\n\n```js\nconst file = ctx.request.files.file; // 获取上传文件\n```\n\n获取文件数据后，可以通过`fs`模块将文件保存到指定目录\n\n```js\nrouter.post('/uploadfile', async (ctx, next) => {\n  // 上传单个文件\n  const file = ctx.request.files.file; // 获取上传文件\n  // 创建可读流\n  const reader = fs.createReadStream(file.path);\n  let filePath = path.join(__dirname, 'public/upload/') + `/${file.name}`;\n  // 创建可写流\n  const upStream = fs.createWriteStream(filePath);\n  // 可读流通过管道写入可写流\n  reader.pipe(upStream);\n  return ctx.body = \"上传成功！\";\n});\n```\n\n\n\n#### koa-multer\n\n安装依赖：\n\n```cmd \nnpm install koa-multer\n```\n\n使用 `multer` 中间件实现文件上传\n\n```js\nconst storage = multer.diskStorage({  \n\tdestination: (req, file, cb) => {    \n    \tcb(null, \"./upload/\")\n    },  \n    filename: (req, file, cb) => {    \n       \tcb(null, Date.now() + path.extname(file.originalname))\n    }\n})\n\nconst upload = multer({  storage});\nconst fileRouter = new Router();\nfileRouter.post(\"/upload\", upload.single('file'), (ctx, next) => {  \n\tconsole.log(ctx.req.file); // 获取文件\n})\n \napp.use(fileRouter.routes());\n```\n","level":3,"tagId":18}
{"_id":{"$oid":"61aa387f81337a00011e06d4"},"exerciseKey":"dfc9b600-74ec-4e03-8832-c3d69de4dcea","category":"QA","renderType":"md","title":"为什么不能用数组下标来作为react组件中的key？","desc":null,"options":null,"explanation":"react 使用diff算法，使用key来做同级比对。如果使用数组下标作为key，有以下情况：\n\n* 在数组头部或中部插入或删除元素： 所有key对应的节点的值发生更改，进行重新渲染。造成性能损耗\n* 而如果使用数组中唯一值来作为key：不管是在何处插入或删除节点，其他key对应的节点的值未发生更改，只需插入或删除操作的数组节点。","level":2,"tagId":13}
{"_id":{"$oid":"61aa387f291c0100017ee2f4"},"exerciseKey":"e00b6fcb-fb55-435f-ac74-687734871111","category":"QA","renderType":"md","title":"介绍你知道的一些数据结构","desc":null,"options":null,"explanation":"* 栈：一种特殊串联形式的抽象数据类型，可由链表或数组实现，通过链表或数组的栈顶（Top）指针对数据进行压栈（Push）和出栈（Pop）操作，其特点是LIFO。\n\n* 队列：先进先出（FIFO）的线性表，一般用链表和数组来实现，只允许在后端（back or rear）插入，在前端（front）删除。\n\n* 数组：由相同元素的集合所组成的数据结构，存储在一块连续的内存单元，根据元素的索引可以计算出该元素对应的存储地址。\n\n* 链表：由一连串节点组成，每个节点包含任意的实例数据和一个或两个用来指向下一个/上一个节点位置的链接。\n\n* 树：实现抽象数据类型的数据结构，如：二叉树、霍夫曼树。\n\n* 图：表示物件与物件之间的关系，图论的基本研究对象。\n\n* 堆：是计算机科学中一种特别的树状数据结构，也是一种特殊的二叉树。\n\n* 散列表：根据键（key）直接访问内存存储位置的一种数据结构，通过计算一个关于键值的函数，将所需查询的数据映射到表中的一个位置来访问记录，映射函数叫做散列函数，存放记录的数组叫散列表（散列函数和哈希冲突是实现散列表最重要的两个环节）。\n","level":3,"tagId":30}
{"_id":{"$oid":"61aa387f91a75000018d2ddf"},"exerciseKey":"e0e9a739-97c8-440b-b37b-41691095002f","category":"QA","renderType":"md","title":"汽车所停车位的编号是多少？","desc":"![image.png](https://i.loli.net/2021/07/04/PDrVeKpzqLWM2w8.png)","options":null,"explanation":"**87**\n\n将图片倒出来看","level":3,"tagId":17}
{"_id":{"$oid":"61aa387fbdfab500012c8588"},"exerciseKey":"e110762f-dcc0-41a2-bd28-866b0c798cc5","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nlet person = { name: \"Lydia\" };\nconst members = [person];\nperson = null;\n\nconsole.log(members);\n```","options":"{\"options\":[\"null\",\"[null]\",\"[{}]\",\"[{ name: \\\"Lydia\\\" }]\"],\"isMulti\":false,\"answer\":[3]}","explanation":"首先我们声明了一个拥有`name`属性的对象 `person`。\n<img src=\"https://i.imgur.com/TML1MbS.png\" width=\"200\">\n然后我们又声明了一个变量`members`. 将首个元素赋值为变量`person`。 当设置两个对象彼此相等时，它们会通过 _引用_ 进行交互。但是当你将引用从一个变量分配至另一个变量时，其实只是执行了一个 _复制_ 操作。（注意一点，他们的引用 _并不相同_!）\n<img src=\"https://i.imgur.com/FSG5K3F.png\" width=\"300\">\n接下来我们让`person`等于`null`。\n<img src=\"https://i.imgur.com/sYjcsMT.png\" width=\"300\">\n我们没有修改数组第一个元素的值，而只是修改了变量`person`的值,因为元素（复制而来）的引用与`person`不同。`members`的第一个元素仍然保持着对原始对象的引用。当我们输出`members`数组时，第一个元素会将引用的对象打印出来。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38803dd7f70001833059"},"exerciseKey":"e1584502-c0d4-416f-abe4-cc0a01c6002d","category":"QA","renderType":"md","title":"封装一个 javascript 的类型判断函数","desc":null,"options":null,"explanation":"```js\nfunction getType(value) {\n  // 判断数据是 null 的情况\n  if (value === null) {\n    return value + \"\";\n  }\n\n  // 判断数据是引用类型的情况\n  if (typeof value === \"object\") {\n    let valueClass = Object.prototype.toString.call(value),\n      type = valueClass.split(\" \")[1].split(\"\");\n\n    type.pop();\n\n    return type.join(\"\").toLowerCase();\n  } else {\n    // 判断数据是基本数据类型的情况和函数的情况\n    return typeof value;\n  }\n}\n```","level":2.5,"tagId":26}
{"_id":{"$oid":"61aa38800f30890001ab8209"},"exerciseKey":"e203426f-23a1-4872-8ff7-1d0d27e57a81","category":"QA","renderType":"md","title":"在 shouldComponentUpdate 或 componentWillUpdate 中使用 setState 会发生什么？","desc":null,"options":null,"explanation":"当调用 setState 的时候，实际上会将新的 state 合并到状态更新队列中，并对 partialState 以及 _pendingStateQueue 更新队列进行合并操作。最终通过 enqueueUpdate 执行 state 更新。\n\n如果在 shouldComponentUpdate 或 componentWillUpdate 中使用 setState，会使得 state 队列（_pendingStateQueue）不为 null，从而调用 updateComponent 方法，updateComponent 中会继续调用 shouldComponentUpdate 和 componentWillUpdate，因此造成死循环。","level":2,"tagId":13}
{"_id":{"$oid":"61aa3880c2d0220001c965a3"},"exerciseKey":"e221664e-c3b1-4c18-827e-7a6bd2a2593e","category":"QA","renderType":"md","title":"请手写“堆排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。\n\n## 算法描述\n\n具体算法描述如下：\n\n* 将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；\n* 将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]<=R[n]；\n* 由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。\n\n## 代码实现\n\n```javascript\n/*方法说明：堆排序\n@param  array 待排序数组*/\nfunction heapSort(array) {\n    console.time('堆排序耗时');\n    if (Object.prototype.toString.call(array).slice(8, -1) === 'Array') {\n        //建堆\n        var heapSize = array.length, temp;\n        for (var i = Math.floor(heapSize / 2) - 1; i >= 0; i--) {\n            heapify(array, i, heapSize);\n        }\n\n        //堆排序\n        for (var j = heapSize - 1; j >= 1; j--) {\n            temp = array[0];\n            array[0] = array[j];\n            array[j] = temp;\n            heapify(array, 0, --heapSize);\n        }\n        console.timeEnd('堆排序耗时');\n        return array;\n    } else {\n        return 'array is not an Array!';\n    }\n}\n/*方法说明：维护堆的性质\n@param  arr 数组\n@param  x   数组下标\n@param  len 堆大小*/\nfunction heapify(arr, x, len) {\n    if (Object.prototype.toString.call(arr).slice(8, -1) === 'Array' && typeof x === 'number') {\n        var l = 2 * x + 1, r = 2 * x + 2, largest = x, temp;\n        if (l < len && arr[l] > arr[largest]) {\n            largest = l;\n        }\n        if (r < len && arr[r] > arr[largest]) {\n            largest = r;\n        }\n        if (largest != x) {\n            temp = arr[x];\n            arr[x] = arr[largest];\n            arr[largest] = temp;\n            heapify(arr, largest, len);\n        }\n    } else {\n        return 'arr is not an Array or x is not a number!';\n    }\n}\nvar arr=[91,60,96,13,35,65,46,65,10,30,20,31,77,81,22];\nconsole.log(heapSort(arr));//[10, 13, 20, 22, 30, 31, 35, 46, 60, 65, 65, 77, 81, 91, 96]\n\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(nlogn)\n* 最差情况：T(n) = O(nlogn)\n* 平均情况：T(n) = O(nlogn)","level":4,"tagId":26}
{"_id":{"$oid":"61aa3880c2d0220001c965a5"},"exerciseKey":"e22ceb33-c162-4e98-a395-880716003777","category":"QA","renderType":"md","title":"函数珂里化","desc":"实现方法add：\n```js\nadd(1)(2)(3)(4)=10;\nadd(1)(1,2,3)(2)=9;\n```","options":null,"explanation":"```js\nfunction add() {\n  const _args = [...arguments];\n  function fn() {\n    _args.push(...arguments);\n    return fn;\n  }\n  fn.toString = function() {\n    return _args.reduce((sum, cur) => sum + cur);\n  }\n  return fn;\n}\n```","level":1,"tagId":26}
{"_id":{"$oid":"61aa3880ff0573000165b3b6"},"exerciseKey":"e246ac60-73f0-4e33-b0f9-b0d1e6c15af8","category":"QA","renderType":"md","title":"为什么不能直接使用 this.state 改变数据？","desc":null,"options":null,"explanation":"react中不能直接修改state，因为并不会重新触发render。\n\n以如下方式更新状态，组件不会重新渲染。\n\n```react.js\n//Wrong\nThis.state.message =”Hello world”;\n```\n\n而是需要使用setState()方法，状态改变时，组件通过重新渲染做出响应。\n\n```react.js\n//Correct\nThis.setState({message: ‘Hello World’});\n```\n\nsetState通过一个队列机制来实现 state 更新。当执行 setState 的时候，会将需要更新的 state 合并后放入状态队列，而不会立刻更新 this.state。队列机制可以高效的批量更新 state，如果不通过 setState 而直接修改 this.state，那么该 state 将不会被放入状态队列中，当下次调用 setState 并对状态队列进行合并时，将会忽略之前被直接修改的 state，而造成无法预知的错误。","level":1,"tagId":13}
{"_id":{"$oid":"61aa3880796412000191751b"},"exerciseKey":"e253151b-a880-448b-9cd1-d869971a63e4","category":"QA","renderType":"md","title":"bind() 连续调用多次，this的绑定值是什么呢？","desc":"```javascript\nvar bar = function(){\n    console.log(this.x);\n}\nvar foo = {\n    x:3\n}\nvar sed = {\n    x:4\n}\nvar func = bar.bind(foo).bind(sed);\nfunc(); //?\n  \nvar fiv = {\n    x:5\n}\nvar func = bar.bind(foo).bind(sed).bind(fiv);\nfunc(); //?\n```","options":null,"explanation":"答案是，两次都仍将输出 3 ，而非期待中的 4 和 5 。\n\n原因是，在Javascript中，多次 bind() 是无效的。\n\n更深层次的原因， bind() 的实现，相当于使用函数在内部包了一个 call / apply ，第二次 bind() 相当于再包住第一次 bind() ,故第二次以后的 bind 是无法生效的。","level":3,"tagId":10}
{"_id":{"$oid":"61aa388054ebf60001a1a4f0"},"exerciseKey":"e28517a7-ce0d-41af-b7a0-94a0baeb1477","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nconsole.log(\"🥑\" + \"💻\");\n```","options":"{\"options\":[\"\\\"🥑💻\\\"\",\"257548\",\"A string containing their code points\",\"Error\"],\"isMulti\":false,\"answer\":[0]}","explanation":"使用`+`运算符，您可以连接字符串。 上述情况，我们将字符串`“🥑”`与字符串`”💻“`连接起来，产生`”🥑💻“`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3880bdfab500012c8593"},"exerciseKey":"e39e2c86-5e5d-4412-907b-e40d98fbfb4c","category":"Choice","renderType":"md","title":"当点击按钮时，event.target是什么？","desc":"```javascript\nconst person = { name: 'Lydia' }\n\nfunction sayHi(age) {\n  console.log(`${this.name} is ${age}`)\n}\n\nsayHi.call(person, 21)\nsayHi.bind(person, 21)\n```","options":"{\"options\":[\"undefined is 21 Lydia is 21\",\"function function\",\"Lydia is 21 Lydia is 21\",\"Lydia is 21 function\"],\"isMulti\":false,\"answer\":[3]}","explanation":"使用这两种方法，我们都可以传递我们希望 `this` 关键字引用的对象。但是，`.call` 是**立即执行**的。\n`.bind` 返回函数的**副本**，但带有绑定上下文！它不是立即执行的。","level":1,"tagId":32}
{"_id":{"$oid":"61aa3880291c0100017ee2fe"},"exerciseKey":"e3c4f27f-343c-4b70-b95e-6163888c6eb5","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nconst set = new Set([1, 1, 2, 3, 4]);\n\nconsole.log(set);\n```","options":"{\"options\":[\"[1, 1, 2, 3, 4]\",\"[1, 2, 3, 4]\",\"{1, 1, 2, 3, 4}\",\"{1, 2, 3, 4}\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`Set`对象是独一无二的值的集合：也就是说同一个值在其中仅出现一次。\n我们传入了数组`[1, 1, 2, 3, 4]`，他有一个重复值`1`.以为一个集合里不能有两个重复的值，其中一个就被移除了。所以结果是 `{1, 2, 3, 4}`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa388134458700017f1da9"},"exerciseKey":"e3f52a7b-4c54-4b00-bd6c-b63f2b60421c","category":"QA","renderType":"md","title":"正则表达式是什么，有哪些应用场景？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/55388a40-7f1d-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n正则表达式是一种用来匹配字符串的强有力的武器\n\n它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的\n\n在 `JavaScript`中，正则表达式也是对象，构建正则表达式有两种方式：\n\n1. 字面量创建，其由包含在斜杠之间的模式组成\n\n```js\nconst re = /\\d+/g;\n```\n\n2. 调用`RegExp`对象的构造函数\n\n```js\nconst re = new RegExp(\"\\\\d+\",\"g\");\n\nconst rul = \"\\\\d+\"\nconst re1 = new RegExp(rul,\"g\");\n```\n\n使用构建函数创建，第一个参数可以是一个变量，遇到特殊字符`\\`需要使用`\\\\`进行转义\n\n\n\n## 二、匹配规则\n\n常见的校验规则如下：\n\n| 规则        | 描述                                                  |\n| ----------- | ----------------------------------------------------- |\n| \\           | 转义                                                  |\n| ^           | 匹配输入的开始                                        |\n| $           | 匹配输入的结束                                        |\n| *           | 匹配前一个表达式 0 次或多次                           |\n| +           | 匹配前面一个表达式 1 次或者多次。等价于 `{1,}`        |\n| ?           | 匹配前面一个表达式 0 次或者 1 次。等价于`{0,1}`       |\n| .           | 默认匹配除换行符之外的任何单个字符                    |\n| x(?=y)      | 匹配'x'仅仅当'x'后面跟着'y'。这种叫做先行断言         |\n| (?<=y)x     | 匹配'x'仅当'x'前面是'y'.这种叫做后行断言              |\n| x(?!y)      | 仅仅当'x'后面不跟着'y'时匹配'x'，这被称为正向否定查找 |\n| (?<!*y*)*x* | 仅仅当'x'前面不是'y'时匹配'x'，这被称为反向否定查找   |\n| x\\|y        | 匹配‘x’或者‘y’                                        |\n| {n}         | n 是一个正整数，匹配了前面一个字符刚好出现了 n 次     |\n| {n,}        | n是一个正整数，匹配前一个字符至少出现了n次            |\n| {n,m}       | n 和 m 都是整数。匹配前面的字符至少n次，最多m次       |\n| [xyz\\]      | 一个字符集合。匹配方括号中的任意字符                  |\n| [^xyz\\]     | 匹配任何没有包含在方括号中的字符                      |\n| \\b          | 匹配一个词的边界，例如在字母和空格之间                |\n| \\B          | 匹配一个非单词边界                                    |\n| \\d          | 匹配一个数字                                          |\n| \\D          | 匹配一个非数字字符                                    |\n| \\f          | 匹配一个换页符                                        |\n| \\n          | 匹配一个换行符                                        |\n| \\r          | 匹配一个回车符                                        |\n| \\s          | 匹配一个空白字符，包括空格、制表符、换页符和换行符    |\n| \\S          | 匹配一个非空白字符                                    |\n| \\w          | 匹配一个单字字符（字母、数字或者下划线）              |\n| \\W          | 匹配一个非单字字符                                    |\n\n### 正则表达式标记\n\n| 标志 | 描述                                                      |\n| :--- | :-------------------------------------------------------- |\n| `g`  | 全局搜索。                                                |\n| `i`  | 不区分大小写搜索。                                        |\n| `m`  | 多行搜索。                                                |\n| `s`  | 允许 `.` 匹配换行符。                                     |\n| `u`  | 使用`unicode`码的模式进行匹配。                           |\n| `y`  | 执行“粘性(`sticky`)”搜索,匹配从目标字符串的当前位置开始。 |\n\n使用方法如下：\n\n```js\nvar re = /pattern/flags;\nvar re = new RegExp(\"pattern\", \"flags\");\n```\n\n在了解下正则表达式基本的之外，还可以掌握几个正则表达式的特性：\n\n### 贪婪模式\n\n在了解贪婪模式前，首先举个例子：\n\n```js\nconst reg = /ab{1,3}c/\n```\n\n在匹配过程中，尝试可能的顺序是从多往少的方向去尝试。首先会尝试`bbb`，然后再看整个正则是否能匹配。不能匹配时，吐出一个`b`，即在`bb`的基础上，再继续尝试，以此重复\n\n如果多个贪婪量词挨着，则深度优先搜索\n\n```js\nconst string = \"12345\";\nconst regx = /(\\d{1,3})(\\d{1,3})/;\nconsole.log( string.match(reg) );\n// => [\"12345\", \"123\", \"45\", index: 0, input: \"12345\"]\n```\n\n其中，前面的`\\d{1,3}`匹配的是\"123\"，后面的`\\d{1,3}`匹配的是\"45\"\n\n### 懒惰模式\n\n惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配\n\n```js\nvar string = \"12345\";\nvar regex = /(\\d{1,3}?)(\\d{1,3})/;\nconsole.log( string.match(regex) );\n// => [\"1234\", \"1\", \"234\", index: 0, input: \"12345\"]\n```\n\n其中`\\d{1,3}?`只匹配到一个字符\"1\"，而后面的`\\d{1,3}`匹配了\"234\"\n\n### 分组\n\n分组主要是用过`()`进行实现，比如`beyond{3}`，是匹配`d`字母3次。而`(beyond){3}`是匹配`beyond`三次\n\n在`()`内使用`|`达到或的效果，如`(abc | xxx)`可以匹配`abc`或者`xxx`\n\n反向引用，巧用`$`分组捕获\n\n```js\nlet str = \"John Smith\";\n\n// 交换名字和姓氏\nconsole.log(str.replace(/(john) (smith)/i, '$2, $1')) // Smith, John\n```\n\n\n\n\n\n## 三、匹配方法\n\n正则表达式常被用于某些方法，我们可以分成两类：\n\n- 字符串（str）方法：`match`、`matchAll`、`search`、`replace`、`split`\n- 正则对象下（regexp）的方法：`test`、`exec`\n\n| 方法     | 描述                                                         |\n| :------- | :----------------------------------------------------------- |\n| exec     | 一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。 |\n| test     | 一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。 |\n| match    | 一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。 |\n| matchAll | 一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。 |\n| search   | 一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。 |\n| replace  | 一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。 |\n| split    | 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 `String` 方法。 |\n\n\n\n### str.match(regexp)\n\n`str.match(regexp)` 方法在字符串 `str` 中找到匹配 `regexp` 的字符\n\n如果 `regexp` 不带有 `g` 标记，则它以数组的形式返回第一个匹配项，其中包含分组和属性 `index`（匹配项的位置）、`input`（输入字符串，等于 `str`）\n\n```js\nlet str = \"I love JavaScript\";\n\nlet result = str.match(/Java(Script)/);\n\nconsole.log( result[0] );     // JavaScript（完全匹配）\nconsole.log( result[1] );     // Script（第一个分组）\nconsole.log( result.length ); // 2\n\n// 其他信息：\nconsole.log( result.index );  // 7（匹配位置）\nconsole.log( result.input );  // I love JavaScript（源字符串）\n```\n\n如果 `regexp` 带有 `g` 标记，则它将所有匹配项的数组作为字符串返回，而不包含分组和其他详细信息\n\n```js\nlet str = \"I love JavaScript\";\n\nlet result = str.match(/Java(Script)/g);\n\nconsole.log( result[0] ); // JavaScript\nconsole.log( result.length ); // 1\n```\n\n如果没有匹配项，则无论是否带有标记 `g` ，都将返回 `null`\n\n```js\nlet str = \"I love JavaScript\";\n\nlet result = str.match(/HTML/);\n\nconsole.log(result); // null\n```\n\n\n\n### str.matchAll(regexp)\n\n返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器\n\n```js\nconst regexp = /t(e)(st(\\d?))/g;\nconst str = 'test1test2';\n\nconst array = [...str.matchAll(regexp)];\n\nconsole.log(array[0]);\n// expected output: Array [\"test1\", \"e\", \"st1\", \"1\"]\n\nconsole.log(array[1]);\n// expected output: Array [\"test2\", \"e\", \"st2\", \"2\"]\n```\n\n\n\n\n\n\n\n### str.search(regexp)\n\n返回第一个匹配项的位置，如果未找到，则返回 `-1`\n\n```js\nlet str = \"A drop of ink may make a million think\";\n\nconsole.log( str.search( /ink/i ) ); // 10（第一个匹配位置）\n```\n\n这里需要注意的是，`search` 仅查找第一个匹配项\n\n\n\n\n\n\n\n## str.replace(regexp)\n\n替换与正则表达式匹配的子串，并返回替换后的字符串。在不设置全局匹配`g`的时候，只替换第一个匹配成功的字符串片段\n\n```js\nconst reg1=/javascript/i;\nconst reg2=/javascript/ig;\nconsole.log('hello Javascript Javascript Javascript'.replace(reg1,'js'));\n//hello js Javascript Javascript\nconsole.log('hello Javascript Javascript Javascript'.replace(reg2,'js'));\n//hello js js js\n```\n\n\n\n### str.split(regexp)\n\n使用正则表达式（或子字符串）作为分隔符来分割字符串\n\n```js\nconsole.log('12, 34, 56'.split(/,\\s*/)) // 数组 ['12', '34', '56']\n```\n\n\n\n### regexp.exec(str)\n\n`regexp.exec(str)` 方法返回字符串 `str` 中的 `regexp` 匹配项，与以前的方法不同，它是在正则表达式而不是字符串上调用的\n\n根据正则表达式是否带有标志 `g`，它的行为有所不同\n\n如果没有 `g`，那么 `regexp.exec(str)` 返回的第一个匹配与 `str.match(regexp)` 完全相同\n\n如果有标记 `g`，调用 `regexp.exec(str)` 会返回第一个匹配项，并将紧随其后的位置保存在属性`regexp.lastIndex` 中。 下一次同样的调用会从位置 `regexp.lastIndex` 开始搜索，返回下一个匹配项，并将其后的位置保存在 `regexp.lastIndex` 中\n\n```js\nlet str = 'More about JavaScript at https://javascript.info';\nlet regexp = /javascript/ig;\n\nlet result;\n\nwhile (result = regexp.exec(str)) {\n  console.log( `Found ${result[0]} at position ${result.index}` );\n  // Found JavaScript at position 11\n  // Found javascript at position 33\n}\n```\n\n\n\n### regexp.test(str)\n\n查找匹配项，然后返回 `true/false` 表示是否存在\n\n```js\nlet str = \"I love JavaScript\";\n\n// 这两个测试相同\nconsole.log( /love/i.test(str) ); // true\n```\n\n\n\n\n\n## 四、应用场景\n\n通过上面的学习，我们对正则表达式有了一定的了解\n\n下面再来看看正则表达式一些案例场景：\n\n验证QQ合法性（5~15位、全是数字、不以0开头）：\n\n```js\nconst reg = /^[1-9][0-9]{4,14}$/\nconst isvalid = patrn.exec(s)\n```\n\n校验用户账号合法性（只能输入5-20个以字母开头、可带数字、“_”、“.”的字串）：\n\n```js\nvar patrn=/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/;\nconst isvalid = patrn.exec(s)\n```\n\n将`url`参数解析为对象\n\n```js\nconst protocol = '(?<protocol>https?:)';\nconst host = '(?<host>(?<hostname>[^/#?:]+)(?::(?<port>\\\\d+))?)';\nconst path = '(?<pathname>(?:\\\\/[^/#?]+)*\\\\/?)';\nconst search = '(?<search>(?:\\\\?[^#]*)?)';\nconst hash = '(?<hash>(?:#.*)?)';\nconst reg = new RegExp(`^${protocol}\\/\\/${host}${path}${search}${hash}$`);\nfunction execURL(url){\n    const result = reg.exec(url);\n    if(result){\n        result.groups.port = result.groups.port || '';\n        return result.groups;\n    }\n    return {\n        protocol:'',host:'',hostname:'',port:'',\n        pathname:'',search:'',hash:'',\n    };\n}\n\nconsole.log(execURL('https://localhost:8080/?a=b#xxxx'));\nprotocol: \"https:\"\nhost: \"localhost:8080\"\nhostname: \"localhost\"\nport: \"8080\"\npathname: \"/\"\nsearch: \"?a=b\"\nhash: \"#xxxx\"\n```\n\n再将上面的`search`和`hash`进行解析\n\n```js\nfunction execUrlParams(str){\n    str = str.replace(/^[#?&]/,'');\n    const result = {};\n    if(!str){ //如果正则可能配到空字符串，极有可能造成死循环，判断很重要\n        return result; \n    }\n    const reg = /(?:^|&)([^&=]*)=?([^&]*?)(?=&|$)/y\n    let exec = reg.exec(str);\n    while(exec){\n        result[exec[1]] = exec[2];\n        exec = reg.exec(str);\n    }\n    return result;\n}\nconsole.log(execUrlParams('#'));// {}\nconsole.log(execUrlParams('##'));//{'#':''}\nconsole.log(execUrlParams('?q=3606&src=srp')); //{q: \"3606\", src: \"srp\"}\nconsole.log(execUrlParams('test=a=b=c&&==&a='));//{test: \"a=b=c\", \"\": \"=\", a: \"\"}\n```\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa388154ebf60001a1a4f6"},"exerciseKey":"e3f8c4ad-de53-4f97-9ec1-54b65c787569","category":"QA","renderType":"md","title":"说说你对git reset 和 git revert 的理解？区别？","desc":null,"options":null,"explanation":"\n![](https://static.vue-js.com/046b4440-ff74-11eb-bc6f-3f06e1491664.png)\n\n\n## 一、是什么\n\n### git reset\n\n`reset`用于回退版本，可以遗弃不再使用的提交\n\n执行遗弃时，需要根据影响的范围而指定不同的参数，可以指定是否复原索引或工作树内容\n\n ![](https://static.vue-js.com/ab4d0c00-ff72-11eb-bc6f-3f06e1491664.png)\n\n\n\n### git revert\n\n在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化，不会改变过去的历史，主要是用于安全地取消过去发布的提交\n\n ![](https://static.vue-js.com/bd12c290-ff72-11eb-991d-334fd31f0201.png)\n\n\n## 二、如何用\n\n### git reset\n\n当没有指定`ID`的时候，默认使用`HEAD`，如果指定`ID`，那么就是基于指向`ID`去变动暂存区或工作区的内容\n\n```cmd\n// 没有指定ID, 暂存区的内容会被当前ID版本号的内容覆盖，工作区不变\ngit reset\n\n// 指定ID，暂存区的内容会被指定ID版本号的内容覆盖，工作区不变\ngit reset <ID> \n```\n\n日志`ID`可以通过查询，可以`git log`进行查询，如下：\n\n```cmd\ncommit a7700083ace1204ccdff9f71631fb34c9913f7c5 (HEAD -> master)\nAuthor: linguanghui <linguanghui@baidu.com>\nDate:   Tue Aug 17 22:34:40 2021 +0800\n\n    second commit\n\ncommit e31118663ce66717edd8a179688a7f3dde5a9393\nAuthor: linguanghui <linguanghui@baidu.com>\nDate:   Tue Aug 17 22:20:01 2021 +0800\n\n    first commit\n```\n\n常见命令如下：\n\n- --mixed（默认）：默认的时候，只有暂存区变化\n\n- --hard参数：如果使用 --hard 参数，那么工作区也会变化\n\n- --soft：如果使用 --soft 参数，那么暂存区和工作区都不会变化\n\n ![](https://static.vue-js.com/225b41e0-ff73-11eb-bc6f-3f06e1491664.png)\n\n\n\n### git revert\n\n跟`git reset`用法基本一致，`git revert` 撤销某次操作，此次操作之前和之后的 `commit`和`history`都会保留，并且把这次撤销，作为一次最新的提交，如下：\n\n```cmd\ngit revert <commit_id> \n```\n\n如果撤销前一个版本，可以通过如下命令：\n\n```cmd\ngit revert HEAD\n```\n\n撤销前前一次，如下：\n\n```cmd\ngit revert HEAD^\n```\n\n## 三、区别\n\n撤销（revert）被设计为撤销公开的提交（比如已经push）的安全方式，`git reset`被设计为重设本地更改\n\n因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销\n\n两者主要区别如下：\n\n- git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit\n- git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容\n- 在回滚这一操作上看，效果差不多。但是在日后继续 merge 以前的老版本时有区别\n\n> git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，之前提交合并的代码仍然存在，导致不能够重新合并\n>\n> 但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入\n\n- 如果回退分支的代码以后还需要的情况则使用`git revert`， 如果分支是提错了没用的并且不想让别人发现这些错误代码，则使用`git reset`\n","level":2.5,"tagId":29}
{"_id":{"$oid":"61aa3881cd02c30001dd2352"},"exerciseKey":"e4de3d64-0a56-4bdc-b07f-d310987218e9","category":"Choice","renderType":"md","title":"JavaScript 中的一切都是？","desc":"```javascript\n[[0, 1], [2, 3]].reduce(\n  (acc, cur) => {\n    return acc.concat(cur)\n  },\n  [1, 2]\n)\n```","options":"{\"options\":[\"[0, 1, 2, 3, 1, 2]\",\"[6, 1, 2]\",\"[1, 2, 0, 1, 2, 3]\",\"[1, 2, 6]\"],\"isMulti\":false,\"answer\":[2]}","explanation":"`[1, 2]`是初始值。初始值将会作为首次调用时第一个参数 `acc` 的值。在第一次执行时， `acc` 的值是 `[1, 2]`， `cur` 的值是 `[0, 1]`。合并它们，结果为 `[1, 2, 0, 1]`。\n第二次执行， `acc` 的值是 `[1, 2, 0, 1]`， `cur` 的值是 `[2, 3]`。合并它们，最终结果为 `[1, 2, 0, 1, 2, 3]`","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3881c2d0220001c965a8"},"exerciseKey":"e5696d2f-2fdb-474a-b6d0-52f180eee942","category":"Choice","renderType":"md","title":"下面代码的输出是什么?","desc":"```javascript\nclass Dog {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nDog.prototype.bark = function() {\n  console.log(`Woof I am ${this.name}`);\n};\n\nconst pet = new Dog(\"Mara\");\n\npet.bark();\n\ndelete Dog.prototype.bark;\n\npet.bark();\n```","options":"{\"options\":[\"\\\"Woof I am Mara\\\", TypeError\",\"\\\"Woof I am Mara\\\",\\\"Woof I am Mara\\\"\",\"\\\"Woof I am Mara\\\", undefined\",\"TypeError, TypeError\"],\"isMulti\":false,\"answer\":[0]}","explanation":"我们可以用`delete`关键字删除对象的属性，对原型也是适用的。删除了原型的属性后，该属性在原型链上就不可用了。在本例中，函数`bark`在执行了`delete Dog.prototype.bark`后不可用, 然而后面的代码还在调用它。\n当我们尝试调用一个不存在的函数时`TypeError`异常会被抛出。在本例中就是 `TypeError: pet.bark is not a function`，因为`pet.bark`是`undefined`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38813d5f3a0001af56c6"},"exerciseKey":"e7e3a667-d380-4b69-aa9b-aa80e86937f0","category":"Choice","renderType":"md","title":"以下哪一项会对对象 `person` 有副作用？","desc":"```javascript\nconst person = { name: \"Lydia Hallie\" };\n\nObject.seal(person);\n```","options":"{\"options\":[\"person.name = \\\"Evan Bacon\\\"\",\"person.age = 21\",\"delete person.name\",\"Object.assign(person, { age: 21 })\"],\"isMulti\":false,\"answer\":[0]}","explanation":"使用 `Object.seal` 我们可以防止新属性 _被添加_，或者存在属性 _被移除_.\n然而，你仍然可以对存在属性进行更改。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38817964120001917521"},"exerciseKey":"e8118221-94ab-44c9-ab83-299e6eefee15","category":"QA","renderType":"md","title":"如何判断一个对象是否为空对象？","desc":null,"options":null,"explanation":"```js\nfunction checkNullObj(obj) {\n  return Object.keys(obj).length === 0;\n}\n```","level":3,"tagId":26}
{"_id":{"$oid":"61aa38810d111e000103737d"},"exerciseKey":"e84bcf8c-1ee4-4c28-8e64-875b485369b5","category":"QA","renderType":"md","title":"如何使用js计算一个html页面有多少种标签？","desc":null,"options":null,"explanation":"## 分析\n\n这道题看似简单，但是是一个很有价值的一道题目。它包含了很多重要的知识：\n\n* 如何获取所有DOM节点\n* 伪数组如何转为数组\n* 去重\n\n## 解答\n\n* 获取所有的DOM节点。\n\n```javascript\ndocument.querySelectorAll('*')\n```\n\n此时得到的是一个NodeList集合，我们需要将其转化为数组，然后对其筛选。\n\n* 转化为数组\n```javascript\n[...document.querySelectorAll('*')]\n```\n一个拓展运算符就轻松搞定。\n\n* 获取数组每个元素的标签名\n```javascript\n[...document.querySelectorAll('*')].map(ele => ele.tagName)\n```\n使用一个map方法，将我们需要的结果映射到一个新数组。\n\n* 去重\n```javascript\nnew Set([...document.querySelectorAll('*')].map(ele=> ele.tagName)).size\n```\n\n我们使用ES6中的Set对象，把数组作为构造函数的参数，就实现了去重，再使用Set对象的size方法就可以得到有多少种HTML元素了。\n\n\n","level":3,"tagId":17}
{"_id":{"$oid":"61aa38817964120001917522"},"exerciseKey":"e8cd42a6-0df3-4e16-b6dd-d294756b5c21","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\n// module.js \nexport default () => \"Hello world\"\nexport const name = \"Lydia\"\n\n// index.js \nimport * as data from \"./module\"\n\nconsole.log(data)\n```","options":"{\"options\":[\"{ default: function default(), name: \\\"Lydia\\\" }\",\"{ default: function default() }\",\"{ default: \\\"Hello world\\\", name: \\\"Lydia\\\" }\",\"Global object of module.js\"],\"isMulti\":false,\"answer\":[0]}","explanation":"使用`import * as name`语法，我们将`module.js`文件中所有`export`导入到`index.js`文件中，并且创建了一个名为`data`的新对象。 在`module.js`文件中，有两个导出：默认导出和命名导出。 默认导出是一个返回字符串“Hello World”的函数，命名导出是一个名为`name`的变量，其值为字符串`“Lydia”`。\n`data`对象具有默认导出的`default`属性，其他属性具有指定exports的名称及其对应的值。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa388139bf10000191cad5"},"exerciseKey":"e9b3318a-4d50-437b-8a59-532532cd7dc3","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconst spookyItems = [\"👻\", \"🎃\", \"🕸\"];\n({ item: spookyItems[3] } = { item: \"💀\" });\n\nconsole.log(spookyItems);\n```","options":"{\"options\":[\"[\\\"👻\\\", \\\"🎃\\\", \\\"🕸\\\"]\",\"[\\\"👻\\\", \\\"🎃\\\", \\\"🕸\\\", \\\"💀\\\"]\",\"[\\\"👻\\\", \\\"🎃\\\", \\\"🕸\\\", { item: \\\"💀\\\" }]\",\"[\\\"👻\\\", \\\"🎃\\\", \\\"🕸\\\", \\\"[object Object]\\\"]\"],\"isMulti\":false,\"answer\":[1]}","explanation":"通过解构对象们，我们可以从右手边的对象中拆出值，并且将拆出的值分配给左手边对象同名的属性。在这种情况下，我们将值 \"💀\" 分配给 `spookyItems[3]`。相当于我们正在篡改数组 `spookyItems`，我们给它添加了值 \"💀\"。当输出 `spookyItems` 时，结果为 `[\"👻\", \"🎃\", \"🕸\", \"💀\"]`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa388285c5f700015430a3"},"exerciseKey":"e9bcc1f4-1b0a-4213-9d3a-8e64c97c7848","category":"QA","renderType":"md","title":"说说你对闭包的理解，以及闭包使用场景","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/c141a030-6a7a-11eb-ab90-d9ae814b240d.png)\r\n\r\n## 一、是什么\r\n\r\n一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）\r\n\r\n也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域\r\n\r\n在 `JavaScript `中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁\r\n\r\n下面给出一个简单的例子\r\n\r\n```js\r\nfunction init() {\r\n    var name = \"Mozilla\"; // name 是一个被 init 创建的局部变量\r\n    function displayName() { // displayName() 是内部函数，一个闭包\r\n        alert(name); // 使用了父函数中声明的变量\r\n    }\r\n    displayName();\r\n}\r\ninit();\r\n```\r\n\r\n`displayName()` 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量\r\n\r\n\r\n\r\n## 二、使用场景\r\n\r\n任何闭包的使用场景都离不开这两点：\r\n\r\n- 创建私有变量\r\n- 延长变量的生命周期\r\n\r\n> 一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的\r\n\r\n\r\n下面举个例子：\r\n\r\n在页面上添加一些可以调整字号的按钮\r\n\r\n```js\r\nfunction makeSizer(size) {\r\n  return function() {\r\n    document.body.style.fontSize = size + 'px';\r\n  };\r\n}\r\n\r\nvar size12 = makeSizer(12);\r\nvar size14 = makeSizer(14);\r\nvar size16 = makeSizer(16);\r\n\r\ndocument.getElementById('size-12').onclick = size12;\r\ndocument.getElementById('size-14').onclick = size14;\r\ndocument.getElementById('size-16').onclick = size16;\r\n```\r\n\r\n\r\n\r\n### 柯里化函数\r\n\r\n柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用\r\n\r\n```js\r\n// 假设我们有一个求长方形面积的函数\r\nfunction getArea(width, height) {\r\n    return width * height\r\n}\r\n// 如果我们碰到的长方形的宽老是10\r\nconst area1 = getArea(10, 20)\r\nconst area2 = getArea(10, 30)\r\nconst area3 = getArea(10, 40)\r\n\r\n// 我们可以使用闭包柯里化这个计算面积的函数\r\nfunction getArea(width) {\r\n    return height => {\r\n        return width * height\r\n    }\r\n}\r\n\r\nconst getTenWidthArea = getArea(10)\r\n// 之后碰到宽度为10的长方形就可以这样计算面积\r\nconst area1 = getTenWidthArea(20)\r\n\r\n// 而且如果遇到宽度偶尔变化也可以轻松复用\r\nconst getTwentyWidthArea = getArea(20)\r\n```\r\n\r\n\r\n\r\n### 使用闭包模拟私有方法\r\n\r\n在`JavaScript`中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法\r\n\r\n\r\n下面举个例子：\r\n\r\n```js\r\nvar Counter = (function() {\r\n  var privateCounter = 0;\r\n  function changeBy(val) {\r\n    privateCounter += val;\r\n  }\r\n  return {\r\n    increment: function() {\r\n      changeBy(1);\r\n    },\r\n    decrement: function() {\r\n      changeBy(-1);\r\n    },\r\n    value: function() {\r\n      return privateCounter;\r\n    }\r\n  }\r\n})();\r\n\r\nvar Counter1 = makeCounter();\r\nvar Counter2 = makeCounter();\r\nconsole.log(Counter1.value()); /* logs 0 */\r\nCounter1.increment();\r\nCounter1.increment();\r\nconsole.log(Counter1.value()); /* logs 2 */\r\nCounter1.decrement();\r\nconsole.log(Counter1.value()); /* logs 1 */\r\nconsole.log(Counter2.value()); /* logs 0 */\r\n```\r\n\r\n上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式\r\n\r\n两个计数器 `Counter1` 和 `Counter2` 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量\r\n\r\n\r\n\r\n### 其他\r\n\r\n例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期\r\n\r\n\r\n\r\n## 三、注意事项\r\n\r\n如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响\r\n\r\n例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。\r\n\r\n原因在于每个对象的创建，方法都会被重新赋值\r\n\r\n```js\r\nfunction MyObject(name, message) {\r\n  this.name = name.toString();\r\n  this.message = message.toString();\r\n  this.getName = function() {\r\n    return this.name;\r\n  };\r\n\r\n  this.getMessage = function() {\r\n    return this.message;\r\n  };\r\n}\r\n```\r\n\r\n上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：\r\n\r\n```js\r\nfunction MyObject(name, message) {\r\n  this.name = name.toString();\r\n  this.message = message.toString();\r\n}\r\nMyObject.prototype.getName = function() {\r\n  return this.name;\r\n};\r\nMyObject.prototype.getMessage = function() {\r\n  return this.message;\r\n};\r\n```","level":3,"tagId":10}
{"_id":{"$oid":"61aa3882ff0573000165b3c4"},"exerciseKey":"e9f01da3-63b7-4098-ab32-89df1dca2ec4","category":"QA","renderType":"md","title":" 反转链表","desc":"给你单链表的头节点 `head` ，请你反转链表，并返回反转后的链表。\n\n示例 1：\n\n```\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n```\n\n示例 2：\n```\n输入：head = [1,2]\n输出：[2,1]\n```\n\n示例 3：\n\n```\n输入：head = []\n输出：[]\n```\n\n提示：\n\n* 链表中节点的数目范围是 [0, 5000]\n* -5000 <= Node.val <= 5000\n \n```\n\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n\n};","options":null,"explanation":"```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    if (head == null || head.next == null) return head;\n    let last = reverseList(head.next);\n    head.next.next = head;\n    head.next = null;\n    return last;\n};\n```\n","level":2,"tagId":31}
{"_id":{"$oid":"61aa3882796412000191752a"},"exerciseKey":"ea7dbe32-726d-4d21-a9bc-3df77e1ec853","category":"QA","renderType":"md","title":"为什么部分请求中，参数需要使用 encodeURIComponent 进行转码？","desc":null,"options":null,"explanation":"一般来说，URL只能使用英文字母、阿拉伯数字和某些标点符号，不能使用其他文字和符号。\n\n这是因为网络标准RFC 1738做了硬性规定：\n\n> \"...Only alphanumerics [0-9a-zA-Z], the special characters \"$-_.+!*'(),\" [not including the quotes - ed], and reserved characters used for their reserved purposes may be used unencoded within a URL.\"\n\n这意味着，如果URL中有汉字，就必须编码后使用。但是麻烦的是，RFC 1738没有规定具体的编码方法，而是交给应用程序（浏览器）自己决定。这导致\"URL编码\"成为了一个混乱的领域。\n\n不同的操作系统、不同的浏览器、不同的网页字符集，将导致完全不同的编码结果。如果程序员要把每一种结果都考虑进去，是不是太恐怖了？有没有办法，能够保证客户端只用一种编码方法向服务器发出请求？\n\n就是使用Javascript先对URL编码，然后再向服务器提交，不要给浏览器插手的机会。因为Javascript的输出总是一致的，所以就保证了服务器得到的数据是格式统一的。\n\nJavascript语言用于编码的函数，一共有三个，最古老的一个就是escape()。虽然这个函数现在已经不提倡使用了，但是由于历史原因，很多地方还在使用它，所以有必要先从它讲起。\n\n它的具体规则是，除了ASCII字母、数字、标点符号\"@ * _ + - . /\"以外，对其他所有字符进行编码。\n\nencodeURI()是Javascript中真正用来对URL编码的函数。\n\n它着眼于对整个URL进行编码，因此除了常见的符号以外，对其他一些在网址中有特殊含义的符号\"; / ? : @ & = + $ , #\"，也不进行编码。编码后，它输出符号的utf-8形式，并且在每个字节前加上%。\n\n最后一个Javascript编码函数是encodeURIComponent()。与encodeURI()的区别是，它用于对URL的组成部分进行个别编码，而不用于对整个URL进行编码。\n\n因此，\"; / ? : @ & = + $ , #\"，这些在encodeURI()中不被编码的符号，在encodeURIComponent()中统统会被编码。至于具体的编码方法，两者是一样。\n\n它对应的解码函数是decodeURIComponent()。","level":3,"tagId":30}
{"_id":{"$oid":"61aa3882796412000191752c"},"exerciseKey":"eab191f2-2cc4-4bb9-b04c-370d834b7a7f","category":"QA","renderType":"md","title":"JSBridge是什么？","desc":null,"options":null,"explanation":"JSBridge是给 JavaScript 提供调用 Native 功能的接口，让混合开发中的前端部分可以方便地使用 Native 的功能（例如：地址位置、摄像头）。\n\n实际上，JSBridge 就像其名称中的Bridge的意义一样，是 Native 和非 Native 之间的桥梁，它的核心是构建 Native 和非 Native 间消息通信的通道，而且这个通信的通道是双向的。\n\n```\n双向通信的通道:\n\nJS 向 Native 发送消息: 调用相关功能、通知 Native 当前 JS 的相关状态等。\nNative 向 JS 发送消息: 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等。\n```","level":2,"tagId":10}
{"_id":{"$oid":"61aa3882796412000191752d"},"exerciseKey":"eaf64af1-8d01-495c-b9ca-c1d503e3ed8d","category":"QA","renderType":"md","title":"简述下 React 的事件代理机制？","desc":null,"options":null,"explanation":"React 并不会把所有的处理函数直接绑定在真实的节点上。而是把所有的事件绑定到结构的最外层，使用一个统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。\n\n当组件挂载或卸载时，只是在这个统一的事件监听器上插入或删除一些对象。\n\n当事件发生时，首先被这个统一的事件监听器处理，然后在映射里找到真正的事件处理函数并调用。\n\n这样做的优点是解决了兼容性问题，并且简化了事件处理和回收机制（不需要手动的解绑事件，React 已经在内部处理了）。但是有些事件 React 并没有实现，比如 window 的 resize 事件。","level":3,"tagId":13}
{"_id":{"$oid":"61aa3882c2d0220001c965ae"},"exerciseKey":"eb100f99-89d5-4cdf-958f-d257aeb92614","category":"QA","renderType":"md","title":"ajax、axios、fetch有什么区别？","desc":null,"options":null,"explanation":"## （1）AJAX\n\nAjax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：\n\n* 本身是针对MVC编程，不符合前端MVVM的浪潮\n* 基于原生XHR开发，XHR本身的架构不清晰\n* 不符合关注分离（Separation of Concerns）的原则\n* 配置和调用方式非常混乱，而且基于事件的异步模型不友好。\n\n## （2）Fetch\nfetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。\n\nfetch的优点：\n\n* 语法简洁，更加语义化\n* 基于标准 Promise 实现，支持 async/await\n* 更加底层，提供的API丰富（request, response）\n* 脱离了XHR，是ES规范里新的实现方式\n\nfetch的缺点：\n\n* fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n* fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\n* fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n* fetch没有办法原生监测请求的进度，而XHR可以\n\n## （3）Axios\n\nAxios 是一种基于Promise封装的HTTP客户端，其特点如下：\n\n* 浏览器端发起XMLHttpRequests请求\n* node端发起http请求\n* 支持Promise API\n* 监听请求和返回\n* 对请求和返回进行转化\n* 取消请求\n* 自动转换json数据\n* 客户端支持抵御XSRF攻击\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa3882bdfab500012c85a3"},"exerciseKey":"eb1b05fa-d58b-4d72-bf81-3cd8bab13f55","category":"QA","renderType":"md","title":"react-router 里的 <Link> 标签和 <a> 标签有什么区别？","desc":null,"options":null,"explanation":"对比 <a> 标签, Link 避免了不必要的重新渲染。\n\nreact-router是伴随着react框架出现的路由系统，它也是公认的一种优秀的路由解决方案。在使用react-router时候，我们常常会使用其自带的路径跳转组件Link,通过实现跳转；\n\nreact-router 接管了其默认的链接跳转行为，区别去传统的页面跳转，Link 的 **“跳转”** 行为只会触发相匹配的对应的页面内容更新，而不会刷新整个页面。\n\nLink 跳转做了三件事情：\n\n* 有onclick那就执行onclick\n* click的时候阻止a标签默认事件\n* 根据跳转 href，用 history 跳转，此时只是链接变了，并没有刷新页面\n\n而 a 标签就是普通的超链接了，用于从当前页面跳转到href指向的另一个页面（非锚点情况）。\n","level":3,"tagId":13}
{"_id":{"$oid":"61aa38823d5f3a0001af56d1"},"exerciseKey":"eb1c1598-ed1b-484e-8cae-e97a8f49c509","category":"QA","renderType":"html","title":"iframe 安全","desc":"<p></p>","options":null,"explanation":"<p><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">说明：</span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">i）嵌入第三方 iframe 会有很多不可控的问题，同时当第三方 iframe 出现问题或是被劫持之后，也会诱发安全性问题</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）点击劫持攻击者将目标网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，诱导用户点击。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）禁止自己的 iframe 中的链接外部网站的JS</span></span></span></span></li><li><span style=\"font-size:14ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">预防方案：</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">i）为 iframe 设置 sandbox 属性，通过它可以对iframe的行为进行各种限制，充分实现“最小权限“原则</span></span></span></span></li></ul><p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）服务端设置 X-Frame-Options Header头，拒绝页面被嵌套，X-Frame-Options 是HTTP 响应头中用来告诉浏览器一个页面是否可以嵌入 &lt;iframe&gt; 中eg.</span></span></span></span><br/><br/>X-Frame-Options: SAMEORIGIN <br/><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">SAMEORIGIN: iframe 页面的地址只能为同源域名下的页面</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ALLOW-FROM: 可以嵌套在指定来源的 iframe 里</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">DENY: 当前页面不能被嵌套在 iframe 里</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iii）设置 CSP 即 Content-Security-Policy 请求头</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">iv）减少对 iframe 的使用</span></span></span></span></li></ul><p><br/></p>","level":2.5,"tagId":21}
{"_id":{"$oid":"61aa388234458700017f1db5"},"exerciseKey":"eb451be3-dc88-481c-b8a8-da6c8d278e95","category":"QA","renderType":"md","title":"什么是点击穿透，怎么解决？","desc":null,"options":null,"explanation":"在发生触摸动作约300ms之后，移动端会模拟产生click动作，它底下的具有点击特性的元素也会被触发，这种现象称为点击穿透。\n\n**常见场景**\n\n1. 情景一：蒙层点击穿透问题，点击蒙层（mask）上的关闭按钮，蒙层消失后发现触发了按钮下面元素的click事件。\n2. 情景二：跨页面点击穿透问题：如果按钮下面恰好是一个有href属性的a标签，那么页面就会发生跳转。\n3. 情景三：另一种跨页面点击穿透问题：这次没有mask了，直接点击页内按钮跳转至新页，然后发现新页面中对应位置元素的click事件被触发了。\n4. 情景四：不过概率很低，就是新页面中对应位置元素恰好是a标签，然后就发生连续跳转了。\n\n**发生的条件**\n* 上层元素监听了触摸事件，触摸之后该层元素消失\n* 下层元素具有点击特性（监听了click事件或默认的特性（a标签、input、button标签））\n\n**解决点击穿透的方法**\n1. 方法一：书写规范问题，不要混用touch和click。既然touch之后300ms会触发click，只用touch或者只用click就自然不会存在问题了。\n2. 方法二：吃掉（或者说是消费掉）touch之后的click，依旧用tap，只是在可能发生点击穿透的情形做额外的处理，拿个东西来挡住、或者tap后延迟350毫秒再隐藏mask、pointer-events、在下面元素的事件处理器里做检测（配合全局flag）等。\n\n\n\n","level":3,"tagId":10}
{"_id":{"$oid":"61aa3883bdfab500012c85a6"},"exerciseKey":"ec2aa05e-da02-4a15-9862-9eaee4aa54e5","category":"QA","renderType":"md","title":"::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用","desc":null,"options":null,"explanation":"* 单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。\n* ::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。\n\n:before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before ::after","level":1,"tagId":11}
{"_id":{"$oid":"61aa388381337a00011e06e9"},"exerciseKey":"ecb779c3-a28f-45c8-bcdc-25b8d7948e1a","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nconst obj = { a: 'one', b: 'two', a: 'three' }\nconsole.log(obj)\n```","options":"{\"options\":[\"{ a: \\\"one\\\", b: \\\"two\\\" }\",\"{ b: \\\"two\\\", a: \\\"three\\\" }\",\"{ a: \\\"three\\\", b: \\\"two\\\" }\",\"SyntaxError\"],\"isMulti\":false,\"answer\":[2]}","explanation":"如果你有两个名称相同的键，则键会被替换掉。它仍然位于第一个键出现的位置，但是值是最后出现那个键的值。","level":1,"tagId":32}
{"_id":{"$oid":"61aa3883d00c060001bf1329"},"exerciseKey":"ecd8b4c8-cbb9-47c4-84e3-167e209637ae","category":"QA","renderType":"md","title":"get 和 post 请求在缓存方面有什么区别？","desc":null,"options":null,"explanation":"缓存一般只适用于那些不会更新服务端数据的请求。\n\n一般 get 请求都是查找请求，不会对服务器资源数据造成修改，而 post 请求一般都会对服务器数据造成修改，所以，一般会对 get 请求进行缓存，很少会对 post 请求进行缓存。\n","level":2,"tagId":16}
{"_id":{"$oid":"61aa388385c5f700015430af"},"exerciseKey":"ece0e4b9-112c-4d3c-934c-822e8807fe46","category":"QA","renderType":"md","title":"iconfont是什么？有什么优缺点？","desc":null,"options":null,"explanation":"## 什么是 IconFont\n\n> 顾名思义，IconFont 就是字体图标。严格地说，就是一种字体，但是，它们不包含字母或数字，而是包含符号和字形。您可以使用 CSS 设置样式，就像设置常规文本一样，这使得 IconFont 成为 Web 开发时图标的热门选择。\n\n## 优点\n\n* 可以方便地将任何 CSS 效果应用于它们。\n* 因为它们是矢量图形，所以它们是可伸缩的。这意味着我们可以在不降低质量的情况下伸缩它们。\n* 我们只需要发送一个或少量 HTTP 请求来加载它们，而不是像图片，可能需要多个 HTTP 请求。\n* 由于尺寸小，它们加载速度快。\n* 它们在所有浏览器中都得到支持（甚至支持到 IE6）。\n\n## 不足\n\n* 不能用来显示复杂图像\n* 通常只限于一种颜色，除非应用一些 CSS 技巧\n* 字体图标通常是根据特定的网格设计的，例如 16x16, 32×32, 48×48等。如果由于某种原因将网格系统改为25×25，可能不会得到清晰的结果","level":1,"tagId":12}
{"_id":{"$oid":"61aa38833976eb00014e4645"},"exerciseKey":"ed7cbf26-e39b-4de5-82f6-c1a60ff7ee15","category":"QA","renderType":"md","title":"Math.ceil 和 Math.floor 有什么区别？","desc":null,"options":null,"explanation":"Math.ceil() ： 向上取整，函数返回一个大于或等于给定数字的最小整数。\n\nMath.floor() ： 向下取整，函数返回一个小于或等于给定数字的最大整数。","level":0.5,"tagId":10}
{"_id":{"$oid":"61aa38830d111e0001037383"},"exerciseKey":"ee17c89a-9b7e-4246-8d68-1f28de980ab5","category":"QA","renderType":"md","title":"微前端中的应用隔离是什么，一般是怎么实现的？\n","desc":null,"options":null,"explanation":"应用隔离问题主要分为主应用和微应用，微应用和微应用之间的JavaScript执行环境隔离，CSS样式隔离。\n\n## CSS隔离\n\n当主应用和微应用同屏渲染时，就可能会有一些样式会相互污染，如果要彻底隔离CSS污染，可以采用CSS Module 或者命名空间的方式，给每个微应用模块以特定前缀，即可保证不会互相干扰，可以采用webpack的postcss插件，在打包时添加特定的前缀。\n\n而对于微应用与微应用之间的CSS隔离就非常简单，在每次应用加载时，将该应用所有的link和style 内容进行标记。在应用卸载后，同步卸载页面上对应的link和style即可。\n\n## JavaScript隔离\n\n每当微应用的JavaScript被加载并运行时，它的核心实际上是对全局对象Window的修改以及一些全局事件的改变，例如jQuery这个js运行后，会在Window上挂载一个window.$对象，对于其他库React，Vue也不例外。\n\n为此，需要在加载和卸载每个微应用的同时，尽可能消除这种冲突和影响，最普遍的做法是采用沙箱机制（SandBox）。\n\n沙箱机制的核心是让局部的JavaScript运行时，对外部对象的访问和修改处在可控的范围内，即无论内部怎么运行，都不会影响外部的对象。通常在Node.js端可以采用vm模块，而对于浏览器，则需要结合with关键字和window.Proxy对象来实现浏览器端的沙箱。","level":4,"tagId":10}
{"_id":{"$oid":"61aa38833dd7f70001833070"},"exerciseKey":"ee457290-82ef-4c2b-b2f1-e6b1b28e9166","category":"QA","renderType":"md","title":"如何中断Promise？","desc":null,"options":null,"explanation":"Promise 有个缺点就是一旦创建就无法取消，所以本质上 Promise 是无法被终止的，但我们在开发过程中可能会遇到下面两个需求：\n\n* 中断调用链\n\n就是在某个 then/catch 执行之后，不想让后续的链式调用继续执行了。\n\n```\nsomePromise\n  .then(() => {})\n  .then(() => {\n    // 终止 Promise 链，让下面的 then、catch 和 finally 都不执行\n  })\n  .then(() => console.log('then'))\n  .catch(() => console.log('catch'))\n  .finally(() => console.log('finally'))\n```\n\n一种方法是在then中直接抛错, 这样就不会执行后面的then, 直接跳到catch方法打印err(但此方法并没有实际中断)。但如果链路中对错误进行了捕获，后面的then函数还是会继续执行。\n\nPromise的then方法接收两个参数：\n```javascript\nPromise.prototype.then(onFulfilled, onRejected)\n```\n\n若onFulfilled或onRejected是一个函数，当函数返回一个新Promise对象时，原Promise对象的状态将跟新对象保持一致，详见Promises/A+标准。\n\n因此，当新对象保持“pending”状态时，原Promise链将会中止执行。\n\n```javascript\nPromise.resolve().then(() => {\n    console.log('then 1')\n    return new Promise(() => {})\n}).then(() => {\n    console.log('then 2')\n}).then(() => {\n    console.log('then 3')\n}).catch((err) => {\n    console.log(err)\n})\n```\n\n* 中断Promise\n\n注意这里是中断而不是终止，因为 Promise 无法终止，这个中断的意思是：在合适的时候，把 pending 状态的 promise 给 reject 掉。例如一个常见的应用场景就是希望给网络请求设置超时时间，一旦超时就就中断，我们这里用定时器模拟一个网络请求，随机 3 秒之内返回。\n\n```javascript\nfunction timeoutWrapper(p, timeout = 2000) {\n  const wait = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject('请求超时')\n    }, timeout)\n  })\n  return Promise.race([p, wait])\n}\n```\n\n","level":3,"tagId":24}
{"_id":{"$oid":"61aa388385c5f700015430b4"},"exerciseKey":"eea30dfd-e506-419d-9563-0f4c84abbbe8","category":"QA","renderType":"md","title":"什么是 PWA？","desc":null,"options":null,"explanation":"PWA的中文名叫做渐进式网页应用，早在2014年， W3C 公布过 Service Worker 的相关草案，但是其在生产环境被 Chrome 支持是在 2015 年。因此，如果我们把 PWA 的关键技术之一 Service Worker 的出现作为 PWA 的诞生时间，那就应该是 2015 年。\n\n自 2015 年以来，PWA 相关的技术不断升级优化，在用户体验和用户留存两方面都提供了非常好的解决方案。PWA 可以将 Web 和 App 各自的优势融合在一起：渐进式、可响应、可离线、实现类似 App 的交互、即时更新、安全、可以被搜索引擎检索、可推送、可安装、可链接。\n\n需要特别说明的是，PWA 不是特指某一项技术，而是应用了多项技术的 Web App。其核心技术包括 App Manifest、Service Worker、Web Push，等等。","level":3.5,"tagId":10}
{"_id":{"$oid":"61aa38837964120001917537"},"exerciseKey":"eef587e7-d29b-4b32-b672-7f8fe2e84217","category":"QA","renderType":"md","title":"React中，能否直接将 props 的值复制给 state？","desc":null,"options":null,"explanation":"应该避免这种写法：\n\n```react.js\nconstructor(props) {\n super(props);\n // 不要这样做\n this.state = { color: props.color };\n}\n```\n\n因为这样做毫无必要（你可以直接使用 this.props.color），同时还产生了 bug（更新 prop 中的 color 时，并不会影响 state）。\n\n只有在你刻意忽略 prop 更新的情况下使用。\n\n此时，应将 prop 重命名为 initialColor 或 defaultColor。必要时，你可以修改它的 key，以强制 **重置** 其内部 state。","level":2,"tagId":13}
{"_id":{"$oid":"61aa3883bdfab500012c85b1"},"exerciseKey":"ef148af4-31d3-457d-b8ad-4a257ab0bb40","category":"QA","renderType":"md","title":"Vue常用的修饰符有哪些？分别有什么应用场景？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/8f718e30-42c0-11eb-ab90-d9ae814b240d.png)\n\n## 一、修饰符是什么\n\n在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号\n\n在`Vue`中，修饰符处理了许多`DOM`事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理\n\n`vue`中修饰符分为以下五种：\n\n- 表单修饰符\n- 事件修饰符\n- 鼠标按键修饰符\n- 键值修饰符\n- v-bind修饰符\n\n## 二、修饰符的作用\n\n### 表单修饰符\n\n在我们填写表单的时候用得最多的是`input`标签，指令用得最多的是`v-model`\n\n关于表单的修饰符有如下：\n\n- lazy\n- trim\n- number\n\n#### lazy\n\n在我们填完信息，光标离开标签的时候，才会将值赋予给`value`，也就是在`change`事件之后再进行信息同步\n\n```js\n<input type=\"text\" v-model.lazy=\"value\">\n<p>{{value}}</p>\n```\n\n#### trim\n\n自动过滤用户输入的首空格字符，而中间的空格不会过滤\n\n```js\n<input type=\"text\" v-model.trim=\"value\">\n```\n\n#### number\n\n自动将用户的输入值转为数值类型，但如果这个值无法被`parseFloat`解析，则会返回原来的值\n\n```js\n<input v-model.number=\"age\" type=\"number\">\n```\n\n### 事件修饰符\n\n事件修饰符是对事件捕获以及目标进行了处理，有如下修饰符：\n\n- stop\n- prevent\n- self\n- once\n- capture\n- passive\n- native\n\n#### stop\n\n阻止了事件冒泡，相当于调用了`event.stopPropagation`方法\n\n```js\n<div @click=\"shout(2)\">\n  <button @click.stop=\"shout(1)\">ok</button>\n</div>\n//只输出1\n```\n\n#### prevent\n\n阻止了事件的默认行为，相当于调用了`event.preventDefault`方法\n\n```js\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n\n#### self\n\n只当在 `event.target` 是当前元素自身时触发处理函数\n\n```js\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n> 使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 `v-on:click.prevent.self` 会阻止**所有的点击**，而 `v-on:click.self.prevent` 只会阻止对元素自身的点击\n\n#### once\n\n绑定了事件以后只能触发一次，第二次就不会触发\n\n```js\n<button @click.once=\"shout(1)\">ok</button>\n```\n\n#### capture\n\n使事件触发从包含这个元素的顶层开始往下触发\n\n```js\n<div @click.capture=\"shout(1)\">\n    obj1\n<div @click.capture=\"shout(2)\">\n    obj2\n<div @click=\"shout(3)\">\n    obj3\n<div @click=\"shout(4)\">\n    obj4\n</div>\n</div>\n</div>\n</div>\n// 输出结构: 1 2 4 3 \n```\n\n#### passive\n\n在移动端，当我们在监听元素滚动事件的时候，会一直触发`onscroll`事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给`onscroll`事件整了一个`.lazy`修饰符\n\n```js\n<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 -->\n<!-- 而不会等待 `onScroll` 完成  -->\n<!-- 这其中包含 `event.preventDefault()` 的情况 -->\n<div v-on:scroll.passive=\"onScroll\">...</div>\n```\n\n> 不要把 `.passive` 和 `.prevent` 一起使用,因为 `.prevent` 将会被忽略，同时浏览器可能会向你展示一个警告。\n>\n> `passive` 会告诉浏览器你不想阻止事件的默认行为\n\n#### native\n\n让组件变成像`html`内置标签那样监听根元素的原生事件，否则组件上使用 `v-on` 只会监听自定义事件\n\n```js\n<my-component v-on:click.native=\"doSomething\"></my-component>\n```\n\n> 使用.native修饰符来操作普通HTML标签是会令事件失效的\n\n### 鼠标按钮修饰符\n\n鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下：\n\n- left 左键点击\n- right 右键点击\n- middle 中键点击\n\n```js\n<button @click.left=\"shout(1)\">ok</button>\n<button @click.right=\"shout(1)\">ok</button>\n<button @click.middle=\"shout(1)\">ok</button>\n```\n\n### 键盘修饰符\n\n键盘修饰符是用来修饰键盘事件（`onkeyup`，`onkeydown`）的，有如下：\n\n`keyCode`存在很多，但`vue`为我们提供了别名，分为以下两种：\n\n- 普通键（enter、tab、delete、space、esc、up...）\n- 系统修饰键（ctrl、alt、meta、shift...）\n\n```js\n// 只有按键为keyCode的时候才触发\n<input type=\"text\" @keyup.keyCode=\"shout()\">\n```\n\n还可以通过以下方式自定义一些全局的键盘码别名\n\n```js\nVue.config.keyCodes.f2 = 113\n```\n\n### v-bind修饰符\n\nv-bind修饰符主要是为属性进行操作，用来分别有如下：\n\n- async\n- prop\n- camel\n\n#### async\n\n能对`props`进行一个双向绑定\n\n```js\n//父组件\n<comp :myMessage.sync=\"bar\"></comp> \n//子组件\nthis.$emit('update:myMessage',params);\n```\n\n以上这种方法相当于以下的简写\n\n```js\n//父亲组件\n<comp :myMessage=\"bar\" @update:myMessage=\"func\"></comp>\nfunc(e){\n this.bar = e;\n}\n//子组件js\nfunc2(){\n  this.$emit('update:myMessage',params);\n}\n```\n\n使用`async`需要注意以下两点：\n\n- 使用`sync`的时候，子组件传递的事件名格式必须为`update:value`，其中`value`必须与子组件中`props`中声明的名称完全一致\n\n- 注意带有 `.sync` 修饰符的 `v-bind` 不能和表达式一起使用\n\n- 将 `v-bind.sync` 用在一个字面量的对象上，例如 `v-bind.sync=”{ title: doc.title }”`，是无法正常工作的\n\n#### props\n\n设置自定义标签属性，避免暴露数据，防止污染HTML结构\n\n```js\n<input id=\"uid\" title=\"title1\" value=\"1\" :index.prop=\"index\">\n```\n\n#### camel\n\n将命名变为驼峰命名法，如将` view-Box`属性名转换为 `viewBox`\n\n```js\n<svg :viewBox=\"viewBox\"></svg>\n```\n\n## 三、应用场景\n\n根据每一个修饰符的功能，我们可以得到以下修饰符的应用场景：\n\n- .stop：阻止事件冒泡\n- .native：绑定原生事件\n- .once：事件只执行一次\n- .self ：将事件绑定在自身身上，相当于阻止事件冒泡\n- .prevent：阻止默认事件\n- .caption：用于事件捕获\n- .once：只触发一次\n- .keyCode：监听特定键盘按下\n- .right：右键\n\n\n","level":2,"tagId":14}
{"_id":{"$oid":"61aa38847964120001917539"},"exerciseKey":"ef8a8acb-e2bd-42d0-87b0-0414126a9ec0","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\n+true;\n!\"Lydia\";\n```","options":"{\"options\":[\"1 and false\",\"false and NaN\",\"false and false\"],\"isMulti\":false,\"answer\":[0]}","explanation":"一元操作符加号尝试将 bool 转为 number。`true` 转换为 number 的话为 `1`，`false` 为 `0`。\n字符串 `'Lydia'` 是一个真值，真值取反那么就返回 `false`。","level":1,"tagId":32}
{"_id":{"$oid":"61aa388439bf10000191cae8"},"exerciseKey":"efc1c0ee-16ae-4c57-bef7-324a7747919c","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nclass Chameleon {\n  static colorChange(newColor) {\n    this.newColor = newColor\n    return this.newColor\n  }\n\n  constructor({ newColor = 'green' } = {}) {\n    this.newColor = newColor\n  }\n}\n\nconst freddie = new Chameleon({ newColor: 'purple' })\nfreddie.colorChange('orange')\n```","options":"{\"options\":[\"orange\",\"purple\",\"green\",\"TypeError\"],\"isMulti\":false,\"answer\":[3]}","explanation":"`colorChange` 是一个静态方法。静态方法被设计为只能被创建它们的构造器使用（也就是 `Chameleon`），并且不能传递给实例。因为 `freddie` 是一个实例，静态方法不能被实例使用，因此抛出了 `TypeError` 错误。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38840d111e0001037387"},"exerciseKey":"f03cba69-b0fd-4450-b3e0-cb6a1f855bac","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\nfunction Car() {\n  this.make = \"Lamborghini\";\n  return { make: \"Maserati\" };\n}\n\nconst myCar = new Car();\nconsole.log(myCar.make);\n```","options":"{\"options\":[\"\\\"Lamborghini\\\"\",\"\\\"Maserati\\\"\",\"ReferenceError\",\"TypeError\"],\"isMulti\":false,\"answer\":[1]}","explanation":"返回属性的时候，属性的值等于 _返回的_ 值，而不是构造函数中设定的值。我们返回了字符串 `\"Maserati\"`，所以 `myCar.make`等于`\"Maserati\"`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa388454ebf60001a1a50c"},"exerciseKey":"f0b0654a-fd77-4423-963f-0465661f3d71","category":"QA","renderType":"md","title":"Node. js 有哪些全局对象？","desc":null,"options":null,"explanation":" ![](https://static.vue-js.com/79c7b100-c2a3-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n在浏览器 `JavaScript` 中，通常` window` 是全局对象， 而 `Nodejs `中的全局对象是 `global`\n\n在`NodeJS`里，是不可能在最外层定义一个变量，因为所有的用户代码都是当前模块的，只在当前模块里可用，但可以通过`exports`对象的使用将其传递给模块外部\n\n所以，在`NodeJS`中，用`var`声明的变量并不属于全局的变量，只在当前模块生效\n\n像上述的`global`全局对象则在全局作用域中，任何全局变量、函数、对象都是该对象的一个属性值\n\n\n\n## 二、有哪些\n\n将全局对象分成两类：\n\n- 真正的全局对象\n\n- 模块级别的全局变量\n\n\n\n### 真正的全局对象\n\n下面给出一些常见的全局对象：\n\n- Class:Buffer\n- process\n\n- console\n- clearInterval、setInterval\n- clearTimeout、setTimeout\n\n- global\n\n\n\n#### Class:Buffer\n\n可以处理二进制以及非`Unicode`编码的数据\n\n在`Buffer`类实例化中存储了原始数据。`Buffer`类似于一个整数数组，在V8堆原始存储空间给它分配了内存\n\n一旦创建了`Buffer`实例，则无法改变大小\n\n\n\n#### process\n\n进程对象，提供有关当前过程的信息和控制\n\n包括在执行`node`程序的过程中，如果需要传递参数，我们想要获取这个参数需要在`process`内置对象中\n\n启动进程：\n\n```cmd\n node index.js 参数1 参数2 参数3\n```\n\nindex.js文件如下：\n\n```js\nprocess.argv.forEach((val, index) => {\n  console.log(`${index}: ${val}`);\n});\n```\n\n输出如下：\n\n```js\n/usr/local/bin/node\n/Users/mjr/work/node/process-args.js\n参数1\n参数2\n参数3\n```\n\n除此之外，还包括一些其他信息如版本、操作系统等\n\n![](https://static.vue-js.com/85f473a0-c2a3-11eb-ab90-d9ae814b240d.png)\n\n\n\n#### console\n\n用来打印`stdout`和`stderr`\n\n最常用的输入内容的方式：console.log\n\n```js\nconsole.log(\"hello\");\n```\n\n清空控制台：console.clear\n\n```js\nconsole.clear\n```\n\n打印函数的调用栈：console.trace\n\n```js\nfunction test() {\n    demo();\n}\n\nfunction demo() {\n    foo();\n}\n\nfunction foo() {\n    console.trace();\n}\n\ntest();\n```\n\n ![](https://static.vue-js.com/91b6dbb0-c2a3-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n#### clearInterval、setInterval\n\n设置定时器与清除定时器\n\n```js\nsetInterval(callback, delay[, ...args])\n```\n\n`callback`每`delay`毫秒重复执行一次\n\n`clearInterval`则为对应发取消定时器的方法\n\n\n\n#### clearTimeout、setTimeout\n\n设置延时器与清除延时器\n\n```js\nsetTimeout(callback,delay[,...args])\n```\n\n`callback`在`delay`毫秒后执行一次\n\n`clearTimeout`则为对应取消延时器的方法\n\n\n\n#### global\n\n全局命名空间对象，墙面讲到的`process`、`console`、`setTimeout`等都有放到`global`中\n\n```js\nconsole.log(process === global.process) // true\n```\n\n\n\n\n\n### 模块级别的全局对象\n\n这些全局对象是模块中的变量，只是每个模块都有，看起来就像全局变量，像在命令交互中是不可以使用，包括：\n\n- __dirname\n- __filename\n- exports\n- module\n- require\n\n\n\n#### __dirname\n\n获取当前文件所在的路径，不包括后面的文件名\n\n从 `/Users/mjr` 运行 `node example.js`：\n\n```js\nconsole.log(__dirname);// 打印: /Users/mjr\n```\n\n\n\n#### __filename\n\n获取当前文件所在的路径和文件名称，包括后面的文件名称\n\n从 `/Users/mjr` 运行 `node example.js`：\n\n```js\nconsole.log(__filename);// 打印: /Users/mjr/example.js\n```\n\n\n\n#### exports\n\n`module.exports` 用于指定一个模块所导出的内容，即可以通过 `require()` 访问的内容\n\n```js\nexports.name = name;exports.age = age;exports.sayHello = sayHello;\n```\n\n\n\n#### module\n\n对当前模块的引用，通过`module.exports` 用于指定一个模块所导出的内容，即可以通过 `require()` 访问的内容\n\n\n\n#### require\n\n用于引入模块、 `JSON`、或本地文件。 可以从 `node_modules` 引入模块。\n\n可以使用相对路径引入本地模块或` JSON `文件，路径会根据`__dirname`定义的目录名或当前工作目录进行处理\n","level":2,"tagId":18}
{"_id":{"$oid":"61aa38848e97d90001808857"},"exerciseKey":"f1974383-8f98-4cd9-8a8e-f0c51e61b275","category":"QA","renderType":"md","title":"实现 Array.prototype.forEach()","desc":null,"options":null,"explanation":"```js\nArray.prototype.forEach = function(callback, thisArg) {\n  if (this == null) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== \"function\") {\n    throw new TypeError(callback + ' is not a function');\n  }\n  const O = Object(this);\n  const len = O.length >>> 0;\n  let k = 0;\n  while (k < len) {\n    if (k in O) {\n      callback.call(thisArg, O[k], k, O);\n    }\n    k++;\n  }\n}\n```","level":2,"tagId":26}
{"_id":{"$oid":"61aa38840d111e000103738c"},"exerciseKey":"f1a7b0d9-bb14-4d85-97e2-a1668c60098c","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nlet randomValue = { name: \"Lydia\" }\nrandomValue = 23\n\nif (!typeof randomValue === \"string\") {\n\tconsole.log(\"It's not a string!\")\n} else {\n\tconsole.log(\"Yay it's a string!\")\n}\n```","options":"{\"options\":[\"It's not a string!\",\"Yay it's a string!\",\"TypeError\",\"undefined\"],\"isMulti\":false,\"answer\":[1]}","explanation":" `if` 语句的条件判断 `!typeof randomValue` 的值是否等于 `\"string\"`。 `!` 操作符将这个值转化为一个布尔值。如果值是truthy的话，返回值会是 `false`，如果值是falsy，返回值会是 `true`。在这里， `typeof randomValue` 的返回值是一个truthy值 `\"number\"`，意味着 `!typeof randomValue` 的值是一个布尔值 `false`。\n `!typeof randomValue === \"string\"` 总是返回false，因为我们实际上是在执行 `false === \"string\"`。因为条件返回的是 `false`，所以 `else` 语句中的代码块会被运行，因此打印 `Yay it's a string!` 。","level":1,"tagId":32}
{"_id":{"$oid":"61aa38843d5f3a0001af56e2"},"exerciseKey":"f1de93ec-d1c8-48b0-98a9-bf256dfe2df0","category":"QA","renderType":"html","title":"前端的常规安全策略","desc":null,"options":null,"explanation":"<p></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">定期请第三方机构做安全性测试，漏洞扫描</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">使用第三方开源库做上线前的安全测试，可以考虑融合到CI中</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">code review 保证代码质量</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">默认项目中设置对应的 Header 请求头，如 X-XSS-Protection、 X-Content-Type-Options 、X-Frame-Options Header、Content-Security-Policy 等等</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">对第三方包和库做检测：NSP(Node Security Platform)，Snyk</span></span></span></span></li></ul><p></p>","level":2,"tagId":21}
{"_id":{"$oid":"61aa38847964120001917540"},"exerciseKey":"f1dfb420-8c92-4210-98af-130b79133d82","category":"QA","renderType":"md","title":"实现 Promise.all","desc":null,"options":null,"explanation":"// 简易版\n```javascript\nPromise.myAll = function(promiseArr) {\n  return new Promise((resolve, reject) => {\n    const ans = [];\n    let index = 0;\n    for (let i = 0; i < promiseArr.length; i++) {\n      promiseArr[i]\n      .then(res => {\n        ans[i] = res;\n        index++;\n        if (index === promiseArr.length) {\n          resolve(ans);\n        }\n      })\n      .catch(err => reject(err));\n    }\n  })\n}\n```\n\n// 终极版\n\n```javascript\n// 输入不仅仅只有Array\nfunction promiseAll (args) {\n  return new Promise((resolve, reject) => {\n    const promiseResults = [];\n    let iteratorIndex = 0;\n    // 已完成的数量，用于最终的返回，不能直接用完成数量作为iteratorIndex\n    // 输出顺序和完成顺序是两码事\n    let fullCount = 0;\n    // 用于迭代iterator数据\n    for (const item of args) {\n      // for of 遍历顺序，用于返回正确顺序的结果\n      // 因iterator用forEach遍历后的key和value一样，所以必须存一份for of的 iteratorIndex\n      let resultIndex = iteratorIndex;\n      iteratorIndex += 1;\n      // 包一层，以兼容非promise的情况\n      Promise.resolve(item).then(res => {\n        promiseResults[resultIndex] = res;\n        fullCount += 1;\n        // Iterator 接口的数据无法单纯的用length和size判断长度，不能局限于Array和 Map类型中\n        if (fullCount === iteratorIndex) {\n          resolve(promiseResults)\n        }\n      }).catch(err => {\n        reject(err)\n      })\n    }\n    // 处理空 iterator 的情况\n    if(iteratorIndex===0){\n      resolve(promiseResults)\n    }\n  }\n  )\n}\nif (!Promise.all) Promise.all = promiseAll;\n```\n\n","level":3,"tagId":26}
{"_id":{"$oid":"61aa38847964120001917541"},"exerciseKey":"f1e6c221-11b8-4e5d-8e8b-f4c70d698291","category":"QA","renderType":"md","title":"CSS 中有哪几种定位方式？","desc":null,"options":null,"explanation":"* Static\n\n这个是元素的默认定位方式，元素出现在正常的文档流中，会占用页面空间。\n\n* Relative\n\n相对定位方式，相对于其父级元素（无论父级元素此时为何种定位方式）进行定位，准确地说是相对于其父级元素所剩余的未被占用的空间进行定位（在父元素由多个相对定位的子元素时可以看出），且会占用该元素在文档中初始的页面空间，即在使用top，bottom，left，right进行移动位置之后依旧不会改变其所占用空间的位置。可以使用z-index进行在z轴方向上的移动。\n\n\n* Absolute\n\n绝对定位方式，脱离文档流，不会占用页面空间。以最近的不是static定位的父级元素作为参考进行定位，如果其所有的父级元素都是static定位，那么此元素最终则是以当前窗口作为参考进行定位。\n\n可以使用top，bottom，left，right进行位置移动，亦可使用z-index在z轴上面进行移动。当元素为此定位时，如果该元素为内联元素，则会变为块级元素，即可以直接设置其宽和高的值；如果该元素为块级元素，则其宽度会由初始的100%变为auto。\n\n注意：当元素设置为绝对定位时，在没有指定top，bottom，left，right的值时，他们的值并不是0，这几个值是有默认值的，默认值就是该元素设置为绝对定位前所处的正常文档流中的位置。\n\n* Fixed\n\n绝对定位方式，直接以浏览器窗口作为参考进行定位。其它特性同absolute定位。\n\n当父元素使用了transform的时候，会以父元素定位。\n\n* sticky\n\n粘性定位，可以简单理解为relative和fixed布局的混合。\n\n当粘性约束矩形在可视范围内为relative，反之，则为fixed粘性定位元素如果和它的父元素一样高，则垂直滚动的时候，粘性定位效果是不会出现的它的定位效果完全受限于父级元素们。\n\n如果父元素的overflow属性设置了scroll，auto,overlay值，那么，粘性定位将会失效同一容器中多个粘贴定位元素独立偏移，因此可能重叠；位置上下靠在一起的不同容器中的粘贴定位元素则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。\n","level":2,"tagId":11}
{"_id":{"$oid":"61aa38850d111e0001037392"},"exerciseKey":"f2005269-95e7-4d83-acbf-673a7bba78f9","category":"QA","renderType":"md","title":"说说你对Node.js 的理解？优缺点？应用场景？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/b565d240-c1e6-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、是什么\n\n`Node.js` 是一个开源与跨平台的 `JavaScript` 运行时环境\n\n在浏览器外运行 V8 JavaScript 引擎（Google Chrome 的内核），利用事件驱动、非阻塞和异步输入输出模型等技术提高性能\n\n可以理解为 `Node.js` 就是一个服务器端的、非阻塞式I/O的、事件驱动的`JavaScript`运行环境\n\n### 非阻塞异步 \n\n`Nodejs`采用了非阻塞型`I/O`机制，在做`I/O`操作的时候不会造成任何的阻塞，当完成之后，以时间的形式通知执行操作\n\n例如在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率\n\n\n\n### 事件驱动\n\n事件驱动就是当进来一个新的请求的时，请求将会被压入一个事件队列中，然后通过一个循环来检测队列中的事件状态变化，如果检测到有状态变化的事件，那么就执行该事件对应的处理代码，一般都是回调函数\n\n比如读取一个文件，文件读取完毕后，就会触发对应的状态，然后通过对应的回调函数来进行处理\n\n ![](https://static.vue-js.com/a7729590-c1e8-11eb-ab90-d9ae814b240d.png)\n\n\n\n\n\n\n\n## 二、优缺点\n\n优点：\n\n- 处理高并发场景性能更佳\n- 适合I/O密集型应用，值的是应用在运行极限时，CPU占用率仍然比较低，大部分时间是在做 I/O硬盘内存读写操作\n\n因为`Nodejs`是单线程，带来的缺点有：\n\n- 不适合CPU密集型应用\n- 只支持单核CPU，不能充分利用CPU\n- 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃\n\n\n\n\n\n## 三、应用场景\n\n借助`Nodejs`的特点和弊端，其应用场景分类如下：\n\n- 善于`I/O`，不善于计算。因为Nodejs是一个单线程，如果计算（同步）太多，则会阻塞这个线程\n- 大量并发的I/O，应用程序内部并不需要进行非常复杂的处理\n- 与 websocket 配合，开发长连接的实时交互应用程序\n\n具体场景可以表现为如下：\n\n- 第一大类：用户表单收集系统、后台管理系统、实时交互系统、考试系统、联网软件、高并发量的web应用程序\n- 第二大类：基于web、canvas等多人联网游戏\n- 第三大类：基于web的多人实时聊天客户端、聊天室、图文直播\n- 第四大类：单页面浏览器应用程序\n- 第五大类：操作数据库、为前端和移动端提供基于`json`的API\n\n其实，`Nodejs`能实现几乎一切的应用，只考虑适不适合使用它\n","level":2,"tagId":18}
{"_id":{"$oid":"61aa3885c2d0220001c965bc"},"exerciseKey":"f24683ac-0366-41a2-a763-f90f447a78ee","category":"QA","renderType":"md","title":"什么是“事件代理”","desc":null,"options":null,"explanation":"事件代理（Event Delegation）也称之为事件委托。是JavaScript中常用绑定事件的常用技巧。\n\n顾名思义，“事件代理”即是把原本需要绑定在子元素的响应事件委托给父元素，让父元素担当事件监听的职务。\n\n事件代理的原理是DOM元素的**事件冒泡**。\n\n一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。\n\n* 捕获阶段：从window对象传导到目标节点（上层传到底层）称为“捕获阶段”（capture phase），捕获阶段不会响应任何事件；\n* 目标阶段：在目标节点上触发，称为“目标阶段”\n* 冒泡阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。事件代理即是利用事件冒泡的机制把里层所需要响应的事件绑定到外层。\n\n## 事件委托的优点：\n\n* 可以大量节省内存占用，减少事件注册。\n\n比如在ul上代理所有li的click事件就非常棒\n\n```html\n<ul id=\"list\">\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n  ......\n  <li>item n</li>\n</ul>\n```\n\n如上面代码所示，如果给每个li列表项都绑定一个函数，那对内存的消耗是非常大的，因此较好的解决办法就是将li元素的点击事件绑定到它的父元素ul身上，执行事件的时候再去匹配判断目标元素。\n\n* 可以实现当新增子对象时无需再次对其绑定（动态绑定事件）\n\n假设上述的例子中列表项li就几个，我们给每个列表项都绑定了事件；\n\n在很多时候，我们需要通过 AJAX 或者用户操作动态的增加或者删除列表项li元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件；\n\n如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的；所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。\n\n使用事件委托注意事项：使用“事件委托”时，并不是说把事件委托给的元素越靠近顶层就越好。事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时。如果DOM嵌套结构很深，事件冒泡通过大量祖先元素会导致性能损失。\n\n\n\n","level":1,"tagId":10}
{"_id":{"$oid":"61aa38858e97d9000180885d"},"exerciseKey":"f2863537-c9c9-4d24-ae7a-604cf6947976","category":"QA","renderType":"md","title":"白帽子问题","desc":"在一个房间里有100个学生。每个人头上都戴了一顶帽子，帽子的颜色是白色或者黑色。每个学生都只能看见别人的帽子的颜色，而不能看到自己帽子的颜色。\n\n老师对所有人说：“你们每个人要么戴白帽子，要么戴黑帽子，并且有人戴白帽子，请戴白帽子的同学举手。” 如果没人举手，老师一分钟后再问：“请戴白帽子的同学举手。” 然后老师每个一分钟后重复同样的问题，直到所有戴白帽子的学生都举手为止。\n\n假设每个学生都极其聪明，100个学生中只有5个人戴了白帽子。请问，什么时候戴白帽子的学生会全部举手？","options":null,"explanation":"为了解答的时候说的更清楚明白，先来认识一个概念叫做**共同知识**。其实共同知识就是某一件事情，所有人都知道，所有人都知道所有人都知道，所有人都知道所有人都知道所有人都知道……\n\n**第1轮** — 第一次让白帽子举手\n\n分析：如果只有一个人（叫他A）戴白帽子，那么从 A 的视角来看，其他人都戴黑帽子。结合第0轮共同知识，那么戴白帽子的只能是 A 自己，于是他将会举手。但是事实是，由于有 5 顶白帽子，所以上述情况不可能发生。所以第1轮没有人举手。\n\n结果：没有人举手\n\n共同知识：在分析过程中，我们排除了一种可能，就是只有一个人戴白帽子。因为第1轮没有人举手，所以大家现在都知道，不只一个人戴了白帽子，并且所有人都知道其他人知道。所以现在的共同知识是：有大于等于 2 个人戴白帽子。\n\n**第2轮** — 第二次让白帽子举手\n\n分析：假设只有两个人（假设其中一个人为 A）戴白帽子，那么从 A 的视角来看，其他人总共戴了一顶白帽子。基于第1轮的公共知识，他能够判断自己必定戴了白帽子，否则将只有一顶白帽子，与之前的公共知识矛盾。但是事实是，由于有 5 顶白帽子，所以上述情况不可能发生。所以第2轮没有人举手。\n\n结果：没有人举手\n\n共同知识：在分析过程中，我们排除了一种可能，就是只有两个人戴白帽子。因为第2轮没有人举手，所以大家现在都知道，不只两个人戴了白帽子，并且所有人都知道其他人知道。所以现在的共同知识是：有大于等于 3 个人戴白帽子。\n\n**第3轮** — 第三次让白帽子举手\n分析：同理可得，如果只有三个人戴白帽子，那么他们才都会举手。\n\n结果：没有人举手\n\n共同知识：有大于等于 4 个人戴白帽子。\n\n**第4轮** — 第四次让白帽子举手\n分析：同理可得，如果只有四个人戴白帽子，那么他们才都会举手。\n\n结果：没有人举手\n\n共同知识：有大于等于 5 个人戴白帽子。\n\n**第5轮** — 第五次让白帽子举手\n\n分析：每一个戴白帽子的人都只能看到其他四顶白帽子，而基于上一轮共同知识，每个戴白帽子的人都能判断出自己戴了白帽子这个事实。\n\n结果：每个戴白帽子的人都同时举手。\n\n公式：\n一共有 N 个人戴白帽子，那么第 N 次提问让白帽子举手的时候，所有白帽子同时举手。\n\n","level":4,"tagId":17}
{"_id":{"$oid":"61aa38850f30890001ab8234"},"exerciseKey":"f28ca2b5-ff42-4522-8cf3-b4e3e835b85d","category":"QA","renderType":"md","title":"state 和 props有什么区别？","desc":null,"options":null,"explanation":"## 一、state\n\n一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是`state`，一般在 `constructor` 中初始化 \n\n当需要修改里面的值的状态需要通过调用`setState`来改变，从而达到更新组件内部数据的作用，并且重新调用组件`render`方法，如下面的例子：\n\n```jsx\nclass Button extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0,\n        };\n    }\n\n    updateCount() {\n        this.setState((prevState, props) => {\n            return { count: prevState.count + 1 }\n        });\n    }\n\n    render() {\n        return (<button\n                    onClick={() => this.updateCount()}\n                    >\n                Clicked {this.state.count} times\n            </button>);\n    }\n}\n```\n\n`setState`还可以接受第二个参数，它是一个函数，会在`setState`调用完成并且组件开始重新渲染时被调用，可以用来监听渲染是否完成\n\n```js\nthis.setState({\n  name:'JS每日一题'\n},()=>console.log('setState finished'))\n```\n\n## 二、props\n\n`React`的核心思想就是组件化思想，页面会被切分成一些独立的、可复用的组件\n\n组件从概念上看就是一个函数，可以接受一个参数作为输入值，这个参数就是`props`，所以可以把`props`理解为从外部传入组件内部的数据\n\n`react`具有单向数据流的特性，所以他的主要作用是从父组件向子组件中传递数据\n\n`props`除了可以传字符串，数字，还可以传递对象，数组甚至是回调函数，如下：\n\n```jsx\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello {this.props.name}</h1>;\n  }\n}\n\nconst element = <Welcome name=\"Sara\" onNameChanged={this.handleName} />;\n```\n\n上述`name`属性与`onNameChanged`方法都能在子组件的`props`变量中访问\n\n在子组件中，`props`在内部不可变的，如果想要改变它看，只能通过外部组件传入新的`props`来重新渲染子组件，否则子组件的`props`和展示形式不会改变\n\n\n\n## 三、区别\n\n相同点：\n\n- 两者都是 JavaScript 对象\n- 两者都是用于保存信息\n- props 和 state 都能触发渲染更新\n\n区别：\n\n- props 是外部传递给组件的，而 state 是在组件内被组件自己管理的，一般在 constructor 中初始化\n- props 在组件内部是不可修改的，但 state 在组件内部可以进行修改\n- state 是多变的、可以修改\n","level":1,"tagId":13}
{"_id":{"$oid":"61aa38853976eb00014e4651"},"exerciseKey":"f2e90e32-83d2-4ba4-8a57-033160fac9c4","category":"QA","renderType":"md","title":"怎么使用 CSS 如何画一个三角形","desc":null,"options":null,"explanation":"\n![](https://static.vue-js.com/bd310120-a279-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、前言\n\n在前端开发的时候，我们有时候会需要用到一个三角形的形状，比如地址选择或者播放器里面播放按钮\n\n ![](https://static.vue-js.com/d6d8ff60-a279-11eb-85f6-6fac77c0c9b3.png)\n\n通常情况下，我们会使用图片或者`svg`去完成三角形效果图，但如果单纯使用`css`如何完成一个三角形呢？\n\n实现过程似乎也并不困难，通过边框就可完成\n\n\n## 二、实现过程\n\n在以前也讲过盒子模型，默认情况下是一个矩形，实现也很简单\n\n```html\n<style>\n    .border {\n        width: 50px;\n        height: 50px;\n        border: 2px solid;\n        border-color: #96ceb4 #ffeead #d9534f #ffad60;\n    }\n</style>\n<div class=\"border\"></div>\n```\n\n效果如下图所示：\n\n ![](https://static.vue-js.com/e3f244e0-a279-11eb-ab90-d9ae814b240d.png)\n\n将`border`设置`50px`，效果图如下所示：\n\n ![](https://static.vue-js.com/ee0b42b0-a279-11eb-ab90-d9ae814b240d.png)\n\n白色区域则为`width`、`height`，这时候只需要你将白色区域部分宽高逐渐变小，最终变为0，则变成如下图所示：\n\n ![](https://static.vue-js.com/2afaa030-a27a-11eb-85f6-6fac77c0c9b3.png)\n\n这时候就已经能够看到4个不同颜色的三角形，如果需要下方三角形，只需要将上、左、右边框设置为0就可以得到下方的红色三角形\n\n ![](https://static.vue-js.com/2afaa030-a27a-11eb-85f6-6fac77c0c9b3.png)\n\n但这种方式，虽然视觉上是实现了三角形，但实际上，隐藏的部分任然占据部分高度，需要将上方的宽度去掉\n\n最终实现代码如下：\n\n```css\n.border {\n    width: 0;\n    height: 0;\n    border-style:solid;\n    border-width: 0 50px 50px;\n    border-color: transparent transparent #d9534f;\n}\n```\n\n如果想要实现一个只有边框是空心的三角形，由于这里不能再使用`border`属性，所以最直接的方法是利用伪类新建一个小一点的三角形定位上去\n\n```css\n.border {\n    width: 0;\n    height: 0;\n    border-style:solid;\n    border-width: 0 50px 50px;\n    border-color: transparent transparent #d9534f;\n    position: relative;\n}\n.border:after{\n    content: '';\n    border-style:solid;\n    border-width: 0 40px 40px;\n    border-color: transparent transparent #96ceb4;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n```\n\n效果图如下所示：\n\n ![i](https://static.vue-js.com/59f4d720-a27a-11eb-85f6-6fac77c0c9b3.png)\n\n伪类元素定位参照对象的内容区域宽高都为0，则内容区域即可以理解成中心一点，所以伪元素相对中心这点定位\n\n将元素定位进行微调以及改变颜色，就能够完成下方效果图：\n\n ![](https://static.vue-js.com/653a6e10-a27a-11eb-85f6-6fac77c0c9b3.png)\n\n最终代码如下：\n\n```css\n.border:after {\n    content: '';\n    border-style: solid;\n    border-width: 0 40px 40px;\n    border-color: transparent transparent #96ceb4;\n    position: absolute;\n    top: 6px;\n    left: -40px;\n}\n```\n\n\n\n## 三、原理分析\n\n可以看到，边框是实现三角形的部分，边框实际上并不是一个直线，如果我们将四条边设置不同的颜色，将边框逐渐放大，可以得到每条边框都是一个梯形\n\n ![](https://static.vue-js.com/78d4bd90-a27a-11eb-85f6-6fac77c0c9b3.png)\n\n当分别取消边框的时候，发现下面几种情况：\n\n- 取消一条边的时候，与这条边相邻的两条边的接触部分会变成直的\n- 当仅有邻边时， 两个边会变成对分的三角\n- 当保留边没有其他接触时，极限情况所有东西都会消失\n\n ![](https://static.vue-js.com/84586ef0-a27a-11eb-85f6-6fac77c0c9b3.png)\n\n通过上图的变化规则，利用旋转、隐藏，以及设置内容宽高等属性，就能够实现其他类型的三角形\n\n如设置直角三角形，如上图倒数第三行实现过程，我们就能知道整个实现原理\n\n实现代码如下：\n\n```css\n.box {\n    /* 内部大小 */\n    width: 0px;\n    height: 0px;\n    /* 边框大小 只设置两条边*/\n    border-top: #4285f4 solid;\n    border-right: transparent solid;\n    border-width: 85px; \n    /* 其他设置 */\n    margin: 50px;\n}\n```\n","level":0.5,"tagId":11}
{"_id":{"$oid":"61aa388591a75000018d2e01"},"exerciseKey":"f317438d-44bf-4476-8f9d-b1e51521fa20","category":"QA","renderType":"md","title":"Fiber 为什么是 React 性能的一个飞跃？","desc":null,"options":null,"explanation":"## 什么是 Fiber\n\nFiber 的英文含义是“纤维”，它是比线程（Thread）更细的线，比线程（Thread）控制得更精密的执行模型。在广义计算机科学概念中，Fiber 又是一种协作的（Cooperative）编程模型（协程），帮助开发者用一种【既模块化又协作化】的方式来编排代码。\n\n在 React 中，Fiber 就是 React 16 实现的一套新的更新机制，让 React 的更新过程变得可控，避免了之前采用递归需要一气呵成影响性能的做法。\n\n## React Fiber 中的时间分片\n\n把一个耗时长的任务分成很多小片，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，这样唯一的线程就不会被独占，其他任务依然有运行的机会。\n\nReact Fiber 把更新过程碎片化，每执行完一段更新过程，就把控制权交还给 React 负责任务协调的模块，看看有没有其他紧急任务要做，如果没有就继续去更新，如果有紧急任务，那就去做紧急任务。\n\n### Stack Reconciler\n\n基于栈的 Reconciler，浏览器引擎会从执行栈的顶端开始执行，执行完毕就弹出当前执行上下文，开始执行下一个函数，直到执行栈被清空才会停止。然后将执行权交还给浏览器。由于 React 将页面视图视作一个个函数执行的结果。每一个页面往往由多个视图组成，这就意味着多个函数的调用。\n\n如果一个页面足够复杂，形成的函数调用栈就会很深。每一次更新，执行栈需要一次性执行完成，中途不能干其他的事儿，只能\"一心一意\"。结合前面提到的浏览器刷新率，JS 一直执行，浏览器得不到控制权，就不能及时开始下一帧的绘制。如果这个时间超过 16ms，当页面有动画效果需求时，动画因为浏览器不能及时绘制下一帧，这时动画就会出现卡顿。不仅如此，因为事件响应代码是在每一帧开始的时候执行，如果不能及时绘制下一帧，事件响应也会延迟。\n\n### Fiber Reconciler\n\n#### 链表结构\n\n在 React Fiber 中用链表遍历的方式替代了 React 16 之前的栈递归方案。在 React 16 中使用了大量的链表。\n\n* 使用多向链表的形式替代了原来的树结构；\n\n```html\n<div id=\"A\">\nA1\n<div id=\"B1\">\n  B1\n  <div id=\"C1\"></div>\n</div>\n<div id=\"B2\">\n  B2\n</div>\n</div>\n```\n![image.png](https://i.loli.net/2021/08/07/2WZ3j1iHExedXJD.png)\n\n* 副作用单链表；\n\n![image.png](https://i.loli.net/2021/08/07/ogZiFnkjXtPLOdr.png)\n\n* 状态更新单链表；\n\n![image.png](https://i.loli.net/2021/08/07/W4AeV3tJvwqYZD7.png)\n\n链表是一种简单高效的数据结构，它在当前节点中保存着指向下一个节点的指针；遍历的时候，通过操作指针找到下一个元素。\n\n![image.png](https://i.loli.net/2021/08/07/uxPC8M13ckrGfWn.png)\n\n链表相比顺序结构数据格式的好处就是：\n\n* 操作更高效，比如顺序调整、删除，只需要改变节点的指针指向就好了。\n* 不仅可以根据当前节点找到下一个节点，在多向链表中，还可以找到他的父节点或者兄弟节点。\n\n但链表也不是完美的，缺点就是：\n\n* 比顺序结构数据更占用空间，因为每个节点对象还保存有指向下一个对象的指针。\n* 不能自由读取，必须找到他的上一个节点。\n\nReact 用空间换时间，更高效的操作可以方便根据优先级进行操作。同时可以根据当前节点找到其他节点，在下面提到的挂起和恢复过程中起到了关键作用。\n\n\n\n\n\n\n\n\n","level":4,"tagId":13}
{"_id":{"$oid":"61aa38853d5f3a0001af56e9"},"exerciseKey":"f31923c7-7157-408b-8e12-74ced305802e","category":"QA","renderType":"md","title":"setState 之后发生了什么\n","desc":null,"options":null,"explanation":"**简单版本**： React 利用状态队列机制实现了 setState 的“异步”更新，避免频繁的重复更新 state。\n\n首先将新的 state 合并到状态更新队列中，然后根据更新队列和 shouldComponentUpdate 的状态来判断是否需要更新组件。\n\n**复杂版本**：\n\n* enqueueSetState 将 state 放入队列中，并调用 enqueueUpdate 处理要更新的 Component\n* 如果组件当前正处于 update 事务中，则先将 Component 存入 dirtyComponent 中。否则调用batchedUpdates 处理。\n* batchedUpdates 发起一次 transaction.perform() 事务\n* 开始执行事务初始化，运行，结束三个阶段\n\t* 初始化：事务初始化阶段没有注册方法，故无方法要执行\n\t* 运行：执行 setSate 时传入的 callback 方法\n\t* 结束：更新 isBatchingUpdates 为 false，并执行 FLUSH_BATCHED_UPDATES 这个 wrapper 中的close方法，FLUSH_BATCHED_UPDATES在close阶段，会循环遍历所有的 dirtyComponents，调用updateComponent 刷新组件，并执行它的 pendingCallbacks, 也就是 setState 中设置的 callback。\n\n","level":3,"tagId":13}
{"_id":{"$oid":"61aa3885d00c060001bf133f"},"exerciseKey":"f3a5d518-64e1-454a-80ec-5991c4cedeb0","category":"QA","renderType":"md","title":"Service worker是什么？","desc":null,"options":null,"explanation":"service worker是PWA的重要组成部分，W3C 组织早在 2014 年 5 月就提出过 Service Worker 这样的一个 HTML5 API ，主要用来做持久的离线缓存，也是Web Worker的升级版。\n\nService worker (简称 SW) 是一个注册在指定源和路径下的事件驱动 Worker。它采用 JavaScript 控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。你可以完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa3885c2d0220001c965c3"},"exerciseKey":"f4198437-3b03-4a26-83ae-7b820a23b85d","category":"QA","renderType":"html","title":"sql 注入","desc":null,"options":null,"explanation":"<p><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗数据库服务器执行恶意的SQL命令,从而达到和服务器</span></span></span></span><br/><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">进行直接的交互</span></span></span></span></p><p><br/><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\"><span style=\"font-size:14ptpx\"><strong>预防方案</strong></span></span></span></span><br/></p><ul><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">i）后台进行输入验证，对敏感字符过滤。</span></span></span></span></li><li><span style=\"font-size:10.5ptpx\"><span style=\"color:#24292e\"><span style=\"background-color:#ffffff\"><span style=\"letter-spacing:0ptpx\">ii）使用参数化查询，能避免拼接SQL，就不要拼接SQL语句。</span></span></span></span></li></ul><p><br/></p>","level":2,"tagId":21}
{"_id":{"$oid":"61aa388685c5f700015430c0"},"exerciseKey":"f43b7906-f51f-454f-8028-ea027ae3e121","category":"QA","renderType":"md","title":"Vue怎么实现权限管理？控制到按钮级别的权限怎么做？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/397e1fa0-4dad-11eb-ab90-d9ae814b240d.png)\n\n## 一、是什么\n\n权限是对特定资源的访问许可，所谓权限控制，也就是确保用户只能访问到被分配的资源\n\n而前端权限归根结底是请求的发起权，请求的发起可能有下面两种形式触发\n\n- 页面加载触发\n- 页面上的按钮点击触发\n\n总的来说，所有的请求发起都触发自前端路由或视图\n\n所以我们可以从这两方面入手，对触发权限的源头进行控制，最终要实现的目标是：\n\n- 路由方面，用户登录后只能看到自己有权访问的导航菜单，也只能访问自己有权访问的路由地址，否则将跳转 `4xx` 提示页\n\n- 视图方面，用户只能看到自己有权浏览的内容和有权操作的控件\n\n- 最后再加上请求控制作为最后一道防线，路由可能配置失误，按钮可能忘了加权限，这种时候请求控制可以用来兜底，越权请求将在前端被拦截\n\n\n\n## 二、如何做\n\n前端权限控制可以分为四个方面：\n\n- 接口权限\n- 按钮权限\n- 菜单权限\n- 路由权限\n\n\n\n### 接口权限\n\n接口权限目前一般采用`jwt`的形式来验证，没有通过的话一般返回`401`，跳转到登录页面重新进行登录\n\n登录完拿到`token`，将`token`存起来，通过`axios`请求拦截器进行拦截，每次请求的时候头部携带`token`\n\n```js\naxios.interceptors.request.use(config => {\n    config.headers['token'] = cookie.get('token')\n    return config\n})\naxios.interceptors.response.use(res=>{},{response}=>{\n    if (response.data.code === 40099 || response.data.code === 40098) { //token过期或者错误\n        router.push('/login')\n    }\n})\n```\n\n\n\n### 路由权限控制\n\n**方案一**\n\n初始化即挂载全部路由，并且在路由上标记相应的权限信息，每次路由跳转前做校验\n\n```js\nconst routerMap = [\n  {\n    path: '/permission',\n    component: Layout,\n    redirect: '/permission/index',\n    alwaysShow: true, // will always show the root menu\n    meta: {\n      title: 'permission',\n      icon: 'lock',\n      roles: ['admin', 'editor'] // you can set roles in root nav\n    },\n    children: [{\n      path: 'page',\n      component: () => import('@/views/permission/page'),\n      name: 'pagePermission',\n      meta: {\n        title: 'pagePermission',\n        roles: ['admin'] // or you can only set roles in sub nav\n      }\n    }, {\n      path: 'directive',\n      component: () => import('@/views/permission/directive'),\n      name: 'directivePermission',\n      meta: {\n        title: 'directivePermission'\n        // if do not set roles, means: this page does not require permission\n      }\n    }]\n  }]\n\n```\n\n这种方式存在以下四种缺点：\n\n- 加载所有的路由，如果路由很多，而用户并不是所有的路由都有权限访问，对性能会有影响。\n\n- 全局路由守卫里，每次路由跳转都要做权限判断。\n\n- 菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译\n\n- 菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识\n\n\n\n**方案二**\n\n初始化的时候先挂载不需要权限控制的路由，比如登录页，404等错误页。如果用户通过URL进行强制访问，则会直接进入404，相当于从源头上做了控制\n\n登录后，获取用户的权限信息，然后筛选有权限访问的路由，在全局路由守卫里进行调用`addRoutes`添加路由\n\n```js\nimport router from './router'\nimport store from './store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress' // progress bar\nimport 'nprogress/nprogress.css'// progress bar style\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nNProgress.configure({ showSpinner: false })// NProgress Configuration\n\n// permission judge function\nfunction hasPermission(roles, permissionRoles) {\n  if (roles.indexOf('admin') >= 0) return true // admin permission passed directly\n  if (!permissionRoles) return true\n  return roles.some(role => permissionRoles.indexOf(role) >= 0)\n}\n\nconst whiteList = ['/login', '/authredirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  NProgress.start() // start progress bar\n  if (getToken()) { // determine if there has token\n    /* has token*/\n    if (to.path === '/login') {\n      next({ path: '/' })\n      NProgress.done() // if current page is dashboard will not trigger\tafterEach hook, so manually handle it\n    } else {\n      if (store.getters.roles.length === 0) { // 判断当前用户是否已拉取完user_info信息\n        store.dispatch('GetUserInfo').then(res => { // 拉取user_info\n          const roles = res.data.roles // note: roles must be a array! such as: ['editor','develop']\n          store.dispatch('GenerateRoutes', { roles }).then(() => { // 根据roles权限生成可访问的路由表\n            router.addRoutes(store.getters.addRouters) // 动态添加可访问路由表\n            next({ ...to, replace: true }) // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record\n          })\n        }).catch((err) => {\n          store.dispatch('FedLogOut').then(() => {\n            Message.error(err || 'Verification failed, please login again')\n            next({ path: '/' })\n          })\n        })\n      } else {\n        // 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓\n        if (hasPermission(store.getters.roles, to.meta.roles)) {\n          next()//\n        } else {\n          next({ path: '/401', replace: true, query: { noGoBack: true }})\n        }\n        // 可删 ↑\n      }\n    }\n  } else {\n    /* has no token*/\n    if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n      next()\n    } else {\n      next('/login') // 否则全部重定向到登录页\n      NProgress.done() // if current page is login will not trigger afterEach hook, so manually handle it\n    }\n  }\n})\n\nrouter.afterEach(() => {\n  NProgress.done() // finish progress bar\n})\n\n```\n\n按需挂载，路由就需要知道用户的路由权限，也就是在用户登录进来的时候就要知道当前用户拥有哪些路由权限\n\n这种方式也存在了以下的缺点：\n\n- 全局路由守卫里，每次路由跳转都要做判断\n- 菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译\n- 菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识\n\n\n\n### 菜单权限\n\n菜单权限可以理解成将页面与理由进行解耦\n\n#### 方案一\n\n菜单与路由分离，菜单由后端返回\n\n前端定义路由信息\n\n```js\n{\n    name: \"login\",\n    path: \"/login\",\n    component: () => import(\"@/pages/Login.vue\")\n}\n```\n\n`name`字段都不为空，需要根据此字段与后端返回菜单做关联，后端返回的菜单信息中必须要有`name`对应的字段，并且做唯一性校验\n\n全局路由守卫里做判断\n\n```js\nfunction hasPermission(router, accessMenu) {\n  if (whiteList.indexOf(router.path) !== -1) {\n    return true;\n  }\n  let menu = Util.getMenuByName(router.name, accessMenu);\n  if (menu.name) {\n    return true;\n  }\n  return false;\n\n}\n\nRouter.beforeEach(async (to, from, next) => {\n  if (getToken()) {\n    let userInfo = store.state.user.userInfo;\n    if (!userInfo.name) {\n      try {\n        await store.dispatch(\"GetUserInfo\")\n        await store.dispatch('updateAccessMenu')\n        if (to.path === '/login') {\n          next({ name: 'home_index' })\n        } else {\n          //Util.toDefaultPage([...routers], to.name, router, next);\n          next({ ...to, replace: true })//菜单权限更新完成,重新进一次当前路由\n        }\n      }  \n      catch (e) {\n        if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n          next()\n        } else {\n          next('/login')\n        }\n      }\n    } else {\n      if (to.path === '/login') {\n        next({ name: 'home_index' })\n      } else {\n        if (hasPermission(to, store.getters.accessMenu)) {\n          Util.toDefaultPage(store.getters.accessMenu,to, routes, next);\n        } else {\n          next({ path: '/403',replace:true })\n        }\n      }\n    }\n  } else {\n    if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n      next()\n    } else {\n      next('/login')\n    }\n  }\n  let menu = Util.getMenuByName(to.name, store.getters.accessMenu);\n  Util.title(menu.title);\n});\n\nRouter.afterEach((to) => {\n  window.scrollTo(0, 0);\n});\n```\n\n每次路由跳转的时候都要判断权限，这里的判断也很简单，因为菜单的`name`与路由的`name`是一一对应的，而后端返回的菜单就已经是经过权限过滤的\n\n如果根据路由`name`找不到对应的菜单，就表示用户有没权限访问\n\n如果路由很多，可以在应用初始化的时候，只挂载不需要权限控制的路由。取得后端返回的菜单后，根据菜单与路由的对应关系，筛选出可访问的路由，通过`addRoutes`动态挂载\n\n这种方式的缺点：\n\n- 菜单需要与路由做一一对应，前端添加了新功能，需要通过菜单管理功能添加新的菜单，如果菜单配置的不对会导致应用不能正常使用\n- 全局路由守卫里，每次路由跳转都要做判断\n\n\n\n#### 方案二\n\n菜单和路由都由后端返回\n\n前端统一定义路由组件\n\n```js\nconst Home = () => import(\"../pages/Home.vue\");\nconst UserInfo = () => import(\"../pages/UserInfo.vue\");\nexport default {\n    home: Home,\n    userInfo: UserInfo\n};\n```\n\n后端路由组件返回以下格式\n\n```js\n[\n    {\n        name: \"home\",\n        path: \"/\",\n        component: \"home\"\n    },\n    {\n        name: \"home\",\n        path: \"/userinfo\",\n        component: \"userInfo\"\n    }\n]\n```\n\n在将后端返回路由通过`addRoutes`动态挂载之间，需要将数据处理一下，将`component`字段换为真正的组件\n\n如果有嵌套路由，后端功能设计的时候，要注意添加相应的字段，前端拿到数据也要做相应的处理\n\n这种方法也会存在缺点：\n\n- 全局路由守卫里，每次路由跳转都要做判断\n- 前后端的配合要求更高\n\n\n\n### 按钮权限\n\n#### 方案一\n\n按钮权限也可以用`v-if`判断\n\n但是如果页面过多，每个页面页面都要获取用户权限`role`和路由表里的`meta.btnPermissions`，然后再做判断\n\n这种方式就不展开举例了\n\n\n\n#### 方案二\n\n通过自定义指令进行按钮权限的判断\n\n首先配置路由\n\n```js\n{\n    path: '/permission',\n    component: Layout,\n    name: '权限测试',\n    meta: {\n        btnPermissions: ['admin', 'supper', 'normal']\n    },\n    //页面需要的权限\n    children: [{\n        path: 'supper',\n        component: _import('system/supper'),\n        name: '权限测试页',\n        meta: {\n            btnPermissions: ['admin', 'supper']\n        } //页面需要的权限\n    },\n    {\n        path: 'normal',\n        component: _import('system/normal'),\n        name: '权限测试页',\n        meta: {\n            btnPermissions: ['admin']\n        } //页面需要的权限\n    }]\n}\n```\n\n自定义权限鉴定指令\n\n```js\nimport Vue from 'vue'\n/**权限指令**/\nconst has = Vue.directive('has', {\n    bind: function (el, binding, vnode) {\n        // 获取页面按钮权限\n        let btnPermissionsArr = [];\n        if(binding.value){\n            // 如果指令传值，获取指令参数，根据指令参数和当前登录人按钮权限做比较。\n            btnPermissionsArr = Array.of(binding.value);\n        }else{\n            // 否则获取路由中的参数，根据路由的btnPermissionsArr和当前登录人按钮权限做比较。\n            btnPermissionsArr = vnode.context.$route.meta.btnPermissions;\n        }\n        if (!Vue.prototype.$_has(btnPermissionsArr)) {\n            el.parentNode.removeChild(el);\n        }\n    }\n});\n// 权限检查方法\nVue.prototype.$_has = function (value) {\n    let isExist = false;\n    // 获取用户按钮权限\n    let btnPermissionsStr = sessionStorage.getItem(\"btnPermissions\");\n    if (btnPermissionsStr == undefined || btnPermissionsStr == null) {\n        return false;\n    }\n    if (value.indexOf(btnPermissionsStr) > -1) {\n        isExist = true;\n    }\n    return isExist;\n};\nexport {has}\n```\n\n在使用的按钮中只需要引用`v-has`指令\n\n```js\n<el-button @click='editClick' type=\"primary\" v-has>编辑</el-button>\n```\n\n\n\n### 小结\n\n关于权限如何选择哪种合适的方案，可以根据自己项目的方案项目，如考虑路由与菜单是否分离\n\n权限需要前后端结合，前端尽可能的去控制，更多的需要后台判断\n\n","level":3,"tagId":14}
{"_id":{"$oid":"61aa3886cd02c30001dd2372"},"exerciseKey":"f43ed53b-220f-4583-86fe-974e880090e8","category":"QA","renderType":"md","title":"原码、反码和补码分别是什么？","desc":null,"options":null,"explanation":"原码是计算机中对数字的二进制的定点表示方法，最高位表示符号位，其余位表示数值位。优点是易于分辨，缺点是不能够直接参与运算。\n\n正数的反码和其原码一样；负数的反码，符号位为1，数值部分按原码取反。\n\n如 [+7]原 = 00000111，[+7]反 = 00000111； [-7]原 = 10000111，[-7]反 = 11111000。\n\n正数的补码和其原码一样；负数的补码为其反码加1。\n\n例如 [+7]原 = 00000111，[+7]反 = 00000111，[+7]补 = 00000111；\n\n[-7]原 = 10000111，[-7]反 = 11111000，[-7]补 = 11111001\n\n之所以在计算机中使用补码来表示负数的原因是，这样可以将加法运算扩展到所有的数值计算上，因此在数字电路中我们只需要考虑加法器的设计就行了，而不用再为减法设置新的数字电路。","level":1,"tagId":30}
{"_id":{"$oid":"61aa38863976eb00014e4656"},"exerciseKey":"f53e39b7-9de1-4a49-b95d-6c73591d5512","category":"QA","renderType":"md","title":"js中如何判断一个值是否是数组类型？","desc":null,"options":null,"explanation":"## instanceof\n\n```js\nconst arr= [];\narr instanceof Array; // true\n```\n\n## Array.isArray\n\n```js\nconst arr = []\nArray.isArray(arr) // true\n\nconst obj = {}\nArray.isArray(obj) // false\n```\n\n## Object.prototype.isPrototypeOf\n\n使用Object的原型方法isPrototypeOf，判断两个对象的原型是否一样, isPrototypeOf() 方法用于测试一个对象是否存在于另一个对象的原型链上。\n\n```js\nconst arr = [];\nObject.prototype.isPrototypeOf(arr, Array.prototype); // true\n```\n\n## Object.getPrototypeOf\n\nObject.getPrototypeOf() 方法返回指定对象的原型（内部[[Prototype]]属性的值）。\n\n```js\nconst arr = []\nObject.getPrototypeOf(arr) === Array.prototype // true\n```\n\n## Object.prototype.toString\n\n借用Object原型的call或者apply方法，调用toString()是否为[object Array]\n\n```js\nconst arr = []\nObject.prototype.toString.call(arr) === '[object Array]' // true\n\nconst obj = {}\nObject.prototype.toString.call(obj) // \"[object Object]\"\n```\n\n","level":1,"tagId":10}
{"_id":{"$oid":"61aa388681337a00011e06ff"},"exerciseKey":"f555dca6-fcc1-433c-a4b5-bc0de8dba02b","category":"QA","renderType":"md","title":"NaN 是什么，用 typeof 会输出什么？","desc":null,"options":null,"explanation":"NaN：Not a Number，表示非数字\n\ntypeof NaN === 'number'","level":1,"tagId":10}
{"_id":{"$oid":"61aa3886cd02c30001dd2374"},"exerciseKey":"f56b93a9-52df-49ae-8d63-d7ee4f816f8b","category":"QA","renderType":"md","title":"数组去重","desc":"```js\nconst arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n// => [1, '1', 17, true, false, 'true', 'a', {}, {}]\n```\n","options":null,"explanation":"* 方法一：利用Set\n```js\nconst res1 = Array.from(new Set(arr));\n```\n\n* 方法二：两层for循环+splice\n```js\nconst unique1 = arr => {\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        // 每删除一个树，j--保证j的值经过自加后不变。同时，len--，减少循环次数提升性能\n        len--;\n        j--;\n      }\n    }\n  }\n  return arr;\n}\n```\n\n* 方法三：利用indexOf\n```js\nconst unique2 = arr => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (res.indexOf(arr[i]) === -1) res.push(arr[i]);\n  }\n  return res;\n}\n```\n\n当然也可以用include、filter，思路大同小异。\n\n* 方法四：利用include\n```js\nconst unique3 = arr => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!res.includes(arr[i])) res.push(arr[i]);\n  }\n  return res;\n}\n```\n\n* 方法五：利用filter\n```js\nconst unique4 = arr => {\n  return arr.filter((item, index) => {\n    return arr.indexOf(item) === index;\n  });\n}\n```\n\n* 方法六：利用Map\n```js\nconst unique5 = arr => {\n  const map = new Map();\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!map.has(arr[i])) {\n      map.set(arr[i], true)\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n```\n","level":1,"tagId":26}
{"_id":{"$oid":"61aa3886cd02c30001dd2375"},"exerciseKey":"f57f9350-c543-46e3-8419-1ea5ab453971","category":"Choice","renderType":"md","title":"下面那个选项将会返回 '6' ?","desc":"```javascript\nfunction sumValues(x, y, z) {\n\treturn x + y + z;\n}\n```","options":"{\"options\":[\"sumValues([...1, 2, 3])\",\"sumValues([...[1, 2, 3]])\",\"sumValues(...[1, 2, 3])\",\"sumValues([1, 2, 3])\"],\"isMulti\":false,\"answer\":[2]}","explanation":"通过展开操作符 `...`，我们可以 _暂开_ 单个可迭代的元素。函数 `sumValues` function 接收三个参数： `x`, `y` 和 `z`。`...[1, 2, 3]` 的执行结果为 `1, 2, 3`，将会传递给函数 `sumValues`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3886bdfab500012c85c1"},"exerciseKey":"f59d29a2-7ff8-41ca-8176-a24f1ca6d0f5","category":"QA","renderType":"md","title":"简述下 React 的生命周期？每个生命周期都做了什么？","desc":null,"options":null,"explanation":"![生命周期示意图](https://i.loli.net/2021/07/04/ur5i6B4VbwSd3vU.png)\n\n## 挂载\n\n当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：\n\n* constructor()\n* static getDerivedStateFromProps()\n* render()\n* componentDidMount()\n\n## 更新\n\n当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：\n\n* static getDerivedStateFromProps()\n* shouldComponentUpdate()\n* render()\n* getSnapshotBeforeUpdate()\n* componentDidUpdate()\n\n## 卸载\n\n当组件从 DOM 中移除时会调用如下方法：\n\n* componentWillUnmount()\n\n## 错误处理\n\n渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：\n\n* static getDerivedStateFromError()\n* componentDidCatch()\n\n\n## 具体介绍\n\n### render()\n\nrender() 方法是 class 组件中唯一必须实现的方法。\n\n当 render 被调用时，它会检查 this.props 和 this.state 的变化并返回以下类型之一：\n\n* React 元素。通常通过 JSX 创建。例如，<div /> 会被 React 渲染为 DOM 节点，<MyComponent /> 会被 React 渲染为自定义组件，无论是 <div /> 还是 <MyComponent /> 均为 React 元素。\n* 数组或 fragments。 使得 render 方法可以返回多个元素。欲了解更多详细信息，请参阅 fragments 文档。\n* Portals。可以渲染子节点到不同的 DOM 子树中。欲了解更多详细信息，请参阅有关 portals 的文档\n* 字符串或数值类型。它们在 DOM 中会被渲染为文本节点\n* 布尔类型或 null。什么都不渲染。（主要用于支持返回 test && <Child /> 的模式，其中 test 为布尔类型。）\n\nrender() 函数应该为纯函数，这意味着在不修改组件 state 的情况下，每次调用时都返回相同的结果，并且它不会直接与浏览器交互。\n\n如需与浏览器进行交互，请在 componentDidMount() 或其他生命周期方法中执行你的操作。保持 render() 为纯函数，可以使组件更容易思考。\n\n### constructor()\n\n如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。\n\n在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 super(props)。否则，this.props 在构造函数中可能会出现未定义的 bug。\n\n通常，在 React 中，构造函数仅用于以下两种情况：\n\n通过给 this.state 赋值对象来初始化内部 state。\n\n* 为事件处理函数绑定实例\n* 在 constructor() 函数中不要调用 setState() 方法。如果你的组件需要使用内部 state，请直接在构造函数中为 this.state 赋值初始 state。\n\n只能在构造函数中直接为 this.state 赋值。如需在其他方法中赋值，你应使用 this.setState() 替代。\n\n要避免在构造函数中引入任何副作用或订阅。如遇到此场景，请将对应的操作放置在 componentDidMount 中。\n\n### componentDidMount()\n\ncomponentDidMount() 会在组件挂载后（插入 DOM 树中）立即调用。依赖于 DOM 节点的初始化应该放在这里。如需通过网络请求获取数据，此处是实例化请求的好地方。\n\n这个方法是比较适合添加订阅的地方。如果添加了订阅，请不要忘记在 componentWillUnmount() 里取消订阅\n\n你可以在 componentDidMount() 里直接调用 setState()。它将触发额外渲染，但此渲染会发生在浏览器更新屏幕之前。如此保证了即使在 render() 两次调用的情况下，用户也不会看到中间状态。请谨慎使用该模式，因为它会导致性能问题。通常，你应该在 constructor() 中初始化 state。如果你的渲染依赖于 DOM 节点的大小或位置，比如实现 modals 和 tooltips 等情况下，你可以使用此方式处理。\n\n### componentDidUpdate()\n\ncomponentDidUpdate() 会在更新后会被立即调用。首次渲染不会执行此方法。\n\n当组件更新后，可以在此处对 DOM 进行操作。如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求。（例如，当 props 未发生变化时，则不会执行网络请求）。\n\n```react.js\ncomponentDidUpdate(prevProps) {\n  // 典型用法（不要忘记比较 props）：\n  if (this.props.userID !== prevProps.userID) {\n    this.fetchData(this.props.userID);\n  }\n}\n```\n\n你也可以在 componentDidUpdate() 中直接调用 setState()，但请注意它必须被包裹在一个条件语句里，正如上述的例子那样进行处理，否则会导致死循环。它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。不要将 props “镜像”给 state，请考虑直接使用 props。 欲了解更多有关内容，请参阅为什么 props 复制给 state 会产生 bug。\n\n如果组件实现了 getSnapshotBeforeUpdate() 生命周期（不常用），则它的返回值将作为 componentDidUpdate() 的第三个参数 “snapshot” 参数传递。否则此参数将为 undefined。\n\n### componentWillUnmount()\n\ncomponentWillUnmount() 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 componentDidMount() 中创建的订阅等。\n\ncomponentWillUnmount() 中不应调用 setState()，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。\n\n### shouldComponentUpdate()\n\n根据 shouldComponentUpdate() 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。默认行为是 state 每次发生变化组件都会重新渲染。大部分情况下，你应该遵循默认行为。\n\n当 props 或 state 发生变化时，shouldComponentUpdate() 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 forceUpdate() 时不会调用该方法。\n\n此方法仅作为性能优化的方式而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。你应该考虑使用内置的 PureComponent 组件，而不是手动编写 shouldComponentUpdate()。PureComponent 会对 props 和 state 进行浅层比较，并减少了跳过必要更新的可能性。\n\n如果你一定要手动编写此函数，可以将 this.props 与 nextProps 以及 this.state 与nextState 进行比较，并返回 false 以告知 React 可以跳过更新。请注意，返回 false 并不会阻止子组件在 state 更改时重新渲染。\n\n我们不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能。\n\n目前，如果 shouldComponentUpdate() 返回 false，则不会调用 UNSAFE_componentWillUpdate()，render() 和 componentDidUpdate()。后续版本，React 可能会将 shouldComponentUpdate 视为提示而不是严格的指令，并且，当返回 false 时，仍可能导致组件重新渲染。\n\n### static getDerivedStateFromProps()\n\ngetDerivedStateFromProps 会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。\n\n此方法适用于罕见的用例，即 state 的值在任何时候都取决于 props。例如，实现 <Transition> 组件可能很方便，该组件会比较当前组件与下一组件，以决定针对哪些组件进行转场动画。\n\n派生状态会导致代码冗余，并使组件难以维护。 确保你已熟悉这些简单的替代方案：\n\n* 如果你需要执行副作用（例如，数据提取或动画）以响应 props 中的更改，请改用 componentDidUpdate。\n* 如果只想在 prop 更改时重新计算某些数据，请使用 memoization helper 代替。\n* 如果你想在 prop 更改时“重置”某些 state，请考虑使组件完全受控或使用 key 使组件完全不受控代替。\n\n此方法无权访问组件实例。如果你需要，可以通过提取组件 props 的纯函数及 class 之外的状态，在getDerivedStateFromProps()和其他 class 方法之间重用代码。\n\n请注意，不管原因是什么，都会在每次渲染前触发此方法。这与 UNSAFE_componentWillReceiveProps 形成对比，后者仅在父组件重新渲染时触发，而不是在内部调用 setState 时。\n\n### getSnapshotBeforeUpdate()\n\ngetSnapshotBeforeUpdate() 在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期方法的任何返回值将作为参数传递给 componentDidUpdate()。\n\n此用法并不常见，但它可能出现在 UI 处理中，如需要以特殊方式处理滚动位置的聊天线程等。\n\n应返回 snapshot 的值（或 null）。\n\n### Error boundaries\n\nError boundaries 是 React 组件，它会在其子组件树中的任何位置捕获 JavaScript 错误，并记录这些错误，展示降级 UI 而不是崩溃的组件树。Error boundaries 组件会捕获在渲染期间，在生命周期方法以及其整个树的构造函数中发生的错误。\n\n如果 class 组件定义了生命周期方法 static getDerivedStateFromError() 或 componentDidCatch() 中的任何一个（或两者），它就成为了 Error boundaries。通过生命周期更新 state 可让组件捕获树中未处理的 JavaScript 错误并展示降级 UI。\n\n仅使用 Error boundaries 组件来从意外异常中恢复的情况；不要将它们用于流程控制。\n\n### static getDerivedStateFromError()\n\n此生命周期会在后代组件抛出错误后被调用。 它将抛出的错误作为参数，并返回一个值以更新 state。\n\n### componentDidCatch()\n\n此生命周期在后代组件抛出错误后被调用。 它接收两个参数：\n\n* error —— 抛出的错误。\n* info —— 带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息。\n\ncomponentDidCatch() 会在“提交”阶段被调用，因此允许执行副作用。 它应该用于记录错误之类的情况。\n\nReact 的开发和生产构建版本在 componentDidCatch() 的方式上有轻微差别。\n\n在开发模式下，错误会冒泡至 window，这意味着任何 window.onerror 或 window.addEventListener('error', callback) 会中断这些已经被 componentDidCatch() 捕获的错误。\n\n相反，在生产模式下，错误不会冒泡，这意味着任何根错误处理器只会接受那些没有显式地被 componentDidCatch() 捕获的错误。\n\n\n\n\n\n\n\n","level":2,"tagId":13}
{"_id":{"$oid":"61aa388685c5f700015430c9"},"exerciseKey":"f6b74eb2-442e-4a56-904f-bee79587138c","category":"Choice","renderType":"md","title":"下面哪些值是 falsy?","desc":"```javascript\n0\nnew Number(0)\n('')\n(' ')\nnew Boolean(false)\nundefined\n```","options":"{\"options\":[\"0, '', undefined\",\"0, new Number(0), '', new Boolean(false), undefined\",\"0, '', new Boolean(false), undefined\",\"All of them are falsy\"],\"isMulti\":false,\"answer\":[0]}","explanation":"只有 6 种 [falsy](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy) 值:\n- `undefined`\n- `null`\n- `NaN`\n- `0`\n- `''` (empty string)\n- `false`\n`Function` 构造函数, 比如 `new Number` 和 `new Boolean`，是 [truthy](https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy)。","level":1,"tagId":32}
{"_id":{"$oid":"61aa3886796412000191754b"},"exerciseKey":"f6e033d6-6e6e-4613-ad8d-a4340c3380a0","category":"QA","renderType":"md","title":"页面统计数据中，常用的 PV、UV 指标分别是什么？","desc":null,"options":null,"explanation":"## PV(页面访问量)\n\n即页面浏览量或点击量，用户每1次对网站中的每个网页访问均被记录1个PV。\n\n用户对同一页面的多次访问，访问量累计，用以衡量网站用户访问的网页数量。\n\n##  UV(独立访客)\n\n是指通过互联网访问、浏览这个网页的自然人。访问您网站的一台电脑客户端为一个访客。\n\n00:00-24:00内相同的客户端只被计算一次。\n\n\n\n","level":0.5,"tagId":12}
{"_id":{"$oid":"61aa388634458700017f1dcf"},"exerciseKey":"f7192fdf-cbfe-4b62-96af-a614e6a37055","category":"QA","renderType":"md","title":"如何确定页面的可用性时间，什么是 Performance API？","desc":null,"options":null,"explanation":"Performance API 用于精确度量、控制、增强浏览器的性能表现。这个 API 为测量网站性能，提供以前没有办法做到的精度。\n\n使用 getTime 来计算脚本耗时的缺点，首先，getTime方法（以及 Date 对象的其他方法）都只能精确到毫秒级别（一秒的千分之一），想要得到更小的时间差别就无能为力了。其次，这种写法只能获取代码运行过程中的时间进度，无法知道一些后台事件的时间进度，比如浏览器用了多少时间从服务器加载网页。\n\n为了解决这两个不足之处，ECMAScript 5引入“高精度时间戳”这个 API，部署在 performance 对象上。它的精度可以达到1毫秒\n的千分之一（1秒的百万分之一）。\n\nnavigationStart：当前浏览器窗口的前一个网页关闭，发生 unload 事件时的 Unix 毫秒时间戳。如果没有前一个网页，则等于 fetchStart 属性。\n\nloadEventEnd：返回当前网页 load 事件的回调函数运行结束时的 Unix 毫秒时间戳。如果该事件还没有发生，返回 0。\n\n根据上面这些属性，可以计算出网页加载各个阶段的耗时。比如，网页加载整个过程的耗时的计算方法如下：\n\n```\nvar t = performance.timing;\nvar pageLoadTime = t.loadEventEnd - t.navigationStart;\n```","level":1,"tagId":20}
{"_id":{"$oid":"61aa388791a75000018d2e07"},"exerciseKey":"f7527bab-1200-4c68-86d9-bab157c66156","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nfunction getFine(speed, amount) {\n  const formattedSpeed = new Intl.NumberFormat({\n    'en-US',\n    { style: 'unit', unit: 'mile-per-hour' }\n  }).format(speed)\n\n  const formattedAmount = new Intl.NumberFormat({\n    'en-US',\n    { style: 'currency', currency: 'USD' }\n  }).format(amount)\n\n  return `The driver drove ${formattedSpeed} and has to pay ${formattedAmount}`\n}\n\nconsole.log(getFine(130, 300))\n```","options":"{\"options\":[\"The driver drove 130 and has to pay 300\",\"The driver drove 130 mph and has to pay \\\\$300.00\",\"The driver drove undefined and has to pay undefined\",\"The driver drove 130.00 and has to pay 300.00\"],\"isMulti\":false,\"answer\":[1]}","explanation":"通过方法 `Intl.NumberFormat`，我们可以格式化任意区域的数字值。我们对数字值 `130` 进行 `mile-per-hour` 作为 `unit` 的 `en-US` 区域 格式化，结果为 `130 mph`。对数字值 `300` 进行 `USD` 作为 `currentcy` 的 `en-US` 区域格式化，结果为 `$300.00`.","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38870f30890001ab8241"},"exerciseKey":"f799e353-d998-4570-8a57-8c403caaf649","category":"QA","renderType":"md","title":"什么是空间复杂度？","desc":null,"options":null,"explanation":"> 空间复杂度是对一个算法在运行过程中临时占用存储空间的大小。\n\n## 计算方法\n\n* 忽略常数，用O(1)表示\n* 递归算法的空间复杂度=(递归深度n)*(每次递归所要的辅助空间)\n\n仅仅只复制单个变量，空间复杂度为O(1)。\n\n举例如下：空间复杂度为O(n) = O(1)。\n\n```javascript\nlet a = 1;\nlet b = 2;\nlet c = 3;\nconsole.log('输出a,b,c', a, b, c);\n```\n\n递归实现，调用fun函数，每次都创建1个变量k。调用n次，空间复杂度O(n*1) = O(n)。\n\n```javascript\nfunction fun(n) {\n  let k = 10;\n  if (n == k) {\n  \treturn n;\n  } else {\n  \treturn fun(++n)\n  }\n}\n```","level":2,"tagId":30}
{"_id":{"$oid":"61aa3887ff0573000165b3df"},"exerciseKey":"f866a768-1751-49cc-aff2-133021222b20","category":"QA","renderType":"md","title":"说说 Node 文件查找的优先级以及 Require 方法的文件查找策略?","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/15913530-c9ba-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、模块规范\n\n`NodeJS`对`CommonJS`进行了支持和实现，让我们在开发`node`的过程中可以方便的进行模块化开发：\n\n- 在Node中每一个js文件都是一个单独的模块\n- 模块中包括CommonJS规范的核心变量：exports、module.exports、require\n- 通过上述变量进行模块化开发\n\n而模块化的核心是导出与导入，在`Node`中通过`exports`与`module.exports`负责对模块中的内容进行导出，通过`require`函数导入其他模块（自定义模块、系统模块、第三方库模块）中的内容\n\n\n\n## 二、查找策略\n\n`require`方法接收一下几种参数的传递：\n\n- 原生模块：http、fs、path等\n- 相对路径的文件模块：./mod或../mod\n- 绝对路径的文件模块：/pathtomodule/mod\n- 目录作为模块：./dirname\n- 非原生模块的文件模块：mod\n\n`require`参数较为简单，但是内部的加载却是十分复杂的，其加载优先级也各自不同，如下图：\n\n ![](https://static.vue-js.com/33ae8ef0-c9ba-11eb-85f6-6fac77c0c9b3.png)\n\n从上图可以看见，文件模块存在缓存区，寻找模块路径的时候都会优先从缓存中加载已经存在的模块\n\n\n\n### 原生模块\n\n而像原生模块这些，通过`require `方法在解析文件名之后，优先检查模块是否在原生模块列表中，如果在则从原生模块中加载\n\n\n\n### 绝对路径、相对路径\n\n如果`require`绝对路径的文件，则直接查找对应的路径，速度最快\n\n相对路径的模块则相对于当前调用`require`的文件去查找\n\n如果按确切的文件名没有找到模块，则 `NodeJs` 会尝试带上 `.js`、`.json `或 `.node `拓展名再加载\n\n\n### 目录作为模块\n\n默认情况是根据根目录中`package.json`文件的`main`来指定目录模块，如：\n\n```json\n{ \"name\" : \"some-library\",\n  \"main\" : \"main.js\" }\n```\n\n如果这是在` ./some-library node_modules `目录中，则 `require('./some-library')` 会试图加载 `./some-library/main.js`\n\n如果目录里没有 `package.json`文件，或者 `main`入口不存在或无法解析，则会试图加载目录下的 `index.js` 或 `index.node` 文件\n\n\n\n\n\n### 非原生模块\n\n在每个文件中都存在`module.paths`，表示模块的搜索路径，`require`就是根据其来寻找文件\n\n在`window`下输出如下：\n\n```js\n[ 'c:\\\\nodejs\\\\node_modules',\n'c:\\\\node_modules' ]\n```\n\n可以看出`module path`的生成规则为：从当前文件目录开始查找`node_modules`目录；然后依次进入父目录，查找父目录下的`node_modules`目录，依次迭代，直到根目录下的`node_modules`目录\n\n当都找不到的时候，则会从系统`NODE_PATH`环境变量查找\n\n#### 举个例子：\n\n如果在`/home/ry/projects/foo.js`文件里调用了 `require('bar.js')`，则 Node.js 会按以下顺序查找：\n\n- /home/ry/projects/node_modules/bar.js\n- /home/ry/node_modules/bar.js\n- /home/node_modules/bar.js\n- /node_modules/bar.js\n\n这使得程序本地化它们的依赖，避免它们产生冲突\n\n\n\n## 三、总结\n\n通过上面模块的文件查找策略之后，总结下文件查找的优先级：\n\n- 缓存的模块优先级最高\n\n- 如果是内置模块，则直接返回，优先级仅次缓存的模块\n- 如果是绝对路径 / 开头，则从根目录找\n- 如果是相对路径 ./开头，则从当前require文件相对位置找\n- 如果文件没有携带后缀，先从js、json、node按顺序查找\n- 如果是目录，则根据 package.json的main属性值决定目录下入口文件，默认情况为 index.js\n- 如果文件为第三方模块，则会引入 node_modules 文件，如果不在当前仓库文件中，则自动从上级递归查找，直到根目录\n","level":3,"tagId":18}
{"_id":{"$oid":"61aa388734458700017f1dd3"},"exerciseKey":"f8787bfb-ca4c-4b0f-98d9-4ad5e0a3774d","category":"QA","renderType":"md","title":"实现 Promise ","desc":null,"options":null,"explanation":"```js\n// 模拟实现Promise\n// Promise利用三大手段解决回调地狱：\n// 1. 回调函数延迟绑定\n// 2. 返回值穿透\n// 3. 错误冒泡\n\n// 定义三种状态\nconst PENDING = 'PENDING';      // 进行中\nconst FULFILLED = 'FULFILLED';  // 已成功\nconst REJECTED = 'REJECTED';    // 已失败\n\nclass Promise {\n  constructor(exector) {\n    // 初始化状态\n    this.status = PENDING;\n    // 将成功、失败结果放在this上，便于then、catch访问\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功态回调函数队列\n    this.onFulfilledCallbacks = [];\n    // 失败态回调函数队列\n    this.onRejectedCallbacks = [];\n\n    const resolve = value => {\n      // 只有进行中状态才能更改状态\n      if (this.status === PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n        // 成功态函数依次执行\n        this.onFulfilledCallbacks.forEach(fn => fn(this.value));\n      }\n    }\n    const reject = reason => {\n      // 只有进行中状态才能更改状态\n      if (this.status === PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n        // 失败态函数依次执行\n        this.onRejectedCallbacks.forEach(fn => fn(this.reason))\n      }\n    }\n    try {\n      // 立即执行executor\n      // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n      exector(resolve, reject);\n    } catch(e) {\n      // executor执行出错，将错误内容reject抛出去\n      reject(e);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected === 'function'? onRejected :\n      reason => { throw new Error(reason instanceof Error ? reason.message : reason) }\n    // 保存this\n    const self = this;\n    return new Promise((resolve, reject) => {\n      if (self.status === PENDING) {\n        self.onFulfilledCallbacks.push(() => {\n          // try捕获错误\n          try {\n            // 模拟微任务\n            setTimeout(() => {\n              const result = onFulfilled(self.value);\n              // 分两种情况：\n              // 1. 回调函数返回值是Promise，执行then操作\n              // 2. 如果不是Promise，调用新Promise的resolve函数\n              result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n            })\n          } catch(e) {\n            reject(e);\n          }\n        });\n        self.onRejectedCallbacks.push(() => {\n          // 以下同理\n          try {\n            setTimeout(() => {\n              const result = onRejected(self.reason);\n              // 不同点：此时是reject\n              result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n            })\n          } catch(e) {\n            reject(e);\n          }\n        })\n      } else if (self.status === FULFILLED) {\n        try {\n          setTimeout(() => {\n            const result = onFulfilled(self.value);\n            result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n          });\n        } catch(e) {\n          reject(e);\n        }\n      } else if (self.status === REJECTED) {\n        try {\n          setTimeout(() => {\n            const result = onRejected(self.reason);\n            result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n          })\n        } catch(e) {\n          reject(e);\n        }\n      }\n    });\n  }\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  static resolve(value) {\n    if (value instanceof Promise) {\n      // 如果是Promise实例，直接返回\n      return value;\n    } else {\n      // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED\n      return new Promise((resolve, reject) => resolve(value));\n    }\n  }\n  static reject(reason) {\n    return new Promise((resolve, reject) => {\n      reject(reason);\n    })\n  }\n  static all(promiseArr) {\n    const len = promiseArr.length;\n    const values = new Array(len);\n    // 记录已经成功执行的promise个数\n    let count = 0;\n    return new Promise((resolve, reject) => {\n      for (let i = 0; i < len; i++) {\n        // Promise.resolve()处理，确保每一个都是promise实例\n        Promise.resolve(promiseArr[i]).then(\n          val => {\n            values[i] = val;\n            count++;\n            // 如果全部执行完，返回promise的状态就可以改变了\n            if (count === len) resolve(values);\n          },\n          err => reject(err),\n        );\n      }\n    })\n  }\n  static race(promiseArr) {\n    return new Promise((resolve, reject) => {\n      promiseArr.forEach(p => {\n        Promise.resolve(p).then(\n          val => resolve(val),\n          err => reject(err),\n        )\n      })\n    })\n  }\n}\n\n```","level":5,"tagId":26}
{"_id":{"$oid":"61aa38873d5f3a0001af56f8"},"exerciseKey":"f92a10a6-897f-46ca-992a-d31bcce5e5f1","category":"QA","renderType":"md","title":"两数之和","desc":"给定一个整数数组 `nums` 和一个整数目标值 `target`，请你在该数组中找出 **和为目标值** `target`  的那 **两个** 整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。\n\n示例 1：\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n示例 2：\n\n```\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n```\n\n示例 3：\n\n```\n输入：nums = [3,3], target = 6\n输出：[0,1]\n```\n \n提示：\n\n* 2 <= nums.length <= 104\n* -109 <= nums[i] <= 109\n* -109 <= target <= 109\n* 只会存在一个有效答案\n","options":null,"explanation":"## 暴力解法\n\n### 思路及算法\n\n最容易想到的方法是枚举数组中的每一个数 `x`，寻找数组中是否存在 `target - x`。\n\n当我们使用遍历整个数组的方式寻找 `target - x` 时，需要注意到每一个位于 `x` 之前的元素都已经和 `x` 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 `x` 后面的元素中寻找 `target - x`。\n\n```js\nvar twoSum = function (nums, target) {\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] + nums[i] === target) {\n        return [i, j];\n      }\n    }\n  }\n  return [];\n};\n```\n\n### 复杂度分析\n\n* 时间复杂度：O(N^2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。\n* 空间复杂度：O(1)。\n\n## 方法二：哈希表\n\n### 思路及算法\n\n注意到方法一的时间复杂度较高的原因是寻找 `target - x` 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。\n\n使用哈希表，可以将寻找 `target - x` 的时间复杂度降低到从 O(N) 降低到 O(1)。\n\n这样我们创建一个哈希表，对于每一个 `x`，我们首先查询哈希表中是否存在 `target - x`，然后将 `x` 插入到哈希表中，即可保证不会让 `x` 和自己匹配。\n\n```js\nvar twoSum = function(nums, target) {\n    let map = new Map();\n    for(let i = 0, len = nums.length; i < len; i++){\n        if(map.has(target - nums[i])){\n            return [map.get(target - nums[i]), i];\n        }else{\n            map.set(nums[i], i);\n        }\n    }\n    return [];\n};\n```\n\n### 复杂度分析\n\n* 时间复杂度：O(N)，其中 N 是数组中的元素数量。对于每一个元素 `x`，我们可以 O(1) 地寻找 `target - x`。\n* 空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。\n","level":1.5,"tagId":31}
{"_id":{"$oid":"61aa38873976eb00014e465f"},"exerciseKey":"f9ab9093-c472-475f-9d99-ddc69c56cfed","category":"QA","renderType":"md","title":"请手写“插入排序”","desc":null,"options":null,"explanation":"## 算法简介\n\n插入排序（Insertion-Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n\n## 算法描述\n\n一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：\n\n* 从第一个元素开始，该元素可以认为已经被排序；\n* 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n* 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n* 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n* 将新元素插入到该位置后；\n* 重复步骤2~5。\n\n## 代码实现\n\n```javascript\nfunction insertionSort(array) {\n    if (Object.prototype.toString.call(array).slice(8, -1) === 'Array') {\n        console.time('插入排序耗时：');\n        for (var i = 1; i < array.length; i++) {\n            var key = array[i];\n            var j = i - 1;\n            while (j >= 0 && array[j] > key) {\n                array[j + 1] = array[j];\n                j--;\n            }\n            array[j + 1] = key;\n        }\n        console.timeEnd('插入排序耗时：');\n        return array;\n    } else {\n        return 'array is not an Array!';\n    }\n}\n```\n\n## 改进插入排序\n\n查找插入位置时使用二分查找的方式\n\n```javascript\nfunction binaryInsertionSort(array) {\n    if (Object.prototype.toString.call(array).slice(8, -1) === 'Array') {\n        console.time('二分插入排序耗时：');\n\n        for (var i = 1; i < array.length; i++) {\n            var key = array[i], left = 0, right = i - 1;\n            while (left <= right) {\n                var middle = parseInt((left + right) / 2);\n                if (key < array[middle]) {\n                    right = middle - 1;\n                } else {\n                    left = middle + 1;\n                }\n            }\n            for (var j = i - 1; j >= left; j--) {\n                array[j + 1] = array[j];\n            }\n            array[left] = key;\n        }\n        console.timeEnd('二分插入排序耗时：');\n\n        return array;\n    } else {\n        return 'array is not an Array!';\n    }\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(binaryInsertionSort(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n## 算法分析\n\n* 最佳情况：输入数组按升序排列。T(n) = O(n)\n* 最坏情况：输入数组按降序排列。T(n) = O(n2)\n* 平均情况：T(n) = O(n2)\n","level":3,"tagId":26}
{"_id":{"$oid":"61aa38873dd7f7000183308c"},"exerciseKey":"fa224d36-147a-4251-8033-dc1462e9527e","category":"QA","renderType":"md","title":"什么是作用域链？","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/16f614a0-718f-11eb-ab90-d9ae814b240d.png)\r\n\r\n## 一、作用域\r\n\r\n作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合\r\n\r\n换句话说，作用域决定了代码区块中变量和其他资源的可见性\r\n\r\n举个例子\r\n\r\n```js\r\nfunction myFunction() {\r\n    let inVariable = \"函数内部变量\";\r\n}\r\nmyFunction();//要先执行这个函数，否则根本不知道里面是啥\r\nconsole.log(inVariable); // Uncaught ReferenceError: inVariable is not defined\r\n```\r\n\r\n上述例子中，函数`myFunction`内部创建一个`inVariable`变量，当我们在全局访问这个变量的时候，系统会报错\r\n\r\n这就说明我们在全局是无法获取到（闭包除外）函数内部的变量\r\n\r\n\r\n\r\n我们一般将作用域分成：\r\n\r\n- 全局作用域\r\n- 函数作用域\r\n\r\n- 块级作用域\r\n\r\n\r\n\r\n### 全局作用域\r\n\r\n任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问\r\n\r\n```js\r\n// 全局变量\r\nvar greeting = 'Hello World!';\r\nfunction greet() {\r\n  console.log(greeting);\r\n}\r\n// 打印 'Hello World!'\r\ngreet();\r\n```  \r\n\r\n\r\n### 函数作用域\r\n\r\n函数作用域也叫局部作用域，如果一个变量是在函数内部声明的它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问\r\n\r\n```js\r\nfunction greet() {\r\n  var greeting = 'Hello World!';\r\n  console.log(greeting);\r\n}\r\n// 打印 'Hello World!'\r\ngreet();\r\n// 报错： Uncaught ReferenceError: greeting is not defined\r\nconsole.log(greeting);\r\n```\r\n可见上述代码中在函数内部声明的变量或函数，在函数外部是无法访问的，这说明在函数内部定义的变量或者方法只是函数作用域\r\n\r\n\r\n\r\n### 块级作用域\r\n\r\nES6引入了`let`和`const`关键字,和`var`关键字不同，在大括号中使用`let`和`const`声明的变量存在于块级作用域中。在大括号之外不能访问这些变量\r\n\r\n```js\r\n{\r\n  // 块级作用域中的变量\r\n  let greeting = 'Hello World!';\r\n  var lang = 'English';\r\n  console.log(greeting); // Prints 'Hello World!'\r\n}\r\n// 变量 'English'\r\nconsole.log(lang);\r\n// 报错：Uncaught ReferenceError: greeting is not defined\r\nconsole.log(greeting);\r\n```\r\n\r\n\r\n\r\n## 二、词法作用域\r\n\r\n词法作用域，又叫静态作用域，变量被创建时就确定好了，而非执行阶段确定的。也就是说我们写好代码时它的作用域就确定了，`JavaScript` 遵循的就是词法作用域\r\n\r\n```js\r\nvar a = 2;\r\nfunction foo(){\r\n    console.log(a)\r\n}\r\nfunction bar(){\r\n    var a = 3;\r\n    foo();\r\n}\r\nn()\r\n```\r\n\r\n上述代码改变成一张图\r\n\r\n ![](https://static.vue-js.com/29fab3d0-718f-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n由于`JavaScript`遵循词法作用域，相同层级的 `foo` 和 `bar` 就没有办法访问到彼此块作用域中的变量，所以输出2\r\n\r\n\r\n\r\n## 三、作用域链\r\n\r\n当在`Javascript`中使用一个变量的时候，首先`Javascript`引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域\r\n\r\n如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错\r\n\r\n这里拿《你不知道的Javascript(上)》中的一张图解释：\r\n\r\n把作用域比喻成一个建筑，这份建筑代表程序中的嵌套作用域链，第一层代表当前的执行作用域，顶层代表全局作用域\r\n\r\n ![](https://static.vue-js.com/33f9c100-718f-11eb-85f6-6fac77c0c9b3.png)\r\n\r\n变量的引用会顺着当前楼层进行查找，如果找不到，则会往上一层找，一旦到达顶层，查找的过程都会停止\r\n\r\n下面代码演示下：\r\n\r\n```js\r\nvar sex = '男';\r\nfunction person() {\r\n    var name = '张三';\r\n    function student() {\r\n        var age = 18;\r\n        console.log(name); // 张三\r\n        console.log(sex); // 男 \r\n    }\r\n    student();\r\n    console.log(age); // Uncaught ReferenceError: age is not defined\r\n}\r\nperson();\r\n```\r\n\r\n上述代码主要主要做了以下工作：\r\n\r\n- `student`函数内部属于最内层作用域，找不到`name`，向上一层作用域`person`函数内部找，找到了输出“张三”\r\n- `student`内部输出cat时找不到，向上一层作用域`person`函数找，还找不到继续向上一层找，即全局作用域，找到了输出“男”\r\n- 在`person`函数内部输出`age`时找不到，向上一层作用域找，即全局作用域，还是找不到则报错","level":2,"tagId":10}
{"_id":{"$oid":"61aa3887291c0100017ee32e"},"exerciseKey":"fa381450-0faf-4395-9207-7fa114c27440","category":"QA","renderType":"md","title":"TypeScript支持的访问修饰符有哪些？","desc":null,"options":null,"explanation":"TypeScript支持访问修饰符 public，private 和 protected，它们决定了类成员的可访问性。\n\n* 公共（Public），类的所有成员，其子类以及该类的实例都可以访问。\n\n* 受保护（Projected），该类及其子类的所有成员都可以访问它们。 但是该类的实例无法访问。\n\n* 私有（Private），只有类的成员可以访问它们。\n\n如果未指定访问修饰符，则它是隐式公共的，因为它符合 JavaScript 的便利性。","level":1,"tagId":19}
{"_id":{"$oid":"61aa3888ff0573000165b3e8"},"exerciseKey":"fa5c044e-7c3c-4995-b929-09b950d82a16","category":"Choice","renderType":"md","title":"输出什么?","desc":"```javascript\nasync function getData() {\n  return await Promise.resolve(\"I made it!\");\n}\n\nconst data = getData();\nconsole.log(data);\n```","options":"{\"options\":[\"\\\"I made it!\\\"\",\"Promise {<resolved>: \\\"I made it!\\\"}\",\"Promise {<pending>}\",\"undefined\"],\"isMulti\":false,\"answer\":[2]}","explanation":"异步函数始终返回一个promise。`await`仍然需要等待promise的解决：当我们调用`getData()`并将其赋值给`data`，此时`data`为`getData`方法返回的一个挂起的promise，该promise并没有解决。\n如果我们想要访问已解决的值`\"I made it!\"`，可以在`data`上使用`.then()`方法：\n`data.then(res => console.log(res))`\n这样将打印 `\"I made it!\"`","level":1,"tagId":32}
{"_id":{"$oid":"61aa38880d111e00010373ae"},"exerciseKey":"fad85622-728a-4c93-bf22-d91f8902837d","category":"QA","renderType":"md","title":"如何使用css完成视差滚动效果?","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/1b2d33e0-a18d-11eb-85f6-6fac77c0c9b3.png)\n\n## 一、是什么\n\n视差滚动（Parallax Scrolling）是指多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验\n\n我们可以把网页解刨成：背景层、内容层、悬浮层\n\n ![](https://static.vue-js.com/57c942a0-a1cc-11eb-85f6-6fac77c0c9b3.png)\n\n当滚动鼠标滑轮的时候，各个图层以不同的速度移动，形成视觉差的效果\n\n ![image.png](https://static.vue-js.com/e57ab280-a1dd-11eb-ab90-d9ae814b240d.png)\n\n\n## 二、实现方式\n\n\n使用`css`形式实现视觉差滚动效果的方式有：\n\n- background-attachment\n- transform:translate3D\n\n\n### background-attachment\n\n作用是设置背景图像是否固定或者随着页面的其余部分滚动\n\n值分别有如下：\n\n- scroll：默认值，背景图像会随着页面其余部分的滚动而移动\n- fixed：当页面的其余部分滚动时，背景图像不会移动\n- inherit：继承父元素background-attachment属性的值\n\n完成滚动视觉差就需要将`background-attachment`属性设置为`fixed`，让背景相对于视口固定。及时一个元素有滚动机制，背景也不会随着元素的内容而滚动\n\n也就是说，背景一开始就已经被固定在初始的位置\n\n核心的`css`代码如下：\n\n```css\nsection {\n    height: 100vh;\n}\n\n.g-img {\n    background-image: url(...);\n    background-attachment: fixed;\n    background-size: cover;\n    background-position: center center;\n}\n```\n\n整体例子如下：\n\n```html\n<style>\ndiv {\n            height: 100vh;\n            background: rgba(0, 0, 0, .7);\n            color: #fff;\n            line-height: 100vh;\n            text-align: center;\n            font-size: 20vh;\n        }\n\n        .a-img1 {\n            background-image: url(https://images.pexels.com/photos/1097491/pexels-photo-1097491.jpeg);\n            background-attachment: fixed;\n            background-size: cover;\n            background-position: center center;\n        }\n\n        .a-img2 {\n            background-image: url(https://images.pexels.com/photos/2437299/pexels-photo-2437299.jpeg);\n            background-attachment: fixed;\n            background-size: cover;\n            background-position: center center;\n        }\n\n        .a-img3 {\n            background-image: url(https://images.pexels.com/photos/1005417/pexels-photo-1005417.jpeg);\n            background-attachment: fixed;\n            background-size: cover;\n            background-position: center center;\n        }\n</style>\n <div class=\"a-text\">1</div>\n    <div class=\"a-img1\">2</div>\n    <div class=\"a-text\">3</div>\n    <div class=\"a-img2\">4</div>\n    <div class=\"a-text\">5</div>\n    <div class=\"a-img3\">6</div>\n    <div class=\"a-text\">7</div>\n```\n\n\n\n\n\n### transform:translate3D\n\n同样，让我们先来看一下两个概念`transform`和`perspective`：\n\n- transform: css3 属性，可以对元素进行变换(2d/3d)，包括平移 translate,旋转 rotate,缩放 scale,等等\n- perspective: css3 属性，当元素涉及 3d 变换时，perspective 可以定义我们眼睛看到的 3d 立体效果，即空间感\n\n`3D`视角示意图如下所示：\n\n ![](https://static.vue-js.com/24f37dd0-a18d-11eb-85f6-6fac77c0c9b3.png)\n\n\n举个例子：\n\n```html\n<style>\n    html {\n        overflow: hidden;\n        height: 100%\n    }\n\n    body {\n        /* 视差元素的父级需要3D视角 */\n        perspective: 1px;\n        transform-style: preserve-3d; \n        height: 100%;\n        overflow-y: scroll;\n        overflow-x: hidden;\n    }\n    #app{\n        width: 100vw;\n        height:200vh;\n        background:skyblue;\n        padding-top:100px;\n    }\n    .one{\n        width:500px;\n        height:200px;\n        background:#409eff;\n        transform: translateZ(0px);\n        margin-bottom: 50px;\n    }\n    .two{\n        width:500px;\n        height:200px;\n        background:#67c23a;\n        transform: translateZ(-1px);\n        margin-bottom: 150px;\n    }\n    .three{\n        width:500px;\n        height:200px;\n        background:#e6a23c;\n        transform: translateZ(-2px);\n        margin-bottom: 150px;\n    }\n</style>\n<div id=\"app\">\n    <div class=\"one\">one</div>\n    <div class=\"two\">two</div>\n    <div class=\"three\">three</div>\n</div>\n```\n\n\n而这种方式实现视觉差动的原理如下：\n\n- 容器设置上 transform-style: preserve-3d 和 perspective: xpx，那么处于这个容器的子元素就将位于3D空间中，\n\n- 子元素设置不同的 transform: translateZ()，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样\n\n- 滚动滚动条，由于子元素设置了不同的 transform: translateZ()，那么他们滚动的上下距离 translateY 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果\n","level":2.5,"tagId":11}
{"_id":{"$oid":"61aa38883dd7f7000183308f"},"exerciseKey":"fbcd6444-9c0f-492a-b138-bd205bb4bf1d","category":"QA","renderType":"md","title":"async/await 和 Promise 有什么关系？","desc":null,"options":null,"explanation":"## Promise\n\n> Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象\n\n## async/await\n\nes2017的新语法，async/await就是generator + promise的语法糖\n\nasync/await 和 Promise 的关系非常的巧妙，await必须在async内使用，并装饰一个Promise对象，async返回的也是一个Promise对象。\n\nasync/await中的return/throw会代理自己返回的Promise的resolve/reject，而一个Promise的resolve/reject会使得await得到返回值或抛出异常。\n\n* 如果方法内无await节点\n\t* return 一个字面量则会得到一个{PromiseStatus: resolved}的Promise。\n\t* throw 一个Error则会得到一个{PromiseStatus: rejected}的Promise。\n\n* 如果方法内有await节点\n\t* async会返回一个{PromiseStatus: pending}的Promise（发生切换，异步等待Promise的执行结果）。\n\t* Promise的resolve会使得await的代码节点获得相应的返回结果，并继续向下执行。\n\t* Promise的reject 会使得await的代码节点自动抛出相应的异常，终止向下继续执行。","level":3,"tagId":24}
{"_id":{"$oid":"61aa38883dd7f70001833090"},"exerciseKey":"fc324726-dc8d-4495-9da8-72fc70470b07","category":"QA","renderType":"md","title":"什么是内存泄漏？","desc":null,"options":null,"explanation":"## 什么是内存泄漏？\n\n程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。\n\n对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。\n\n不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。\n\n有些语言（比如 C 语言）必须手动释放内存，程序员负责内存管理。\n\n```c\nchar * buffer;\nbuffer = (char*) malloc(42);\n\n// Do something with buffer\n\nfree(buffer);\n```\n\n上面是 C 语言代码，malloc方法用来申请内存，使用完毕之后，必须自己用free方法释放内存。\n\n\n","level":1,"tagId":30}
{"_id":{"$oid":"61aa3888b804f8000122abcf"},"exerciseKey":"fc6beb89-dcf0-456e-a4d0-746ec0968295","category":"Choice","renderType":"md","title":"哪一个方法会返回 'Hello world!' ？","desc":"```javascript\nconst myMap = new Map()\nconst myFunc = () => 'greeting'\n\nmyMap.set(myFunc, 'Hello world!')\n\n//1\nmyMap.get('greeting')\n//2\nmyMap.get(myFunc)\n//3\nmyMap.get(() => 'greeting')\n```","options":"{\"options\":[\"1\",\"2\",\"2 and 3\",\"All of them\"],\"isMulti\":false,\"answer\":[1]}","explanation":"当通过 `set` 方法添加一个键值对，一个传递给 `set`方法的参数将会是键名，第二个参数将会是值。在这个case里，键名为 _函数_ `() => 'greeting'`，值为`'Hello world'`。 `myMap` 现在就是 `{ () => 'greeting' => 'Hello world!' }`。\n1 是错的，因为键名不是 `'greeting'` 而是 `() => 'greeting'`。\n3 是错的，因为我们给`get` 方法传递了一个新的函数。对象受 _引用_ 影响。函数也是对象，因此两个函数严格上并不等价，尽管他们相同：他们有两个不同的内存引用地址。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa3888cd02c30001dd237f"},"exerciseKey":"fcdd893d-e614-47c9-9876-1d2a21af556d","category":"QA","renderType":"html","title":"谈谈你对 Webpack的认识","desc":null,"options":null,"explanation":"<p style=\"text-align:start;text-indent:2em;\">WebPack是一个模块打包工具，可以使用 WebPack管理模块依赖，并编译输岀模块所需的静态文件。它能够很好地管理与打包Web开发中所用到的HTML、 JavaScript 、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源， WebPack有对应的模块加载器。Web Pack模块打包器会分析模块间的依赖关系，最后生成优化且合并后的静态资源。</p><p style=\"text-align:start;text-indent:2em;\">WebPack的两大特色如下。</p><p style=\"text-align:start;text-indent:2em;\">（1）代码切割（ code splitting）</p><p style=\"text-align:start;text-indent:2em;\">（2） loader可以处理各种类型的静态文件，并且支持串行操作WebPack以 CommonJS规范来书写代码，但对 AMD/CMD的支持也很全面，方便对项目进行代码迁移。</p><p style=\"text-align:start;text-indent:2em;\">WebPack具有 require.js和 browserify的功能，但也有很多自己的新特性，</p><p style=\"text-align:start;text-indent:2em;\">（1）对 CommonJS、AMD、ES6的语法实现了兼容。</p><p style=\"text-align:start;text-indent:2em;\">（2）对 JavaScript、CSS、图片等资源文件都支持打包</p><p style=\"text-align:start;text-indent:2em;\">（3）串联式模块加载器和插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、 EMAScript 6的支持</p><p style=\"text-align:start;text-indent:2em;\">（4）有独立的配置文件 webpack.config. js。</p><p style=\"text-align:start;text-indent:2em;\">（5）可以将代码切割成不同的块，实现按需加载，缩短了初始化时间。</p><p style=\"text-align:start;text-indent:2em;\">（6）支持 SourceUrls和 SourceMaps，易于调试。</p><p style=\"text-align:start;text-indent:2em;\">（7）具有强大的 Plugin接口，大多是内部插件，使用起来比较灵活</p><p style=\"text-align:start;text-indent:2em;\">（8）使用异步I/O，并具有多级缓存，这使得 WebPack速度很快且在增量编译上更加快。</p>","level":1,"tagId":28}
{"_id":{"$oid":"61aa3888bdfab500012c85d0"},"exerciseKey":"fda596ab-16db-41ab-9e81-5a567a373d42","category":"QA","renderType":"md","title":"css加载会造成阻塞吗？","desc":null,"options":null,"explanation":"先说下结论：\n\n* css加载不会阻塞DOM树的解析\n* css加载会阻塞DOM树的渲染\n* css加载会阻塞后面js语句的执行\n\n为了避免让用户看到长时间的白屏时间，我们应该尽可能的提高css加载速度，比如可以使用以下几种方法:\n\n* 使用CDN(因为CDN会根据你的网络状况，替你挑选最近的一个具有缓存内容的节点为你提供资源，因此可以减少加载时间)\n* 对css进行压缩(可以用很多打包工具，比如webpack,gulp等，也可以通过开启gzip压缩)\n* 合理的使用缓存(设置cache-control,expires,以及E-tag都是不错的，不过要注意一个问题，就是文件更新后，你要避免缓存而带来的影响。其中一个解决防范是在文件名字后面加一个版本号)\n* 减少http请求数，将多个css文件合并，或者是干脆直接写成内联样式(内联样式的一个缺点就是不能缓存)\n\n## 原理解析\n\n浏览器渲染的流程如下：\n\n* HTML解析文件，生成DOM Tree，解析CSS文件生成CSSOM Tree\n* 将Dom Tree和CSSOM Tree结合，生成Render Tree(渲染树)\n* 根据Render Tree渲染绘制，将像素渲染到屏幕上。\n\n从流程我们可以看出来:\n\n* DOM解析和CSS解析是两个并行的进程，所以这也解释了为什么CSS加载不会阻塞DOM的解析。\n* 然而，由于Render Tree是依赖于DOM Tree和CSSOM Tree的，所以他必须等待到CSSOM Tree构建完成，也就是CSS资源加载完成(或者CSS资源加载失败)后，才能开始渲染。因此，CSS加载是会阻塞Dom的渲染的。\n* 由于js可能会操作之前的Dom节点和css样式，因此浏览器会维持html中css和js的顺序。因此，样式表会在后面的js执行前先加载执行完毕。所以css会阻塞后面js的执行。\n\n","level":2.5,"tagId":20}
{"_id":{"$oid":"61aa388854ebf60001a1a524"},"exerciseKey":"fe099894-7e1f-4b13-bc0a-8f065b7b4616","category":"QA","renderType":"html","title":"webpack的构建流程是什么","desc":null,"options":null,"explanation":"<p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：<br/> </p><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li><li>确定入口：根据配置中的 entry 找出所有的入口文件；</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li><li>完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ol><p> </p>","level":1,"tagId":28}
{"_id":{"$oid":"61aa3888cd02c30001dd2381"},"exerciseKey":"fe257d38-7fa5-4062-bdc5-e11525b984a4","category":"QA","renderType":"md","title":"谈谈你对浏览器中进程和线程的理解","desc":null,"options":null,"explanation":"## 浏览器是多进程的\n\n它主要包括以下进程：\n\n* Browser 进程：浏览器的主进程，唯一，负责创建和销毁其它进程、网络资源的下载与管理、浏览器界面的展示、前进后退等。\n* GPU 进程：用于 3D 绘制等，最多一个。\n* 第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建。\n* 浏览器渲染进程（浏览器内核）：内部是多线程的，每打开一个新网页就会创建一个进程，主要用于页面渲染，脚本执行，事件处理等。\n\n## 渲染进程（浏览器内核）\n\n浏览器的渲染进程是多线程的，页面的渲染，JavaScript 的执行，事件的循环，都在这个进程内进行：\n\n* GUI 渲染线程：负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(Reflow)时，该线程就会执行。\n* JavaScript 引擎线程：也称为 JavaScript 内核，负责处理 Javascript 脚本程序、解析 Javascript 脚本、运行代码等。（例如 V8 引擎）\n* 事件触发线程：用来控制浏览器事件循环，注意这不归 JavaScript 引擎线程管，当事件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JavaScript 引擎的处理。\n* 定时触发器线程：传说中的 setInterval 与 setTimeout 所在线程，注意，W3C 在 HTML 标准中规定，规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms 。\n* 异步 http 请求线程：在 XMLHttpRequest 连接后通过浏览器新开一个线程请求，将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由 JavaScript 引擎执行。\n\n注意，GUI 渲染线程与 JavaScript 引擎线程是互斥的，当 JavaScript 引擎执行时 GUI 线程会被挂起（相当于被冻结了），GUI 更新会被保存在一个队列中等到 JavaScript 引擎空闲时立即被执行。所以如果 JavaScript 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n\n## 单线程的 JavaScript\n\n所谓单线程，是指在 JavaScript 引擎中负责解释和执行 JavaScript 代码的线程唯一，同一时间上只能执行一件任务。","level":2,"tagId":10}
{"_id":{"$oid":"61aa38893dd7f70001833095"},"exerciseKey":"fe2b8ddc-c302-4179-a215-edcec1e80f3c","category":"QA","renderType":"md","title":"大型项目中，Vue项目怎么划分结构和划分组件比较合理呢？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/b6cd6a60-4aba-11eb-ab90-d9ae814b240d.png)\n\n## 一、为什么要划分\n\n使用`vue`构建项目，项目结构清晰会提高开发效率，熟悉项目的各种配置同样会让开发效率更高\n\n在划分项目结构的时候，需要遵循一些基本的原则：\n\n- 文件夹和文件夹内部文件的语义一致性\n- 单一入口/出口\n- 就近原则，紧耦合的文件应该放到一起，且应以相对路径引用\n- 公共的文件应该以绝对路径的方式从根目录引用\n- `/src` 外的文件不应该被引入\n\n\n\n### 文件夹和文件夹内部文件的语义一致性\n\n我们的目录结构都会有一个文件夹是按照路由模块来划分的，如`pages`文件夹，这个文件夹里面应该包含我们项目所有的路由模块，并且仅应该包含路由模块，而不应该有别的其他的非路由模块的文件夹\n\n这样做的好处在于一眼就从 `pages`文件夹看出这个项目的路由有哪些\n\n\n\n### 单一入口/出口\n\n举个例子，在`pages`文件夹里面存在一个`seller`文件夹，这时候`seller` 文件夹应该作为一个独立的模块由外部引入，并且 `seller/index.js` 应该作为外部引入 seller 模块的唯一入口\n\n```js\n// 错误用法\nimport sellerReducer from 'src/pages/seller/reducer'\n\n// 正确用法\nimport { reducer as sellerReducer } from 'src/pages/seller'\n```\n\n这样做的好处在于，无论你的模块文件夹内部有多乱，外部引用的时候，都是从一个入口文件引入，这样就很好的实现了隔离，如果后续有重构需求，你就会发现这种方式的优点\n\n\n\n\n\n### 就近原则，紧耦合的文件应该放到一起，且应以相对路径引用\n\n使用相对路径可以保证模块内部的独立性\n\n```js\n// 正确用法\nimport styles from './index.module.scss'\n// 错误用法\nimport styles from 'src/pages/seller/index.module.scss'\n```\n\n举个例子\n\n假设我们现在的 seller 目录是在 `src/pages/seller`，如果我们后续发生了路由变更，需要加一个层级，变成 `src/pages/user/seller`。\n\n如果我们采用第一种相对路径的方式，那就可以直接将整个文件夹拖过去就好，`seller` 文件夹内部不需要做任何变更。\n\n但是如果我们采用第二种绝对路径的方式，移动文件夹的同时，还需要对每个 `import` 的路径做修改\n\n\n\n### 公共的文件应该以绝对路径的方式从根目录引用\n\n公共指的是多个路由模块共用，如一些公共的组件，我们可以放在`src/components`下\n\n在使用到的页面中，采用绝对路径的形式引用\n\n```js\n// 错误用法\nimport Input from '../../components/input'\n// 正确用法\nimport Input from 'src/components/input'\n```\n\n同样的，如果我们需要对文件夹结构进行调整。将 `/src/components/input` 变成 `/src/components/new/input`，如果使用绝对路径，只需要全局搜索替换\n\n再加上绝对路径有全局的语义，相对路径有独立模块的语义\n\n\n\n### /src 外的文件不应该被引入\n\n`vue-cli`脚手架已经帮我们做了相关的约束了，正常我们的前端项目都会有个` src `文件夹，里面放着所有的项目需要的资源，`js`,` css`, `png`, `svg` 等等。`src` 外会放一些项目配置，依赖，环境等文件\n\n这样的好处是方便划分项目代码文件和配置文件\n\n\n\n## 二、目录结构\n\n单页面目录结构\n\n```js\nproject\n│  .browserslistrc\n│  .env.production\n│  .eslintrc.js\n│  .gitignore\n│  babel.config.js\n│  package-lock.json\n│  package.json\n│  README.md\n│  vue.config.js\n│  yarn-error.log\n│  yarn.lock\n│\n├─public\n│      favicon.ico\n│      index.html\n│\n|-- src\n    |-- components\n        |-- input\n            |-- index.js\n            |-- index.module.scss\n    |-- pages\n        |-- seller\n            |-- components\n                |-- input\n                    |-- index.js\n                    |-- index.module.scss\n            |-- reducer.js\n            |-- saga.js\n            |-- index.js\n            |-- index.module.scss\n        |-- buyer\n            |-- index.js\n        |-- index.js\n```\n\n多页面目录结构\n\n```js\nmy-vue-test:.\n│  .browserslistrc\n│  .env.production\n│  .eslintrc.js\n│  .gitignore\n│  babel.config.js\n│  package-lock.json\n│  package.json\n│  README.md\n│  vue.config.js\n│  yarn-error.log\n│  yarn.lock\n│\n├─public\n│      favicon.ico\n│      index.html\n│\n└─src\n    ├─apis //接口文件根据页面或实例模块化\n    │      index.js\n    │      login.js\n    │\n    ├─components //全局公共组件\n    │  └─header\n    │          index.less\n    │          index.vue\n    │\n    ├─config //配置（环境变量配置不同passid等）\n    │      env.js\n    │      index.js\n    │\n    ├─contant //常量\n    │      index.js\n    │\n    ├─images //图片\n    │      logo.png\n    │\n    ├─pages //多页面vue项目，不同的实例\n    │  ├─index //主实例\n    │  │  │  index.js\n    │  │  │  index.vue\n    │  │  │  main.js\n    │  │  │  router.js\n    │  │  │  store.js\n    │  │  │\n    │  │  ├─components //业务组件\n    │  │  └─pages //此实例中的各个路由\n    │  │      ├─amenu\n    │  │      │      index.vue\n    │  │      │\n    │  │      └─bmenu\n    │  │              index.vue\n    │  │\n    │  └─login //另一个实例\n    │          index.js\n    │          index.vue\n    │          main.js\n    │\n    ├─scripts //包含各种常用配置，工具函数\n    │  │  map.js\n    │  │\n    │  └─utils\n    │          helper.js\n    │\n    ├─store //vuex仓库\n    │  │  index.js\n    │  │\n    │  ├─index\n    │  │      actions.js\n    │  │      getters.js\n    │  │      index.js\n    │  │      mutation-types.js\n    │  │      mutations.js\n    │  │      state.js\n    │  │\n    │  └─user\n    │          actions.js\n    │          getters.js\n    │          index.js\n    │          mutation-types.js\n    │          mutations.js\n    │          state.js\n    │\n    └─styles //样式统一配置\n        │  components.less\n        │\n        ├─animation\n        │      index.less\n        │      slide.less\n        │\n        ├─base\n        │      index.less\n        │      style.less\n        │      var.less\n        │      widget.less\n        │\n        └─common\n                index.less\n                reset.less\n                style.less\n                transition.less\n```\n\n\n\n### 小结\n\n项目的目录结构很重要，因为目录结构能体现很多东西，怎么规划目录结构可能每个人有自己的理解，但是按照一定的规范去进行目录的设计，能让项目整个架构看起来更为简洁，更加易用\n\n","level":3,"tagId":14}
{"_id":{"$oid":"61aa3889cd02c30001dd2382"},"exerciseKey":"fe5c8180-dafd-428e-86d7-4360811d5321","category":"Choice","renderType":"md","title":"输出什么？","desc":"```javascript\nconsole.log(`${(x => x)('I love')} to program`)\n```","options":"{\"options\":[\"I love to program\",\"undefined to program\",\"${(x => x)('I love') to program\",\"TypeError\"],\"isMulti\":false,\"answer\":[0]}","explanation":"带有模板字面量的表达式首先被执行。相当于字符串会包含表达式，这个立即执行函数 `(x => x)('I love')` 返回的值. 我们向箭头函数 `x => x` 传递 `'I love'` 作为参数。`x` 等价于返回的 `'I love'`。这就是结果 `I love to program`。","level":0.5,"tagId":32}
{"_id":{"$oid":"61aa38898e97d9000180887e"},"exerciseKey":"fe86322b-4990-4f6b-a473-d37a8e3ecb2d","category":"Choice","renderType":"md","title":"依次输出什么?","desc":"```javascript\nconst myPromise = () => Promise.resolve('I have resolved!')\n\nfunction firstFunction() {\n  myPromise().then(res => console.log(res))\n  console.log('second')\n}\n\nasync function secondFunction() {\n  console.log(await myPromise())\n  console.log('second')\n}\n\nfirstFunction()\nsecondFunction()\n```","options":"{\"options\":[\"I have resolved!, second and I have resolved!, second\",\"second, I have resolved! and second, I have resolved!\",\"I have resolved!, second and second, I have resolved!\",\"second, I have resolved! and I have resolved!, second\"],\"isMulti\":false,\"answer\":[3]}","explanation":"有了promise，我们通常会说：当我想要调用某个方法，但是由于它可能需要一段时间，因此暂时将它放在一边。只有当某个值被resolved/rejected，并且执行栈为空时才使用这个值。\n我们可以在`async`函数中通过`.then`和`await`关键字获得该值。 尽管我们可以通过`.then`和`await`获得promise的价值，但是它们的工作方式有所不同。\n在 `firstFunction`中，当运行到`myPromise`方法时我们将其放在一边，即promise进入微任务队列，其他后面的代码（`console.log('second')`）照常运行，因此`second`被打印出，`firstFunction`方法到此执行完毕，执行栈中宏任务队列被清空，此时开始执行微任务队列中的任务，`I have resolved`被打印出。\n在`secondFunction`方法中，我们通过`await`关键字，暂停了后面代码的执行，直到异步函数的值被解析才开始后面代码的执行。这意味着，它会等着直到 `myPromise` 以值`I have resolved`被解决之后，下一行`second`才开始执行。","level":1,"tagId":32}
{"_id":{"$oid":"61aa388981337a00011e0718"},"exerciseKey":"fe97f51f-1d7d-49b7-acd2-83f345014633","category":"QA","renderType":"md","title":"谈谈对 this 对象的理解","desc":null,"options":null,"explanation":"![](https://static.vue-js.com/46c820d0-74b7-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n## 一、定义\n\n函数的 `this` 关键字在 `JavaScript` 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别\n\n在绝大多数情况下，函数的调用方式决定了 `this` 的值（运行时绑定）\n\n`this` 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象\n\n举个例子：\n\n```js\nfunction baz() {\n    // 当前调用栈是：baz\n    // 因此，当前调用位置是全局作用域\n    \n    console.log( \"baz\" );\n    bar(); // <-- bar的调用位置\n}\n\nfunction bar() {\n    // 当前调用栈是：baz --> bar\n    // 因此，当前调用位置在baz中\n    \n    console.log( \"bar\" );\n    foo(); // <-- foo的调用位置\n}\n\nfunction foo() {\n    // 当前调用栈是：baz --> bar --> foo\n    // 因此，当前调用位置在bar中\n    \n    console.log( \"foo\" );\n}\n\nbaz(); // <-- baz的调用位置\n```\n\n同时，`this`在函数执行过程中，`this`一旦被确定了，就不可以再更改\n\n```js\nvar a = 10;\nvar obj = {\n  a: 20\n}\n\nfunction fn() {\n  this = obj; // 修改this，运行后会报错\n  console.log(this.a);\n}\n\nfn();\n```\n\n\n\n\n\n## 二、绑定规则\n\n根据不同的使用场合，`this`有不同的值，主要分为下面几种情况：\n\n- 默认绑定\n- 隐式绑定\n- new绑定\n\n- 显示绑定\n\n\n\n### 默认绑定\n\n全局环境中定义`person`函数，内部使用`this`关键字\n\n```js\nvar name = 'Jenny';\nfunction person() {\n    return this.name;\n}\nconsole.log(person());  //Jenny\n```\n\n上述代码输出`Jenny`，原因是调用函数的对象在游览器中位`window`，因此`this`指向`window`，所以输出`Jenny`\n\n注意：\n\n严格模式下，不能将全局对象用于默认绑定，this会绑定到`undefined`，只有函数运行在非严格模式下，默认绑定才能绑定到全局对象\n\n\n\n### 隐式绑定\n\n函数还可以作为某个对象的方法调用，这时`this`就指这个上级对象\n\n```js\nfunction test() {\n  console.log(this.x);\n}\n\nvar obj = {};\nobj.x = 1;\nobj.m = test;\n\nobj.m(); // 1\n```\n\n这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，`this`指向的也只是它上一级的对象\n\n```js\nvar o = {\n    a:10,\n    b:{\n        fn:function(){\n            console.log(this.a); //undefined\n        }\n    }\n}\no.b.fn();\n```\n\n上述代码中，`this`的上一级对象为`b`，`b`内部并没有`a`变量的定义，所以输出`undefined`\n\n这里再举一种特殊情况\n\n```js\nvar o = {\n    a:10,\n    b:{\n        a:12,\n        fn:function(){\n            console.log(this.a); //undefined\n            console.log(this); //window\n        }\n    }\n}\nvar j = o.b.fn;\nj();\n```\n\n此时`this`指向的是`window`，这里的大家需要记住，`this`永远指向的是最后调用它的对象，虽然`fn`是对象`b`的方法，但是`fn`赋值给`j`时候并没有执行，所以最终指向`window`\n\n\n\n### new绑定\n\n通过构建函数`new`关键字生成一个实例对象，此时`this`指向这个实例对象\n\n```js\nfunction test() {\n　this.x = 1;\n}\n\nvar obj = new test();\nobj.x // 1\n```\n\n上述代码之所以能过输出1，是因为`new`关键字改变了`this`的指向\n\n这里再列举一些特殊情况：\n\n`new`过程遇到`return`一个对象，此时`this`指向为返回的对象\n\n```js\nfunction fn()  \n{  \n    this.user = 'xxx';  \n    return {};  \n}\nvar a = new fn();  \nconsole.log(a.user); //undefined\n```\n\n如果返回一个简单类型的时候，则`this`指向实例对象\n\n```js\nfunction fn()  \n{  \n    this.user = 'xxx';  \n    return 1;\n}\nvar a = new fn;  \nconsole.log(a.user); //xxx\n```\n\n注意的是`null`虽然也是对象，但是此时`new`仍然指向实例对象\n\n```js\nfunction fn()  \n{  \n    this.user = 'xxx';  \n    return null;\n}\nvar a = new fn;  \nconsole.log(a.user); //xxx\n```\n\n\n\n### 显示修改\n\n`apply()、call()、bind()`是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时`this`指的就是这第一个参数\n\n```js\nvar x = 0;\nfunction test() {\n　console.log(this.x);\n}\n\nvar obj = {};\nobj.x = 1;\nobj.m = test;\nobj.m.apply(obj) // 1\n```\n\n关于`apply、call、bind`三者的区别，我们后面再详细说\n\n\n## 三、箭头函数\n\n在 ES6 的语法中还提供了箭头函语法，让我们在代码书写时就能确定 `this` 的指向（编译时绑定）\n\n举个例子：\n\n```js\nconst obj = {\n  sayThis: () => {\n    console.log(this);\n  }\n};\n\nobj.sayThis(); // window 因为 JavaScript 没有块作用域，所以在定义 sayThis 的时候，里面的 this 就绑到 window 上去了\nconst globalSay = obj.sayThis;\nglobalSay(); // window 浏览器中的 global 对象\n```\n\n虽然箭头函数的`this`能够在编译的时候就确定了`this`的指向，但也需要注意一些潜在的坑\n\n下面举个例子：\n\n绑定事件监听\n\n```js\nconst button = document.getElementById('mngb');\nbutton.addEventListener('click', ()=> {\n    console.log(this === window) // true\n    this.innerHTML = 'clicked button'\n})\n```\n\n上述可以看到，我们其实是想要`this`为点击的`button`，但此时`this`指向了`window`\n\n包括在原型上添加方法时候，此时`this`指向`window`\n\n```js\nCat.prototype.sayName = () => {\n    console.log(this === window) //true\n    return this.name\n}\nconst cat = new Cat('mm');\ncat.sayName()\n```\n\n同样的，箭头函数不能作为构建函数\n\n\n\n## 四、优先级\n\n### 隐式绑定 VS 显式绑定\n\n```js\nfunction foo() {\n    console.log( this.a );\n}\n\nvar obj1 = {\n    a: 2,\n    foo: foo\n};\n\nvar obj2 = {\n    a: 3,\n    foo: foo\n};\n\nobj1.foo(); // 2\nobj2.foo(); // 3\n\nobj1.foo.call( obj2 ); // 3\nobj2.foo.call( obj1 ); // 2\n```\n\n显然，显示绑定的优先级更高\n\n### new绑定 VS 隐式绑定\n\n```js\nfunction foo(something) {\n    this.a = something;\n}\n\nvar obj1 = {\n    foo: foo\n};\n\nvar obj2 = {};\n\nobj1.foo( 2 );\nconsole.log( obj1.a ); // 2\n\nobj1.foo.call( obj2, 3 );\nconsole.log( obj2.a ); // 3\n\nvar bar = new obj1.foo( 4 );\nconsole.log( obj1.a ); // 2\nconsole.log( bar.a ); // 4\n```\n\n可以看到，new绑定的优先级`>`隐式绑定\n\n### `new`绑定 VS 显式绑定\n\n因为`new`和`apply、call`无法一起使用，但硬绑定也是显式绑定的一种，可以替换测试\n\n```js\nfunction foo(something) {\n    this.a = something;\n}\n\nvar obj1 = {};\n\nvar bar = foo.bind( obj1 );\nbar( 2 );\nconsole.log( obj1.a ); // 2\n\nvar baz = new bar( 3 );\nconsole.log( obj1.a ); // 2\nconsole.log( baz.a ); // 3\n```\n\n`bar`被绑定到obj1上，但是`new bar(3)` 并没有像我们预计的那样把`obj1.a`修改为3。但是，`new`修改了绑定调用`bar()`中的`this`\n\n我们可认为`new`绑定优先级`>`显式绑定\n\n综上，new绑定优先级 > 显示绑定优先级 > 隐式绑定优先级 > 默认绑定优先级\n\n","level":2,"tagId":10}
{"_id":{"$oid":"61aa38898e97d90001808880"},"exerciseKey":"ff429084-6242-4bd6-9f09-64e567aeb99d","category":"QA","renderType":"md","title":"margin和padding分别适合什么场景使用？","desc":null,"options":null,"explanation":"何时使用margin：\n\n* 需要在border外侧添加空白\n* 空白处不需要背景色\n* 上下相连的两个盒子之间的空白，需要相互抵消时。\n\n何时使用padding：\n\n* 需要在border内侧添加空白\n* 空白处需要背景颜色\n* 上下相连的两个盒子的空白，希望为两者之和。\n","level":1,"tagId":11}
{"_id":{"$oid":"61aa388985c5f700015430dc"},"exerciseKey":"ff764705-09da-45ff-8678-56ab75fce6de","category":"Choice","renderType":"md","title":"输出是什么?","desc":"```javascript\n[1, 2, 3].map(num => {\n  if (typeof num === \"number\") return;\n  return num * 2;\n});\n```","options":"{\"options\":[\"[]\",\"[null, null, null]\",\"[undefined, undefined, undefined]\",\"[ 3 x empty ]\"],\"isMulti\":false,\"answer\":[2]}","explanation":"对数组进行映射的时候,`num`就是当前循环到的元素. 在这个例子中，所有的映射都是number类型，所以if中的判断`typeof num === \"number\"`结果都是`true`.map函数创建了新数组并且将函数的返回值插入数组。\n但是，没有任何值返回。当函数没有返回任何值时，即默认返回`undefined`.对数组中的每一个元素来说，函数块都得到了这个返回值，所以结果中每一个元素都是`undefined`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa388934458700017f1de4"},"exerciseKey":"ffb601c8-7b57-4a0b-892a-f1935cfb528e","category":"Choice","renderType":"md","title":"输出是什么？","desc":"```javascript\nlet number = 0\nconsole.log(number++)\nconsole.log(++number)\nconsole.log(number)\n```","options":"{\"options\":[\"1 1 2\",\"1 2 2\",\"0 2 2\",\"0 1 2\"],\"isMulti\":false,\"answer\":[2]}","explanation":"一元**后自增**运算符 `++`：\n1. 返回值（返回 `0`）\n2. 值自增（number 现在是 `1`）\n一元**前自增**运算符 `++`：\n1. 值自增（number 现在是 `2`）\n2. 返回值（返回 `2`）\n结果是 `0 2 2`.","level":1,"tagId":32}
{"_id":{"$oid":"61aa388991a75000018d2e1a"},"exerciseKey":"ffbc34ea-c928-4f17-b469-322b3c8be7be","category":"QA","renderType":"md","title":"谈谈对 babel-polyfill 的了解","desc":null,"options":null,"explanation":"babel polyfill 有三种：\n\n* babel-polyfill\n* babel-runtime\n* babel-plugin-transform-runtime\n\n## babel-polyfill\n\nbabel-polyfill通过向全局对象和内置对象的prototype上添加方法来实现的。所以这会造成全局空间污染。\n\nbabel-polyfill使用的两种方式：\n\n* webpack.config.js 中：\n\n配置webpack.config.js里的entry设置为entry: ['babel-polyfill',path.join(__dirname, 'index.js')]\n\n* 业务 js 中：\n\n在webpack.config.js配置的主入口index.js文件的最顶层键入\n\n```js\nimport 'babel-polyfill'\n```\n\n两者打印出来的大小都是一样的，打包后大小是280KB，如果没有使用babel-polyfill，大小是3.43kb。\n\n两则相差大概81.6倍。原因是webpack把babel-polyfill整体全部都打包进去了。而babel-polyfill肯定也实现了所有ES6新API的垫片,文件一定不会小。\n\n那么有没有一种办法,根据实际代码中用到的ES6新增API ,来使用对应的垫片,而不是全部加载进去呢?\n\n是的，有的。那就是 `babel-runtime & babel-plugin-transform-runtime`，他们可以实现按需加载。\n\n## babel-runtime\n\n简单说 babel-runtime 更像是一种按需加载的实现，比如你哪里需要使用 Promise，只要在这个文件头部\n\n```js\nimport Promise from 'babel-runtime/core-js/promise'\n```\n\n就行了。\n\n不过如果你许多文件都要使用 Promise，难道每个文件都要 import 一下吗？当然不是，Babel 官方已考虑这种情况，只需要使用 babel-plugin-transform-runtime 就可以解决手动 import 的苦恼了。\n\n## babel-plugin-transform-runtime\n\nbabel-plugin-transform-runtime 装了就不需要装 babel-runtime了，因为前者依赖后者。\n总的来说，babel-plugin-transform-runtime 就是可以在我们使用新 API 时 自动 import babel-runtime 里面的 polyfill，具体插件做了以下三件事情：\n\n* 当我们使用 async/await 时，自动引入 babel-runtime/regenerator\n* 当我们使用 ES6 的静态事件或内置对象时，自动引入 babel-runtime/core-js\n* 移除内联 babel helpers 并替换使用 babel-runtime/helpers  来替换\n\nbabel-plugin-transform-runtime 优点：\n\n* 不会污染全局变量\n* 多次使用只会打包一次\n* 依赖统一按需引入,无重复引入,无多余引入\n* 避免 babel 编译的工具函数在每个模块里重复出现，减小库和工具包的体积\n\n使用方式：\n\n在 .babelrc 中配置：\n\n```\nplugins: [\"tranform-runtime\"]\n```\n\n打包后大小为 17.4kb，比之前的280kb要小很多。\n\n\n","level":3,"tagId":29}
{"_id":{"$oid":"61aa388985c5f700015430e0"},"exerciseKey":"ffbc9199-6e3a-4e6f-a2dd-b77c339aef2c","category":"QA","renderType":"md","title":"TypeScript 中的 getter/setter 是什么？你如何使用它们？","desc":null,"options":null,"explanation":"Getter 和 setter 是特殊类型的方法，可帮助你根据程序的需要委派对私有变量的不同级别的访问。\n\nGetters 允许你引用一个值但不能编辑它。Setter 允许你更改变量的值，但不能查看其当前值。这些对于实现封装是必不可少的。\n\n例如，新雇主可能能够了解get公司的员工人数，但无权set了解员工人数。\n\n```typescript\nconst fullNameMaxLength = 10;\nclass Employee {\n  private _fullName: string = \"\";\n  get fullName(): string {\n    return this._fullName;\n  }\n  set fullName(newName: string) {\n    if (newName && newName.length > fullNameMaxLength) {\n      throw new Error(\"fullName has a max length of \" + fullNameMaxLength);\n    }\n    this._fullName = newName;\n  }\n}\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\nif (employee.fullName) {\n  console.log(employee.fullName);\n}\n```","level":3,"tagId":19}
{"_id":{"$oid":"61aa388934458700017f1de6"},"exerciseKey":"ffc383ed-5d5e-4313-8fa4-8c940d423b37","category":"QA","renderType":"md","title":"什么是 React？","desc":null,"options":null,"explanation":"React是一个简单的javascript UI库，用于构建高效、快速的用户界面。\n\n它是一个轻量级库，因此很受欢迎。它遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效。\n\n它使用虚拟DOM来有效地操作DOM。\n\n它遵循从高阶组件到低阶组件的单向数据流。","level":1,"tagId":13}
{"_id":{"$oid":"61aa388ac2d0220001c965dc"},"exerciseKey":"fff79f62-47be-438a-83bf-6f81bcc0dfe9","category":"QA","renderType":"md","title":"JavaScript中的错误有哪几种类型？","desc":null,"options":null,"explanation":"## JavaScript中的错误类型\n\n* Error\n* EvalError\n* RangeError\n* ReferenceError\n* SyntaxError\n* TypeError\n* URIError\n\n### Error\n\n`Error`是最基本的错误类型，其他的错误类型都继承自该类型。因此，所有错误的类型共享了一组相同的属性。 这个类型的错误很少见。一般使用开发人员自定义抛出的错误。\n\n### EvalError\n\n这个错误会在使用`eval()`函数发生异常时候抛出。两种情况会出错：\n\n```js\nnew eval();\neval = foo;\n```\n\n上面两个的意思结合就是没有直接调用`eval`函数，而是`new`或者是重新赋值\n这个错误基本上不会遇到，因为`eval`函数本来用的就不多。不过需要注意的是，`eval`是一个关键字。\n\n### RangeError\n\n这个错误会在数值超出相应范围时触发。比如使用`new Array()`的时候传递一个负数或者是超过数组最大长度（4,294,967,295）的数，比如Number.MAX_VALUE，Number.MIN_VALUE。注意递归爆炸也有这个错误。\n\n### ReferenceError\n\n这个错误一般就是出现在变量找不到的情况，比如：\n```js\nvar a = b;\nUncaught ReferenceError: b is not defined\n```\n\n这时候就需要检查一下一个变量了\n\n### SyntaxError\n\n当Javascript语言解析代码时,Javascript引擎发现了不符合语法规范的tokens或token顺序时抛出SyntaxError。\n\n### TypeError\n\n这个错误在JavaScript中是经常遇到的，不管是初学者还是老手。在变量中保存着以外的类型时，或者在访问不存在的方法时。都会导致这种错误。但是归根结底还是由于在执行特定于类型的操作时，变量的类型并不符合要求所致。比如：\n```\nvar o = new 10;\na.style.widht = \"10px\";\n```\n\n关于设置样式这个东西，新手会遇到很多，一般这都是由获取不到元素导致的。\n\n### URIError\n\n在使用encodeURI或者decodeURI因为URL格式不正确时，就会导致URIError错误。这种错误也很少见。\n\n","level":2,"tagId":10}
{"_id":{"$oid":"6202f8646edfb5000153c693"},"exerciseKey":"0064be83-03d7-4e0c-a6e4-595b74a4ef3e","category":"QA","renderType":"md","title":"一百个囚犯和一盏灯","desc":"国王招来100个囚犯，对他们说：你们犯的是死罪，但我给你们一次求生的机会。15分钟以后，你们将被关进一个有100间隔离牢房的监狱里，每人一间牢房，都与外界隔绝，什么也听不见看不到，连时间都没法计算，无法获得外界的任何信息。\n\n这所监狱有一个院子，每天只少随机（注意是完全随机）打开一间牢房的门，让一个囚犯到院子里来放风。院子里有一盏灯，放风的囚犯可以控制它的开关，将它打开或是关闭。除囚犯之外，其他人都不会去碰开关。这盏灯会永远有充足的能源供应，灯泡和电路不会出故障。\n\n除了开关这盏灯，放风的囚犯放风时留下的任何其它痕迹都会在夜晚被清除干净（包括在灯上作的任何记号）。牢房是完全封闭的，院子里的灯光在牢房里看不到。只有放风到院子里的人才能看到。\n\n国王：好了现在我向你们提出一个要求，只要你们做到了，就可以全部获得释放：\n\n给你们15分钟商量你们的方案。15分钟以后，你们将被关进我刚才说的那个监狱，永远无法再交流，被关若干天后，你们中间如果任何一个人能够向我证明你们每个人都至少放风了一次，我就把你们放了，不然永远别想再出来。\n\n如果你们有谁现在可以告诉我这个方法，也就是能够证明你们每人至少放风一次的方法，我就放掉你们！\n\n其中一个囚犯想了几分钟，回答了这个问题，国王听后，如自己所说的把他们全部给放了。请问那个囚犯是用什么方法证明的？","options":null,"explanation":"100个囚犯商量选出一个囚犯作为计数员，普通囚犯每次出去，如果自己没有打开过灯，并且灯是灭的，则打开灯；其它情况均不操作。计数员每次出去，如果灯是亮的就自己计数一次，并把灯关掉，其它情况什么也不干。一直到计数员计数到100，则全部囚犯都出去过至少打过一次灯。\n\n再来细化化下每个角色的职责：\n\n* 计数员： 如果灯亮，计数一次，并关灯。如果灯灭，啥事不干。\n* 普通囚犯：如果自己没有开关灯，并且现在灯灭，就打开灯；如果自己以前开过灯或现在灯亮，则什么也不做。\n* 灯：能开、能关\n\n\n","level":3.5,"tagId":17}
{"_id":{"$oid":"6202f87f96435800016bba86"},"exerciseKey":"1934d168-5248-425b-9648-2c14f2b4f570","category":"QA","renderType":"md","title":"input上传文件可以同时选择多张吗？怎么设置？","desc":null,"options":null,"explanation":"可以，通过给input标签设置multiple属性。\n\n```html\n<input type=\"file\" name=\"files\" multiple/>\n```","level":1,"tagId":12}
{"_id":{"$oid":"6202f8825da68500018de785"},"exerciseKey":"3c969c35-6d25-4932-977e-d9ba31000ccd","category":"QA","renderType":"md","title":"【Promise第二题】下面代码的输出是什么？","desc":"```js\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  resolve('success')\n  console.log(2);\n});\npromise.then(() => {\n  console.log(3);\n});\nconsole.log(4);\n```","options":null,"explanation":"## 过程分析\n\n* 从上至下，先遇到`new Promise`，执行其中的同步代码1\n* 再遇到`resolve('success')`， 将promise的状态改为了resolved并且将值保存下来\n* 继续执行同步代码2\n* 跳出promise，往下执行，碰到`promise.then`这个微任务，将其加入微任务队列\n* 执行同步代码4\n* 本轮宏任务全部执行完毕，检查微任务队列，发现`promise.then`这个微任务且状态为resolved，执行它。\n\n## 结果\n\n```\n1 2 4 3\n```","level":1.5,"tagId":10}
{"_id":{"$oid":"6202f885432b160001841652"},"exerciseKey":"6a8dda85-ad38-4eec-86b5-dad87ad3c929","category":"QA","renderType":"md","title":"如何从html元素继承box-sizing？","desc":null,"options":null,"explanation":"在大多数情况下我们在设置元素的 border 和 padding 并不希望改变元素的 width,height值，这个时候我们就可以为该元素设置 `box-sizing:border-box;`。\n\n如果不希望每次都重写一遍，而是希望他是继承而来的，那么我们可以使用如下代码：\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n```\n\n这样的好处在于他不会覆盖其他组件的 box-sizing 值，又无需为每一个元素重复设置 box-sizing:border-box;","level":1,"tagId":11}
{"_id":{"$oid":"6202f88b3da49e0001c78bbc"},"exerciseKey":"fa6c1ad8-274c-4830-aee9-6799d6a7fdc1","category":"QA","renderType":"md","title":"【Promise第10题】下面代码的输出是什么？","desc":"```js\nPromise.resolve().then(() => {\n  console.log('promise1');\n  const timer2 = setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n});\nconst timer1 = setTimeout(() => {\n  console.log('timer1')\n  Promise.resolve().then(() => {\n    console.log('promise2')\n  })\n}, 0)\nconsole.log('start');\n\n```","options":null,"explanation":"## 过程分析\n\n* 刚开始整个脚本作为第一次宏任务来执行，我们将它标记为宏1，从上至下执行\n* 遇到Promise.resolve().then这个微任务，将then中的内容加入第一次的微任务队列标记为微1\n* 遇到定时器timer1，将它加入下一次宏任务的延迟列表，标记为宏2，等待执行(先不管里面是什么内容)\n* 执行宏1中的同步代码start\n* 第一次宏任务(宏1)执行完毕，检查第一次的微任务队列(微1)，发现有一个promise.then这个微任务需要执行\n* 执行打印出微1中同步代码promise1，然后发现定时器timer2，将它加入宏2的后面，标记为宏3\n* 第一次微任务队列(微1)执行完毕，执行第二次宏任务(宏2)，首先执行同步代码timer1\n* 然后遇到了promise2这个微任务，将它加入此次循环的微任务队列，标记为微2\n* 宏2中没有同步代码可执行了，查找本次循环的微任务队列(微2)，发现了promise2，执行它\n* 第二轮执行完毕，执行宏3，打印出timer2\n\n## 结果\n\n```\n'start'\n'promise1'\n'timer1'\n'promise2'\n'timer2'\n```","level":2.5,"tagId":10}
{"_id":{"$oid":"6202f87f432b160001841628"},"exerciseKey":"1b41e9cc-194a-4e0c-8bc5-17a83af9abad","category":"QA","renderType":"md","title":"【Promise第15题】下面代码的输出是什么？","desc":"```js\nPromise.resolve(1)\n  .then(res => {\n    console.log(res);\n    return 2;\n  })\n  .catch(err => {\n    return 3;\n  })\n  .then(res => {\n    console.log(res);\n  });\n```","options":null,"explanation":"## 解析\n\nPromise可以链式调用，不过promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般我们任务的链式调用一样return this。\n\n上面的输出结果之所以依次打印出1和2，那是因为resolve(1)之后走的是第一个then方法，并没有走catch里，所以第二个then中的res得到的实际上是第一个then的返回值。\n\n且return 2会被包装成resolve(2)。\n\n## 结果\n```\n1\n2\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f87f3ee9ba0001c503ab"},"exerciseKey":"1b7efa22-c54d-4dc9-a54e-7faa69f5b821","category":"QA","renderType":"md","title":"【Promise第六题】下面代码的输出是什么？","desc":"```js\nconst fn = () =>\n  new Promise((resolve, reject) => {\n    console.log(1);\n    resolve(\"success\");\n  });\nconsole.log(\"start\");\nfn().then(res => {\n  console.log(res);\n});\n```","options":null,"explanation":"## 解析\n\nstart就在1之前打印出来了，因为fn函数是之后执行的。\n\n注意：不要看到new Promise()，就以为执行它的第一个参数函数，我们还需要注意它是不是被包裹在函数当中，如果是的话，只有在函数调用的时候才会执行。\n\n## 答案\n\n```\n\"start\"\n1\n\"success\"\n```","level":2,"tagId":10}
{"_id":{"$oid":"6202f880e13d62000144b4b0"},"exerciseKey":"23ad38a6-12b2-4969-8dac-bfcfb00834d4","category":"QA","renderType":"md","title":"HTTP 报文结构是怎样的？","desc":null,"options":null,"explanation":"对于 TCP 而言，在传输的时候分为两个部分:TCP头和数据部分。\n\n而 HTTP 类似，也是header + body的结构，具体而言:\n\n> 起始行 + 头部 + 空行 + 实体\n\n由于 http 请求报文和响应报文是有一定区别，因此我们分开介绍。\n\n## 起始行\n\n对于请求报文来说，起始行类似下面这样:\n\n> GET /home HTTP/1.1\n\n也就是方法 + 路径 + http版本。\n\n对于响应报文来说，起始行一般长这个样:\n\n> HTTP/1.1 200 OK\n\n响应报文的起始行也叫做状态行，由http版本、状态码和原因三部分组成。\n\n值得注意的是，在起始行中，每两个部分之间用空格隔开，最后一个部分后面应该接一个换行，严格遵循ABNF语法规范。\n\n## 头部\n\n展示一下请求头和响应头在报文中的位置:\n\n![请求报文](https://ae03.alicdn.com/kf/Hd791e1a2e4794bf2be29164cc54d8079p.png)\n\n![响应报文](https://ae02.alicdn.com/kf/Hcd55f12388154da899ed55a4b275b551N.png)\n\n不管是请求头还是响应头，其中的字段是相当多的，而且牵扯到http非常多的特性，这里就不一一列举的，重点看看这些头部字段的格式：\n\n* 字段名不区分大小写\n* 字段名不允许出现空格，不可以出现下划线_\n* 字段名后面必须紧接着冒号 **:**\n\n## 空行\n\n很重要，用来区分开头部和实体。\n\n如果说在头部中间故意加一个空行，那么空行后的内容全部被视为实体。\n\n## 实体\n\n就是具体的数据了，也就是body部分。请求报文对应请求体, 响应报文对应响应体。\n\n","level":1.5,"tagId":16}
{"_id":{"$oid":"6202f882e13d62000144b4bf"},"exerciseKey":"32b06302-58e6-44df-acb7-6c975dcc2957","category":"QA","renderType":"md","title":"【Promise第36题】下面代码的输出是什么？","desc":"```js\nasync function async1 () {\n  await async2();\n  console.log('async1');\n  return 'async1 success'\n}\nasync function async2 () {\n  return new Promise((resolve, reject) => {\n    console.log('async2')\n    reject('error')\n  })\n}\nasync1().then(res => console.log(res))\n```","options":null,"explanation":"```\n'async2'\nUncaught (in promise) error\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f8839329e700011c8d26"},"exerciseKey":"453b0ac6-f8a2-44ed-af3f-eda8eaa0a70d","category":"QA","renderType":"md","title":"mobx 和 redux 有什么区别？","desc":null,"options":null,"explanation":"## 共同点\n\n* 为了解决状态管理混乱、无法有效同步的问题，统一维护管理应用状态\n* 某一状态只有一个可信数据来源（通常命名为store，指状态容器）\n* 操作更新状态方式统一，并且可控（通常以action方式提供更新状态的途径）\n* 支持将store与React组件连接，如`react-redux`，`mobx-react`\n\n## 区别\n\nRedux更多的是遵循Flux模式的一种实现，是一个 JavaScript 库，它关注点主要是以下几方面∶\n\n* Action∶ 一个JavaScript对象，描述动作相关信息，主要包含type属性和payload属性∶\n* Reducer∶ 定义应用状态如何响应不同动作（action），如何更新状态;\n* Store∶ 管理action和reducer及其关系的对象，主要提供以下功能∶\n\t* 维护应用状态并支持访问状态(getState());\n\t* 支持监听action的分发，更新状态(dispatch(action)); \n    * 支持订阅store的变更(subscribe(listener));\n* 异步流∶ 由于Redux所有对store状态的变更，都应该通过action触发，异步任务（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入React组件中，就需要使用其他框架配合管理异步任务流程，如redux-thunk，redux-saga等;\n\nMobx是一个透明函数响应式编程的状态管理库，它使得状态管理简单可伸缩∶\n\n* Action∶定义改变状态的动作函数，包括如何变更状态;\n* Store∶ 集中管理模块状态（State）和动作(action)\n* Derivation（衍生）∶ 从应用状态中派生而出，且没有任何其他影响的数据\n\n## 对比总结\n\n* redux将数据保存在单一的store中，mobx将数据保存在分散的多个store中\n* redux使用`plain object`保存数据，需要手动处理变化后的操作;mobx适用`observable`保存数据，数据变化后自动处理响应的操作\n* redux使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数;mobx中的状态是可变的，可以直接对其进行修改\n* mobx相对来说比较简单，在其中有很多的抽象，mobx更多的使用面向对象的编程思维;redux会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用\n* mobx中有更多的抽象和封装，调试会比较困难，同时结果也难以预测;而redux提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加的容易","level":2.5,"tagId":13}
{"_id":{"$oid":"6202f884037ab600014f51f3"},"exerciseKey":"4f3611dc-0446-4d49-95ae-1798d1194c9b","category":"QA","renderType":"md","title":"推理问题（二）","desc":"赵女士买了一些水果和小食品准备去看望一个朋友，谁知，这些水果和小食品被他的儿子们偷吃了，但她不知道是哪个儿子。为此，赵女士非常生气，就盘问4个儿子谁偷吃了水果和小食品。老大说道：“是老二吃的。”老二说道：“是老四偷吃的。”老三说道：“反正我没有偷吃。”老四说道：“老二在说谎。”这4个儿子中只有一个人说了实话，其他的3个都在撒谎。那么，到底是谁偷吃了这些水果和小食品？\n","options":null,"explanation":"是老三偷吃了水果和小食品，只有老四说了实话。\n\n用假设法分别假设老大、老二、老三、老四都说了实话，看是否与题意矛盾，就可以得出答案。","level":1,"tagId":17}
{"_id":{"$oid":"6202f8876cca6000019b6f91"},"exerciseKey":"8d97f05b-37a5-4a58-8dff-0574918ccd67","category":"QA","renderType":"md","title":"useEffect 与 useLayoutEffect 有什么区别？","desc":null,"options":null,"explanation":"## 共同点\n\n* 运用效果： useEffect 与 useLayoutEffect 两者都是用于处理副作用，这些副作用包括改变 DOM、设置订阅、操作定时器等。在函数组件内部操作副作用是不被允许的，所以需要使用这两个函数去处理。\n* 使用方式： useEffect 与 useLayoutEffect 两者底层的函数签名是完全一致的，都是调用的 mountEffectImpl方法，在使用上也没什么差异，基本可以直接替换。\n\n## 不同点\n\n* 使用场景： useEffect 在 React 的渲染过程中是被异步调用的，用于绝大多数场景；而 useLayoutEffect 会在所有的 DOM 变更之后同步调用，主要用于处理 DOM 操作、调整样式、避免页面闪烁等问题。也正因为是同步处理，所以需要避免在 useLayoutEffect 做计算量较大的耗时任务从而造成阻塞。\n* 使用效果： useEffect是按照顺序执行代码的，改变屏幕像素之后执行（先渲染，后改变DOM），当改变屏幕内容时可能会产生闪烁；useLayoutEffect是改变屏幕像素之前就执行了（会推迟页面显示的事件，先改变DOM后渲染），不会产生闪烁。useLayoutEffect总是比useEffect先执行。\n\n在未来的趋势上，两个 API 是会长期共存的，暂时没有删减合并的计划，需要开发者根据场景去自行选择。React 团队的建议非常实用，如果实在分不清，先用 useEffect，一般问题不大；如果页面有异常，再直接替换为 useLayoutEffect 即可。","level":2.5,"tagId":13}
{"_id":{"$oid":"6202f887e13d62000144b4e1"},"exerciseKey":"9b617ec3-5346-4f82-9fcf-d502817b8c2d","category":"QA","renderType":"md","title":"a == 1 && a == 2 && a == 3 可能为 true 吗？","desc":null,"options":null,"explanation":"## 第一种方案\n\n把 `a` 定义为一个对象，通过重写toString方法。根据规则，== 左边为对象类型，右边为Number，在比较时会调用 `a` 的toString方法，所以每次调用时都将返回值加1。\n\n```js\nconst a = {\n    value: 1,\n    toString: function () {\n        return a.value++\n    }\n}\nconsole.log(a == 1 && a == 2 && a == 3) // true\n```\n\n## 第二种方案\n\n用相同的方法重写valueOf方法。\n\n\n","level":2,"tagId":26}
{"_id":{"$oid":"6202f888545f1e00019b5154"},"exerciseKey":"a7e1aeb6-aaf9-43fe-92ac-fd574fb60a96","category":"QA","renderType":"md","title":"使用input标签上传图片时，怎样触发默认拍照功能？","desc":null,"options":null,"explanation":"capture 属性用于指定文件上传控件中媒体拍摄的方式。\n\n\n可选值：\n* user 前置\n* environment 后置\n* camera 相机\n* camcorder 摄像机\n* microphone 录音\n\n```html\n<input type='file' accept='image/*;' capture='camera'>\n```","level":1,"tagId":12}
{"_id":{"$oid":"6202f8807a2c1700014b48c5"},"exerciseKey":"1f3906ee-a60e-4d11-abd6-be582a3cc709","category":"QA","renderType":"md","title":"如何理解 HTTP 代理？","desc":null,"options":null,"explanation":"我们知道在 HTTP 是基于`请求-响应`模型的协议，一般由客户端发请求，服务器来进行响应。\n\n当然，也有特殊情况，就是代理服务器的情况。引入代理之后，作为代理的服务器相当于一个中间人的角色，对于客户端而言，表现为服务器进行响应；而对于源服务器，表现为客户端发起请求，具有`双重身份`。\n\n那代理服务器到底是用来做什么的呢？\n\n### 功能\n\n* `负载均衡`。客户端的请求只会先到达代理服务器，后面到底有多少源服务器，IP 都是多少，客户端是不知道的。因此，这个代理服务器可以拿到这个请求之后，可以通过特定的算法分发给不同的源服务器，让各台源服务器的负载尽量平均。当然，这样的算法有很多，包括`随机算法`、`轮询`、`一致性hash`、`LRU``(最近最少使用)`等等，不过这些算法并不是本文的重点，大家有兴趣自己可以研究一下。\n* `保障安全`。利用`心跳`机制监控后台的服务器，一旦发现故障机就将其踢出集群。并且对于上下行的数据进行过滤，对非法 IP 限流，这些都是代理服务器的工作。\n* `缓存代理`。将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得而不用到源服务器那里。下一节详细拆解。\n\n### 相关头部字段\n\n#### Via\n\n代理服务器需要标明自己的身份，在 HTTP 传输中留下自己的痕迹，怎么办呢？\n\n通过`Via`字段来记录。举个例子，现在中间有两台代理服务器，在客户端发送请求后会经历这样一个过程:\n\n```\n客户端 -> 代理1 -> 代理2 -> 源服务器\n```\n\n在源服务器收到请求后，会在`请求头`拿到这个字段:\n\n```\nVia: proxy_server1, proxy_server2\n```\n\n而源服务器响应时，最终在客户端会拿到这样的`响应头`:\n\n```\nVia: proxy_server2, proxy_server1\n```\n\n可以看到，`Via`中代理的顺序即为在 HTTP 传输中报文传达的顺序。\n\n#### X-Forwarded-For\n\n字面意思就是`为谁转发`, 它记录的是`请求方`的`IP`地址(注意，和`Via`区分开，`X-Forwarded-For`记录的是请求方这一个IP)。\n\n#### X-Real-IP\n\n是一种获取用户真实 IP 的字段，不管中间经过多少代理，这个字段始终记录最初的客户端的IP。\n\n相应的，还有`X-Forwarded-Host`和`X-Forwarded-Proto`，分别记录`客户端`(注意哦，不包括代理)的`域名`和`协议名`。\n\n### X-Forwarded-For产生的问题\n\n前面可以看到，`X-Forwarded-For`这个字段记录的是请求方的 IP，这意味着每经过一个不同的代理，这个字段的名字都要变，从`客户端`到`代理1`，这个字段是客户端的 IP，从`代理1`到`代理2`，这个字段就变为了代理1的 IP。\n\n但是这会产生两个问题:\n\n* 意味着代理必须解析 HTTP 请求头，然后修改，比直接转发数据性能下降。\n\n* 在 HTTPS 通信加密的过程中，原始报文是不允许修改的。\n\n由此产生了`代理协议`，一般使用明文版本，只需要在 HTTP 请求行上面加上这样格式的文本即可:\n\n```\n// PROXY + TCP4/TCP6 + 请求方地址 + 接收方地址 + 请求端口 + 接收端口\nPROXY TCP4 1 2 1111 2222\nGET / HTTP/1\n...\n```\n\n这样就可以解决`X-Forwarded-For`带来的问题了。","level":2.5,"tagId":16}
{"_id":{"$oid":"6202f88096435800016bba8f"},"exerciseKey":"2476ee50-e484-4416-88a7-4c506f84de9a","category":"QA","renderType":"md","title":"Redux中的connect有什么作用？","desc":null,"options":null,"explanation":"connect负责连接React和Redux\n\n## 获取state\nconnect 通过 context获取 Provider 中的 store，通过 store.getState() 获取整个store tree 上所有state\n\n## 包装原组件\n\n将state和action通过props的方式传入到原组件内部 `wrapWithConnect` 返回—个 `ReactComponent` 对象 Connect，Connect重新 render 外部传入的原组件 `WrappedComponent` ，并把 connect 中传入的 `mapStateToProps`，`mapDispatchToProps`与组件上原有的 props 合并后，通过属性的方式传给 `WrappedComponent`\n\n## 监听store tree变化\n\nconnect缓存了`store tree`中state的状态，通过当前state状态 和变更前 state 状态进行比较，从而确定是否调用 `this.setState()`方法触发 Connect 及其子组件的重新渲染","level":3,"tagId":13}
{"_id":{"$oid":"6202f88a6edfb5000153c75b"},"exerciseKey":"e0e3dbcd-2e8a-4756-9241-bbb23af9c2e8","category":"QA","renderType":"md","title":"【Promise第18题】下面代码的输出是什么？","desc":"```js\nPromise.resolve().then(() => {\n  return new Error('error!!!')\n}).then(res => {\n  console.log(\"then: \", res)\n}).catch(err => {\n  console.log(\"catch: \", err)\n})\n```","options":null,"explanation":"## 解析\n\n返回任意一个非 promise 的值都会被包裹成 promise 对象，因此这里的`return new Error('error!!!')`也被包裹成了`return Promise.resolve(new Error('error!!!'))`。\n\n## 结果\n```\n\"then: \" \"Error: error!!!\"\n```\n\n此题中，当然如果想抛出一个错误的话，可以用下面的任意一种：\n\n```js\nreturn Promise.reject(new Error('error!!!'));\n// or\nthrow new Error('error!!!')\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f87e998ca50001a9b247"},"exerciseKey":"023f27d0-f90b-446d-bd6c-293e95f9c9b8","category":"QA","renderType":"md","title":"【Promise第21题】下面代码的输出是什么？","desc":"```js\nPromise.reject('err!!!')\n  .then((res) => {\n    console.log('success', res)\n  }, (err) => {\n    console.log('error', err)\n  }).catch(err => {\n    console.log('catch', err)\n  })\n\n```","options":null,"explanation":"## 解析\n\n.then函数中的两个参数。\n\n第一个参数是用来处理Promise成功的函数，第二个则是处理失败的函数。\n\n也就是说Promise.resolve('1')的值会进入成功的函数，Promise.reject('2')的值会进入失败的函数。\n\n## 答案\n```\n'error' 'error!!!'\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f8844690ae000144b012"},"exerciseKey":"596630fb-95e6-43c4-a1cc-48683233ae76","category":"QA","renderType":"md","title":"说说你对cookie的理解","desc":null,"options":null,"explanation":"### Cookie 简介\n\nHTTP 是一个无状态的协议，每次 http 请求都是独立、无关的，默认不需要保留状态信息。但有时候需要保存一些状态，怎么办呢？\n \nHTTP 为此引入了 Cookie。Cookie 本质上就是浏览器里面存储的一个很小的文本文件，内部以键值对的方式来存储(在chrome开发者面板的Application这一栏可以看到)。向同一个域名下发送请求，都会携带相同的 Cookie，服务器拿到 Cookie 进行解析，便能拿到客户端的状态。而服务端可以通过响应头中的`Set-Cookie`字段来对客户端写入`Cookie`。举例如下:\n\n```\n// 请求头\nCookie: a=xxx;b=xxx\n// 响应头\nSet-Cookie: a=xxx\nset-Cookie: b=xxx\n```\n\n### Cookie 属性\n\n#### 生存周期\n\nCookie 的有效期可以通过`Expires`和`Max-Age`两个属性来设置。\n\n*   `Expires`即`过期时间`\n*   `Max-Age`用的是一段时间间隔，单位是秒，从浏览器收到报文开始计算。\n\n若 Cookie 过期，则这个 Cookie 会被删除，并不会发送给服务端。\n\n#### 作用域\n\n关于作用域也有两个属性: `Domain`和`path`, 给 `Cookie` 绑定了域名和路径，在发送请求之前，发现域名或者路径和这两个属性不匹配，那么就不会带上 Cookie。值得注意的是，对于路径来说，`/`表示域名下的任意路径都允许使用 Cookie。\n\n#### 安全相关\n\n如果带上`Secure`，说明只能通过 HTTPS 传输 cookie。\n\n如果 cookie 字段带上`HttpOnly`，那么说明只能通过 HTTP 协议传输，不能通过 JS 访问，这也是预防 XSS 攻击的重要手段。\n\n相应的，对于 CSRF 攻击的预防，也有`SameSite`属性。\n\n`SameSite`可以设置为三个值，`Strict`、`Lax`和`None`。\n\n* 在`Strict`模式下，浏览器完全禁止第三方请求携带Cookie。比如请求`sanyuan.com`网站只能在`sanyuan.com`域名当中请求才能携带 Cookie，在其他网站请求都不能。\n* 在`Lax`模式，就宽松一点了，但是只能在 `get 方法提交表单`况或者`a 标签发送 get 请求`的情况下可以携带 Cookie，其他情况均不能。\n* 在`None`模式下，也就是默认模式，请求会自动携带上 Cookie。\n\n### Cookie 的缺点\n\n* 容量缺陷。Cookie 的体积上限只有`4KB`，只能用来存储少量的信息。\n* 性能缺陷。Cookie 紧跟域名，不管域名下面的某一个地址需不需要这个 Cookie ，请求都会携带上完整的 Cookie，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。但可以通过`Domain`和`Path`指定`作用域`来解决。\n* 安全缺陷。由于 Cookie 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie 的有效期内重新发送给服务器，这是相当危险的。另外，在`HttpOnly`为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。\n\n","level":1.5,"tagId":16}
{"_id":{"$oid":"6202f885cabbcc000101e8a9"},"exerciseKey":"70dbc6db-7714-4ba9-9913-cf8cc2a444f7","category":"Choice","renderType":"md","title":"在点击p标签时，会输出什么？\n","desc":"```html\n<div onclick=\"console.log('div')\">\n  <p onclick=\"console.log('p')\">\n    Click here!\n  </p>\n</div>\n```","options":"{\"options\":[\"p div\",\"div p\",\"p\",\"div\"],\"isMulti\":false,\"answer\":[0]}","explanation":"在事件传播过程中，有3个阶段：**捕获**、**目标**和**冒泡**。\n\n默认情况下，事件处理程序在冒泡阶段执行（除非将 `useCapture` 设置为 `true`），它从最深的嵌套元素向外。","level":1,"tagId":32}
{"_id":{"$oid":"6202f8895da68500018de7a9"},"exerciseKey":"d0625555-2b53-4edc-bf3f-2721eaf7af55","category":"QA","renderType":"md","title":"解释下如下代码的意图：Array.prototype.slice.apply(arguments)","desc":null,"options":null,"explanation":"arguments 为类数组对象，并不是真正的数组。\n\nslice可以实现数组的浅拷贝。\n\n由于 arguments不是真正的数组，所以没有slice方法，通过apply可以调用数组对象的slice方法，从而将arguments 类数组转换为数组。","level":1,"tagId":10}
{"_id":{"$oid":"6202f88a9329e700011c8d54"},"exerciseKey":"db6857d7-1559-4abe-816d-545b9be4e05e","category":"QA","renderType":"md","title":"【Promise第四题】下面代码的输出是什么？","desc":"```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n  resolve('resolve1')\n})\nconst promise2 = promise1.then(res => {\n  console.log(res)\n})\nconsole.log('1', promise1);\nconsole.log('2', promise2);\n```","options":null,"explanation":"## 过程分析\n\n* 从上至下，先遇到new Promise，执行该构造函数中的代码promise1\n* 碰到resolve函数, 将promise1的状态改变为resolved, 并将结果保存下来\n* 碰到promise1.then这个微任务，将它放入微任务队列\n* promise2是一个新的状态为pending的Promise\n* 执行同步代码1， 同时打印出promise1的状态是resolved\n* 执行同步代码2，同时打印出promise2的状态是pending\n* 宏任务执行完毕，查找微任务队列，发现promise1.then这个微任务且状态为resolved，执行它。\n\n## 结果\n\n```\n'promise1'\n'1' Promise{<resolved>: 'resolve1'}\n'2' Promise{<pending>}\n'resolve1'\n```","level":2,"tagId":10}
{"_id":{"$oid":"6202f881d74c3200013dcb0f"},"exerciseKey":"30dd1b36-496d-4a65-a3e7-75be59b36570","category":"QA","renderType":"md","title":"【Promise第17题】下面代码的输出是什么？","desc":"```js\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    console.log('timer')\n    resolve('success')\n  }, 1000)\n})\nconst start = Date.now();\npromise.then(res => {\n  console.log(res, Date.now() - start)\n})\npromise.then(res => {\n  console.log(res, Date.now() - start)\n})\n\n```","options":null,"explanation":"## 解析\n\n如果执行足够快的话，也可能两个都是1001。\n\nPromise 的 .then 或者 .catch 可以被调用多次，但这里 Promise 构造函数只执行一次。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值。\n\n## 结果\n\n```\n'timer'\n'success' 1001\n'success' 1002\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f8833da49e0001c78b87"},"exerciseKey":"44ee4b87-a54c-4bcf-89c3-0467c6170dff","category":"QA","renderType":"md","title":"如何迁移仓库，同时保留原有的提交记录和分支？","desc":null,"options":null,"explanation":"```\ngit clone 仓库地址\ncd 项目\ngit push --mirror 新的仓库地址\n```\n","level":1,"tagId":29}
{"_id":{"$oid":"6202f884037ab600014f51f9"},"exerciseKey":"584f7b53-5e4b-48b9-ad7b-ae4789647ada","category":"QA","renderType":"md","title":"使用Promise封装一个异步加载图片的方法","desc":null,"options":null,"explanation":"这个比较简单，只需要在图片的onload函数中，使用resolve返回一下就可以了。\n\n```js\nfunction loadImg(url) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = function() {\n      resolve(img);\n    };\n    img.onerror = function() {\n    \treject(new Error('Could not load image at' + url));\n    };\n    img.src = url;\n  });\n\n```","level":3,"tagId":26}
{"_id":{"$oid":"6202f88543537b00011bc01d"},"exerciseKey":"59b71384-0a0a-4d2e-a63a-f4fb75650b60","category":"QA","renderType":"md","title":"【Promise第37题】下面代码的输出是什么？","desc":"```js\nasync function async1 () {\n  try {\n    await Promise.reject('error!!!')\n  } catch(e) {\n    console.log(e)\n  }\n  console.log('async1');\n  return Promise.resolve('async1 success')\n}\nasync1().then(res => console.log(res))\nconsole.log('script start')\n\n```","options":null,"explanation":"```\n'script start'\n'error!!!'\n'async1'\n'async1 success'\n\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f887d74c3200013dcb3f"},"exerciseKey":"a1902422-cbf4-4551-9f88-891eb1777e8d","category":"QA","renderType":"md","title":"【Promise第33题】下面代码的输出是什么？","desc":"```js\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n    resolve('promise resolve')\n  })\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => {\n  console.log(res)\n})\nnew Promise(resolve => {\n  console.log('promise2')\n  setTimeout(() => {\n    console.log('timer')\n  })\n})\n\n```","options":null,"explanation":"## 解析\n\n这道题也不难，不过有一点需要注意的，在async1中的`new Promise` resovle的值，和`async1().then()`里的值是没有关系的，很多小伙伴可能看到`resovle('promise resolve')`就会误以为是`async1().then()`中的返回值。\n\n## 结果\n\n```\n'script start'\n'async1 start'\n'promise1'\n'promise2'\n'async1 success'\n'async1 end'\n'timer'\n```","level":2.5,"tagId":10}
{"_id":{"$oid":"6202f889e13d62000144b4f0"},"exerciseKey":"d131bd64-4531-4903-bb82-76aa277c7cb8","category":"QA","renderType":"md","title":"圆环转圈问题","desc":"两个圆环，半径分别是1和2，小圆在大圆内部绕大圆圆周一周，问小圆自身转了几周？如果在大圆的外部，小圆自身转几周呢？\n","options":null,"explanation":"小圆所转动的路程便是小圆圆心走过的距离\n\n所以在大圆外部转动，小圆圆心饶半径为3的大圆心转动，走了三圈\n\n所以在大圆内部转动，小圆圆心饶半径为1的大圆心转动，走了一圈","level":2,"tagId":17}
{"_id":{"$oid":"6202f889432b160001841674"},"exerciseKey":"d9a36bb7-972c-4afb-abb6-fcbaa30612cf","category":"QA","renderType":"md","title":"【Promise第11题】下面代码的输出是什么？","desc":"```js\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  }, 1000)\n})\nconst promise2 = promise1.then(() => {\n  throw new Error('error!!!')\n})\nconsole.log('promise1', promise1)\nconsole.log('promise2', promise2)\nsetTimeout(() => {\n  console.log('promise1', promise1)\n  console.log('promise2', promise2)\n}, 2000)\n```","options":null,"explanation":"## 过程分析\n\n* 从上至下，先执行第一个new Promise中的函数，碰到setTimeout将它加入下一个宏任务列表\n* 跳出new Promise，碰到promise1.then这个微任务，但其状态还是为pending，这里理解为先不执行\n* promise2是一个新的状态为pending的Promise\n* 执行同步代码console.log('promise1')，且打印出的promise1的状态为pending\n* 执行同步代码console.log('promise2')，且打印出的promise2的状态为pending\n* 碰到第二个定时器，将其放入下一个宏任务列表\n* 第一轮宏任务执行结束，并且没有微任务需要执行，因此执行第二轮宏任务\n* 先执行第一个定时器里的内容，将promise1的状态改为resolved且保存结果并将之前的promise1.then推入微任务队列\n* 该定时器中没有其它的同步代码可执行，因此执行本轮的微任务队列，也就是promise1.then，它抛出了一个错误，且将promise2的状态设置为了rejected\n* 第一个定时器执行完毕，开始执行第二个定时器中的内容\n* 打印出'promise1'，且此时promise1的状态为resolved\n* 打印出'promise2'，且此时promise2的状态为rejected\n\n## 结果\n\n```\n'promise1' Promise{<pending>}\n'promise2' Promise{<pending>}\ntest5.html:102 Uncaught (in promise) Error: error!!! at test.html:102\n'promise1' Promise{<resolved>: \"success\"}\n'promise2' Promise{<rejected>: Error: error!!!}\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f880e13d62000144b4b3"},"exerciseKey":"257565c9-6179-4faa-a592-168f6269cc99","category":"QA","renderType":"md","title":"Math.ceil()、Math.round()、Math.floor()三者的区别是什么？","desc":null,"options":null,"explanation":"* Math.ceil()上取整\n* Math.round() 四舍五入\n* Math.floor()下取整\n","level":1,"tagId":10}
{"_id":{"$oid":"6202f88196435800016bba95"},"exerciseKey":"2b7bc012-86d2-405a-8a26-778f5f1b6dfe","category":"QA","renderType":"md","title":"【Promise第28题】下面代码的输出是什么？","desc":"```js\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nasync1();\nconsole.log('start')\n```","options":null,"explanation":"## 解析\n\n* 首先一进来是创建了两个函数的，我们先不看函数的创建位置，而是看它的调用位置\n* 发现async1函数被调用了，然后去看看调用的内容\n* 执行函数中的同步代码async1 start，之后碰到了await，它会阻塞async1后面代码的执行，因此会先去执行async2中的同步代码async2，然后跳出async1\n* 跳出async1函数后，执行同步代码start\n* 在一轮宏任务全部执行完之后，再来执行刚刚await后面的内容async1 end。\n\n在这里，你可以理解为「紧跟着await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中」。\n\n## 结果\n```\n'async1 start'\n'async2'\n'start'\n'async1 end'\n```\n","level":3,"tagId":10}
{"_id":{"$oid":"6202f887d74c3200013dcb38"},"exerciseKey":"9656ede7-6815-4a00-9df3-60c0219e4383","category":"QA","renderType":"md","title":"【Promise第22题】下面代码的输出是什么？","desc":"```js\nPromise.resolve()\n  .then(function success (res) {\n    throw new Error('error!!!')\n  }, function fail1 (err) {\n    console.log('fail1', err)\n  }).catch(function fail2 (err) {\n    console.log('fail2', err)\n  })\n```","options":null,"explanation":"## 解析\n\n由于Promise调用的是resolve()，因此.then()执行的应该是success()函数，可是success()函数抛出的是一个错误，它会被后面的catch()给捕获到，而不是被fail1函数捕获。\n\n## 结果\n\n```\nfail2 Error: error!!!\n    at success\n```","level":2,"tagId":10}
{"_id":{"$oid":"6202f88a545f1e00019b515e"},"exerciseKey":"dec780c4-3610-4673-b12f-add388ceec10","category":"QA","renderType":"md","title":"【Promise第40题】下面代码的输出是什么？","desc":"```js\nconst p1 = new Promise((resolve) => {\n  setTimeout(() => {\n    resolve('resolve3');\n    console.log('timer1')\n  }, 0)\n  resolve('resovle1');\n  resolve('resolve2');\n}).then(res => {\n  console.log(res)\n  setTimeout(() => {\n    console.log(p1)\n  }, 1000)\n}).finally(res => {\n  console.log('finally', res)\n})\n\n```","options":null,"explanation":"## 解析\n\n* Promise的状态一旦改变就无法改变\n* finally不管Promise的状态是`resolved`还是`rejected`都会执行，且它的回调函数是接收不到Promise的结果的，所以finally()中的res是一个迷惑项。\n* 最后一个定时器打印出的p1其实是`.finally`的返回值，我们知道`.finally`的返回值如果在没有抛出错误的情况下默认会是上一个Promise的返回值，而这道题中`.finally`上一个Promise是`.then()`，但是这个`.then()`并没有返回值，所以p1打印出来的Promise的值会是`undefined`，如果你在定时器的下面加上一个`return 1`，则值就会变成1。\n\n## 结果\n```\n'resolve1'\n'finally' undefined\n'timer1'\nPromise{<resolved>: undefined}\n\n```","level":4,"tagId":10}
{"_id":{"$oid":"6202f88ae13d62000144b4f9"},"exerciseKey":"e928aade-65d6-438d-be11-8250f7784f4d","category":"QA","renderType":"md","title":"怎么实现一个扫描二维码登录PC网站的需求？","desc":null,"options":null,"explanation":"## 二维码登录本质\n\n二维码登录本质上也是一种登录认证方式。既然是登录认证，要做的也就两件事情：\n\n* 告诉系统我是谁\n* 向系统证明我是谁\n\n## 扫描二维码登录的一般步骤\n\n* 扫码前，手机端应用是已登录状态，PC端显示一个二维码，等待扫描\n* 手机端打开应用，扫描PC端的二维码，扫描后，会提示\"已扫描，请在手机端点击确认\"\n* 用户在手机端点击确认，确认后PC端登录就成功了\n\n## 具体流程\n\n### 生成二维码\n\n* PC端向服务端发起请求，告诉服务端，我要生成用户登录的二维码，并且把PC端设备信息也传递给服务端\n* 服务端收到请求后，它生成二维码ID，并将二维码ID与PC端设备信息进行绑定\n* 然后把二维码ID返回给PC端\n* PC端收到二维码ID后，生成二维码(二维码中肯定包含了ID)\n* 为了及时知道二维码的状态，客户端在展现二维码后，PC端不断的轮询服务端，比如每隔一秒就轮询一次，请求服务端告诉当前二维码的状态及相关信息，或者直接使用websocket，等待在服务端完成登录后进行通知\n\n### 扫描二维码\n\n* 用户用手机去扫描PC端的二维码，通过二维码内容取到其中的二维码ID\n* 再调用服务端API将移动端的身份信息与二维码ID一起发送给服务端\n* 服务端接收到后，它可以将身份信息与二维码ID进行绑定，生成临时token。然后返回给手机端\n* 因为PC端一直在轮询二维码状态，所以这时候二维码状态发生了改变，它就可以在界面上把二维码状态更新为已扫描\n\n### 状态确认\n\n* 手机端在接收到临时token后会弹出确认登录界面，用户点击确认时，手机端携带临时token用来调用服务端的接口，告诉服务端，我已经确认\n* 服务端收到确认后，根据二维码ID绑定的设备信息与账号信息，生成用户PC端登录的token\n* 这时候PC端的轮询接口，它就可以得知二维码的状态已经变成了\"已确认\"。并且从服务端可以获取到用户登录的token\n* 到这里，登录就成功了，后端PC端就可以用token去访问服务端的资源了\n","level":3.5,"tagId":10}
{"_id":{"$oid":"6202f88096435800016bba93"},"exerciseKey":"26bf47fe-07e4-4014-b3ea-8a745f70d718","category":"QA","renderType":"md","title":"【Promise第35题】下面代码的输出是什么？","desc":"```js\nasync function testSometing() {\n  console.log(\"执行testSometing\");\n  return \"testSometing\";\n}\n\nasync function testAsync() {\n  console.log(\"执行testAsync\");\n  return Promise.resolve(\"hello async\");\n}\n\nasync function test() {\n  console.log(\"test start...\");\n  const v1 = await testSometing();\n  console.log(v1);\n  const v2 = await testAsync();\n  console.log(v2);\n  console.log(v1, v2);\n}\n\ntest();\n\nvar promise = new Promise(resolve => {\n  console.log(\"promise start...\");\n  resolve(\"promise\");\n});\npromise.then(val => console.log(val));\n\nconsole.log(\"test end...\");\n\n```","options":null,"explanation":"这儿直接给出答案：\n\n```\n'test start...'\n'执行testSometing'\n'promise start...'\n'test end...'\n'testSometing'\n'执行testAsync'\n'promise'\n'hello async'\n'testSometing' 'hello async'\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f8809329e700011c8d1a"},"exerciseKey":"2975e074-7f61-4de9-ab07-94ca505493bc","category":"QA","renderType":"md","title":"拿苹果问题","desc":"桌上有100个苹果，你和另一个人一起拿，一人一次，每次拿的数量大于等于1小于等于5，问：如何拿能保证最后一个苹果由你来拿？\n","options":null,"explanation":"分析：如果要保证拿最后一个，那么就得保证拿到第94个，以此类推，要拿第94个，就要保证拿到第88个、82、76、70...最后只要保证你拿到第四个就行了。\n\n答案：只需要你先拿，第一次拿4个，以后看对方拿的个数，根据对方拿的个数，保证每轮对方和你拿的加起来是6就行了，其实就是保证你拿到4，还要拿到10,16...直到94","level":3,"tagId":17}
{"_id":{"$oid":"6202f8819329e700011c8d20"},"exerciseKey":"321f6c36-eff4-4fc4-8a86-c989bb1a2779","category":"QA","renderType":"md","title":"React 中怎么实现状态自动保存（KeepAlive）？","desc":"","options":null,"explanation":"## 什么是状态保存？\n\n假设有下述场景：\n\n移动端中，用户访问了一个列表页，上拉浏览列表页的过程中，随着滚动高度逐渐增加，数据也将采用触底分页加载的形式逐步增加，列表页浏览到某个位置，用户看到了感兴趣的项目，点击查看其详情，进入详情页，从详情页退回列表页时，需要停留在离开列表页时的浏览位置上\n\n类似的数据或场景还有已填写但未提交的表单、管理系统中可切换和可关闭的功能标签等，这类数据随着用户交互逐渐变化或增长，这里理解为状态，在交互过程中，因为某些原因需要临时离开交互场景，则需要对状态进行保存\n\n在 React 中，我们通常会使用路由去管理不同的页面，而在切换页面时，路由将会卸载掉未匹配的页面组件，所以上述列表页例子中，当用户从详情页退回列表页时，会回到列表页顶部，因为列表页组件被路由卸载后重建了，状态被丢失。\n\n## 如何实现 React 中的状态保存\n\n在 Vue 中，我们可以非常便捷地通过 <keep-alive> 标签实现状态的保存，该标签会缓存不活动的组件实例，而不是销毁它们\n\n而在 React 中并没有这个功能，曾经有人在官方提过相关 issue ，但官方认为这个功能容易造成内存泄露，表示暂时不考虑支持，所以我们需要自己想办法了。\n\n## 常见的解决方式：手动保存状态\n\n手动保存状态，是比较常见的解决方式，可以配合 React 组件的 componentWillUnmount 生命周期通过 redux 之类的状态管理层对数据进行保存，通过 componentDidMount 周期进行数据恢复\n\n在需要保存的状态较少时，这种方式可以比较快地实现我们所需功能，但在数据量大或者情况多变时，手动保存状态就会变成一件麻烦事了\n\n作为程序员，当然是尽可能懒啦，为了不需要每次都关心如何对数据进行保存恢复，我们需要研究如何自动保存状态\n\n## 通过路由实现自动状态保存（通常使用 react-router）\n\n既然 React 中状态的丢失是由于路由切换时卸载了组件引起的，那可以尝试从路由机制上去入手，**改变路由对组件的渲染行为**\n\n我们有以下的方式去实现这个功能：\n\n* 重写 <Route> 组件，可参考 [react-live-route](https://github.com/fi3ework/react-live-route)。重写可以实现我们想要的功能，但成本也比较高，需要注意对原始 <Route> 功能的保存，以及多个 react-router 版本的兼容\n* 重写路由库，可参考 [react-keeper](https://github.com/lanistor/react-keeper) 。重写路由库成本是一般开发者无法承受的，且完全替换掉路由方案是一个风险较大的事情，需要较为慎重地考虑。\n* 基于 <Route> 组件现有行为做拓展，可参考 [react-router-cache-route](https://github.com/CJY0208/react-router-cache-route) 。在阅读了 <Route> 的源码后发现，如果使用 component 或者 render 属性，都无法避免路由在不匹配时被卸载掉的命运。但将 children 属性当作方法来使用，我们就有手动控制渲染的行为的可能。\n\n上面几种方案，主要通过路由入手实现自动状态保存的可能，但终究不是真实的、纯粹的 KeepAlive 功能。\n\n## 模拟真实的 <KeepAlive> 功能\n\n以下是期望的使用方式\n\n```js\nfunction App() {\n  const [show, setShow] = useState(true)\n\n  return (\n    <div>\n      <button onClick={() => setShow(show => !show)}>Toggle</button>\n      {show && (\n        <KeepAlive>\n          <Test />\n        </KeepAlive>\n      )}\n    </div>\n  )\n}\n```\n\n下面简单介绍下 [react-activation](https://github.com/CJY0208/react-activation) 的实现原理：由于 React 会卸载掉处于固有组件层级内的组件，所以我们需要将 <KeepAlive> 中的组件，也就是其 children 属性抽取出来，渲染到一个不会被卸载的组件 <Keeper> 内，再使用 DOM 操作将 <Keeper> 内的真实内容移入对应 <KeepAlive>，就可以实现此功能。\n\n\n\n\n\n\n\n\n\n","level":3.5,"tagId":13}
{"_id":{"$oid":"6202f883d74c3200013dcb17"},"exerciseKey":"44b5f8c5-1d8c-4294-b668-7f7f096cd44c","category":"QA","renderType":"md","title":"【Promise第27题】下面代码的输出是什么？","desc":"```js\n\nfunction runAsync(x) {\n  const p = new Promise(r =>\n    setTimeout(() => r(x, console.log(x)), 1000)\n  );\n  return p;\n}\nfunction runReject(x) {\n  const p = new Promise((res, rej) =>\n    setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x)\n  );\n  return p;\n}\nPromise.race([runReject(0), runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log(\"result: \", res))\n  .catch(err => console.log(err));\n\n```","options":null,"explanation":"## 解析\n\n.race()的作用也是接收一组异步任务，然后并行执行异步任务，只保留取第一个执行完成的异步操作的结果，其他的方法仍在执行，不过执行结果会被抛弃。\n\n## 结果\n\n```\n0\n'Error: 0'\n1\n2\n3\n```","level":2,"tagId":10}
{"_id":{"$oid":"6202f8832ce90a0001346120"},"exerciseKey":"4eea1bf3-0d20-454c-ae40-a83914d92828","category":"QA","renderType":"md","title":"最后剩下谁？","desc":"1～50 号运动员按顺序排成一排。教练下令：“单数运动员出列！”剩下的运动员重新排队编号。教练又下令：“单数运动员出列！”如此下去，最后只剩下一个人，他是几号运动员？如果教练下的令是“双数运动员出列！”最后剩下的又是谁？","options":null,"explanation":"教练下令“单数”运动员出列时，教练只要下5次命令，就能知道剩下的那个人。\n\n此人在下第五次令之前排序为2，在下4次令之前排序为4，在下3次令之前排序为8，在下2次令之前排序为16，在下1次令之前排序为32，即32位运动员，因此答案是32号。\n\n如果教练下的令是“双数运动员出列！”，最后剩下的是1号。","level":2,"tagId":17}
{"_id":{"$oid":"6202f8859329e700011c8d34"},"exerciseKey":"613e333e-ffca-45ff-a13a-debd8053d913","category":"QA","renderType":"md","title":"【Promise第26题】下面代码的输出是什么？","desc":"```js\nfunction runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nfunction runReject (x) {\n  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x))\n  return p\n}\nPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\n  .then(res => console.log(res))\n  .catch(err => console.log(err))\n\n```","options":null,"explanation":"## 解析\n\n.catch是会捕获最先的那个异常，在这道题目中最先的异常就是runReject(2)的结果。\n\n## 结果\n```\n// 1s后输出\n1\n3\n// 2s后输出\n2\nError: 2\n// 4s后输出\n4\n```","level":2,"tagId":10}
{"_id":{"$oid":"6202f886f2f4d2000126a208"},"exerciseKey":"7a9f621a-416f-4c2b-8d08-8f8e0a113c6a","category":"QA","renderType":"md","title":"js中数组是如何在内存中存储的？","desc":null,"options":null,"explanation":"数组不是以一组连续的区域存储在内存中，而是一种哈希映射的形式。它可以通过多种数据结构来实现，其中一种是链表。\n\njs分为基本类型和引用类型：\n\n* 基本类型是保存在栈内存中的简单数据段，它们的值都有固定的大小，保存在栈空间，通过按值访问；\n* 引用类型是保存在堆内存中的对象，值大小不固定，栈内存中存放的该对象的访问地址指向堆内存中的对象，JavaScript不允许直接访问堆内存中的位置，因此操作对象时，实际操作对象的引用","level":2,"tagId":10}
{"_id":{"$oid":"6202f886432b16000184165a"},"exerciseKey":"85248440-fb60-4b8a-b045-2b874016bdc4","category":"QA","renderType":"md","title":"盲人翻牌","desc":"给一个盲人52张扑克牌，并告诉他里面恰好有10张牌是正面朝上的。要求这个瞎子把牌分成两堆，使得每堆牌里正面朝上的牌的张数一样多。瞎子应该怎么做？\n\n","options":null,"explanation":"把扑克牌分成两堆，一堆10张，一堆42张。然后，把小的那一堆里的所有牌全部翻过来。\n\n解析：设42张中有x张正面朝上，则10张里面有10-x张正面朝上，这时将10张全部翻过来，两堆牌里都有x张正面朝上","level":2.5,"tagId":17}
{"_id":{"$oid":"6202f88696435800016bbae2"},"exerciseKey":"87170b9e-30c8-44a2-897c-d4ec6c62fcbb","category":"QA","renderType":"md","title":"为什么说HTTP是无状态的协议？","desc":null,"options":null,"explanation":"因为它的每个请求都是完全独立的，每个请求包含了处理这个请求所需的完整的数据。\n\n无状态协议是指协议对务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 Http协议不像建立了socket连接的两个终端，双方是可以互相通信的，http的客户端只能通过请求服务器来获取相关内容或文件信息。\n\nhttp协议这种特性有优点也有缺点，优点在于解放了服务器，每一次请求“点到为止”不会造成不必要连接占用，缺点在于每次请求会传输大量重复的内容信息。\n\n在同一个连接允许传输多个HTTP请求的情况下，如果第一个请求出错了，后面的请求一般也能够继续处理（当然，如果导致协议解析失败、消息分片错误之类的自然是要除外的）可以看出，这种协议的结构是要比有状态的协议更简单的。\n\n","level":3,"tagId":16}
{"_id":{"$oid":"6202f8883ee9ba0001c503dd"},"exerciseKey":"a4d8797f-8de5-4c1f-8a3e-c40f632d8c83","category":"QA","renderType":"md","title":"囚犯抓绿豆问题","desc":"五个囚犯先后从100颗绿豆中抓绿豆。抓得最多和最少的人将被处死，不能交流，可以摸出剩下绿豆的数量，谁的存活几率最大？\n\n提示：\n\n* 1、他们都是很聪明的人；\n* 2、他们的原则是先求保命，再去多杀人；\n* 3、100颗不必都分完，但要保证每人至少抓一颗；\n* 4、若有重复的情况，则也算最大和最小，一并处死。","options":null,"explanation":"## 题目分析\n\n（1）分别按1-5号在装有100颗绿豆的麻袋抓绿豆\n\n每个囚犯被编号为1,2,3,4,5，按照顺序依次从麻袋里面抓绿豆，也就是依次只有一个人在麻袋中抓绿豆。否则，他们就有可能交流，甚至可能出现无法摸出剩下豆子数的可能。\n\n（2）每人至少抓一颗\n\n直接说明就是，5个人从95颗豆子中随意选择。（此处写95是为了后面的逻辑推理）\n\n（3）他们都是聪明人\n\n说白了就是知道怎么才能使自己活下来的可能性最大，只要有希望就会去争取（马云说过，希望还是要有的，万一实现了）。\n\n（4）他们的原则是先求保命，再去多杀人\n\n也就是只要能在活下来的前提下，能杀死几个就杀死几个（哈哈，穷凶极恶啊）\n\n（5）提示中的“若有重复的情况，则也算最大或最小，一并处死”\n\n结合题目，处死条件为：抓取豆子数最多者、最少者、重复者\n\n（6）问他们中谁的存活几率最大？\n\n从这个问题剖析，可以了解到：没有绝对的生还者，每个人的生死都相互关联，是个概率问题\n\n## 分析\n\n第一个人选择17时最优的。它有先动优势。他确实有可能被逼死，后面的2、3、4号也想把1号逼死，但做不到（起码确定性逼死做不到）\n\n可以看一下，如果第1个人选择21，他的信息时暴露给第2个人的，那么，1号就将自己暴露在一个非常不利的环境下，2-4号就会选择20，五号就会被迫在1-19中选择，则1、5号处死。所以1号不会这样做，会选择一个更小的数。 \n\n1号选择一个<20的数后，2号没有动力选择一个偏离很大的数（因为这个游戏偏离大会死），只会选择+1或-1，取决于那个死的概率小一些，再考虑这些的时候，又必须逆向考虑，1号必须考虑2-4号的选择，2号必须考虑3、4号的选择，... ...只有5号没得选择，因为前面是只有连着的两个数（且表示为N，N+1），所以5号必死，他也非常明白这一点，会随机选择一个数，来决定整个游戏的命运，但决定不了他自己的命运。 \n\n下面决定的就是1号会选择一个什么数，他仍然不会选择一个太大或太小的数，因为那样仍然是自己处于不利的地位（2-4号肯定不会留情面的），100/6=16.7（为什么除以6？因为5号会随机选择一个数，对1号来说要尽可能的靠近中央，2-4好也是如此，而且正因为2-4号如此，1号才如此... ...），最终必然是在16、17种选择的问题。 \n\n对16、17进行概率的计算之后，就得出了3个人选择17，第四个人选择16时，为均衡的状态，第4号虽然选择16不及前三个人选择17生存的机会大，但是若选择17则整个游戏的人必死（包括他自己）！第3号没有动力选择16，因为计算概率可知生存机会不如17。 \n\n所以选择为17、17、17、16、X（1-33随机），1-3号生存机会最大。\n","level":3,"tagId":17}
{"_id":{"$oid":"6202f889037ab600014f5214"},"exerciseKey":"c3d12ae7-e074-4072-a07a-aad43ec87e94","category":"QA","renderType":"md","title":"【Promise第七题】下面代码的输出是什么？","desc":"```js\nconsole.log('start')\nsetTimeout(() => {\n  console.log('time')\n})\nPromise.resolve().then(() => {\n  console.log('resolve')\n})\nconsole.log('end')\n```","options":null,"explanation":"## 解析\n\n* 刚开始整个脚本作为一个宏任务来执行，对于同步代码直接压入执行栈进行执行，因此先打印出start和end。\n* setTimout作为一个宏任务被放入宏任务队列(下一个)\n* Promise.then作为一个微任务被放入微任务队列\n* 本次宏任务执行完，检查微任务，发现Promise.then，执行它\n* 接下来进入下一个宏任务，发现setTimeout，执行。\n\n## 结果\n\n```\n'start'\n'end'\n'resolve'\n'time'\n```","level":2,"tagId":10}
{"_id":{"$oid":"6202f87f545f1e00019b5121"},"exerciseKey":"10e0441f-d709-427d-975b-f0026556ae7e","category":"QA","renderType":"md","title":"Redux 状态管理器和变量挂载到 window 中有什么区别？","desc":null,"options":null,"explanation":"两者都是存储数据以供后期使用。但是Redux状态更改可回溯——`Time travel`，数据多了的时候可以很清晰的知道改动在哪里发生，完整的提供了一套状态管理模式。\n\n随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。\n\n管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。\n\n如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等等。前端开发者正在经受前所未有的复杂性，难道就这么放弃了吗?当然不是。\n\n这里的复杂性很大程度上来自于：我们总是将两个难以理清的概念混淆在一起：变化和异步。 可以称它们为曼妥思和可乐。如果把二者分开，能做的很好，但混到一起，就变得一团糟。一些库如 React 视图在视图层禁止异步和直接操作 DOM来解决这个问题。美中不足的是，React 依旧把处理 state 中数据的问题留给了你。Redux就是为了帮你解决这个问题。\n","level":1.5,"tagId":13}
{"_id":{"$oid":"6202f88271efa40001abbff1"},"exerciseKey":"389f9946-a2d7-4bba-adde-f18330e5b2e4","category":"QA","renderType":"md","title":"js中的undefined和 ReferenceError: xxx is not defined 有什么区别？","desc":null,"options":null,"explanation":"* ReferenceError：当尝试引用一个未定义的变量/函数时，就会抛出ReferenceError。\n* undefined：当一个变量声明后，没有被赋值，那么它就是undefined类型。","level":1,"tagId":10}
{"_id":{"$oid":"6202f882432b16000184163f"},"exerciseKey":"41c2b7e0-3ab2-4a94-8017-1804b0ddf868","category":"QA","renderType":"md","title":"【Promise第39题】下面代码的输出是什么？","desc":"```js\nconst async1 = async () => {\n  console.log('async1');\n  setTimeout(() => {\n    console.log('timer1')\n  }, 2000)\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 end')\n  return 'async1 success'\n} \nconsole.log('script start');\nasync1().then(res => console.log(res));\nconsole.log('script end');\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .catch(4)\n  .then(res => console.log(res))\nsetTimeout(() => {\n  console.log('timer2')\n}, 1000)\n\n```","options":null,"explanation":"## 解析\n\n需要注意的点：\n\n* async函数中await的`new Promise`要是没有返回值的话则不执行后面的内容\n* .then函数中的参数期待的是函数，如果不是函数的话会发生透传\n* 注意定时器的延迟时间\n\n## 结果\n\n```\n'script start'\n'async1'\n'promise1'\n'script end'\n1\n'timer2'\n'timer1'\n\n```","level":4,"tagId":10}
{"_id":{"$oid":"6202f884998ca50001a9b260"},"exerciseKey":"52ba6f44-41dd-44cb-a2f4-2dc1589fb02b","category":"QA","renderType":"md","title":"【Promise第32题】下面代码的输出是什么？","desc":"```js\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n\n```","options":null,"explanation":"## 解析\n\n在async1中await后面的Promise是没有返回值的，也就是它的状态始终是pending状态，因此相当于一直在await，await，await却始终没有响应...\n\n所以在await之后的内容是不会执行的，也包括async1后面的 .then。\n\n## 结果\n\n```\n'script start'\n'async1 start'\n'promise1'\n'script end'\n```","level":2.5,"tagId":10}
{"_id":{"$oid":"6202f885f2f4d2000126a204"},"exerciseKey":"5c4ea1e0-f1e4-4710-a5dd-e51277c83d9c","category":"QA","renderType":"md","title":"Redux 中异步的请求怎么处理","desc":null,"options":null,"explanation":"一般的异步请求，可以在 `componentDidmount` 中直接进⾏请求，⽆须借助redux。\n\n但是在⼀定规模的项⽬中,上述⽅法很难进⾏异步流的管理,通常情况下我们会借助redux的异步中间件进⾏异步处理。\n\nredux异步流中间件其实有很多，当下主流的异步中间件有两种`redux-thunk`、`redux-saga`。\n\n## （1）使用react-thunk中间件\n\n### redux-thunk优点:\n\n* 体积⼩: redux-thunk的实现⽅式很简单，只有不到20⾏代码\n* 使⽤简单: redux-thunk没有引⼊像`redux-saga`或者`redux-observable`额外的范式，上⼿简单\n\n### redux-thunk缺陷:\n\n* 样板代码过多: 与redux本身⼀样,通常⼀个请求需要⼤量的代码,⽽且很多都是重复性质的\n* 耦合严重: 异步操作与redux的action偶合在⼀起,不⽅便管理\n* 功能孱弱: 有⼀些实际开发中常⽤的功能需要⾃⼰进⾏封装\n\n##（2）使用redux-saga中间件\n\n### redux-saga优点:\n\n* 异步解耦: 异步操作被被转移到单独 saga.js 中，不再是掺杂在 action.js 或 component.js 中\n* action摆脱`thunk function`: dispatch 的参数依然是⼀个纯粹的 action (FSA)，⽽不是充满 “⿊魔法” thunk function\n* 异常处理: 受益于 `generator function` 的 saga 实现，代码异常/请求失败 都可以直接通过 `try/catch` 语法直接捕获处理\n* 功能强⼤: `redux-saga`提供了⼤量的 Saga 辅助函数和 Effect 创建器供开发者使⽤,开发者⽆须封装或者简单封装即可使⽤\n* 灵活: redux-saga可以将多个Saga可以串⾏/并⾏组合起来,形成⼀个⾮常实⽤的异步flow\n* 易测试，提供了各种case的测试⽅案，包括mock task，分⽀覆盖等等\n\n### redux-saga缺陷:\n\n* 额外的学习成本: `redux-saga`不仅在使⽤难以理解的 `generator function`，⽽且有数⼗个API，学习成本远超redux-thunk。最重要的是你的额外学习成本是只服务于这个库的，与`redux-observable`不同，`redux-observable`虽然也有额外学习成本但是背后是rxjs和⼀整套思想\n* 体积庞⼤: 体积略⼤,代码近2000⾏，min版25KB左右\n* 功能过剩: 实际上并发控制等功能很难⽤到，但是我们依然需要引⼊这些代码\n* ts⽀持不友好: yield⽆法返回TS类型\n\n`redux-saga`可以捕获action，然后执行一个函数，那么可以把异步代码放在这个函数中。","level":3,"tagId":13}
{"_id":{"$oid":"6202f887e13d62000144b4e4"},"exerciseKey":"9d0e350c-5b48-4122-b54c-dc55552ccc05","category":"QA","renderType":"md","title":"如何禁止input展示输入的历史记录？","desc":null,"options":null,"explanation":"在输入input时会提示原来输入过的内容，还会出现下拉的历史记录，禁止这种情况只需在input中加入： autocomplete=“off”\n\n```html\n<input type=\"text\"  autocomplete=\"off\" />\n```\n\nautocomplete 属性是用来规定输入字段是否启用自动完成的功能。\n","level":1,"tagId":12}
{"_id":{"$oid":"6202f88a96435800016bbaf7"},"exerciseKey":"ee311432-66e5-4e59-8411-81ee51df4c84","category":"QA","renderType":"md","title":"连续自然数之和为1000的共有几组？（m，n都为自然数，单独1个数也算作“连续自然数”）","desc":null,"options":null,"explanation":"连续整数是从n到m，这串整数之和的通项公式为`S=(n+m)(m-n+1)/2`，这里S=1000。\n\n所以有：`（n+m)(m-n+1) = 2000 = 2^4 * 5^3`\n\n假设两个乘数都为偶数，则其和也为偶数，即 (m+n)+(n-m+1) = 2m+1 为偶数，显然是不成立的，而两个奇数相乘一定为奇数，所以两个乘数肯定为一奇一偶。\n\n假设i为5的指数，i的可选值有0,1,2,3。\n\n* i=0,奇数=1，偶数=2000，n+m=2000, m-n+1=1,得m=n=1000\n* i=1,奇数=5，偶数=400，n+m=400, m-n+1=5,m=203,n=197\n* i=2,奇数=25，偶数=80，n+m=80, m-n+1=25 ,m=53,n=27\n* i=3,奇数=125，偶数=160，n+m=16, m-n+1=125 ,m=71,n=54\n\n所以一共有4组\n","level":2.5,"tagId":17}
{"_id":{"$oid":"6202f8805da68500018de776"},"exerciseKey":"214b0a32-c111-4c6c-aad6-4ecc14bd904a","category":"QA","renderType":"md","title":"【Promise第三题】下面代码的输出是什么？","desc":"```js\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  console.log(2);\n});\npromise.then(() => {\n  console.log(3);\n});\nconsole.log(4);\n\n```","options":null,"explanation":"## 过程分析\n\n* 和【Promise第二题】相似，只不过在promise中并没有resolve或者reject\n* 因此promise.then并不会执行，它只有在被改变了状态之后才会执行。\n\n## 结果：\n\n```\n1 2 4\n```","level":1.5,"tagId":10}
{"_id":{"$oid":"6202f8832ce90a000134611d"},"exerciseKey":"462ff8a8-29ba-4e49-88ad-d60e7b3f4ee8","category":"QA","renderType":"md","title":"使用Promise实现：限制异步操作的并发个数，并尽可能快的完成全部","desc":"有8个图片资源的url，已经存储在数组urls中。\n\nurls类似于`['https://image1.png', 'https://image2.png', ....]`\n\n而且已经有一个函数`function loadImg`，输入一个url链接，返回一个Promise，该Promise在图片下载完成的时候resolve，下载失败则reject。\n\n但有一个要求，任何时刻同时下载的链接数量不可以超过3个。\n\n请写一段代码实现这个需求，要求尽可能快速地将所有图片下载完成。\n\n```js\nvar urls = [\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting1.png\",\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting2.png\",\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting3.png\",\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting4.png\",\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting5.png\",\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn6.png\",\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn7.png\",\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn8.png\",\n];\nfunction loadImg(url) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = function() {\n      console.log(\"一张图片加载完成\");\n      resolve(img);\n    };\n    img.onerror = function() {\n    \treject(new Error('Could not load image at' + url));\n    };\n    img.src = url;\n  });\n```\n","options":null,"explanation":"既然题目的要求是保证每次并发请求的数量为3，那么我们可以先请求urls中的前面三个(下标为0,1,2)，并且请求的时候使用`Promise.race()`来同时请求，三个中有一个先完成了，我们就把这个当前数组中已经完成的那一项(第1项)换成还没有请求的那一项(urls中下标为3)。\n\n直到urls已经遍历完了，然后将最后三个没有完成的请求(也就是状态没有改变的Promise)用`Promise.all()`来加载它们。\n\n```js\nfunction limitLoad(urls, handler, limit) {\n  let sequence = [].concat(urls); // 复制urls\n  // 这一步是为了初始化 promises 这个\"容器\"\n  let promises = sequence.splice(0, limit).map((url, index) => {\n    return handler(url).then(() => {\n      // 返回下标是为了知道数组中是哪一项最先完成\n      return index;\n    });\n  });\n  // 注意这里要将整个变量过程返回，这样得到的就是一个Promise，可以在外面链式调用\n  return sequence\n    .reduce((pCollect, url) => {\n      return pCollect\n        .then(() => {\n          return Promise.race(promises); // 返回已经完成的下标\n        })\n        .then(fastestIndex => { // 获取到已经完成的下标\n        \t// 将\"容器\"内已经完成的那一项替换\n          promises[fastestIndex] = handler(url).then(\n            () => {\n              return fastestIndex; // 要继续将这个下标返回，以便下一次变量\n            }\n          );\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    }, Promise.resolve()) // 初始化传入\n    .then(() => { // 最后三个用.all来调用\n      return Promise.all(promises);\n    });\n}\nlimitLoad(urls, loadImg, 3)\n  .then(res => {\n    console.log(\"图片全部加载完毕\");\n    console.log(res);\n  })\n  .catch(err => {\n    console.error(err);\n  });\n\n```","level":4.5,"tagId":26}
{"_id":{"$oid":"6202f8883da49e0001c78bac"},"exerciseKey":"c0a79b31-1e78-430b-aec4-3bddc4822d79","category":"QA","renderType":"md","title":"HTTP1.1 中如何解决 HTTP 的队头阻塞问题？","desc":null,"options":null,"explanation":"## 什么是 HTTP 队头阻塞？\n\nHTTP 传输是基于`请求-应答`的模式进行的，报文必须是一发一收，但值得注意的是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是著名的 **HTTP队头阻塞** 问题。\n\n## 并发连接\n\n对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。在RFC2616规定过客户端最多并发 2 个连接，不过事实上在现在的浏览器标准中，这个上限要多很多，Chrome 中是 6 个。\n\n但其实，即使是提高了并发连接，还是不能满足人们对性能的需求。\n\n## 域名分片\n\n一个域名不是可以并发 6 个长连接吗？那我就多分几个域名。\n\n比如 static1.test.com 、static2.test.com。\n\n这样一个 test.com 域名下可以分出非常多的二级域名，而它们都指向同样的一台服务器，能够并发的长连接数更多了，事实上也更好地解决了队头阻塞的问题。","level":2,"tagId":16}
{"_id":{"$oid":"6202f88a6edfb5000153c75c"},"exerciseKey":"e233c823-d125-4abe-b1da-878751a92cd9","category":"QA","renderType":"md","title":"【Promise第23题】下面代码的输出是什么？","desc":"```js\nPromise.resolve('1')\n  .then(res => {\n    console.log(res)\n  })\n  .finally(() => {\n    console.log('finally')\n  })\nPromise.resolve('2')\n  .finally(() => {\n    console.log('finally2')\n  \treturn '我是finally2返回的值'\n  })\n  .then(res => {\n    console.log('finally2后面的then函数', res)\n  })\n\n```","options":null,"explanation":"## 解析\n\n.finally()，这个功能一般不太用在面试中，不过如果碰到了你也应该知道该如何处理。\n\n其实只要记住它三个很重要的知识点就可以了：\n\n* .finally()方法不管Promise对象最后的状态如何都会执行\n* .finally()方法的回调函数不接受任何的参数，也就是说你在.finally()函数中是没法知道Promise最终的状态是resolved还是rejected的\n* 它最终返回的默认会是一个上一次的Promise对象值，不过如果抛出的是一个异常则返回异常的Promise对象。\n\n上面的代码中，这两个Promise的.finally都会执行，且就算finally2返回了新的值，它后面的then()函数接收到的结果却还是'2'。\n\n## 结果\n```\n'1'\n'finally2'\n'finally'\n'finally2后面的then函数' '2'\n```","level":2.5,"tagId":10}
{"_id":{"$oid":"6202f881e13d62000144b4bb"},"exerciseKey":"2efd0e6a-c70c-4df5-965d-4e13b48fbd21","category":"QA","renderType":"md","title":"HTTP 中如何处理表单数据的提交？","desc":null,"options":null,"explanation":"在 http 中，有两种主要的表单提交的方式，体现在两种不同的Content-Type取值:\n\n* application/x-www-form-urlencoded\n* multipart/form-data\n\n由于表单提交一般是POST请求，很少考虑GET，因此这里我们将默认提交的数据放在请求体中。\n\n## application/x-www-form-urlencoded\n\n对于`application/x-www-form-urlencoded`格式的表单内容，有以下特点:\n\n* 其中的数据会被编码成以&分隔的键值对\n* 字符以URL编码方式编码。\n\n如：\n\n```\n// 转换过程: {a: 1, b: 2} -> a=1&b=2 -> 如下(最终形式)\n\"a%3D1%26b%3D2\"\n```\n\n## multipart/form-data\n\n对于 `multipart/form-data` 而言:\n\n* 请求头中的 `Content-Type` 字段会包含 `boundary` ，且 `boundary` 的值有浏览器默认指定。例: `Content-Type: multipart/form-data;boundary=----WebkitFormBoundaryRRJKeWfHPGrS4LKe`。\n* 数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表述均有 HTTP 头部描述子包体，如Content-Type，在最后的分隔符会加上--表示结束。\n\n相应的请求体是下面这样:\n\n```\nContent-Disposition: form-data;name=\"data1\";\nContent-Type: text/plain\ndata1\n----WebkitFormBoundaryRRJKeWfHPGrS4LKe\nContent-Disposition: form-data;name=\"data2\";\nContent-Type: text/plain\ndata2\n----WebkitFormBoundaryRRJKeWfHPGrS4LKe--\n```\n\n## 小结\n\n值得一提的是，`multipart/form-data` 格式最大的特点在于:每一个表单元素都是独立的资源表述。另外，你可能在写业务的过程中，并没有注意到其中还有boundary的存在，如果你打开抓包工具，确实可以看到不同的表单元素被拆分开了，之所以在平时感觉不到，是以为浏览器和 HTTP 给你封装了这一系列操作。\n\n而且，在实际的场景中，对于图片等文件的上传，基本采用`multipart/form-data`而不用`application/x-www-form-urlencoded`，因为没有必要做 URL 编码，带来巨大耗时的同时，也占用了更多的空间。\n","level":3,"tagId":16}
{"_id":{"$oid":"6202f8822ce90a000134611a"},"exerciseKey":"446d36f9-0845-432d-957a-7a9a2997a276","category":"QA","renderType":"md","title":"使用Promise实现红绿灯交替重复亮","desc":"红灯3秒亮一次，黄灯2秒亮一次，绿灯1秒亮一次；如何让三个灯不断交替重复亮灯？\n\n要求：用Promise实现\n\n三个亮灯函数已经存在：\n\n```js\nfunction red() {\n    console.log('red');\n}\nfunction green() {\n    console.log('green');\n}\nfunction yellow() {\n    console.log('yellow');\n}\n```","options":null,"explanation":"```js\nfunction red() {\n  console.log(\"red\");\n}\nfunction green() {\n  console.log(\"green\");\n}\nfunction yellow() {\n  console.log(\"yellow\");\n}\nconst light = function (timer, cb) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      cb()\n      resolve()\n    }, timer)\n  })\n}\nconst step = function () {\n  Promise.resolve().then(() => {\n    return light(3000, red)\n  }).then(() => {\n    return light(2000, green)\n  }).then(() => {\n    return light(1000, yellow)\n  }).then(() => {\n    return step()\n  })\n}\n\nstep();\n\n```","level":4,"tagId":26}
{"_id":{"$oid":"6202f8864690ae000144b018"},"exerciseKey":"800f499d-75d2-4f3b-9bb3-542cf21721a5","category":"QA","renderType":"md","title":"谈谈你对Vue中keep-alive的理解","desc":null,"options":null,"explanation":"## 什么是 keep-alive\n\n在平常开发中，有部分组件没有必要多次初始化，这时，我们需要将组件进行持久化，使组件的状态维持不变，在下一次展示时，也不会进行重新初始化组件。\n\n也就是说，keepalive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染，也就是所谓的组件缓存。\n\n<keep-alive>是Vue的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM。\n\n> <keep-alive> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <transition> 相似，<keep-alive> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。\n\n## include和exclude指定是否缓存某些组件\n\n* include属性\n\ninclude 包含的意思。值为字符串或正则表达式或数组。只有组件的名称与include的值相同的才会被缓存，即指定哪些被缓存，可以指定多个被缓存。这里以字符串为例，指定多个组件缓存，语法是用逗号隔开。如下：\n\n```js\n// 指定home组件和about组件被缓存\n<keep-alive include=\"home,about\" >\n    <router-view></router-view>\n</keep-alive>\n```\n\n* exclude属性\n\nexclude相当于include的反义词，就是除了的意思，指定哪些组件不被缓存，用法和include类似，如下：\n\n```js\n// 除了home组件和about组件别的都缓存，本例中就是只缓存detail组件\n<keep-alive exclude=\"home,about\" >\n    <router-view></router-view>\n</keep-alive>\n```\n\n## 使用keep-alive的钩子函数执行顺序问题\n\n首先使用了keep-alive的组件以后，组件上就会自动加上了`activated`钩子和`deactivated`钩子。\n\n* `activated` 当组件被激活（使用）的时候触发 可以简单理解为进入这个页面的时候触发\n* `deactivated` 当组件不被使用（inactive状态）的时候触发 可以简单理解为离开这个页面的时候触发\n\n假设我们只缓存home组件，我们先看一下代码，再在钩子中打印出对应的顺序。就知道钩子执行的顺序了，自己动手印象深刻\n\n```js\n<template>\n<div>\n  <el-checkbox v-model=\"checked\">备选项</el-checkbox>\n</div>\n</template>\n<script>\nexport default {\nname: \"home\",\ndata() { return { checked: false } },\ncreated() {\n  console.log(\"我是created钩子\");\n},\nmounted() {\n  console.log(\"我是mounted钩子\");\n},\nactivated() {\n  console.log(\"我是activated钩子\");\n},\ndeactivated() {\n  console.log(\"我是deactivated钩子\");\n},\nbeforeDestroy() {\n  console.log(\"我是beforeDestroy钩子\");所以我们可以得出结论：\n},\n};\n</script>\n```\n\n进入组件打印结果如下：\n\n```\n我是created钩子\n我是mounted钩子\n我是activated钩子\n```\n\n离开组件打印结果如下：\n\n```\n我是deactivated钩子\n```\n\n得出结论：\n\n```\n初始进入和离开 created ---> mounted ---> activated --> deactivated\n后续进入和离开 activated --> deactivated\n```\n\n## keep-alive的应用场景举例\n\n* 查看表格某条数据详情页，返回还是之前的状态，比如还是之前的筛选结果，还是之前的页数等\n* 填写的表单的内容路由跳转返回还在，比如input框、下选择拉框、开关切换等用户输入了一大把东西，跳转再回来不能清空啊，不用让用户再写一遍\n","level":2.5,"tagId":14}
{"_id":{"$oid":"6202f887037ab600014f5206"},"exerciseKey":"96feb2bc-cdd7-4b16-be8a-e9d5af64a27b","category":"QA","renderType":"md","title":"【Promise第29题】下面代码的输出是什么？","desc":"```js\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  setTimeout(() => {\n    console.log('timer')\n  }, 0)\n  console.log(\"async2\");\n}\nasync1();\nconsole.log(\"start\")\n\n```","options":null,"explanation":"## 解析\n定时器始终还是最后执行的，它被放到下一条宏任务的延迟队列中。\n\n## 结果\n```\n'async1 start'\n'async2'\n'start'\n'async1 end'\n'timer'\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f8894690ae000144b026"},"exerciseKey":"c84ba953-ef1d-4c8a-a94c-a8e06adf2c0d","category":"QA","renderType":"md","title":"握手问题","desc":"有5对夫妇举行家庭聚会。每一个人都可能和其他人握手，但夫妇之间绝对不握手。\n\n聚会结束时，A先生问大家握手几次，结果是每个人的握手次数都不相同，那么请问A先生的太太握手几次？\n\n","options":null,"explanation":"A先生的太太握了4次手。\n\n首先，分析题目：**每一个人都可能和其他人握手, 但夫妇之间绝对不握手**。\n\n可得出每个人最多握八次手（除自己和亲爱的）\n\n甲先生问各握了几次手时得到的回答是：\n\n0,1,2,3,4,5,6,7,8\n\n解析如下：\n\n* 回答握了8次的说明TA除了自己亲爱的以外，和每个人都握手了。所以TA和回答握手次数为0的那个人是一家人。\n\n* 因为8君和除了0君外的人都握手了，所以1君的那一次握手肯定是和8君。7君握了七次手，没和0君、1君握，因为每人最多握8次手且0君是8君的爱人，则可得出7君和1君是一家人。\n\n* 因为8君和除了0君外的人都握手了，7君和除0君、1君外的人都握手了，所以2君的两次握手应该分别是和7君、8君。6君握了6次手，没和0君、1君、2君握手，因为每人最多握8次手且0君是8君的爱人、1君是7君的爱人，所以2君和6君是一家人。\n\n* 因为8君和除了0君外的人都握手了，7君和除0君、1君外的人都握手了，6君和除0君、1君、2君外的人都握手了，所以3君的三次握手应该分别是和6君、7君、8君握的。5君握了5次手，没和0君、1君、2君、3君握，因为每人最多握8次手且0君是8君的爱人、1君是7君的爱人、2君是6君的爱人，所以3君和5君是一家人。\n\n* 由上可得，4君即为甲太太，也就是说甲太太握了4次手.\n\n那甲太太分别是和谁握的呢？\n\n当然是5、6、7、8君啦~","level":3.5,"tagId":17}
{"_id":{"$oid":"6202f88243537b00011bc00e"},"exerciseKey":"3489b960-4172-47f8-9ae2-93616d85009f","category":"QA","renderType":"md","title":"【Promise第25题】下面代码的输出是什么？","desc":"```js\nfunction runAsync (x) {\n    const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n    return p\n}\nPromise.all([runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log(res))\n```","options":null,"explanation":"## 解析\n\n.all()的作用是接收一组异步任务，然后并行执行异步任务，并且在所有异步操作执行完后才执行回调。\n\n## 答案\n\n```\n1\n2\n3\n[1, 2, 3]\n```\n","level":1.5,"tagId":10}
{"_id":{"$oid":"6202f8837a2c1700014b48d6"},"exerciseKey":"482d976d-6697-4456-b0f5-8af4dd060dfc","category":"QA","renderType":"md","title":"过桥问题","desc":"在一个夜晚，同时有4人需要过一桥，一次最多只能通过两个人，且只有一只手电筒，而且每人的速度不同。A，B，C，D需要时间分别为：1，2，5，10分钟。问：在17分钟内这四个人怎么过桥？","options":null,"explanation":"第一步：A、B过花时间2分钟。\n\n第二步：B回花时间2分钟。\n\n第三步：C、D过花时间10分钟。\n\n第四步：A回花时间1分钟。\n\n第五步：A、B再过花时间2分钟。","level":2,"tagId":17}
{"_id":{"$oid":"6202f8866cca6000019b6f86"},"exerciseKey":"7fdc5ee0-1c5f-483b-927b-140536ea83f2","category":"QA","renderType":"md","title":"【Promise第34题】下面代码的输出是什么？","desc":"```js\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\n\nasync function async2() {\n  console.log(\"async2\");\n}\n\nconsole.log(\"script start\");\n\nsetTimeout(function() {\n  console.log(\"setTimeout\");\n}, 0);\n\nasync1();\n\nnew Promise(function(resolve) {\n  console.log(\"promise1\");\n  resolve();\n}).then(function() {\n  console.log(\"promise2\");\n});\nconsole.log('script end')\n\n```","options":null,"explanation":"经过前面的题目解析，相信这道题可以很容易得出结果。\n\n## 结果\n\n```\n'script start'\n'async1 start'\n'async2'\n'promise1'\n'script end'\n'async1 end'\n'promise2'\n'setTimeout'\n```","level":4,"tagId":10}
{"_id":{"$oid":"6202f88a9329e700011c8d59"},"exerciseKey":"f6f14b00-ae3f-43a9-9085-12333dd0cb8c","category":"QA","renderType":"md","title":"【Promise第13题】下面代码的输出是什么？","desc":"```js\nconst promise = new Promise((resolve, reject) => {\n  resolve(\"success1\");\n  reject(\"error\");\n  resolve(\"success2\");\n});\npromise\n.then(res => {\n    console.log(\"then: \", res);\n  }).catch(err => {\n    console.log(\"catch: \", err);\n  })\n\n```","options":null,"explanation":"## 解析\n\n构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用 ，Promise的状态一经改变就不能再改变。\n\n## 结果\n\n```\n\"then: success1\"\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f88471efa40001abc000"},"exerciseKey":"559aab33-1ef2-4fb1-bdba-2233423fb845","category":"QA","renderType":"md","title":"React Hooks 在使用上有哪些限制？","desc":null,"options":null,"explanation":"React Hooks 的限制主要有两条：\n\n* 不要在循环、条件或嵌套函数中调用 Hook；\n* 在 React 的函数组件中调用 Hook。\n\n那为什么会有这样的限制呢？就得从 Hooks 的设计说起。Hooks 的设计初衷是为了改进 React 组件的开发模式。在旧有的开发模式下遇到了三个问题。\n\n* 组件之间难以复用状态逻辑。过去常见的解决方案是高阶组件、render props 及状态管理框架。\n* 复杂的组件变得难以理解。生命周期函数与业务逻辑耦合太深，导致关联部分难以拆分。\n* 人和机器都很容易混淆类。常见的有 this 的问题，但在 React 团队中还有类难以优化的问题，他们希望在编译优化层面做出一些改进。\n\n这三个问题在一定程度上阻碍了 React 的后续发展，所以为了解决这三个问题，Hooks 基于函数组件开始设计。然而第三个问题决定了 Hooks 只支持函数组件。\n\n那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？因为 Hooks 的设计是基于数组实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的 Hook。当然，实质上 React 的源码里不是数组，是链表。\n\n这些限制会在编码上造成一定程度的心智负担，新手可能会写错，为了避免这样的情况，可以引入 ESLint 的 Hooks 检查插件进行预防。","level":2.5,"tagId":13}
{"_id":{"$oid":"6202f8842ce90a0001346126"},"exerciseKey":"570eed0a-2340-4c59-a6c0-967db6a7dc48","category":"QA","renderType":"md","title":"【Promise第38题】下面代码的输出是什么？","desc":"```js\nconst first = () => (new Promise((resolve, reject) => {\n    console.log(3);\n    let p = new Promise((resolve, reject) => {\n        console.log(7);\n        setTimeout(() => {\n            console.log(5);\n            resolve(6);\n            console.log(p)\n        }, 0)\n        resolve(1);\n    });\n    resolve(2);\n    p.then((arg) => {\n        console.log(arg);\n    });\n}));\nfirst().then((arg) => {\n    console.log(arg);\n});\nconsole.log(4);\n\n```","options":null,"explanation":"## 解析\n\n* 第一段代码定义的是一个函数，所以我们得看看它是在哪执行的，发现它在4之前，所以可以来看看first函数里面的内容了。\n* 函数first返回的是一个`new Promise()`，因此先执行里面的同步代码3\n* 接着又遇到了一个`new Promise()`，直接执行里面的同步代码7\n* 执行完7之后，在p中，遇到了一个定时器，先将它放到下一个宏任务队列里不管它，接着向下走\n* 碰到了`resolve(1)`，这里就把p的状态改为了resolved，且返回值为1，不过这里也先不执行\n* 跳出p，碰到了`resolve(2)`，这里的`resolve(2)`，表示的是把first函数返回的那个Promise的状态改了，也先不管它。\n* 然后碰到了`p.then`，将它加入本次循环的微任务列表，等待执行\n* 跳出first函数，遇到了`first().then()`，将它加入本次循环的微任务列表(p.then的后面执行)\n* 然后执行同步代码4\n* 本轮的同步代码全部执行完毕，查找微任务列表，发现`p.then`和`first().then()`，依次执行，打印出1和2\n* 本轮任务执行完毕了，发现还有一个定时器没有跑完，接着执行这个定时器里的内容，执行同步代码5\n* 然后又遇到了一个resolve(6)，它是放在p里的，但是p的状态在之前已经发生过改变了，因此这里就不会再改变，也就是说resolve(6)相当于没任何用处，因此打印出来的p为`Promise{<resolved>: 1}`。\n\n## 结果\n\n```\n3\n7\n4\n1\n2\n5\nPromise{<resolved>: 1}\n```","level":4,"tagId":10}
{"_id":{"$oid":"6202f886e13d62000144b4d9"},"exerciseKey":"7a27cdc8-5f66-4cea-8350-c20d0bd2836b","category":"QA","renderType":"md","title":"【Promise第20题】下面代码的输出是什么？","desc":"```js\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n```","options":null,"explanation":"## 解析\n\n.then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传。\n\n第一个then和第二个then中传入的都不是函数，一个是数字类型，一个是对象类型，因此发生了透传，将resolve(1) 的值直接传到最后一个then里。\n\n## 结果\n\n```\n1\n```","level":3.5,"tagId":10}
{"_id":{"$oid":"6202f888d74c3200013dcb42"},"exerciseKey":"a792448f-bd4c-4320-b3dc-c1dbe395c090","category":"QA","renderType":"md","title":"如何使用css来实现禁止移动端页面的左右划动手势？","desc":null,"options":null,"explanation":"CSS属性 `touch-action` 用于设置触摸屏用户如何操纵元素的区域(例如，浏览器内置的缩放功能)。\n\n最简单方法是：\n\n```css\nhtml{\n touch-action: none;\n touch-action: pan-y;\n}\n```\n\n还可以直接指定对应元素的宽度和overflow：\n\n```css\nhtml{\n width: 100vw;\n overflow-x: hidden;\n}\n```","level":1,"tagId":11}
{"_id":{"$oid":"6202f888cabbcc000101e8bc"},"exerciseKey":"a7ccbacc-5415-4c3f-b168-5fcc4d7792ee","category":"QA","renderType":"md","title":"【Promise第八题】下面代码的输出是什么？","desc":"```js\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  setTimeout(() => {\n    console.log(\"timerStart\");\n    resolve(\"success\");\n    console.log(\"timerEnd\");\n  }, 0);\n  console.log(2);\n});\npromise.then((res) => {\n  console.log(res);\n});\nconsole.log(4);\n```","options":null,"explanation":"## 解析\n\n* 从上至下，先遇到new Promise，执行该构造函数中的代码1\n* 然后碰到了定时器，将这个定时器中的函数放到下一个宏任务的延迟队列中等待执行\n* 执行同步代码2\n* 跳出promise函数，遇到promise.then，但其状态还是为pending，这里理解为先不执行\n* 执行同步代码4\n* 一轮循环过后，进入第二次宏任务，发现延迟队列中有setTimeout定时器，执行它\n* 首先执行timerStart，然后遇到了resolve，将promise的状态改为resolved且保存结果并将之前的promise.then推入微任务队列\n* 继续执行同步代码timerEnd\n* 宏任务全部执行完毕，查找微任务队列，发现promise.then这个微任务，执行它。\n\n## 结果\n\n```\n1\n2\n4\n\"timerStart\"\n\"timerEnd\"\n\"success\"\n```\n\n","level":2,"tagId":10}
{"_id":{"$oid":"6202f88971efa40001abc01f"},"exerciseKey":"d7dc9c83-0fa2-4510-b098-e92de7637209","category":"QA","renderType":"md","title":"为什么 useState 返回的是数组而不是对象？","desc":null,"options":null,"explanation":"useState 的用法：\n\n```js\nconst [count, setCount] = useState(0)\n```\n\n可以看到 useState 返回的是一个数组，那么为什么是返回数组而不是返回对象呢？\n\n要回答这个问题得弄明白 ES6 的解构赋值(destructring assignment)语法 , 来看 2 个简单的示例：\n\n* 数组的解构赋值：\n\n```js\nconst foo = ['one', 'two', 'three'];\n\nconst [red, yellow, green] = foo;\nconsole.log(red); // \"one\"\nconsole.log(yellow); // \"two\"\nconsole.log(green); // \"three\"\n```\n\n* 对象的解构赋值：\n\n```js\nconst user = {\n    id: 42,\n    is_verified: true\n};\n\nconst { id, is_verified } = user;\n\nconsole.log(id); // 42\nconsole.log(is_verified); // true \n```\n\n搞清楚了解构赋值，那上面的问题就比较好解释了。\n\n如果 `useState` 返回数组，那么你可以顺便对数组中的变量命名，代码看起来也比较干净。而如果是对象的话返回的值必须和 `useState` 内部实现返回的对象同名，这样你只能在 `function component` 中使用一次，想要多次使用 `useState` 必须得重命名返回值。\n\n```js\n// 第一次使用\nconst { state, setState } = useState(false)\n// 第二次使用\nconst { state: counter, setState: setCounter} = useState(0)\n```\n\n当然事情总是有两面性的，使用 array 也存在一些问题：\n\n* 返回值强顺序，灵活性比较低。array[0] 为值，array[1] 为改变值的方法。\n* 返回的值基本都得使用，对于有些返回值不想使用的话代码看起来有些怪，比如只想用 setState, 就得这么写：`const [, setState] = useState(false)`。\n* 返回的参数不能太多，否则处理上面 2 个场景会很麻烦。\n\n如果在自定义的Hook中遇到了以上几个问题，不妨试试返回 object。\n\n简单总结一下，在自定义 hook 的时候可以遵循一个简单原则：当参数大于 2 个的时候返回值的类型返回 `object`， 否则返回数组。\n\n","level":3.5,"tagId":13}
{"_id":{"$oid":"6202f8803ee9ba0001c503ae"},"exerciseKey":"1ef8080b-0b76-41f8-8a01-573921c6eddb","category":"QA","renderType":"md","title":"修改水果框标签问题","desc":"有三框水果，有一筐全是苹果，一筐全是橘子，还有一筐是两种水果的混合。\n\n三框都分别标记了“苹果”“橘子”“混合”，但是标签全是错的，即标签是什么里面就一定不是那框水果。\n\n你的任务是如何只把手伸进一个框子中，只拿出一个水果，然后准确的把三框水果的标签改正确。","options":null,"explanation":"把手伸进标记为混合的框子里。因为都是错的，所以标记为混合的框里肯定装的只是一种水果，那么拿出是什么水果，就是应该标记什么水果。\n\n之后剩下两个框子，你已经确认的框中是什么水果，那么对应的标记框子内的水果是混合的，剩下一个就是另一种水果的。\n","level":2,"tagId":17}
{"_id":{"$oid":"6202f881cabbcc000101e89a"},"exerciseKey":"2e26036f-712b-4b80-8c9a-e62e1ec957b6","category":"QA","renderType":"md","title":"猴子搬香蕉问题","desc":"一个小猴子有100根香蕉，它要走过50米才能到家，每次它最多搬50根香蕉，而且每走1米就要吃掉一根香蕉，请问它最多能把多少根香蕉搬到家里？","options":null,"explanation":"把问题简化成走最短的路，背更多的水果。但路和水果之间有限制。\n\n题目已经限制,猴子最多背50,我们计算其消耗仅剩下50根的米处。\n \n假设猴子第一次背了50根,走了X米,在回来搬第2个50根,就有:\n\n* 100-3X  —— 剩下的香蕉数(先走X,往反2X)\n* 50-X    —— 剩下的米处\n\n问题就明白了:\n\n* (100-3X)-(50-X)=50-2X —— 回到家时的香蕉数\n\n问题就简化为在条件: `(100-3X)<=50`的情况下,求`(50-2X)`的最大值。\n\n得到: X=17时, `50-2X` 的最大值是 16\n\n所以是16根\n","level":2.5,"tagId":17}
{"_id":{"$oid":"6202f8815da68500018de77d"},"exerciseKey":"31621982-633a-4254-a1a4-b518f734c674","category":"QA","renderType":"md","title":"【Promise第14题】下面代码的输出是什么？","desc":"```js\nconst promise = new Promise((resolve, reject) => {\n  reject(\"error\");\n  resolve(\"success2\");\n});\npromise\n.then(res => {\n    console.log(\"then1: \", res);\n  }).then(res => {\n    console.log(\"then2: \", res);\n  }).catch(err => {\n    console.log(\"catch: \", err);\n  }).then(res => {\n    console.log(\"then3: \", res);\n  })\n```","options":null,"explanation":"## 解析\ncatch不管被连接到哪里，都能捕获上层未捕捉过的错误。\n\n至于then3也会被执行，那是因为catch()也会返回一个Promise，且由于这个Promise没有返回值，所以打印出来的是undefined。\n\n## 结果\n```\n\"catch: \" \"error\"\n\"then3: \" undefined\n```","level":2.5,"tagId":10}
{"_id":{"$oid":"6202f888432b160001841667"},"exerciseKey":"a2c0b41f-1a7e-478b-9e0f-eba7e31a0b2c","category":"QA","renderType":"md","title":"【Promise第九题】下面两段代码分别输出什么？","desc":"代码一：\n```js\nsetTimeout(() => {\n  console.log('timer1');\n  setTimeout(() => {\n    console.log('timer3')\n  }, 0)\n}, 0)\nsetTimeout(() => {\n  console.log('timer2')\n}, 0)\nconsole.log('start')\n```\n\n代码二：\n```js\nsetTimeout(() => {\n  console.log('timer1');\n  Promise.resolve().then(() => {\n    console.log('promise')\n  })\n}, 0)\nsetTimeout(() => {\n  console.log('timer2')\n}, 0)\nconsole.log('start')\n```","options":null,"explanation":"代码一输出：\n```\n'start'\n'timer1'\n'timer2'\n'timer3'\n```\n\n代码二输出：\n```\n'start'\n'timer1'\n'promise'\n'timer2'\n```\n\n这两个例子，看着好像只是把第一个定时器中的内容换了一下而已。\n\n一个是为定时器timer3，一个是为Promise.then\n\n但是如果是定时器timer3的话，它会在timer2后执行，而Promise.then却是在timer2之前执行。\n\n你可以这样理解，Promise.then是微任务，它会被加入到本轮中的微任务列表，而定时器timer3是宏任务，它会被加入到下一轮的宏任务中。\n","level":3,"tagId":10}
{"_id":{"$oid":"6202f8887a2c1700014b48f2"},"exerciseKey":"bfffc416-1177-4c3c-bf93-622185a72fda","category":"QA","renderType":"md","title":"直接在script标签中写 export 为什么会报错？","desc":null,"options":null,"explanation":"现代浏览器可以支持用 script 标签引入模块或者脚本，如果要引入模块，必须给 script 标签添加 type=“module”。如果引入脚本，则不需要 type。","level":1,"tagId":10}
{"_id":{"$oid":"6202f889037ab600014f5213"},"exerciseKey":"c363d879-8557-486c-89ef-2a0e02d2164e","category":"QA","renderType":"md","title":"【Promise第五题】下面代码的输出是什么？","desc":"```js\nconst fn = () => (new Promise((resolve, reject) => {\n  console.log(1);\n  resolve('success')\n}))\nfn().then(res => {\n  console.log(res)\n})\nconsole.log('start')\n```","options":null,"explanation":"## 分析\n\nfn函数直接返回了一个new Promise的，而且fn函数的调用是在start之前，所以它里面的内容应该会先执行。\n\n## 结果\n\n```\n1\n'start'\n'success'\n```","level":1,"tagId":10}
{"_id":{"$oid":"6202f88a6edfb5000153c75a"},"exerciseKey":"dc610274-b10d-40ec-a8dc-ddad15196978","category":"QA","renderType":"md","title":"对于定长和不定长的数据，HTTP 是怎么传输的？","desc":null,"options":null,"explanation":"## 定长包体\n\n对于定长包体而言，发送端在传输的时候一般会带上 `Content-Length`，来指明包体的长度。\n\n## 不定长包体\n\n介绍另外一个 http 头部字段：`Transfer-Encoding: chunked`。\n\n表示分块传输数据，设置这个字段后会自动产生两个效果:\n\n* Content-Length 字段会被忽略\n* 基于长连接持续推送动态内容\n\n","level":3,"tagId":16}
{"_id":{"$oid":"6202f88b3da49e0001c78bbe"},"exerciseKey":"fa9e9946-de5b-4998-a224-8d512d3ccac2","category":"QA","renderType":"md","title":"【Promise第24题】下面代码的输出是什么？","desc":"```js\nfunction promise1 () {\n  let p = new Promise((resolve) => {\n    console.log('promise1');\n    resolve('1')\n  })\n  return p;\n}\nfunction promise2 () {\n  return new Promise((resolve, reject) => {\n    reject('error')\n  })\n}\npromise1()\n  .then(res => console.log(res))\n  .catch(err => console.log(err))\n  .finally(() => console.log('finally1'))\n\npromise2()\n  .then(res => console.log(res))\n  .catch(err => console.log(err))\n  .finally(() => console.log('finally2'))\n\n```","options":null,"explanation":"## 执行过程\n\n* 首先定义了两个函数`promise1`和`promise2`，先不管接着往下看。\n* `promise1`函数先被调用了，然后执行里面`new Promise`的同步代码打印出`promise1`\n* 之后遇到了`resolve(1)`，将`p`的状态改为了`resolved`并将结果保存下来。\n* 此时`promise1`内的函数内容已经执行完了，跳出该函数\n* 碰到了`promise1().then()`，由于`promise1`的状态已经发生了改变且为`resolved`。因此将·promise1().then()·这条微任务加入本轮的微任务列表(这是第一个微任务)\n* 这时候要注意了，代码并不会接着往链式调用的下面走，也就是不会先将`.finally`加入微任务列表，那是因为`.then`本身就是一个微任务，它链式后面的内容必须得等当前这个微任务执行完才会执行，因此这里我们先不管`.finally()`\n* 再往下走碰到了`promise2()`函数，其中返回的`new Promise`中并没有同步代码需要执行，所以执行`reject('error')`的时候将`promise2`函数中的`Promise`的状态变为了`rejected`\n* 跳出`promise2`函数，遇到了`promise2().catch()`，将其加入当前的微任务队列(这是第二个微任务)，且链式调用后面的内容得等该任务执行完后才执行，和`.then()`一样。\n* 本轮的宏任务全部执行完了，来看看微任务列表，存在`promise1().then()`，执行它，打印出1，然后遇到了`.finally()`这个微任务将它加入微任务列表(这是第三个微任务)等待执行\n* 再执行`promise2().catch()`打印出`error`，执行完后将`finally2`加入微任务加入微任务列表(这是第四个微任务)\n* 本轮又全部执行完了，但是微任务列表还有两个新的微任务没有执行完，因此依次执行`finally1`和`finally2`。\n\n## 结果\n\n```\n'promise1'\n'1'\n'error'\n'finally1'\n'finally2'\n```","level":4,"tagId":10}
{"_id":{"$oid":"6202f87fe13d62000144b4a3"},"exerciseKey":"090868ab-fef9-4759-8b81-20708a165fa1","category":"QA","renderType":"md","title":"【Promise第19题】下面代码的输出是什么？","desc":"```js\nconst promise = Promise.resolve().then(() => {\n  return promise;\n})\npromise.catch(console.err)\n```","options":null,"explanation":"## 解析\n\n.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环，因此结果会报错。\n\n## 结果\n\n```\nUncaught (in promise) TypeError: Chaining cycle detected for promise #<Promise>\n```\n","level":3,"tagId":10}
{"_id":{"$oid":"6202f87f545f1e00019b5120"},"exerciseKey":"0e8f15bd-e64a-45d6-a437-d81944572aa4","category":"QA","renderType":"md","title":"TLS 1.3 做了哪些改进？","desc":null,"options":null,"explanation":"TLS 1.2 虽然存在了 10 多年，经历了无数的考验，但历史的车轮总是不断向前的，为了获得更强的安全、更优秀的性能，在2018年就推出了 TLS1.3，对于TLS1.2做了一系列的改进，主要分为这几个部分:强化安全、提高性能。\n\n### 强化安全\n\n在 TLS1.3 中废除了非常多的加密算法，最后只保留五个加密套件:\n\n*   TLS_AES_128_GCM_SHA256\n*   TLS_AES_256_GCM_SHA384\n*   TLS_CHACHA20_POLY1305_SHA256\n*   TLS_AES_128_GCM_SHA256\n*   TLS_AES_128_GCM_8_SHA256\n\n可以看到，最后剩下的对称加密算法只有 `AES` 和 `CHACHA20`，之前主流的也会这两种。分组模式也只剩下 `GCM` 和 `POLY1305`, 哈希摘要算法只剩下了 `SHA256` 和 `SHA384` 了。\n\n那你可能会问了, 之前`RSA`这么重要的非对称加密算法怎么不在了？\n\n我觉得有两方面的原因:\n\n* 2015年发现了`FREAK`攻击，即已经有人发现了 RSA 的漏洞，能够进行破解了。\n\n* 一旦私钥泄露，那么中间人可以通过私钥计算出之前所有报文的`secret`，破解之前所有的密文。\n\n为什么？回到 RSA 握手的过程中，客户端拿到服务器的证书后，提取出服务器的公钥，然后生成`pre_random`并用`公钥`加密传给服务器，服务器通过`私钥`解密，从而拿到真实的`pre_random`。当中间人拿到了服务器私钥，并且截获之前所有报文的时候，那么就能拿到`pre_random`、`server_random`和`client_random`并根据对应的随机数函数生成`secret`，也就是拿到了 TLS 最终的会话密钥，每一个历史报文都能通过这样的方式进行破解。\n\n但`ECDHE`在每次握手时都会生成临时的密钥对，即使私钥被破解，之前的历史消息并不会收到影响。这种一次破解并不影响历史信息的性质也叫`前向安全性`。\n\n`RSA` 算法不具备前向安全性，而 `ECDHE` 具备，因此在 TLS1.3 中彻底取代了`RSA`。\n\n### 提升性能\n\n#### 握手改进\n\n流程如下:\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/22/170ffda75857d404~tplv-t2oaga2asx-watermark.awebp)\n\n大体的方式和 TLS1.2 差不多，不过和 TLS 1.2 相比少了一个 RTT， 服务端不必等待对方验证证书之后才拿到`client_params`，而是直接在第一次握手的时候就能够拿到, 拿到之后立即计算`secret`，节省了之前不必要的等待时间。同时，这也意味着在第一次握手的时候客户端需要传送更多的信息，一口气给传完。\n\n这种 TLS 1.3 握手方式也被叫做`1-RTT握手`。但其实这种`1-RTT`的握手方式还是有一些优化的空间的，接下来我们来一一介绍这些优化方式。\n\n#### 会话复用\n\n会话复用有两种方式: `Session ID`和`Session Ticket`。\n\n先说说最早出现的`Seesion ID`，具体做法是客户端和服务器首次连接后各自保存会话的 ID，并存储会话密钥，当再次连接时，客户端发送`ID`过来，服务器查找这个 ID 是否存在，如果找到了就直接复用之前的会话状态，会话密钥不用重新生成，直接用原来的那份。\n\n但这种方式也存在一个弊端，就是当客户端数量庞大的时候，对服务端的存储压力非常大。\n\n因而出现了第二种方式——`Session Ticket`。它的思路就是: 服务端的压力大，那就把压力分摊给客户端呗。具体来说，双方连接成功后，服务器加密会话信息，用`Session Ticket`消息发给客户端，让客户端保存下来。下次重连的时候，就把这个 Ticket 进行解密，验证它过没过期，如果没过期那就直接恢复之前的会话状态。\n\n这种方式虽然减小了服务端的存储压力，但与带来了安全问题，即每次用一个固定的密钥来解密 Ticket 数据，一旦黑客拿到这个密钥，之前所有的历史记录也被破解了。因此为了尽量避免这样的问题，密钥需要定期进行更换。\n\n总的来说，这些会话复用的技术在保证`1-RTT`的同时，也节省了生成会话密钥这些算法所消耗的时间，是一笔可观的性能提升。\n\n#### PSK\n\n刚刚说的都是`1-RTT`情况下的优化，那能不能优化到`0-RTT`呢？\n\n答案是可以的。做法其实也很简单，在发送`Session Ticket`的同时带上应用数据，不用等到服务端确认，这种方式被称为`Pre-Shared Key`，即 PSK。\n\n这种方式虽然方便，但也带来了安全问题。中间人截获`PSK`的数据，不断向服务器重复发，类似于 TCP 第一次握手携带数据，增加了服务器被攻击的风险。\n\n### 总结\n\nTLS1.3 在 TLS1.2 的基础上废除了大量的算法，提升了安全性。同时利用会话复用节省了重新生成密钥的时间，利用 PSK 做到了`0-RTT`连接。\n\n","level":3,"tagId":16}
{"_id":{"$oid":"6202f8835da68500018de789"},"exerciseKey":"48ea6174-729d-4d41-ab63-eeaa3781068b","category":"QA","renderType":"md","title":"Redux 和 Vuex 有什么区别，它们有什么共同思想吗？","desc":null,"options":null,"explanation":"## Redux 和 Vuex区别\n\n* Vuex改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer，无需switch，只需在对应的mutation函数里改变state值即可\n* Vuex由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可\n* Vuex数据流的顺序是∶View调用store.commit提交对应的请求到Store中对应的mutation函数->store改变（vue检测到数据变化自动渲染）\n\n通俗点理解就是，vuex 弱化 dispatch，通过commit进行 store状态的一次更变；取消了action概念，不必传入特定的 action形式进行指定变更；弱化reducer，基于commit参数直接对数据进行转变，使得框架更加简易;\n\n## 共同思想\n\n* 单一的数据源\n* 变化可以预测\n\n本质上∶ redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案。","level":2.5,"tagId":13}
{"_id":{"$oid":"6202f8843da49e0001c78b8c"},"exerciseKey":"51f267dd-1550-48e2-9710-7cc8103dcc41","category":"Choice","renderType":"md","title":"在点击 button 时，触发的 event.target 是哪个？","desc":"```html\n<div onclick=\"console.log('first div')\">\n  <div onclick=\"console.log('second div')\">\n    <button onclick=\"console.log('button')\">\n      Click!\n    </button>\n  </div>\n</div>\n```","options":"{\"options\":[\"最外层div\",\"第二层的div\",\"button\",\"上面三个元素\"],\"isMulti\":false,\"answer\":[2]}","explanation":"event.target 是触发事件的对象 (某个DOM元素) 的引用。\n\n当事件处理程序在事件的冒泡或捕获阶段被调用时，它与event.currentTarget不同。","level":1,"tagId":32}
{"_id":{"$oid":"6202f884e13d62000144b4d1"},"exerciseKey":"58350841-57d6-4b0a-9e31-57f5f0e16357","category":"QA","renderType":"md","title":"【Promise第16题】下面代码的输出是什么？","desc":"```js\nPromise.reject(1)\n  .then(res => {\n    console.log(res);\n    return 2;\n  })\n  .catch(err => {\n    console.log(err);\n    return 3\n  })\n  .then(res => {\n    console.log(res);\n  });\n```","options":null,"explanation":"## 解析\n\n因为reject(1)，此时走的是catch，且第二个then中的res得到的就是catch中的返回值。\n\n## 结果\n```\n1\n3\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f887037ab600014f5209"},"exerciseKey":"9f0dbfc0-bd61-4956-8093-d604ac401983","category":"QA","renderType":"md","title":"实现mergePromise函数","desc":"实现mergePromise函数，把传进去的数组按顺序先后执行，并且把返回的数据先后放到数组data中。\n\n```js\nconst time = (timer) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve()\n    }, timer)\n  })\n}\nconst ajax1 = () => time(2000).then(() => {\n  console.log(1);\n  return 1\n})\nconst ajax2 = () => time(1000).then(() => {\n  console.log(2);\n  return 2\n})\nconst ajax3 = () => time(1000).then(() => {\n  console.log(3);\n  return 3\n})\n\nfunction mergePromise () {\n  // 在这里写代码\n}\n\nmergePromise([ajax1, ajax2, ajax3]).then(data => {\n  console.log(\"done\");\n  console.log(data); // data 为 [1, 2, 3]\n});\n\n// 要求分别输出\n// 1\n// 2\n// 3\n// done\n// [1, 2, 3]\n\n```","options":null,"explanation":"这道题有点类似于Promise.all()，不过.all()不需要管执行顺序，只需要并发执行就行了。但是这里需要等上一个执行完毕之后才能执行下一个。\n\n解题思路：\n\n* 定义一个数组data用于保存所有异步操作的结果\n* 初始化一个`const promise = Promise.resolve()`，然后循环遍历数组，在promise后面添加执行ajax任务，同时要将添加的结果重新赋值到promise上。\n\n```js\nfunction mergePromise (ajaxArray) {\n  // 存放每个ajax的结果\n  const data = [];\n  let promise = Promise.resolve();\n  ajaxArray.forEach(ajax => {\n  \t// 第一次的then为了用来调用ajax\n  \t// 第二次的then是为了获取ajax的结果\n    promise = promise.then(ajax).then(res => {\n      data.push(res);\n      return data; // 把每次的结果返回\n    })\n  })\n  // 最后得到的promise它的值就是data\n  return promise;\n}\n```","level":4,"tagId":26}
{"_id":{"$oid":"6202f883d74c3200013dcb19"},"exerciseKey":"4a9fb879-6110-4b46-9c4a-abc068a27a09","category":"QA","renderType":"md","title":"TLS1.2 握手的过程是怎样的？","desc":null,"options":null,"explanation":"HTTP 是明文传输的协议，传输保文对外完全透明，非常不安全，那如何进一步保证安全性呢？\n\n由此产生了 `HTTPS`，其实它并不是一个新的协议，而是在 HTTP 下面增加了一层 SSL/TLS 协议，简单的讲，`HTTPS = HTTP + SSL/TLS`。\n\n那什么是 SSL/TLS 呢？\n\nSSL 即安全套接层（Secure Sockets Layer），在 OSI 七层模型中处于会话层(第 5 层)。之前 SSL 出过三个大版本，当它发展到第三个大版本的时候才被标准化，成为 TLS（传输层安全，Transport Layer Security），并被当做 TLS1.0 的版本，准确地说，`TLS1.0 = SSL3.1`。\n\n现在主流的版本是 TLS/1.2, 之前的 TLS1.0、TLS1.1 都被认为是不安全的，在不久的将来会被完全淘汰。\n\n### 传统 RSA 握手\n\n先来说说传统的 TLS 握手，也是大家在网上经常看到的。之所以称它为 RSA 版本，是因为它在加解密`pre_random`的时候采用的是 RSA 算法。\n\n### TLS 1.2 握手过程\n\n现在我们来讲讲主流的 TLS 1.2 版本所采用的方式。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/22/170ffd9b35c7a81b~tplv-t2oaga2asx-watermark.awebp)\n\n刚开始你可能会比较懵，先别着急，过一遍下面的流程再来看会豁然开朗。\n\n#### step 1: Client Hello\n\n首先，浏览器发送 client_random、TLS版本、加密套件列表。\n\nclient_random 是什么？用来最终 secret 的一个参数。\n\n加密套件列表是什么？我举个例子，加密套件列表一般长这样:\n\n```\nTLS_ECDHE_WITH_AES_128_GCM_SHA256\n```\n\n意思是`TLS`握手过程中，使用`ECDHE`算法生成`pre_random`，128位的`AES`算法进行对称加密，在对称加密的过程中使用主流的`GCM`分组模式，因为对称加密中很重要的一个问题就是如何分组。最后一个是哈希摘要算法，采用`SHA256`算法。\n\n其中值得解释一下的是这个哈希摘要算法，试想一个这样的场景，服务端现在给客户端发消息来了，客户端并不知道此时的消息到底是服务端发的，还是中间人伪造的消息呢？现在引入这个哈希摘要算法，将服务端的证书信息通过`这个算法`生成一个摘要(可以理解为`比较短的字符串`)，用来`标识`这个服务端的身份，用私钥加密后把`加密后的标识`和`自己的公钥`传给客户端。客户端拿到`这个公钥`来解密，生成另外一份摘要。两个摘要进行对比，如果相同则能确认服务端的身份。这也就是所谓`数字签名`的原理。其中除了哈希算法，最重要的过程是`私钥加密，公钥解密`。\n\n#### step 2: Server Hello\n\n可以看到服务器一口气给客户端回复了非常多的内容。\n\n`server_random`也是最后生成`secret`的一个参数, 同时确认 TLS 版本、需要使用的加密套件和自己的证书，这都不难理解。那剩下的`server_params`是干嘛的呢？\n\n我们先埋个伏笔，现在你只需要知道，`server_random`到达了客户端。\n\n#### step 3: Client 验证证书，生成secret\n\n客户端验证服务端传来的`证书`和`签名`是否通过，如果验证通过，则传递`client_params`这个参数给服务器。\n\n接着客户端通过`ECDHE`算法计算出`pre_random`，其中传入两个参数:`server_params`和`client_params`。现在你应该清楚这个两个参数的作用了吧，由于`ECDHE`基于`椭圆曲线离散对数`，这两个参数也称作`椭圆曲线的公钥`。\n\n客户端现在拥有了`client_random`、`server_random`和`pre_random`，接下来将这三个数通过一个伪随机数函数来计算出最终的`secret`。\n\n#### step4: Server 生成 secret\n\n刚刚客户端不是传了`client_params`过来了吗？\n\n现在服务端开始用`ECDHE`算法生成`pre_random`，接着用和客户端同样的伪随机数函数生成最后的`secret`。\n\n#### 注意事项\n\nTLS的过程基本上讲完了，但还有两点需要注意。\n\n第一、实际上 TLS 握手是一个`双向认证`的过程，从 step1 中可以看到，客户端有能力验证服务器的身份，那服务器能不能验证客户端的身份呢？\n\n当然是可以的。具体来说，在 `step3`中，客户端传送`client_params`，实际上给服务器传一个验证消息，让服务器将相同的验证流程(哈希摘要 + 私钥加密 + 公钥解密)走一遍，确认客户端的身份。\n\n第二、当客户端生成`secret`后，会给服务端发送一个收尾的消息，告诉服务器之后的都用对称加密，对称加密的算法就用第一次约定的。服务器生成完`secret`也会向客户端发送一个收尾的消息，告诉客户端以后就直接用对称加密来通信。\n\n这个收尾的消息包括两部分，一部分是`Change Cipher Spec`，意味着后面加密传输了，另一个是`Finished`消息，这个消息是对之前所有发送的数据做的`摘要`，对摘要进行加密，让对方验证一下。\n\n当双方都验证通过之后，握手才正式结束。后面的 HTTP 正式开始传输加密报文。\n\n#### RSA 和 ECDHE 握手过程的区别\n\n* ECDHE 握手，也就是主流的 TLS1.2 握手中，使用`ECDHE`实现`pre_random`的加密解密，没有用到 RSA。\n\n* 使用 ECDHE 还有一个特点，就是客户端发送完收尾消息后可以提前`抢跑`，直接发送 HTTP 报文，节省了一个 RTT，不必等到收尾消息到达服务器，然后等服务器返回收尾消息给自己，直接开始发请求。这也叫`TLS False Start`。\n\n\n\n","level":4,"tagId":16}
{"_id":{"$oid":"6202f885998ca50001a9b267"},"exerciseKey":"74a00836-f5ab-4666-893c-00c62af412a3","category":"QA","renderType":"md","title":"推理问题（一）","desc":"甲、乙、丙三个人在一起做作业，有一道数学题比较难，当他们三个人都把自己的解法说出来以后：\n\n* 甲说：“我做错了。”\n* 乙说：“甲做对了。”\n* 丙说：“我做错了。” \n\n在一旁的丁看到他们的答案并听了她们的意见后说：“你们三个人中有一个人做对了，有一个人说对了。”\n\n请问，他们三人中到底谁做对了？","options":null,"explanation":"假设丙做对了，那么甲、乙都做错了，这样，甲说的是正确的，乙、丙都说错了，符合条件，因此，丙做对了。","level":1.5,"tagId":17}
{"_id":{"$oid":"6202f8866cca6000019b6f8e"},"exerciseKey":"87bd71f8-a515-4c4d-bf74-fd7dfe9ff68a","category":"QA","renderType":"md","title":"Z 字形变换","desc":"将一个给定字符串 `s` 根据给定的行数 `numRows` ，以从上往下、从左到右进行 Z 字形排列。\n\n比如输入字符串为 `\"PAYPALISHIRING\"` 行数为 3 时，排列如下：\n\n```\nP   A   H   N\nA P L S I I G\nY   I   R\n```\n\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：`\"PAHNAPLSIIGYIR\"`。\n\n请你实现这个将字符串进行指定行数变换的函数：\n\nstring convert(string s, int numRows);\n\n## 示例 1：\n\n```\n输入：s = \"PAYPALISHIRING\", numRows = 3\n输出：\"PAHNAPLSIIGYIR\"\n```\n\n## 示例 2：\n\n```\n输入：s = \"PAYPALISHIRING\", numRows = 4\n输出：\"PINALSIGYAHRPI\"\n解释：\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n```\n\n## 示例 3：\n\n```\n输入：s = \"A\", numRows = 1\n输出：\"A\"\n```\n\n## 提示：\n\n* 1 <= s.length <= 1000\n* `s` 由英文字母（小写和大写）、',' 和 '.' 组成\n* 1 <= numRows <= 1000\n\n\n\n","options":null,"explanation":"## 方法一：按行排序\n\n### 思路\n\n通过从左向右迭代字符串，我们可以轻松地确定字符位于 Z 字形图案中的哪一行。\n\n### 算法\n\n我们可以使用 `min(numRows,len(s))` 个列表来表示 Z 字形图案中的非空行。\n\n从左到右迭代 s，将每个字符添加到合适的行。可以使用当前行和当前方向这两个变量对合适的行进行跟踪。\n\n只有当我们向上移动到最上面的行或向下移动到最下面的行时，当前方向才会发生改变。\n\n```javascript\n/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function (s, numRows) {\n     // 行数为1直接返回\n    if (numRows === 1) return s;\n    let res = '';\n    // 遍历行数\n    for (let i = 0; i < numRows; i++) {\n        let next, // 下一个字符\n            dire = i === numRows - 1 ? false : true, // 添加的方向\n            nextIndex = i;\n        // 添加当前行下一个直达不存在\n        while (next = s[nextIndex]) {\n            res += next;\n            nextIndex = nextIndex + 2 * (dire ? numRows - i : i + 1) - 2;\n            if (i !== 0 && i !== numRows - 1) {\n                dire = !dire\n            }\n        }\n    }\n    return res;\n};\n```\n\n### 复杂度分析\n\n* 时间复杂度：O(n)，其中 n == len(s)\n* 空间复杂度：O(n)\n\n\n## 方法二：按行访问\n\n### 思路\n\n按照与逐行读取 Z 字形图案相同的顺序访问字符串。\n\n### 算法\n\n首先访问 `行0` 中的所有字符，接着访问 `行1`，然后 `行2`，依此类推...\n\n对于所有整数 k，\n\n* `行0` 中的字符位于索引 `k(2⋅numRows−2)` 处;\n* `行numRows−1` 中的字符位于索引 `k(2⋅numRows−2)+numRows−1` 处;\n* 内部的 `行 i` 中的字符位于索引 `k(2⋅numRows−2)+i` 以及 `(k+1)(2⋅numRows−2)−i` 处;\n\n```javascript\n/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function (s, numRows) {\n    if(numRows===1) return s;\n    let row = [],// 存储对应行的字符\n        cur = numRows-2, // 代表当前行数（0 <= cur <= numRows-1）\n        curDire = true; // 方向\n    for (let i = 0; i < s.length; i++) {\n        if (i < numRows) {\n            // 每一行的首位元素\n            row[i] = s[i];\n        }else{\n            // 达到拐角的元素，变更方向\n             if(cur===(numRows-1) || cur===0){\n                curDire = !curDire;\n            }\n            // 添加行数到对应行\n            row[cur] += s[i]\n            // 行数变化\n            if(curDire){\n                cur--;\n            }else{\n                cur++;\n            }\n           \n        }\n    }\n    // 合并每一行的字符串\n    let res = row.reduce((pre,cur)=>pre+cur,'')\n    return res;\n};\n```\n","level":3,"tagId":31}
{"_id":{"$oid":"6202f887cabbcc000101e8b5"},"exerciseKey":"977b3a64-29e7-4085-a05a-26e78bdefcea","category":"QA","renderType":"md","title":"如果使用Vue3.0实现一个 Modal，你会怎么进行设计？","desc":null,"options":null,"explanation":"\n ![](https://static.vue-js.com/e294c660-6370-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、组件设计\n\n组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式\n\n现在有一个场景，点击新增与编辑都弹框出来进行填写，功能上大同小异，可能只是标题内容或者是显示的主体内容稍微不同\n\n这时候就没必要写两个组件，只需要根据传入的参数不同，组件显示不同内容即可\n\n这样，下次开发相同界面程序时就可以写更少的代码，意义着更高的开发效率，更少的 `Bug `和更少的程序体积\n\n\n\n## 二、需求分析\n\n实现一个`Modal`组件，首先确定需要完成的内容：\n\n- 遮罩层\n\n- 标题内容\n- 主体内容\n- 确定和取消按钮\n\n主体内容需要灵活，所以可以是字符串，也可以是一段 `html` 代码\n\n特点是它们在当前`vue`实例之外独立存在，通常挂载于`body`之上\n\n除了通过引入`import`的形式，我们还可通过`API`的形式进行组件的调用\n\n还可以包括配置全局样式、国际化、与`typeScript`结合\n\n\n\n## 三、实现流程\n\n首先看看大致流程：\n\n- 目录结构\n- 组件内容\n- 实现 API 形式\n- 事件处理\n\n- 其他完善\n\n\n\n\n\n### 目录结构\n\n`Modal`组件相关的目录结构\n\n```\n├── plugins\n│   └── modal\n│       ├── Content.tsx // 维护 Modal 的内容，用于 h 函数和 jsx 语法\n│       ├── Modal.vue // 基础组件\n│       ├── config.ts // 全局默认配置\n│       ├── index.ts // 入口\n│       ├── locale // 国际化相关\n│       │   ├── index.ts\n│       │   └── lang\n│       │       ├── en-US.ts\n│       │       ├── zh-CN.ts\n│       │       └── zh-TW.ts\n│       └── modal.type.ts // ts类型声明相关\n```\n\n因为 Modal 会被 `app.use(Modal)` 调用作为一个插件，所以都放在`plugins`目录下\n\n\n\n\n\n### 组件内容\n\n首先实现`modal.vue`的主体显示内容大致如下\n\n```html\n<Teleport to=\"body\" :disabled=\"!isTeleport\">\n    <div v-if=\"modelValue\" class=\"modal\">\n        <div\n             class=\"mask\"\n             :style=\"style\"\n             @click=\"maskClose && !loading && handleCancel()\"\n             ></div>\n        <div class=\"modal__main\">\n            <div class=\"modal__title line line--b\">\n                <span>{{ title || t(\"r.title\") }}</span>\n                <span\n                      v-if=\"close\"\n                      :title=\"t('r.close')\"\n                      class=\"close\"\n                      @click=\"!loading && handleCancel()\"\n                      >✕</span\n                    >\n            </div>\n            <div class=\"modal__content\">\n                <Content v-if=\"typeof content === 'function'\" :render=\"content\" />\n                <slot v-else>\n                    {{ content }}\n                </slot>\n            </div>\n            <div class=\"modal__btns line line--t\">\n                <button :disabled=\"loading\" @click=\"handleConfirm\">\n                    <span class=\"loading\" v-if=\"loading\"> ❍ </span>{{ t(\"r.confirm\") }}\n                </button>\n                <button @click=\"!loading && handleCancel()\">\n                    {{ t(\"r.cancel\") }}\n                </button>\n            </div>\n        </div>\n    </div>\n</Teleport>\n```\n\n最外层上通过Vue3 `Teleport` 内置组件进行包裹，其相当于传送门，将里面的内容传送至`body`之上\n\n并且从`DOM`结构上来看，把`modal`该有的内容（遮罩层、标题、内容、底部按钮）都实现了\n\n关于主体内容\n\n```html\n<div class=\"modal__content\">\n    <Content v-if=\"typeof content==='function'\"\n             :render=\"content\" />\n    <slot v-else>\n        {{content}}\n    </slot>\n</div>\n```\n\n可以看到根据传入`content`的类型不同，对应显示不同得到内容\n\n最常见的则是通过调用字符串和默认插槽的形式\n\n```html\n// 默认插槽\n<Modal v-model=\"show\"\n       title=\"演示 slot\">\n    <div>hello world~</div>\n</Modal>\n\n// 字符串\n<Modal v-model=\"show\"\n       title=\"演示 content\"\n       content=\"hello world~\" />\n```\n\n通过 API 形式调用`Modal`组件的时候，`content`可以使用下面两种\n\n- h 函数\n\n```js\n$modal.show({\n  title: '演示 h 函数',\n  content(h) {\n    return h(\n      'div',\n      {\n        style: 'color:red;',\n        onClick: ($event: Event) => console.log('clicked', $event.target)\n      },\n      'hello world ~'\n    );\n  }\n});\n```\n\n- JSX\n\n```js\n$modal.show({\n  title: '演示 jsx 语法',\n  content() {\n    return (\n      <div\n        onClick={($event: Event) => console.log('clicked', $event.target)}\n      >\n        hello world ~\n      </div>\n    );\n  }\n});\n```\n\n\n\n\n\n### 实现 API 形式\n\n那么组件如何实现`API`形式调用`Modal`组件呢？\n\n在`Vue2`中，我们可以借助`Vue`实例以及`Vue.extend`的方式获得组件实例，然后挂载到`body`上\n\n```js\nimport Modal from './Modal.vue';\nconst ComponentClass = Vue.extend(Modal);\nconst instance = new ComponentClass({ el: document.createElement(\"div\") });\ndocument.body.appendChild(instance.$el);\n```\n\n虽然`Vue3`移除了`Vue.extend`方法，但可以通过`createVNode`实现\n\n```js\nimport Modal from './Modal.vue';\nconst container = document.createElement('div');\nconst vnode = createVNode(Modal);\nrender(vnode, container);\nconst instance = vnode.component;\ndocument.body.appendChild(container);\n```\n\n在`Vue2`中，可以通过`this`的形式调用全局 API\n\n```js\nexport default {\n    install(vue) {\n       vue.prototype.$create = create\n    }\n}\n```\n\n而在 Vue3 的 `setup` 中已经没有 `this `概念了，需要调用`app.config.globalProperties`挂载到全局\n\n```js\nexport default {\n    install(app) {\n        app.config.globalProperties.$create = create\n    }\n}\n```\n\n\n\n\n\n### 事件处理\n\n下面再看看看`Modal`组件内部是如何处理「确定」「取消」事件的，既然是`Vue3`，当然采用`Compositon API` 形式\n\n```js\n// Modal.vue\nsetup(props, ctx) {\n  let instance = getCurrentInstance(); // 获得当前组件实例\n  onBeforeMount(() => {\n    instance._hub = {\n      'on-cancel': () => {},\n      'on-confirm': () => {}\n    };\n  });\n\n  const handleConfirm = () => {\n    ctx.emit('on-confirm');\n    instance._hub['on-confirm']();\n  };\n  const handleCancel = () => {\n    ctx.emit('on-cancel');\n    ctx.emit('update:modelValue', false);\n    instance._hub['on-cancel']();\n  };\n\n  return {\n    handleConfirm,\n    handleCancel\n  };\n}\n```\n\n在上面代码中，可以看得到除了使用传统`emit`的形式使父组件监听，还可通过`_hub`属性中添加 `on-cancel`，`on-confirm`方法实现在`API`中进行监听\n\n```js\napp.config.globalProperties.$modal = {\n   show({}) {\n     /* 监听 确定、取消 事件 */\n   }\n}\n```\n\n\n\n下面再来目睹下`_hub`是如何实现\n\n```js\n// index.ts\napp.config.globalProperties.$modal = {\n    show({\n        /* 其他选项 */\n        onConfirm,\n        onCancel\n    }) {\n        /* ... */\n\n        const { props, _hub } = instance;\n\n        const _closeModal = () => {\n            props.modelValue = false;\n            container.parentNode!.removeChild(container);\n        };\n        // 往 _hub 新增事件的具体实现\n        Object.assign(_hub, {\n            async 'on-confirm'() {\n            if (onConfirm) {\n                const fn = onConfirm();\n                // 当方法返回为 Promise\n                if (fn && fn.then) {\n                    try {\n                        props.loading = true;\n                        await fn;\n                        props.loading = false;\n                        _closeModal();\n                    } catch (err) {\n                        // 发生错误时，不关闭弹框\n                        console.error(err);\n                        props.loading = false;\n                    }\n                } else {\n                    _closeModal();\n                }\n            } else {\n                _closeModal();\n            }\n        },\n            'on-cancel'() {\n                onCancel && onCancel();\n                _closeModal();\n            }\n    });\n}\n};\n```\n\n\n\n### 其他完善\n\n关于组件实现国际化、与`typsScript`结合，大家可以根据自身情况在此基础上进行更改\n","level":3.5,"tagId":14}
{"_id":{"$oid":"6202f889037ab600014f5215"},"exerciseKey":"ced16bc7-215d-47a2-9bef-7e6ab67f303c","category":"QA","renderType":"md","title":"【Promise第31题】下面代码的输出是什么？","desc":"```js\nasync function fn () {\n  // return await 1234\n  // 等同于\n  return 123\n}\nfn().then(res => console.log(res))\n```","options":null,"explanation":"## 解析\n\n正常情况下，async中的await命令是一个Promise对象，返回该对象的结果。\n\n但如果不是Promise对象的话，就会直接返回对应的值，相当于Promise.resolve()\n\n## 结果\n\n```\n123\n```","level":2.5,"tagId":10}
{"_id":{"$oid":"6202f87f3da49e0001c78b79"},"exerciseKey":"12cb0d4b-7fd6-4e1f-b866-38bbfbee8ccc","category":"QA","renderType":"md","title":"问路问题","desc":"有甲、乙两人，其中，甲只说假话，而不说真话；乙则是只说真话，不说假话。\n\n但是，他们两个人在回答别人的问题时，只通过点头与摇头来表示，不讲话。\n\n有一天，一个人面对两条路：A与B，其中一条路是通向京城的，而另一条路是通向一个小村庄的。\n\n这时，他面前站着甲与乙两人，但他不知道此人是甲还是乙，也不知道“点头”是表示“是”还是表示“否”。\n\n现在，他必须问一个问题，才可能断定出哪条路通向京城。那么，这个问题应该怎样问？","options":null,"explanation":"这个人只要站在A与B任何一条路上，然后对着其中的一个人问：“如果我问他（甲、乙中的另外一个人）这条路通不通向京城，他会怎么回答？”\n\n如果甲与乙两个人都摇头的话，就往这条路向前走去，如果都点头，就往另一外一条走去。\n\n## 解析\n\n首先，把甲乙两人转换成X、Y，通向京城的路是A，通往乡村的路是B。\n\n* 假设X是说真话的人，那么Y就是说假话的人。\n\n如果我问A（通往京城）通不通向京城，X（真话）的反应一定是摇头；因为他只说真话；同理，Y（假话）的反应也是摇头，因为他只说假话；所以，两人同时摇头，则代表是正确的道路；\n\n如果我问B（通往乡村）通不通向京城，X（真话）的反应一定是点头，因为他判定Y（假话）会说谎，会有点头的反应；Y（假话）的反应也一定是点头，因为他只说假话。所以，两人同时点头，就代表是错误的道路，直接选择另外一条就可以了。\n\n* 假设X是说假话的人，那么Y就是说真话的人。\n\n如果我问A（通往京城）通不通向京城，X（假话）的反应一定是摇头；因为他只说假话；同理，Y（真话）的反应也是摇头，因为他只说真话，并且断定X（假话）一定会说谎，做出摇头的反应。所以，两人同时摇头，则代表是正确的道路。\n\n如果我问B（通往乡村）通不通向京城，X（假话）的反应一定是点头，因为他只说假话，会有点头的反应；Y（真话）的反应也一定是点头，因为他断定X（假话）一定会说谎，做出点头的反应。所以，两人同时点头，则代表错误的道路。\n\n综上所述：如果甲与乙两个人都摇头的话，就往这条路向前走去，如果都点头，就往另一外一条走去。","level":3,"tagId":17}
{"_id":{"$oid":"6202f8813ee9ba0001c503b5"},"exerciseKey":"2c14e603-0e2b-4a05-89b7-d5c45804527a","category":"QA","renderType":"md","title":"【Promise第30题】下面代码的输出是什么？","desc":"```js\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n  setTimeout(() => {\n    console.log('timer1')\n  }, 0)\n}\nasync function async2() {\n  setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n  console.log(\"async2\");\n}\nasync1();\nsetTimeout(() => {\n  console.log('timer3')\n}, 0)\nconsole.log(\"start\")\n\n```","options":null,"explanation":"## 解析\n\n定时器谁先执行，你只需要关注谁先被调用的以及延迟时间是多少，这道题中延迟时间都是0，所以只要关注谁先被调用的。\n\n## 结果\n\n```\n'async1 start'\n'async2'\n'start'\n'async1 end'\n'timer2'\n'timer3'\n'timer1'\n```","level":2,"tagId":10}
{"_id":{"$oid":"6202f8826cca6000019b6f72"},"exerciseKey":"37a4ad10-3819-4ab3-bb5f-26a6bf1ca07a","category":"QA","renderType":"md","title":"【Promise第12题】下面代码的输出是什么？","desc":"```js\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"success\");\n    console.log(\"timer1\");\n  }, 1000);\n  console.log(\"promise1里的内容\");\n});\nconst promise2 = promise1.then(() => {\n  throw new Error(\"error!!!\");\n});\nconsole.log(\"promise1\", promise1);\nconsole.log(\"promise2\", promise2);\nsetTimeout(() => {\n  console.log(\"timer2\");\n  console.log(\"promise1\", promise1);\n  console.log(\"promise2\", promise2);\n}, 2000);\n```","options":null,"explanation":"和之前的题目比较类似，不做详细分析\n\n```\n'promise1里的内容'\n'promise1' Promise{<pending>}\n'promise2' Promise{<pending>}\n'timer1'\ntest5.html:102 Uncaught (in promise) Error: error!!! at test.html:102\n'timer2'\n'promise1' Promise{<resolved>: \"success\"}\n'promise2' Promise{<rejected>: Error: error!!!}\n\n```","level":3,"tagId":10}
{"_id":{"$oid":"6202f885cabbcc000101e8a5"},"exerciseKey":"6778bdc8-7ea5-457c-aac7-c1a35b016940","category":"QA","renderType":"md","title":"盲人分袜子","desc":"有两位盲人，他们都各自买了两对黑袜和两对白袜，八对袜子的布质、大小完全相同，而每对袜子都有一张商标纸连着。两位盲人不小心将八对袜子混在一起。他们每人怎样才能取回黑袜和白袜各两对呢？","options":null,"explanation":"每拿一对袜子，就把袜子拆开，一人一只。到最后肯定是两个人都平均分到了黑袜子和白袜子。","level":2,"tagId":17}
{"_id":{"$oid":"6202f88596435800016bbadf"},"exerciseKey":"7579cdab-94b8-4a25-ab87-77569bb7d86d","category":"QA","renderType":"md","title":"【Promise第一题】下面代码的输出是什么？","desc":"```js\nconst promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n})\nconsole.log('1', promise1);\n```","options":null,"explanation":"## 过程分析：\n\n* 从上至下，先遇到new Promise，执行该构造函数中的代码promise1\n* 然后执行同步代码1，此时promise1没有被resolve或者reject，因此状态还是pending\n\n## 结果\n\n```\n'promise1'\n'1' Promise{<pending>}\n```","level":1,"tagId":10}
{"_id":{"$oid":"6202f88b6cca6000019b6fb3"},"exerciseKey":"fd0bb7e5-19a0-4473-8b07-4f0e385afd3c","category":"QA","renderType":"md","title":"使用js生成1-10000的数组","desc":null,"options":null,"explanation":"实现的方法很多，除了使用循环（for,while,forEach等）外，最简单的是使用`Array.from`\n\n```js\n// 方法一\nArray.from(new Array(10001).keys()).slice(1)\n\n// 方法二\nArray.from({length:10000},(node,i)=> i+1)\n```","level":1,"tagId":26}
