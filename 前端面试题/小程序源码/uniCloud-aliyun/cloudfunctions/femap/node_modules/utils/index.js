const jwt = require("jsonwebtoken");
const tokenSecret = "ys1984yl1986yxy2017";

const db = uniCloud.database();

async function setCloudStorage(key,value,expiredtime){
	const dbRes = await db.collection("cloudstorage").where({
		"key":db.command.eq(key)
	}).get();
	
	const data = {
			"key":key,
			"value":value,
			"expiredtime":expiredtime
		};
	
	if(dbRes.affectedDocs>0){
		db.collection("cloudstorage").doc(dbRes.data[0]._id).update(data)
	}else{
		db.collection("cloudstorage").add(data)
	}
}
async function getCloudStorageSync(key){
	const dbRes = await db.collection("cloudstorage").where({
		"key":db.command.eq(key)
	}).get();
	
	if(dbRes.affectedDocs>0){
		console.log('从 cloudstorage 中找到数据');
		var data = dbRes.data[0];
		if(Date.now()<data.expiredtime){
			return data.value;
		}else{
			console.log('数据已过期');
			db.collection("cloudstorage").doc(data._id).remove();
			return null;
		}
	}else{
		console.log('cloudstorage 中没有数据');
		return null;
	}
}

function httpRequest(option){
	return new Promise(async (resolve,reject)=>{
		if(!option.url)reject(new Error("no url"));
		if(!option.method)option.method="get";
		if(!option.data)option.data={};
		if(!option.dataType)option.dataType="json";
		
		console.log("准备请求："+option.url);
		console.log("参数：",option);
		const db = uniCloud.database();
		var cachekey =  encodeURIComponent(option.url+JSON.stringify(option.data));
		if(option.cached){
			console.log("检查 CloudStorage");
			const value = await getCloudStorageSync(cachekey);
			
			if(value){
				console.log("从 CloudStorage  返回数据");
				resolve(value);
				return;
			}
		}
		
		try{
			var res = await uniCloud.httpclient.request(option.url,{
				method:option.method,
				data:option.data,
				dataType:option.dataType,
				headers:option.headers
			})
			if(option.cached){
				setCloudStorage(cachekey,res,Date.now()+(option.cacheduration||86400000));
			}
			console.log("通过 httpclient 请求");
			resolve(res);
		}catch(err){
			reject(err);
		}
	});
}


function responseData(errcode,errmsg,data={}){
	return {
		errcode:errcode,
		errmsg:errmsg,
		data:data
	}
}

function getToken4Login(){
	var randomNum1 = Number(Math.random().toString().substr(2,10));
	var radix1 = Math.floor(Math.random()*21)+16;
	
	var randomNum2 = Number(Math.random().toString().substr(2,10));
	var radix2 = Math.floor(Math.random()*21)+16;
	
	return randomNum1.toString(radix1) + randomNum2.toString(radix2) + Date.now().toString(radix1);
}

function getToken(payload){
	return jwt.sign(payload,tokenSecret,{expiresIn: 60 * 60 * 24});
}
function verifyToken(token){
	return jwt.verify(token,tokenSecret);
}



module.exports = {
	responseData:responseData,
	getToken:getToken,
	verifyToken:verifyToken,
	getToken4Login:getToken4Login,
	httpRequest:httpRequest,
	setCloudStorage:setCloudStorage,
	getCloudStorageSync:getCloudStorageSync
}
